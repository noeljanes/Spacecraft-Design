
RTOS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b50  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  00083b50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000ba8c  20070974  000844c4  00020974  2**2
                  ALLOC
  3 .stack        00002000  2007c400  0008ff50  00020974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c94e  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040c7  00000000  00000000  0003d344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008341  00000000  00000000  0004140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000da0  00000000  00000000  0004974c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ef8  00000000  00000000  0004a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009ce1  00000000  00000000  0004b3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014184  00000000  00000000  000550c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006d14c  00000000  00000000  00069249  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002788  00000000  00000000  000d6398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 e4 07 20 15 26 08 00 11 26 08 00 11 26 08 00     ... .&...&...&..
   80010:	11 26 08 00 11 26 08 00 11 26 08 00 00 00 00 00     .&...&...&......
	...
   8002c:	b1 05 08 00 11 26 08 00 00 00 00 00 51 06 08 00     .....&......Q...
   8003c:	99 06 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .....&...&...&..
   8004c:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..
   8005c:	11 26 08 00 11 26 08 00 11 26 08 00 00 00 00 00     .&...&...&......
   8006c:	b9 24 08 00 cd 24 08 00 e1 24 08 00 f5 24 08 00     .$...$...$...$..
	...
   80084:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..
   80094:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..
   800a4:	00 00 00 00 11 26 08 00 11 26 08 00 11 26 08 00     .....&...&...&..
   800b4:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..
   800c4:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..
   800d4:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..
   800e4:	11 26 08 00 11 26 08 00 11 26 08 00 11 26 08 00     .&...&...&...&..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	00083b50 	.word	0x00083b50

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083b50 	.word	0x00083b50
   80154:	20070978 	.word	0x20070978
   80158:	00083b50 	.word	0x00083b50
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	2007c390 	.word	0x2007c390
   80198:	2007c388 	.word	0x2007c388

0008019c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8019c:	3801      	subs	r0, #1
   8019e:	2802      	cmp	r0, #2
   801a0:	d815      	bhi.n	801ce <_write+0x32>
{
   801a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801a6:	460e      	mov	r6, r1
   801a8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   801aa:	b19a      	cbz	r2, 801d4 <_write+0x38>
   801ac:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 801e8 <_write+0x4c>
   801b2:	4f0c      	ldr	r7, [pc, #48]	; (801e4 <_write+0x48>)
   801b4:	f8d8 0000 	ldr.w	r0, [r8]
   801b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   801bc:	683b      	ldr	r3, [r7, #0]
   801be:	4798      	blx	r3
   801c0:	2800      	cmp	r0, #0
   801c2:	db0a      	blt.n	801da <_write+0x3e>
   801c4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   801c6:	3c01      	subs	r4, #1
   801c8:	d1f4      	bne.n	801b4 <_write+0x18>
   801ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   801ce:	f04f 30ff 	mov.w	r0, #4294967295
   801d2:	4770      	bx	lr
	for (; len != 0; --len) {
   801d4:	4610      	mov	r0, r2
   801d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   801da:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e2:	bf00      	nop
   801e4:	2007c38c 	.word	0x2007c38c
   801e8:	2007c390 	.word	0x2007c390

000801ec <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   801ec:	6943      	ldr	r3, [r0, #20]
   801ee:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801f2:	bf1d      	ittte	ne
   801f4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801f8:	61c1      	strne	r1, [r0, #28]
	return 0;
   801fa:	2000      	movne	r0, #0
		return 1;
   801fc:	2001      	moveq	r0, #1
}
   801fe:	4770      	bx	lr

00080200 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80200:	6943      	ldr	r3, [r0, #20]
   80202:	f013 0f01 	tst.w	r3, #1
   80206:	d005      	beq.n	80214 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80208:	6983      	ldr	r3, [r0, #24]
   8020a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8020e:	600b      	str	r3, [r1, #0]

	return 0;
   80210:	2000      	movs	r0, #0
   80212:	4770      	bx	lr
		return 1;
   80214:	2001      	movs	r0, #1
}
   80216:	4770      	bx	lr

00080218 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80218:	b5f0      	push	{r4, r5, r6, r7, lr}
   8021a:	b083      	sub	sp, #12
   8021c:	4604      	mov	r4, r0
   8021e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80220:	2300      	movs	r3, #0
   80222:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80224:	4b20      	ldr	r3, [pc, #128]	; (802a8 <usart_serial_getchar+0x90>)
   80226:	4298      	cmp	r0, r3
   80228:	d00d      	beq.n	80246 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8022a:	4b20      	ldr	r3, [pc, #128]	; (802ac <usart_serial_getchar+0x94>)
   8022c:	4298      	cmp	r0, r3
   8022e:	d012      	beq.n	80256 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80230:	4b1f      	ldr	r3, [pc, #124]	; (802b0 <usart_serial_getchar+0x98>)
   80232:	4298      	cmp	r0, r3
   80234:	d019      	beq.n	8026a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80236:	4b1f      	ldr	r3, [pc, #124]	; (802b4 <usart_serial_getchar+0x9c>)
   80238:	429c      	cmp	r4, r3
   8023a:	d020      	beq.n	8027e <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8023c:	4b1e      	ldr	r3, [pc, #120]	; (802b8 <usart_serial_getchar+0xa0>)
   8023e:	429c      	cmp	r4, r3
   80240:	d027      	beq.n	80292 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80242:	b003      	add	sp, #12
   80244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80246:	461f      	mov	r7, r3
   80248:	4e1c      	ldr	r6, [pc, #112]	; (802bc <usart_serial_getchar+0xa4>)
   8024a:	4629      	mov	r1, r5
   8024c:	4638      	mov	r0, r7
   8024e:	47b0      	blx	r6
   80250:	2800      	cmp	r0, #0
   80252:	d1fa      	bne.n	8024a <usart_serial_getchar+0x32>
   80254:	e7ef      	b.n	80236 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80256:	461f      	mov	r7, r3
   80258:	4e19      	ldr	r6, [pc, #100]	; (802c0 <usart_serial_getchar+0xa8>)
   8025a:	a901      	add	r1, sp, #4
   8025c:	4638      	mov	r0, r7
   8025e:	47b0      	blx	r6
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80264:	9b01      	ldr	r3, [sp, #4]
   80266:	702b      	strb	r3, [r5, #0]
   80268:	e7e8      	b.n	8023c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8026a:	461e      	mov	r6, r3
   8026c:	4c14      	ldr	r4, [pc, #80]	; (802c0 <usart_serial_getchar+0xa8>)
   8026e:	a901      	add	r1, sp, #4
   80270:	4630      	mov	r0, r6
   80272:	47a0      	blx	r4
   80274:	2800      	cmp	r0, #0
   80276:	d1fa      	bne.n	8026e <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80278:	9b01      	ldr	r3, [sp, #4]
   8027a:	702b      	strb	r3, [r5, #0]
   8027c:	e7e1      	b.n	80242 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8027e:	461e      	mov	r6, r3
   80280:	4c0f      	ldr	r4, [pc, #60]	; (802c0 <usart_serial_getchar+0xa8>)
   80282:	a901      	add	r1, sp, #4
   80284:	4630      	mov	r0, r6
   80286:	47a0      	blx	r4
   80288:	2800      	cmp	r0, #0
   8028a:	d1fa      	bne.n	80282 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   8028c:	9b01      	ldr	r3, [sp, #4]
   8028e:	702b      	strb	r3, [r5, #0]
   80290:	e7d7      	b.n	80242 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80292:	461e      	mov	r6, r3
   80294:	4c0a      	ldr	r4, [pc, #40]	; (802c0 <usart_serial_getchar+0xa8>)
   80296:	a901      	add	r1, sp, #4
   80298:	4630      	mov	r0, r6
   8029a:	47a0      	blx	r4
   8029c:	2800      	cmp	r0, #0
   8029e:	d1fa      	bne.n	80296 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   802a0:	9b01      	ldr	r3, [sp, #4]
   802a2:	702b      	strb	r3, [r5, #0]
}
   802a4:	e7cd      	b.n	80242 <usart_serial_getchar+0x2a>
   802a6:	bf00      	nop
   802a8:	400e0800 	.word	0x400e0800
   802ac:	40098000 	.word	0x40098000
   802b0:	4009c000 	.word	0x4009c000
   802b4:	400a0000 	.word	0x400a0000
   802b8:	400a4000 	.word	0x400a4000
   802bc:	00080483 	.word	0x00080483
   802c0:	00080201 	.word	0x00080201

000802c4 <usart_serial_putchar>:
{
   802c4:	b570      	push	{r4, r5, r6, lr}
   802c6:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   802c8:	4b1e      	ldr	r3, [pc, #120]	; (80344 <usart_serial_putchar+0x80>)
   802ca:	4298      	cmp	r0, r3
   802cc:	d00d      	beq.n	802ea <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   802ce:	4b1e      	ldr	r3, [pc, #120]	; (80348 <usart_serial_putchar+0x84>)
   802d0:	4298      	cmp	r0, r3
   802d2:	d013      	beq.n	802fc <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   802d4:	4b1d      	ldr	r3, [pc, #116]	; (8034c <usart_serial_putchar+0x88>)
   802d6:	4298      	cmp	r0, r3
   802d8:	d019      	beq.n	8030e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   802da:	4b1d      	ldr	r3, [pc, #116]	; (80350 <usart_serial_putchar+0x8c>)
   802dc:	4298      	cmp	r0, r3
   802de:	d01f      	beq.n	80320 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   802e0:	4b1c      	ldr	r3, [pc, #112]	; (80354 <usart_serial_putchar+0x90>)
   802e2:	4298      	cmp	r0, r3
   802e4:	d025      	beq.n	80332 <usart_serial_putchar+0x6e>
	return 0;
   802e6:	2000      	movs	r0, #0
}
   802e8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   802ea:	461e      	mov	r6, r3
   802ec:	4d1a      	ldr	r5, [pc, #104]	; (80358 <usart_serial_putchar+0x94>)
   802ee:	4621      	mov	r1, r4
   802f0:	4630      	mov	r0, r6
   802f2:	47a8      	blx	r5
   802f4:	2800      	cmp	r0, #0
   802f6:	d1fa      	bne.n	802ee <usart_serial_putchar+0x2a>
		return 1;
   802f8:	2001      	movs	r0, #1
   802fa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   802fc:	461e      	mov	r6, r3
   802fe:	4d17      	ldr	r5, [pc, #92]	; (8035c <usart_serial_putchar+0x98>)
   80300:	4621      	mov	r1, r4
   80302:	4630      	mov	r0, r6
   80304:	47a8      	blx	r5
   80306:	2800      	cmp	r0, #0
   80308:	d1fa      	bne.n	80300 <usart_serial_putchar+0x3c>
		return 1;
   8030a:	2001      	movs	r0, #1
   8030c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8030e:	461e      	mov	r6, r3
   80310:	4d12      	ldr	r5, [pc, #72]	; (8035c <usart_serial_putchar+0x98>)
   80312:	4621      	mov	r1, r4
   80314:	4630      	mov	r0, r6
   80316:	47a8      	blx	r5
   80318:	2800      	cmp	r0, #0
   8031a:	d1fa      	bne.n	80312 <usart_serial_putchar+0x4e>
		return 1;
   8031c:	2001      	movs	r0, #1
   8031e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80320:	461e      	mov	r6, r3
   80322:	4d0e      	ldr	r5, [pc, #56]	; (8035c <usart_serial_putchar+0x98>)
   80324:	4621      	mov	r1, r4
   80326:	4630      	mov	r0, r6
   80328:	47a8      	blx	r5
   8032a:	2800      	cmp	r0, #0
   8032c:	d1fa      	bne.n	80324 <usart_serial_putchar+0x60>
		return 1;
   8032e:	2001      	movs	r0, #1
   80330:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80332:	461e      	mov	r6, r3
   80334:	4d09      	ldr	r5, [pc, #36]	; (8035c <usart_serial_putchar+0x98>)
   80336:	4621      	mov	r1, r4
   80338:	4630      	mov	r0, r6
   8033a:	47a8      	blx	r5
   8033c:	2800      	cmp	r0, #0
   8033e:	d1fa      	bne.n	80336 <usart_serial_putchar+0x72>
		return 1;
   80340:	2001      	movs	r0, #1
   80342:	bd70      	pop	{r4, r5, r6, pc}
   80344:	400e0800 	.word	0x400e0800
   80348:	40098000 	.word	0x40098000
   8034c:	4009c000 	.word	0x4009c000
   80350:	400a0000 	.word	0x400a0000
   80354:	400a4000 	.word	0x400a4000
   80358:	00080473 	.word	0x00080473
   8035c:	000801ed 	.word	0x000801ed

00080360 <printfConsole>:
#include <stdio.h>




void printfConsole(const char * cStr) {
   80360:	b510      	push	{r4, lr}
   80362:	4604      	mov	r4, r0

	if(xSemaphoreTake( xSemaphore, (TickType_t) 1) == pdTRUE) {
   80364:	2101      	movs	r1, #1
   80366:	4b0e      	ldr	r3, [pc, #56]	; (803a0 <printfConsole+0x40>)
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	4b0e      	ldr	r3, [pc, #56]	; (803a4 <printfConsole+0x44>)
   8036c:	4798      	blx	r3
   8036e:	2801      	cmp	r0, #1
   80370:	d000      	beq.n	80374 <printfConsole+0x14>
   80372:	bd10      	pop	{r4, pc}
		/* Check if the semaphore is available, otherwise check again after 1 ms */
		
		for(int i = 0; (cStr[i] != '\0'); i++) {
   80374:	7823      	ldrb	r3, [r4, #0]
   80376:	b153      	cbz	r3, 8038e <printfConsole+0x2e>
   80378:	4620      	mov	r0, r4
			/* For loop to iterate through the string in writer character by character */	
				
				//printf("%c", cstr[i]);		
				
				if((CONF_UART->UART_SR&UART_SR_TXRDY)==UART_SR_TXRDY){
   8037a:	490b      	ldr	r1, [pc, #44]	; (803a8 <printfConsole+0x48>)
   8037c:	694a      	ldr	r2, [r1, #20]
   8037e:	f012 0f02 	tst.w	r2, #2
					/* Checks if the microcontroller is ready to send the next message */	
					CONF_UART->UART_THR = (unsigned char) cStr[i]; /* If the microcontroller is ready it prints the element of the string */
   80382:	bf18      	it	ne
   80384:	61cb      	strne	r3, [r1, #28]
		for(int i = 0; (cStr[i] != '\0'); i++) {
   80386:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   8038a:	2b00      	cmp	r3, #0
   8038c:	d1f6      	bne.n	8037c <printfConsole+0x1c>
				}
				
		}
		xSemaphoreGive(xSemaphore);		/* Free up the semaphore for other tasks */
   8038e:	2300      	movs	r3, #0
   80390:	461a      	mov	r2, r3
   80392:	4619      	mov	r1, r3
   80394:	4802      	ldr	r0, [pc, #8]	; (803a0 <printfConsole+0x40>)
   80396:	6800      	ldr	r0, [r0, #0]
   80398:	4c04      	ldr	r4, [pc, #16]	; (803ac <printfConsole+0x4c>)
   8039a:	47a0      	blx	r4
	}
	
}
   8039c:	e7e9      	b.n	80372 <printfConsole+0x12>
   8039e:	bf00      	nop
   803a0:	2007c394 	.word	0x2007c394
   803a4:	00080f2d 	.word	0x00080f2d
   803a8:	400e0800 	.word	0x400e0800
   803ac:	00080ae1 	.word	0x00080ae1

000803b0 <console_init>:

void console_init()
{
   803b0:	b530      	push	{r4, r5, lr}
   803b2:	b085      	sub	sp, #20
	xSemaphore = xSemaphoreCreateMutex(); /* Creates a mutual exclusion semaphore for use by the tasks */
   803b4:	2001      	movs	r0, #1
   803b6:	4b14      	ldr	r3, [pc, #80]	; (80408 <console_init+0x58>)
   803b8:	4798      	blx	r3
   803ba:	4b14      	ldr	r3, [pc, #80]	; (8040c <console_init+0x5c>)
   803bc:	6018      	str	r0, [r3, #0]
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   803be:	4c14      	ldr	r4, [pc, #80]	; (80410 <console_init+0x60>)
   803c0:	4b14      	ldr	r3, [pc, #80]	; (80414 <console_init+0x64>)
   803c2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   803c4:	4a14      	ldr	r2, [pc, #80]	; (80418 <console_init+0x68>)
   803c6:	4b15      	ldr	r3, [pc, #84]	; (8041c <console_init+0x6c>)
   803c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   803ca:	4a15      	ldr	r2, [pc, #84]	; (80420 <console_init+0x70>)
   803cc:	4b15      	ldr	r3, [pc, #84]	; (80424 <console_init+0x74>)
   803ce:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   803d0:	4b15      	ldr	r3, [pc, #84]	; (80428 <console_init+0x78>)
   803d2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   803d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   803d8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   803da:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803de:	9303      	str	r3, [sp, #12]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803e0:	2008      	movs	r0, #8
   803e2:	4b12      	ldr	r3, [pc, #72]	; (8042c <console_init+0x7c>)
   803e4:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
   803e6:	a901      	add	r1, sp, #4
   803e8:	4620      	mov	r0, r4
   803ea:	4b11      	ldr	r3, [pc, #68]	; (80430 <console_init+0x80>)
   803ec:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   803ee:	4d11      	ldr	r5, [pc, #68]	; (80434 <console_init+0x84>)
   803f0:	682b      	ldr	r3, [r5, #0]
   803f2:	2100      	movs	r1, #0
   803f4:	6898      	ldr	r0, [r3, #8]
   803f6:	4c10      	ldr	r4, [pc, #64]	; (80438 <console_init+0x88>)
   803f8:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803fa:	682b      	ldr	r3, [r5, #0]
   803fc:	2100      	movs	r1, #0
   803fe:	6858      	ldr	r0, [r3, #4]
   80400:	47a0      	blx	r4
	};
	
	
	stdio_serial_init(CONF_UART, &usart_serial_options);

}
   80402:	b005      	add	sp, #20
   80404:	bd30      	pop	{r4, r5, pc}
   80406:	bf00      	nop
   80408:	00080c95 	.word	0x00080c95
   8040c:	2007c394 	.word	0x2007c394
   80410:	400e0800 	.word	0x400e0800
   80414:	2007c390 	.word	0x2007c390
   80418:	000802c5 	.word	0x000802c5
   8041c:	2007c38c 	.word	0x2007c38c
   80420:	00080219 	.word	0x00080219
   80424:	2007c388 	.word	0x2007c388
   80428:	0501bd00 	.word	0x0501bd00
   8042c:	000825f1 	.word	0x000825f1
   80430:	0008043d 	.word	0x0008043d
   80434:	20070134 	.word	0x20070134
   80438:	00082ae5 	.word	0x00082ae5

0008043c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8043c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8043e:	23ac      	movs	r3, #172	; 0xac
   80440:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80442:	680b      	ldr	r3, [r1, #0]
   80444:	684a      	ldr	r2, [r1, #4]
   80446:	fbb3 f3f2 	udiv	r3, r3, r2
   8044a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8044c:	1e5c      	subs	r4, r3, #1
   8044e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80452:	4294      	cmp	r4, r2
   80454:	d80b      	bhi.n	8046e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80456:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80458:	688b      	ldr	r3, [r1, #8]
   8045a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8045c:	f240 2302 	movw	r3, #514	; 0x202
   80460:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80464:	2350      	movs	r3, #80	; 0x50
   80466:	6003      	str	r3, [r0, #0]

	return 0;
   80468:	2000      	movs	r0, #0
}
   8046a:	bc10      	pop	{r4}
   8046c:	4770      	bx	lr
		return 1;
   8046e:	2001      	movs	r0, #1
   80470:	e7fb      	b.n	8046a <uart_init+0x2e>

00080472 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80472:	6943      	ldr	r3, [r0, #20]
   80474:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80478:	bf1a      	itte	ne
   8047a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8047c:	2000      	movne	r0, #0
		return 1;
   8047e:	2001      	moveq	r0, #1
}
   80480:	4770      	bx	lr

00080482 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80482:	6943      	ldr	r3, [r0, #20]
   80484:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80488:	bf1d      	ittte	ne
   8048a:	6983      	ldrne	r3, [r0, #24]
   8048c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8048e:	2000      	movne	r0, #0
		return 1;
   80490:	2001      	moveq	r0, #1
}
   80492:	4770      	bx	lr

00080494 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80494:	f100 0308 	add.w	r3, r0, #8
   80498:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8049a:	f04f 32ff 	mov.w	r2, #4294967295
   8049e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   804a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   804a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   804a4:	2300      	movs	r3, #0
   804a6:	6003      	str	r3, [r0, #0]
   804a8:	4770      	bx	lr

000804aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   804aa:	2300      	movs	r3, #0
   804ac:	6103      	str	r3, [r0, #16]
   804ae:	4770      	bx	lr

000804b0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   804b0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   804b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   804b4:	689a      	ldr	r2, [r3, #8]
   804b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   804b8:	689a      	ldr	r2, [r3, #8]
   804ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   804bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804c0:	6803      	ldr	r3, [r0, #0]
   804c2:	3301      	adds	r3, #1
   804c4:	6003      	str	r3, [r0, #0]
   804c6:	4770      	bx	lr

000804c8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   804c8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   804ca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   804cc:	f1b5 3fff 	cmp.w	r5, #4294967295
   804d0:	d002      	beq.n	804d8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   804d2:	f100 0208 	add.w	r2, r0, #8
   804d6:	e002      	b.n	804de <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   804d8:	6902      	ldr	r2, [r0, #16]
   804da:	e004      	b.n	804e6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   804dc:	461a      	mov	r2, r3
   804de:	6853      	ldr	r3, [r2, #4]
   804e0:	681c      	ldr	r4, [r3, #0]
   804e2:	42a5      	cmp	r5, r4
   804e4:	d2fa      	bcs.n	804dc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   804e6:	6853      	ldr	r3, [r2, #4]
   804e8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   804ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   804ec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   804ee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804f0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804f2:	6803      	ldr	r3, [r0, #0]
   804f4:	3301      	adds	r3, #1
   804f6:	6003      	str	r3, [r0, #0]
}
   804f8:	bc30      	pop	{r4, r5}
   804fa:	4770      	bx	lr

000804fc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   804fc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   804fe:	6842      	ldr	r2, [r0, #4]
   80500:	6881      	ldr	r1, [r0, #8]
   80502:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80504:	6882      	ldr	r2, [r0, #8]
   80506:	6841      	ldr	r1, [r0, #4]
   80508:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8050a:	685a      	ldr	r2, [r3, #4]
   8050c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8050e:	bf04      	itt	eq
   80510:	6882      	ldreq	r2, [r0, #8]
   80512:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   80514:	2200      	movs	r2, #0
   80516:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80518:	681a      	ldr	r2, [r3, #0]
   8051a:	3a01      	subs	r2, #1
   8051c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8051e:	6818      	ldr	r0, [r3, #0]
}
   80520:	4770      	bx	lr
	...

00080524 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   80524:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   80526:	2300      	movs	r3, #0
   80528:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   8052a:	4b0d      	ldr	r3, [pc, #52]	; (80560 <prvTaskExitError+0x3c>)
   8052c:	681b      	ldr	r3, [r3, #0]
   8052e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80532:	d008      	beq.n	80546 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   80534:	f04f 0340 	mov.w	r3, #64	; 0x40
   80538:	f383 8811 	msr	BASEPRI, r3
   8053c:	f3bf 8f6f 	isb	sy
   80540:	f3bf 8f4f 	dsb	sy
   80544:	e7fe      	b.n	80544 <prvTaskExitError+0x20>
   80546:	f04f 0340 	mov.w	r3, #64	; 0x40
   8054a:	f383 8811 	msr	BASEPRI, r3
   8054e:	f3bf 8f6f 	isb	sy
   80552:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   80556:	9b01      	ldr	r3, [sp, #4]
   80558:	2b00      	cmp	r3, #0
   8055a:	d0fc      	beq.n	80556 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   8055c:	b002      	add	sp, #8
   8055e:	4770      	bx	lr
   80560:	2007012c 	.word	0x2007012c

00080564 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80564:	4806      	ldr	r0, [pc, #24]	; (80580 <prvPortStartFirstTask+0x1c>)
   80566:	6800      	ldr	r0, [r0, #0]
   80568:	6800      	ldr	r0, [r0, #0]
   8056a:	f380 8808 	msr	MSP, r0
   8056e:	b662      	cpsie	i
   80570:	b661      	cpsie	f
   80572:	f3bf 8f4f 	dsb	sy
   80576:	f3bf 8f6f 	isb	sy
   8057a:	df00      	svc	0
   8057c:	bf00      	nop
   8057e:	0000      	.short	0x0000
   80580:	e000ed08 	.word	0xe000ed08

00080584 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80588:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   8058c:	f021 0101 	bic.w	r1, r1, #1
   80590:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   80594:	4b03      	ldr	r3, [pc, #12]	; (805a4 <pxPortInitialiseStack+0x20>)
   80596:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   8059a:	f840 2c20 	str.w	r2, [r0, #-32]
}
   8059e:	3840      	subs	r0, #64	; 0x40
   805a0:	4770      	bx	lr
   805a2:	bf00      	nop
   805a4:	00080525 	.word	0x00080525
	...

000805b0 <SVC_Handler>:
	__asm volatile (
   805b0:	4b07      	ldr	r3, [pc, #28]	; (805d0 <pxCurrentTCBConst2>)
   805b2:	6819      	ldr	r1, [r3, #0]
   805b4:	6808      	ldr	r0, [r1, #0]
   805b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   805ba:	f380 8809 	msr	PSP, r0
   805be:	f3bf 8f6f 	isb	sy
   805c2:	f04f 0000 	mov.w	r0, #0
   805c6:	f380 8811 	msr	BASEPRI, r0
   805ca:	f04e 0e0d 	orr.w	lr, lr, #13
   805ce:	4770      	bx	lr

000805d0 <pxCurrentTCBConst2>:
   805d0:	2007c1a0 	.word	0x2007c1a0
   805d4:	4770      	bx	lr
   805d6:	bf00      	nop

000805d8 <vPortEnterCritical>:
   805d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   805dc:	f383 8811 	msr	BASEPRI, r3
   805e0:	f3bf 8f6f 	isb	sy
   805e4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   805e8:	4a0a      	ldr	r2, [pc, #40]	; (80614 <vPortEnterCritical+0x3c>)
   805ea:	6813      	ldr	r3, [r2, #0]
   805ec:	3301      	adds	r3, #1
   805ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   805f0:	2b01      	cmp	r3, #1
   805f2:	d10d      	bne.n	80610 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   805f4:	4b08      	ldr	r3, [pc, #32]	; (80618 <vPortEnterCritical+0x40>)
   805f6:	681b      	ldr	r3, [r3, #0]
   805f8:	f013 0fff 	tst.w	r3, #255	; 0xff
   805fc:	d008      	beq.n	80610 <vPortEnterCritical+0x38>
   805fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   80602:	f383 8811 	msr	BASEPRI, r3
   80606:	f3bf 8f6f 	isb	sy
   8060a:	f3bf 8f4f 	dsb	sy
   8060e:	e7fe      	b.n	8060e <vPortEnterCritical+0x36>
   80610:	4770      	bx	lr
   80612:	bf00      	nop
   80614:	2007012c 	.word	0x2007012c
   80618:	e000ed04 	.word	0xe000ed04

0008061c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   8061c:	4b09      	ldr	r3, [pc, #36]	; (80644 <vPortExitCritical+0x28>)
   8061e:	681b      	ldr	r3, [r3, #0]
   80620:	b943      	cbnz	r3, 80634 <vPortExitCritical+0x18>
   80622:	f04f 0340 	mov.w	r3, #64	; 0x40
   80626:	f383 8811 	msr	BASEPRI, r3
   8062a:	f3bf 8f6f 	isb	sy
   8062e:	f3bf 8f4f 	dsb	sy
   80632:	e7fe      	b.n	80632 <vPortExitCritical+0x16>
	uxCriticalNesting--;
   80634:	3b01      	subs	r3, #1
   80636:	4a03      	ldr	r2, [pc, #12]	; (80644 <vPortExitCritical+0x28>)
   80638:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8063a:	b90b      	cbnz	r3, 80640 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   8063c:	f383 8811 	msr	BASEPRI, r3
   80640:	4770      	bx	lr
   80642:	bf00      	nop
   80644:	2007012c 	.word	0x2007012c
	...

00080650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   80650:	f3ef 8009 	mrs	r0, PSP
   80654:	f3bf 8f6f 	isb	sy
   80658:	4b0d      	ldr	r3, [pc, #52]	; (80690 <pxCurrentTCBConst>)
   8065a:	681a      	ldr	r2, [r3, #0]
   8065c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80660:	6010      	str	r0, [r2, #0]
   80662:	e92d 4008 	stmdb	sp!, {r3, lr}
   80666:	f04f 0040 	mov.w	r0, #64	; 0x40
   8066a:	f380 8811 	msr	BASEPRI, r0
   8066e:	f001 f905 	bl	8187c <vTaskSwitchContext>
   80672:	f04f 0000 	mov.w	r0, #0
   80676:	f380 8811 	msr	BASEPRI, r0
   8067a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8067e:	6819      	ldr	r1, [r3, #0]
   80680:	6808      	ldr	r0, [r1, #0]
   80682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80686:	f380 8809 	msr	PSP, r0
   8068a:	f3bf 8f6f 	isb	sy
   8068e:	4770      	bx	lr

00080690 <pxCurrentTCBConst>:
   80690:	2007c1a0 	.word	0x2007c1a0
   80694:	4770      	bx	lr
   80696:	bf00      	nop

00080698 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   80698:	b508      	push	{r3, lr}
	__asm volatile
   8069a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8069e:	f383 8811 	msr	BASEPRI, r3
   806a2:	f3bf 8f6f 	isb	sy
   806a6:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   806aa:	4b05      	ldr	r3, [pc, #20]	; (806c0 <SysTick_Handler+0x28>)
   806ac:	4798      	blx	r3
   806ae:	b118      	cbz	r0, 806b8 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   806b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806b4:	4b03      	ldr	r3, [pc, #12]	; (806c4 <SysTick_Handler+0x2c>)
   806b6:	601a      	str	r2, [r3, #0]
	__asm volatile
   806b8:	2300      	movs	r3, #0
   806ba:	f383 8811 	msr	BASEPRI, r3
   806be:	bd08      	pop	{r3, pc}
   806c0:	00081589 	.word	0x00081589
   806c4:	e000ed04 	.word	0xe000ed04

000806c8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   806c8:	4b05      	ldr	r3, [pc, #20]	; (806e0 <vPortSetupTimerInterrupt+0x18>)
   806ca:	2200      	movs	r2, #0
   806cc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   806ce:	4905      	ldr	r1, [pc, #20]	; (806e4 <vPortSetupTimerInterrupt+0x1c>)
   806d0:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   806d2:	4905      	ldr	r1, [pc, #20]	; (806e8 <vPortSetupTimerInterrupt+0x20>)
   806d4:	4a05      	ldr	r2, [pc, #20]	; (806ec <vPortSetupTimerInterrupt+0x24>)
   806d6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   806d8:	2207      	movs	r2, #7
   806da:	601a      	str	r2, [r3, #0]
   806dc:	4770      	bx	lr
   806de:	bf00      	nop
   806e0:	e000e010 	.word	0xe000e010
   806e4:	e000e018 	.word	0xe000e018
   806e8:	0001481f 	.word	0x0001481f
   806ec:	e000e014 	.word	0xe000e014

000806f0 <xPortStartScheduler>:
{
   806f0:	b510      	push	{r4, lr}
   806f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   806f4:	4b29      	ldr	r3, [pc, #164]	; (8079c <xPortStartScheduler+0xac>)
   806f6:	781a      	ldrb	r2, [r3, #0]
   806f8:	b2d2      	uxtb	r2, r2
   806fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   806fc:	22ff      	movs	r2, #255	; 0xff
   806fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   80700:	781b      	ldrb	r3, [r3, #0]
   80702:	b2db      	uxtb	r3, r3
   80704:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   80708:	f89d 3003 	ldrb.w	r3, [sp, #3]
   8070c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   80710:	4a23      	ldr	r2, [pc, #140]	; (807a0 <xPortStartScheduler+0xb0>)
   80712:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   80714:	2207      	movs	r2, #7
   80716:	4b23      	ldr	r3, [pc, #140]	; (807a4 <xPortStartScheduler+0xb4>)
   80718:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8071a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   8071e:	f013 0f80 	tst.w	r3, #128	; 0x80
   80722:	d012      	beq.n	8074a <xPortStartScheduler+0x5a>
   80724:	2306      	movs	r3, #6
   80726:	e000      	b.n	8072a <xPortStartScheduler+0x3a>
   80728:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   8072a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   8072e:	0052      	lsls	r2, r2, #1
   80730:	b2d2      	uxtb	r2, r2
   80732:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   80736:	f89d 2003 	ldrb.w	r2, [sp, #3]
   8073a:	1e59      	subs	r1, r3, #1
   8073c:	f012 0f80 	tst.w	r2, #128	; 0x80
   80740:	d1f2      	bne.n	80728 <xPortStartScheduler+0x38>
   80742:	4a18      	ldr	r2, [pc, #96]	; (807a4 <xPortStartScheduler+0xb4>)
   80744:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   80746:	2b03      	cmp	r3, #3
   80748:	d008      	beq.n	8075c <xPortStartScheduler+0x6c>
	__asm volatile
   8074a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8074e:	f383 8811 	msr	BASEPRI, r3
   80752:	f3bf 8f6f 	isb	sy
   80756:	f3bf 8f4f 	dsb	sy
   8075a:	e7fe      	b.n	8075a <xPortStartScheduler+0x6a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8075c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   8075e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80762:	4a10      	ldr	r2, [pc, #64]	; (807a4 <xPortStartScheduler+0xb4>)
   80764:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   80766:	9b01      	ldr	r3, [sp, #4]
   80768:	b2db      	uxtb	r3, r3
   8076a:	4a0c      	ldr	r2, [pc, #48]	; (8079c <xPortStartScheduler+0xac>)
   8076c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8076e:	4b0e      	ldr	r3, [pc, #56]	; (807a8 <xPortStartScheduler+0xb8>)
   80770:	681a      	ldr	r2, [r3, #0]
   80772:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   80776:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80778:	681a      	ldr	r2, [r3, #0]
   8077a:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
   8077e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80780:	4b0a      	ldr	r3, [pc, #40]	; (807ac <xPortStartScheduler+0xbc>)
   80782:	4798      	blx	r3
	uxCriticalNesting = 0;
   80784:	2400      	movs	r4, #0
   80786:	4b0a      	ldr	r3, [pc, #40]	; (807b0 <xPortStartScheduler+0xc0>)
   80788:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   8078a:	4b0a      	ldr	r3, [pc, #40]	; (807b4 <xPortStartScheduler+0xc4>)
   8078c:	4798      	blx	r3
	vTaskSwitchContext();
   8078e:	4b0a      	ldr	r3, [pc, #40]	; (807b8 <xPortStartScheduler+0xc8>)
   80790:	4798      	blx	r3
	prvTaskExitError();
   80792:	4b0a      	ldr	r3, [pc, #40]	; (807bc <xPortStartScheduler+0xcc>)
   80794:	4798      	blx	r3
}
   80796:	4620      	mov	r0, r4
   80798:	b002      	add	sp, #8
   8079a:	bd10      	pop	{r4, pc}
   8079c:	e000e400 	.word	0xe000e400
   807a0:	20070990 	.word	0x20070990
   807a4:	20070994 	.word	0x20070994
   807a8:	e000ed20 	.word	0xe000ed20
   807ac:	000806c9 	.word	0x000806c9
   807b0:	2007012c 	.word	0x2007012c
   807b4:	00080565 	.word	0x00080565
   807b8:	0008187d 	.word	0x0008187d
   807bc:	00080525 	.word	0x00080525

000807c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   807c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   807c4:	2b0f      	cmp	r3, #15
   807c6:	d90f      	bls.n	807e8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   807c8:	4a10      	ldr	r2, [pc, #64]	; (8080c <vPortValidateInterruptPriority+0x4c>)
   807ca:	5c9b      	ldrb	r3, [r3, r2]
   807cc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   807ce:	4a10      	ldr	r2, [pc, #64]	; (80810 <vPortValidateInterruptPriority+0x50>)
   807d0:	7812      	ldrb	r2, [r2, #0]
   807d2:	429a      	cmp	r2, r3
   807d4:	d908      	bls.n	807e8 <vPortValidateInterruptPriority+0x28>
   807d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   807da:	f383 8811 	msr	BASEPRI, r3
   807de:	f3bf 8f6f 	isb	sy
   807e2:	f3bf 8f4f 	dsb	sy
   807e6:	e7fe      	b.n	807e6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   807e8:	4b0a      	ldr	r3, [pc, #40]	; (80814 <vPortValidateInterruptPriority+0x54>)
   807ea:	681b      	ldr	r3, [r3, #0]
   807ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807f0:	4a09      	ldr	r2, [pc, #36]	; (80818 <vPortValidateInterruptPriority+0x58>)
   807f2:	6812      	ldr	r2, [r2, #0]
   807f4:	4293      	cmp	r3, r2
   807f6:	d908      	bls.n	8080a <vPortValidateInterruptPriority+0x4a>
   807f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   807fc:	f383 8811 	msr	BASEPRI, r3
   80800:	f3bf 8f6f 	isb	sy
   80804:	f3bf 8f4f 	dsb	sy
   80808:	e7fe      	b.n	80808 <vPortValidateInterruptPriority+0x48>
   8080a:	4770      	bx	lr
   8080c:	e000e3f0 	.word	0xe000e3f0
   80810:	20070990 	.word	0x20070990
   80814:	e000ed0c 	.word	0xe000ed0c
   80818:	20070994 	.word	0x20070994

0008081c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8081c:	b538      	push	{r3, r4, r5, lr}
   8081e:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80820:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80824:	bf1c      	itt	ne
   80826:	f020 0407 	bicne.w	r4, r0, #7
   8082a:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   8082c:	4b10      	ldr	r3, [pc, #64]	; (80870 <pvPortMalloc+0x54>)
   8082e:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   80830:	4b10      	ldr	r3, [pc, #64]	; (80874 <pvPortMalloc+0x58>)
   80832:	681b      	ldr	r3, [r3, #0]
   80834:	b18b      	cbz	r3, 8085a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   80836:	4b10      	ldr	r3, [pc, #64]	; (80878 <pvPortMalloc+0x5c>)
   80838:	681b      	ldr	r3, [r3, #0]
   8083a:	441c      	add	r4, r3
   8083c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
   80840:	4294      	cmp	r4, r2
   80842:	d810      	bhi.n	80866 <pvPortMalloc+0x4a>
   80844:	42a3      	cmp	r3, r4
   80846:	d210      	bcs.n	8086a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   80848:	4a0a      	ldr	r2, [pc, #40]	; (80874 <pvPortMalloc+0x58>)
   8084a:	6815      	ldr	r5, [r2, #0]
   8084c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   8084e:	4b0a      	ldr	r3, [pc, #40]	; (80878 <pvPortMalloc+0x5c>)
   80850:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   80852:	4b0a      	ldr	r3, [pc, #40]	; (8087c <pvPortMalloc+0x60>)
   80854:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80856:	4628      	mov	r0, r5
   80858:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   8085a:	4b09      	ldr	r3, [pc, #36]	; (80880 <pvPortMalloc+0x64>)
   8085c:	f023 0307 	bic.w	r3, r3, #7
   80860:	4a04      	ldr	r2, [pc, #16]	; (80874 <pvPortMalloc+0x58>)
   80862:	6013      	str	r3, [r2, #0]
   80864:	e7e7      	b.n	80836 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
   80866:	2500      	movs	r5, #0
   80868:	e7f3      	b.n	80852 <pvPortMalloc+0x36>
   8086a:	2500      	movs	r5, #0
   8086c:	e7f1      	b.n	80852 <pvPortMalloc+0x36>
   8086e:	bf00      	nop
   80870:	0008156d 	.word	0x0008156d
   80874:	20070998 	.word	0x20070998
   80878:	2007c19c 	.word	0x2007c19c
   8087c:	000816bd 	.word	0x000816bd
   80880:	200709a4 	.word	0x200709a4

00080884 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   80884:	b140      	cbz	r0, 80898 <vPortFree+0x14>
   80886:	f04f 0340 	mov.w	r3, #64	; 0x40
   8088a:	f383 8811 	msr	BASEPRI, r3
   8088e:	f3bf 8f6f 	isb	sy
   80892:	f3bf 8f4f 	dsb	sy
   80896:	e7fe      	b.n	80896 <vPortFree+0x12>
   80898:	4770      	bx	lr
	...

0008089c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   8089c:	b510      	push	{r4, lr}
   8089e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   808a0:	4b04      	ldr	r3, [pc, #16]	; (808b4 <prvIsQueueEmpty+0x18>)
   808a2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   808a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   808a6:	4b04      	ldr	r3, [pc, #16]	; (808b8 <prvIsQueueEmpty+0x1c>)
   808a8:	4798      	blx	r3

	return xReturn;
}
   808aa:	fab4 f084 	clz	r0, r4
   808ae:	0940      	lsrs	r0, r0, #5
   808b0:	bd10      	pop	{r4, pc}
   808b2:	bf00      	nop
   808b4:	000805d9 	.word	0x000805d9
   808b8:	0008061d 	.word	0x0008061d

000808bc <prvCopyDataToQueue>:
{
   808bc:	b570      	push	{r4, r5, r6, lr}
   808be:	4604      	mov	r4, r0
   808c0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   808c2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   808c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   808c6:	b952      	cbnz	r2, 808de <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   808c8:	6803      	ldr	r3, [r0, #0]
   808ca:	2b00      	cmp	r3, #0
   808cc:	d12a      	bne.n	80924 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   808ce:	6840      	ldr	r0, [r0, #4]
   808d0:	4b18      	ldr	r3, [pc, #96]	; (80934 <prvCopyDataToQueue+0x78>)
   808d2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   808d4:	2300      	movs	r3, #0
   808d6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   808d8:	3501      	adds	r5, #1
   808da:	63a5      	str	r5, [r4, #56]	; 0x38
}
   808dc:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   808de:	b96e      	cbnz	r6, 808fc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   808e0:	6880      	ldr	r0, [r0, #8]
   808e2:	4b15      	ldr	r3, [pc, #84]	; (80938 <prvCopyDataToQueue+0x7c>)
   808e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   808e6:	68a3      	ldr	r3, [r4, #8]
   808e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   808ea:	4413      	add	r3, r2
   808ec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   808ee:	6862      	ldr	r2, [r4, #4]
   808f0:	4293      	cmp	r3, r2
   808f2:	d319      	bcc.n	80928 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   808f4:	6823      	ldr	r3, [r4, #0]
   808f6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   808f8:	2000      	movs	r0, #0
   808fa:	e7ed      	b.n	808d8 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   808fc:	68c0      	ldr	r0, [r0, #12]
   808fe:	4b0e      	ldr	r3, [pc, #56]	; (80938 <prvCopyDataToQueue+0x7c>)
   80900:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   80902:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80904:	425b      	negs	r3, r3
   80906:	68e2      	ldr	r2, [r4, #12]
   80908:	441a      	add	r2, r3
   8090a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8090c:	6821      	ldr	r1, [r4, #0]
   8090e:	428a      	cmp	r2, r1
   80910:	d202      	bcs.n	80918 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80912:	6862      	ldr	r2, [r4, #4]
   80914:	4413      	add	r3, r2
   80916:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   80918:	2e02      	cmp	r6, #2
   8091a:	d107      	bne.n	8092c <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   8091c:	b145      	cbz	r5, 80930 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
   8091e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   80920:	2000      	movs	r0, #0
   80922:	e7d9      	b.n	808d8 <prvCopyDataToQueue+0x1c>
   80924:	2000      	movs	r0, #0
   80926:	e7d7      	b.n	808d8 <prvCopyDataToQueue+0x1c>
   80928:	2000      	movs	r0, #0
   8092a:	e7d5      	b.n	808d8 <prvCopyDataToQueue+0x1c>
   8092c:	2000      	movs	r0, #0
   8092e:	e7d3      	b.n	808d8 <prvCopyDataToQueue+0x1c>
   80930:	2000      	movs	r0, #0
   80932:	e7d1      	b.n	808d8 <prvCopyDataToQueue+0x1c>
   80934:	00081bad 	.word	0x00081bad
   80938:	0008295d 	.word	0x0008295d

0008093c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   8093c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   8093e:	b172      	cbz	r2, 8095e <prvCopyDataFromQueue+0x22>
{
   80940:	b510      	push	{r4, lr}
   80942:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   80944:	68c4      	ldr	r4, [r0, #12]
   80946:	4414      	add	r4, r2
   80948:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   8094a:	6840      	ldr	r0, [r0, #4]
   8094c:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   8094e:	bf24      	itt	cs
   80950:	6818      	ldrcs	r0, [r3, #0]
   80952:	60d8      	strcs	r0, [r3, #12]
   80954:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   80956:	68d9      	ldr	r1, [r3, #12]
   80958:	4b01      	ldr	r3, [pc, #4]	; (80960 <prvCopyDataFromQueue+0x24>)
   8095a:	4798      	blx	r3
   8095c:	bd10      	pop	{r4, pc}
   8095e:	4770      	bx	lr
   80960:	0008295d 	.word	0x0008295d

00080964 <prvUnlockQueue>:
{
   80964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80968:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   8096a:	4b20      	ldr	r3, [pc, #128]	; (809ec <prvUnlockQueue+0x88>)
   8096c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   8096e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   80972:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80974:	2c00      	cmp	r4, #0
   80976:	dd12      	ble.n	8099e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80978:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   8097a:	b183      	cbz	r3, 8099e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8097c:	f105 0724 	add.w	r7, r5, #36	; 0x24
   80980:	4e1b      	ldr	r6, [pc, #108]	; (809f0 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   80982:	f8df 8074 	ldr.w	r8, [pc, #116]	; 809f8 <prvUnlockQueue+0x94>
   80986:	e004      	b.n	80992 <prvUnlockQueue+0x2e>
   80988:	3c01      	subs	r4, #1
   8098a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   8098c:	b13c      	cbz	r4, 8099e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8098e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80990:	b12b      	cbz	r3, 8099e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80992:	4638      	mov	r0, r7
   80994:	47b0      	blx	r6
   80996:	2800      	cmp	r0, #0
   80998:	d0f6      	beq.n	80988 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   8099a:	47c0      	blx	r8
   8099c:	e7f4      	b.n	80988 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   8099e:	23ff      	movs	r3, #255	; 0xff
   809a0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   809a4:	4b13      	ldr	r3, [pc, #76]	; (809f4 <prvUnlockQueue+0x90>)
   809a6:	4798      	blx	r3
	taskENTER_CRITICAL();
   809a8:	4b10      	ldr	r3, [pc, #64]	; (809ec <prvUnlockQueue+0x88>)
   809aa:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   809ac:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   809b0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   809b2:	2c00      	cmp	r4, #0
   809b4:	dd12      	ble.n	809dc <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   809b6:	692b      	ldr	r3, [r5, #16]
   809b8:	b183      	cbz	r3, 809dc <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   809ba:	f105 0710 	add.w	r7, r5, #16
   809be:	4e0c      	ldr	r6, [pc, #48]	; (809f0 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   809c0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 809f8 <prvUnlockQueue+0x94>
   809c4:	e004      	b.n	809d0 <prvUnlockQueue+0x6c>
   809c6:	3c01      	subs	r4, #1
   809c8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   809ca:	b13c      	cbz	r4, 809dc <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   809cc:	692b      	ldr	r3, [r5, #16]
   809ce:	b12b      	cbz	r3, 809dc <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   809d0:	4638      	mov	r0, r7
   809d2:	47b0      	blx	r6
   809d4:	2800      	cmp	r0, #0
   809d6:	d0f6      	beq.n	809c6 <prvUnlockQueue+0x62>
					vTaskMissedYield();
   809d8:	47c0      	blx	r8
   809da:	e7f4      	b.n	809c6 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   809dc:	23ff      	movs	r3, #255	; 0xff
   809de:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   809e2:	4b04      	ldr	r3, [pc, #16]	; (809f4 <prvUnlockQueue+0x90>)
   809e4:	4798      	blx	r3
   809e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809ea:	bf00      	nop
   809ec:	000805d9 	.word	0x000805d9
   809f0:	0008198d 	.word	0x0008198d
   809f4:	0008061d 	.word	0x0008061d
   809f8:	00081ac1 	.word	0x00081ac1

000809fc <xQueueGenericReset>:
{
   809fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   809fe:	b330      	cbz	r0, 80a4e <xQueueGenericReset+0x52>
   80a00:	4604      	mov	r4, r0
   80a02:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
   80a04:	4b1c      	ldr	r3, [pc, #112]	; (80a78 <xQueueGenericReset+0x7c>)
   80a06:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80a08:	6822      	ldr	r2, [r4, #0]
   80a0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80a0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a0e:	fb03 f301 	mul.w	r3, r3, r1
   80a12:	18d0      	adds	r0, r2, r3
   80a14:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   80a16:	2000      	movs	r0, #0
   80a18:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80a1a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   80a1c:	1a5b      	subs	r3, r3, r1
   80a1e:	4413      	add	r3, r2
   80a20:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   80a22:	23ff      	movs	r3, #255	; 0xff
   80a24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   80a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   80a2c:	b9c5      	cbnz	r5, 80a60 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80a2e:	6923      	ldr	r3, [r4, #16]
   80a30:	b1eb      	cbz	r3, 80a6e <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80a32:	f104 0010 	add.w	r0, r4, #16
   80a36:	4b11      	ldr	r3, [pc, #68]	; (80a7c <xQueueGenericReset+0x80>)
   80a38:	4798      	blx	r3
   80a3a:	b1c0      	cbz	r0, 80a6e <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
   80a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80a40:	4b0f      	ldr	r3, [pc, #60]	; (80a80 <xQueueGenericReset+0x84>)
   80a42:	601a      	str	r2, [r3, #0]
   80a44:	f3bf 8f4f 	dsb	sy
   80a48:	f3bf 8f6f 	isb	sy
   80a4c:	e00f      	b.n	80a6e <xQueueGenericReset+0x72>
   80a4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a52:	f383 8811 	msr	BASEPRI, r3
   80a56:	f3bf 8f6f 	isb	sy
   80a5a:	f3bf 8f4f 	dsb	sy
   80a5e:	e7fe      	b.n	80a5e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80a60:	f104 0010 	add.w	r0, r4, #16
   80a64:	4d07      	ldr	r5, [pc, #28]	; (80a84 <xQueueGenericReset+0x88>)
   80a66:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80a68:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a6c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
   80a6e:	4b06      	ldr	r3, [pc, #24]	; (80a88 <xQueueGenericReset+0x8c>)
   80a70:	4798      	blx	r3
}
   80a72:	2001      	movs	r0, #1
   80a74:	bd38      	pop	{r3, r4, r5, pc}
   80a76:	bf00      	nop
   80a78:	000805d9 	.word	0x000805d9
   80a7c:	0008198d 	.word	0x0008198d
   80a80:	e000ed04 	.word	0xe000ed04
   80a84:	00080495 	.word	0x00080495
   80a88:	0008061d 	.word	0x0008061d

00080a8c <xQueueGenericCreate>:
	{
   80a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   80a8e:	b940      	cbnz	r0, 80aa2 <xQueueGenericCreate+0x16>
   80a90:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a94:	f383 8811 	msr	BASEPRI, r3
   80a98:	f3bf 8f6f 	isb	sy
   80a9c:	f3bf 8f4f 	dsb	sy
   80aa0:	e7fe      	b.n	80aa0 <xQueueGenericCreate+0x14>
   80aa2:	4606      	mov	r6, r0
   80aa4:	4617      	mov	r7, r2
   80aa6:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80aa8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   80aac:	3050      	adds	r0, #80	; 0x50
   80aae:	4b0a      	ldr	r3, [pc, #40]	; (80ad8 <xQueueGenericCreate+0x4c>)
   80ab0:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80ab2:	4604      	mov	r4, r0
   80ab4:	b168      	cbz	r0, 80ad2 <xQueueGenericCreate+0x46>
	if( uxItemSize == ( UBaseType_t ) 0 )
   80ab6:	b11d      	cbz	r5, 80ac0 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   80ab8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   80abc:	6003      	str	r3, [r0, #0]
   80abe:	e000      	b.n	80ac2 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   80ac0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   80ac2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   80ac4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   80ac6:	2101      	movs	r1, #1
   80ac8:	4620      	mov	r0, r4
   80aca:	4b04      	ldr	r3, [pc, #16]	; (80adc <xQueueGenericCreate+0x50>)
   80acc:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   80ace:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   80ad2:	4620      	mov	r0, r4
   80ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ad6:	bf00      	nop
   80ad8:	0008081d 	.word	0x0008081d
   80adc:	000809fd 	.word	0x000809fd

00080ae0 <xQueueGenericSend>:
{
   80ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ae4:	b085      	sub	sp, #20
   80ae6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80ae8:	b198      	cbz	r0, 80b12 <xQueueGenericSend+0x32>
   80aea:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80aec:	b1d1      	cbz	r1, 80b24 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80aee:	2b02      	cmp	r3, #2
   80af0:	d024      	beq.n	80b3c <xQueueGenericSend+0x5c>
   80af2:	461e      	mov	r6, r3
   80af4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80af6:	4b5b      	ldr	r3, [pc, #364]	; (80c64 <xQueueGenericSend+0x184>)
   80af8:	4798      	blx	r3
   80afa:	bb58      	cbnz	r0, 80b54 <xQueueGenericSend+0x74>
   80afc:	9b01      	ldr	r3, [sp, #4]
   80afe:	b38b      	cbz	r3, 80b64 <xQueueGenericSend+0x84>
   80b00:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b04:	f383 8811 	msr	BASEPRI, r3
   80b08:	f3bf 8f6f 	isb	sy
   80b0c:	f3bf 8f4f 	dsb	sy
   80b10:	e7fe      	b.n	80b10 <xQueueGenericSend+0x30>
   80b12:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b16:	f383 8811 	msr	BASEPRI, r3
   80b1a:	f3bf 8f6f 	isb	sy
   80b1e:	f3bf 8f4f 	dsb	sy
   80b22:	e7fe      	b.n	80b22 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80b24:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80b26:	2a00      	cmp	r2, #0
   80b28:	d0e1      	beq.n	80aee <xQueueGenericSend+0xe>
   80b2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b2e:	f383 8811 	msr	BASEPRI, r3
   80b32:	f3bf 8f6f 	isb	sy
   80b36:	f3bf 8f4f 	dsb	sy
   80b3a:	e7fe      	b.n	80b3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80b3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   80b3e:	2a01      	cmp	r2, #1
   80b40:	d0d7      	beq.n	80af2 <xQueueGenericSend+0x12>
   80b42:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b46:	f383 8811 	msr	BASEPRI, r3
   80b4a:	f3bf 8f6f 	isb	sy
   80b4e:	f3bf 8f4f 	dsb	sy
   80b52:	e7fe      	b.n	80b52 <xQueueGenericSend+0x72>
   80b54:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   80b56:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80c8c <xQueueGenericSend+0x1ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80b5a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80c90 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   80b5e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80c70 <xQueueGenericSend+0x190>
   80b62:	e030      	b.n	80bc6 <xQueueGenericSend+0xe6>
   80b64:	2500      	movs	r5, #0
   80b66:	e7f6      	b.n	80b56 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80b68:	4632      	mov	r2, r6
   80b6a:	4639      	mov	r1, r7
   80b6c:	4620      	mov	r0, r4
   80b6e:	4b3e      	ldr	r3, [pc, #248]	; (80c68 <xQueueGenericSend+0x188>)
   80b70:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b74:	b193      	cbz	r3, 80b9c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b7a:	4b3c      	ldr	r3, [pc, #240]	; (80c6c <xQueueGenericSend+0x18c>)
   80b7c:	4798      	blx	r3
   80b7e:	b138      	cbz	r0, 80b90 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
   80b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80b84:	4b3a      	ldr	r3, [pc, #232]	; (80c70 <xQueueGenericSend+0x190>)
   80b86:	601a      	str	r2, [r3, #0]
   80b88:	f3bf 8f4f 	dsb	sy
   80b8c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80b90:	4b38      	ldr	r3, [pc, #224]	; (80c74 <xQueueGenericSend+0x194>)
   80b92:	4798      	blx	r3
				return pdPASS;
   80b94:	2001      	movs	r0, #1
}
   80b96:	b005      	add	sp, #20
   80b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if( xYieldRequired != pdFALSE )
   80b9c:	2800      	cmp	r0, #0
   80b9e:	d0f7      	beq.n	80b90 <xQueueGenericSend+0xb0>
						queueYIELD_IF_USING_PREEMPTION();
   80ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80ba4:	4b32      	ldr	r3, [pc, #200]	; (80c70 <xQueueGenericSend+0x190>)
   80ba6:	601a      	str	r2, [r3, #0]
   80ba8:	f3bf 8f4f 	dsb	sy
   80bac:	f3bf 8f6f 	isb	sy
   80bb0:	e7ee      	b.n	80b90 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
   80bb2:	4b30      	ldr	r3, [pc, #192]	; (80c74 <xQueueGenericSend+0x194>)
   80bb4:	4798      	blx	r3
					return errQUEUE_FULL;
   80bb6:	2000      	movs	r0, #0
   80bb8:	e7ed      	b.n	80b96 <xQueueGenericSend+0xb6>
				prvUnlockQueue( pxQueue );
   80bba:	4620      	mov	r0, r4
   80bbc:	4b2e      	ldr	r3, [pc, #184]	; (80c78 <xQueueGenericSend+0x198>)
   80bbe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80bc0:	4b2e      	ldr	r3, [pc, #184]	; (80c7c <xQueueGenericSend+0x19c>)
   80bc2:	4798      	blx	r3
   80bc4:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   80bc6:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80bcc:	429a      	cmp	r2, r3
   80bce:	d3cb      	bcc.n	80b68 <xQueueGenericSend+0x88>
   80bd0:	2e02      	cmp	r6, #2
   80bd2:	d0c9      	beq.n	80b68 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
   80bd4:	9b01      	ldr	r3, [sp, #4]
   80bd6:	2b00      	cmp	r3, #0
   80bd8:	d0eb      	beq.n	80bb2 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   80bda:	b90d      	cbnz	r5, 80be0 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80bdc:	a802      	add	r0, sp, #8
   80bde:	47d0      	blx	sl
		taskEXIT_CRITICAL();
   80be0:	4b24      	ldr	r3, [pc, #144]	; (80c74 <xQueueGenericSend+0x194>)
   80be2:	4798      	blx	r3
		vTaskSuspendAll();
   80be4:	4b26      	ldr	r3, [pc, #152]	; (80c80 <xQueueGenericSend+0x1a0>)
   80be6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80be8:	47c0      	blx	r8
   80bea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80bee:	b25b      	sxtb	r3, r3
   80bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bf4:	bf04      	itt	eq
   80bf6:	2300      	moveq	r3, #0
   80bf8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80bfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80c00:	b25b      	sxtb	r3, r3
   80c02:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c06:	bf04      	itt	eq
   80c08:	2300      	moveq	r3, #0
   80c0a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80c0e:	4b19      	ldr	r3, [pc, #100]	; (80c74 <xQueueGenericSend+0x194>)
   80c10:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c12:	a901      	add	r1, sp, #4
   80c14:	a802      	add	r0, sp, #8
   80c16:	4b1b      	ldr	r3, [pc, #108]	; (80c84 <xQueueGenericSend+0x1a4>)
   80c18:	4798      	blx	r3
   80c1a:	b9e0      	cbnz	r0, 80c56 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80c1c:	47c0      	blx	r8
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   80c1e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80c22:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80c24:	4b13      	ldr	r3, [pc, #76]	; (80c74 <xQueueGenericSend+0x194>)
   80c26:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80c28:	45ab      	cmp	fp, r5
   80c2a:	d1c6      	bne.n	80bba <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80c2c:	9901      	ldr	r1, [sp, #4]
   80c2e:	f104 0010 	add.w	r0, r4, #16
   80c32:	4b15      	ldr	r3, [pc, #84]	; (80c88 <xQueueGenericSend+0x1a8>)
   80c34:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80c36:	4620      	mov	r0, r4
   80c38:	4b0f      	ldr	r3, [pc, #60]	; (80c78 <xQueueGenericSend+0x198>)
   80c3a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80c3c:	4b0f      	ldr	r3, [pc, #60]	; (80c7c <xQueueGenericSend+0x19c>)
   80c3e:	4798      	blx	r3
   80c40:	2800      	cmp	r0, #0
   80c42:	d1bf      	bne.n	80bc4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
   80c44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80c48:	f8c9 3000 	str.w	r3, [r9]
   80c4c:	f3bf 8f4f 	dsb	sy
   80c50:	f3bf 8f6f 	isb	sy
   80c54:	e7b6      	b.n	80bc4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
   80c56:	4620      	mov	r0, r4
   80c58:	4b07      	ldr	r3, [pc, #28]	; (80c78 <xQueueGenericSend+0x198>)
   80c5a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80c5c:	4b07      	ldr	r3, [pc, #28]	; (80c7c <xQueueGenericSend+0x19c>)
   80c5e:	4798      	blx	r3
			return errQUEUE_FULL;
   80c60:	2000      	movs	r0, #0
   80c62:	e798      	b.n	80b96 <xQueueGenericSend+0xb6>
   80c64:	00081acd 	.word	0x00081acd
   80c68:	000808bd 	.word	0x000808bd
   80c6c:	0008198d 	.word	0x0008198d
   80c70:	e000ed04 	.word	0xe000ed04
   80c74:	0008061d 	.word	0x0008061d
   80c78:	00080965 	.word	0x00080965
   80c7c:	000816bd 	.word	0x000816bd
   80c80:	0008156d 	.word	0x0008156d
   80c84:	00081a35 	.word	0x00081a35
   80c88:	00081911 	.word	0x00081911
   80c8c:	000805d9 	.word	0x000805d9
   80c90:	00081a1d 	.word	0x00081a1d

00080c94 <xQueueCreateMutex>:
	{
   80c94:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   80c96:	4602      	mov	r2, r0
   80c98:	2100      	movs	r1, #0
   80c9a:	2001      	movs	r0, #1
   80c9c:	4b06      	ldr	r3, [pc, #24]	; (80cb8 <xQueueCreateMutex+0x24>)
   80c9e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80ca0:	4604      	mov	r4, r0
   80ca2:	b138      	cbz	r0, 80cb4 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   80ca4:	2100      	movs	r1, #0
   80ca6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   80ca8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   80caa:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   80cac:	460b      	mov	r3, r1
   80cae:	460a      	mov	r2, r1
   80cb0:	4d02      	ldr	r5, [pc, #8]	; (80cbc <xQueueCreateMutex+0x28>)
   80cb2:	47a8      	blx	r5
	}
   80cb4:	4620      	mov	r0, r4
   80cb6:	bd38      	pop	{r3, r4, r5, pc}
   80cb8:	00080a8d 	.word	0x00080a8d
   80cbc:	00080ae1 	.word	0x00080ae1

00080cc0 <xQueueGenericSendFromISR>:
{
   80cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
   80cc4:	2800      	cmp	r0, #0
   80cc6:	d037      	beq.n	80d38 <xQueueGenericSendFromISR+0x78>
   80cc8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80cca:	2900      	cmp	r1, #0
   80ccc:	d03d      	beq.n	80d4a <xQueueGenericSendFromISR+0x8a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80cce:	2b02      	cmp	r3, #2
   80cd0:	d047      	beq.n	80d62 <xQueueGenericSendFromISR+0xa2>
   80cd2:	461f      	mov	r7, r3
   80cd4:	4690      	mov	r8, r2
   80cd6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   80cd8:	4b2f      	ldr	r3, [pc, #188]	; (80d98 <xQueueGenericSendFromISR+0xd8>)
   80cda:	4798      	blx	r3
	__asm volatile
   80cdc:	f3ef 8611 	mrs	r6, BASEPRI
   80ce0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80ce4:	f383 8811 	msr	BASEPRI, r3
   80ce8:	f3bf 8f6f 	isb	sy
   80cec:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80cf0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80cf4:	429a      	cmp	r2, r3
   80cf6:	d301      	bcc.n	80cfc <xQueueGenericSendFromISR+0x3c>
   80cf8:	2f02      	cmp	r7, #2
   80cfa:	d144      	bne.n	80d86 <xQueueGenericSendFromISR+0xc6>
			const int8_t cTxLock = pxQueue->cTxLock;
   80cfc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   80d00:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80d02:	463a      	mov	r2, r7
   80d04:	4649      	mov	r1, r9
   80d06:	4620      	mov	r0, r4
   80d08:	4b24      	ldr	r3, [pc, #144]	; (80d9c <xQueueGenericSendFromISR+0xdc>)
   80d0a:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   80d0c:	f1b5 3fff 	cmp.w	r5, #4294967295
   80d10:	d133      	bne.n	80d7a <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d14:	2b00      	cmp	r3, #0
   80d16:	d038      	beq.n	80d8a <xQueueGenericSendFromISR+0xca>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80d18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d1c:	4b20      	ldr	r3, [pc, #128]	; (80da0 <xQueueGenericSendFromISR+0xe0>)
   80d1e:	4798      	blx	r3
   80d20:	2800      	cmp	r0, #0
   80d22:	d034      	beq.n	80d8e <xQueueGenericSendFromISR+0xce>
							if( pxHigherPriorityTaskWoken != NULL )
   80d24:	f1b8 0f00 	cmp.w	r8, #0
   80d28:	d033      	beq.n	80d92 <xQueueGenericSendFromISR+0xd2>
								*pxHigherPriorityTaskWoken = pdTRUE;
   80d2a:	2001      	movs	r0, #1
   80d2c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
   80d30:	f386 8811 	msr	BASEPRI, r6
}
   80d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
   80d38:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d3c:	f383 8811 	msr	BASEPRI, r3
   80d40:	f3bf 8f6f 	isb	sy
   80d44:	f3bf 8f4f 	dsb	sy
   80d48:	e7fe      	b.n	80d48 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80d4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
   80d4c:	2800      	cmp	r0, #0
   80d4e:	d0be      	beq.n	80cce <xQueueGenericSendFromISR+0xe>
   80d50:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d54:	f383 8811 	msr	BASEPRI, r3
   80d58:	f3bf 8f6f 	isb	sy
   80d5c:	f3bf 8f4f 	dsb	sy
   80d60:	e7fe      	b.n	80d60 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80d62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80d64:	2801      	cmp	r0, #1
   80d66:	d0b4      	beq.n	80cd2 <xQueueGenericSendFromISR+0x12>
   80d68:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d6c:	f383 8811 	msr	BASEPRI, r3
   80d70:	f3bf 8f6f 	isb	sy
   80d74:	f3bf 8f4f 	dsb	sy
   80d78:	e7fe      	b.n	80d78 <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   80d7a:	1c6b      	adds	r3, r5, #1
   80d7c:	b25b      	sxtb	r3, r3
   80d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   80d82:	2001      	movs	r0, #1
   80d84:	e7d4      	b.n	80d30 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
   80d86:	2000      	movs	r0, #0
   80d88:	e7d2      	b.n	80d30 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
   80d8a:	2001      	movs	r0, #1
   80d8c:	e7d0      	b.n	80d30 <xQueueGenericSendFromISR+0x70>
   80d8e:	2001      	movs	r0, #1
   80d90:	e7ce      	b.n	80d30 <xQueueGenericSendFromISR+0x70>
   80d92:	2001      	movs	r0, #1
   80d94:	e7cc      	b.n	80d30 <xQueueGenericSendFromISR+0x70>
   80d96:	bf00      	nop
   80d98:	000807c1 	.word	0x000807c1
   80d9c:	000808bd 	.word	0x000808bd
   80da0:	0008198d 	.word	0x0008198d

00080da4 <xQueueReceive>:
{
   80da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80da8:	b084      	sub	sp, #16
   80daa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   80dac:	b180      	cbz	r0, 80dd0 <xQueueReceive+0x2c>
   80dae:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80db0:	b1b9      	cbz	r1, 80de2 <xQueueReceive+0x3e>
   80db2:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80db4:	4b50      	ldr	r3, [pc, #320]	; (80ef8 <xQueueReceive+0x154>)
   80db6:	4798      	blx	r3
   80db8:	b9f8      	cbnz	r0, 80dfa <xQueueReceive+0x56>
   80dba:	9b01      	ldr	r3, [sp, #4]
   80dbc:	b32b      	cbz	r3, 80e0a <xQueueReceive+0x66>
   80dbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   80dc2:	f383 8811 	msr	BASEPRI, r3
   80dc6:	f3bf 8f6f 	isb	sy
   80dca:	f3bf 8f4f 	dsb	sy
   80dce:	e7fe      	b.n	80dce <xQueueReceive+0x2a>
   80dd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80dd4:	f383 8811 	msr	BASEPRI, r3
   80dd8:	f3bf 8f6f 	isb	sy
   80ddc:	f3bf 8f4f 	dsb	sy
   80de0:	e7fe      	b.n	80de0 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80de2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80de4:	2b00      	cmp	r3, #0
   80de6:	d0e4      	beq.n	80db2 <xQueueReceive+0xe>
   80de8:	f04f 0340 	mov.w	r3, #64	; 0x40
   80dec:	f383 8811 	msr	BASEPRI, r3
   80df0:	f3bf 8f6f 	isb	sy
   80df4:	f3bf 8f4f 	dsb	sy
   80df8:	e7fe      	b.n	80df8 <xQueueReceive+0x54>
   80dfa:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80dfc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80f24 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80e00:	f8df a124 	ldr.w	sl, [pc, #292]	; 80f28 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
   80e04:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80f04 <xQueueReceive+0x160>
   80e08:	e029      	b.n	80e5e <xQueueReceive+0xba>
   80e0a:	2700      	movs	r7, #0
   80e0c:	e7f6      	b.n	80dfc <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80e0e:	4631      	mov	r1, r6
   80e10:	4620      	mov	r0, r4
   80e12:	4b3a      	ldr	r3, [pc, #232]	; (80efc <xQueueReceive+0x158>)
   80e14:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   80e16:	3d01      	subs	r5, #1
   80e18:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e1a:	6923      	ldr	r3, [r4, #16]
   80e1c:	b163      	cbz	r3, 80e38 <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80e1e:	f104 0010 	add.w	r0, r4, #16
   80e22:	4b37      	ldr	r3, [pc, #220]	; (80f00 <xQueueReceive+0x15c>)
   80e24:	4798      	blx	r3
   80e26:	b138      	cbz	r0, 80e38 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
   80e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e2c:	4b35      	ldr	r3, [pc, #212]	; (80f04 <xQueueReceive+0x160>)
   80e2e:	601a      	str	r2, [r3, #0]
   80e30:	f3bf 8f4f 	dsb	sy
   80e34:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80e38:	4b33      	ldr	r3, [pc, #204]	; (80f08 <xQueueReceive+0x164>)
   80e3a:	4798      	blx	r3
				return pdPASS;
   80e3c:	2001      	movs	r0, #1
}
   80e3e:	b004      	add	sp, #16
   80e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
   80e44:	4b30      	ldr	r3, [pc, #192]	; (80f08 <xQueueReceive+0x164>)
   80e46:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80e48:	2000      	movs	r0, #0
   80e4a:	e7f8      	b.n	80e3e <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80e4c:	a802      	add	r0, sp, #8
   80e4e:	47d0      	blx	sl
   80e50:	e00e      	b.n	80e70 <xQueueReceive+0xcc>
				prvUnlockQueue( pxQueue );
   80e52:	4620      	mov	r0, r4
   80e54:	4b2d      	ldr	r3, [pc, #180]	; (80f0c <xQueueReceive+0x168>)
   80e56:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e58:	4b2d      	ldr	r3, [pc, #180]	; (80f10 <xQueueReceive+0x16c>)
   80e5a:	4798      	blx	r3
   80e5c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80e5e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80e60:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   80e62:	2d00      	cmp	r5, #0
   80e64:	d1d3      	bne.n	80e0e <xQueueReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
   80e66:	9b01      	ldr	r3, [sp, #4]
   80e68:	2b00      	cmp	r3, #0
   80e6a:	d0eb      	beq.n	80e44 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   80e6c:	2f00      	cmp	r7, #0
   80e6e:	d0ed      	beq.n	80e4c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
   80e70:	4b25      	ldr	r3, [pc, #148]	; (80f08 <xQueueReceive+0x164>)
   80e72:	4798      	blx	r3
		vTaskSuspendAll();
   80e74:	4b27      	ldr	r3, [pc, #156]	; (80f14 <xQueueReceive+0x170>)
   80e76:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80e78:	47c0      	blx	r8
   80e7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80e7e:	b25b      	sxtb	r3, r3
   80e80:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e84:	bf04      	itt	eq
   80e86:	2300      	moveq	r3, #0
   80e88:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80e8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80e90:	b25b      	sxtb	r3, r3
   80e92:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e96:	bf04      	itt	eq
   80e98:	2300      	moveq	r3, #0
   80e9a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80e9e:	4b1a      	ldr	r3, [pc, #104]	; (80f08 <xQueueReceive+0x164>)
   80ea0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80ea2:	a901      	add	r1, sp, #4
   80ea4:	a802      	add	r0, sp, #8
   80ea6:	4b1c      	ldr	r3, [pc, #112]	; (80f18 <xQueueReceive+0x174>)
   80ea8:	4798      	blx	r3
   80eaa:	b9c8      	cbnz	r0, 80ee0 <xQueueReceive+0x13c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80eac:	4620      	mov	r0, r4
   80eae:	4b1b      	ldr	r3, [pc, #108]	; (80f1c <xQueueReceive+0x178>)
   80eb0:	4798      	blx	r3
   80eb2:	2800      	cmp	r0, #0
   80eb4:	d0cd      	beq.n	80e52 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80eb6:	9901      	ldr	r1, [sp, #4]
   80eb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ebc:	4b18      	ldr	r3, [pc, #96]	; (80f20 <xQueueReceive+0x17c>)
   80ebe:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80ec0:	4620      	mov	r0, r4
   80ec2:	4b12      	ldr	r3, [pc, #72]	; (80f0c <xQueueReceive+0x168>)
   80ec4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80ec6:	4b12      	ldr	r3, [pc, #72]	; (80f10 <xQueueReceive+0x16c>)
   80ec8:	4798      	blx	r3
   80eca:	2800      	cmp	r0, #0
   80ecc:	d1c6      	bne.n	80e5c <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
   80ece:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80ed2:	f8c9 3000 	str.w	r3, [r9]
   80ed6:	f3bf 8f4f 	dsb	sy
   80eda:	f3bf 8f6f 	isb	sy
   80ede:	e7bd      	b.n	80e5c <xQueueReceive+0xb8>
			prvUnlockQueue( pxQueue );
   80ee0:	4620      	mov	r0, r4
   80ee2:	4b0a      	ldr	r3, [pc, #40]	; (80f0c <xQueueReceive+0x168>)
   80ee4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80ee6:	4b0a      	ldr	r3, [pc, #40]	; (80f10 <xQueueReceive+0x16c>)
   80ee8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80eea:	4620      	mov	r0, r4
   80eec:	4b0b      	ldr	r3, [pc, #44]	; (80f1c <xQueueReceive+0x178>)
   80eee:	4798      	blx	r3
   80ef0:	2800      	cmp	r0, #0
   80ef2:	d0b3      	beq.n	80e5c <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
   80ef4:	2000      	movs	r0, #0
   80ef6:	e7a2      	b.n	80e3e <xQueueReceive+0x9a>
   80ef8:	00081acd 	.word	0x00081acd
   80efc:	0008093d 	.word	0x0008093d
   80f00:	0008198d 	.word	0x0008198d
   80f04:	e000ed04 	.word	0xe000ed04
   80f08:	0008061d 	.word	0x0008061d
   80f0c:	00080965 	.word	0x00080965
   80f10:	000816bd 	.word	0x000816bd
   80f14:	0008156d 	.word	0x0008156d
   80f18:	00081a35 	.word	0x00081a35
   80f1c:	0008089d 	.word	0x0008089d
   80f20:	00081911 	.word	0x00081911
   80f24:	000805d9 	.word	0x000805d9
   80f28:	00081a1d 	.word	0x00081a1d

00080f2c <xQueueSemaphoreTake>:
{
   80f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80f30:	b085      	sub	sp, #20
   80f32:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   80f34:	b158      	cbz	r0, 80f4e <xQueueSemaphoreTake+0x22>
   80f36:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
   80f38:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f3a:	b18b      	cbz	r3, 80f60 <xQueueSemaphoreTake+0x34>
   80f3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f40:	f383 8811 	msr	BASEPRI, r3
   80f44:	f3bf 8f6f 	isb	sy
   80f48:	f3bf 8f4f 	dsb	sy
   80f4c:	e7fe      	b.n	80f4c <xQueueSemaphoreTake+0x20>
   80f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f52:	f383 8811 	msr	BASEPRI, r3
   80f56:	f3bf 8f6f 	isb	sy
   80f5a:	f3bf 8f4f 	dsb	sy
   80f5e:	e7fe      	b.n	80f5e <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80f60:	4b5b      	ldr	r3, [pc, #364]	; (810d0 <xQueueSemaphoreTake+0x1a4>)
   80f62:	4798      	blx	r3
   80f64:	b950      	cbnz	r0, 80f7c <xQueueSemaphoreTake+0x50>
   80f66:	9b01      	ldr	r3, [sp, #4]
   80f68:	b183      	cbz	r3, 80f8c <xQueueSemaphoreTake+0x60>
   80f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f6e:	f383 8811 	msr	BASEPRI, r3
   80f72:	f3bf 8f6f 	isb	sy
   80f76:	f3bf 8f4f 	dsb	sy
   80f7a:	e7fe      	b.n	80f7a <xQueueSemaphoreTake+0x4e>
   80f7c:	2500      	movs	r5, #0
   80f7e:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
   80f80:	4e54      	ldr	r6, [pc, #336]	; (810d4 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState( &xTimeOut );
   80f82:	f8df 9184 	ldr.w	r9, [pc, #388]	; 81108 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
   80f86:	f8df 8158 	ldr.w	r8, [pc, #344]	; 810e0 <xQueueSemaphoreTake+0x1b4>
   80f8a:	e048      	b.n	8101e <xQueueSemaphoreTake+0xf2>
   80f8c:	2500      	movs	r5, #0
   80f8e:	462f      	mov	r7, r5
   80f90:	e7f6      	b.n	80f80 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   80f92:	3b01      	subs	r3, #1
   80f94:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f96:	6823      	ldr	r3, [r4, #0]
   80f98:	b913      	cbnz	r3, 80fa0 <xQueueSemaphoreTake+0x74>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   80f9a:	4b4f      	ldr	r3, [pc, #316]	; (810d8 <xQueueSemaphoreTake+0x1ac>)
   80f9c:	4798      	blx	r3
   80f9e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80fa0:	6923      	ldr	r3, [r4, #16]
   80fa2:	b163      	cbz	r3, 80fbe <xQueueSemaphoreTake+0x92>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80fa4:	f104 0010 	add.w	r0, r4, #16
   80fa8:	4b4c      	ldr	r3, [pc, #304]	; (810dc <xQueueSemaphoreTake+0x1b0>)
   80faa:	4798      	blx	r3
   80fac:	b138      	cbz	r0, 80fbe <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
   80fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fb2:	4b4b      	ldr	r3, [pc, #300]	; (810e0 <xQueueSemaphoreTake+0x1b4>)
   80fb4:	601a      	str	r2, [r3, #0]
   80fb6:	f3bf 8f4f 	dsb	sy
   80fba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80fbe:	4b49      	ldr	r3, [pc, #292]	; (810e4 <xQueueSemaphoreTake+0x1b8>)
   80fc0:	4798      	blx	r3
				return pdPASS;
   80fc2:	2501      	movs	r5, #1
}
   80fc4:	4628      	mov	r0, r5
   80fc6:	b005      	add	sp, #20
   80fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
   80fcc:	b145      	cbz	r5, 80fe0 <xQueueSemaphoreTake+0xb4>
   80fce:	f04f 0340 	mov.w	r3, #64	; 0x40
   80fd2:	f383 8811 	msr	BASEPRI, r3
   80fd6:	f3bf 8f6f 	isb	sy
   80fda:	f3bf 8f4f 	dsb	sy
   80fde:	e7fe      	b.n	80fde <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
   80fe0:	4b40      	ldr	r3, [pc, #256]	; (810e4 <xQueueSemaphoreTake+0x1b8>)
   80fe2:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80fe4:	e7ee      	b.n	80fc4 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80fe6:	a802      	add	r0, sp, #8
   80fe8:	47c8      	blx	r9
   80fea:	e021      	b.n	81030 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
   80fec:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80fee:	6860      	ldr	r0, [r4, #4]
   80ff0:	4b3d      	ldr	r3, [pc, #244]	; (810e8 <xQueueSemaphoreTake+0x1bc>)
   80ff2:	4798      	blx	r3
   80ff4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
   80ff6:	4b3b      	ldr	r3, [pc, #236]	; (810e4 <xQueueSemaphoreTake+0x1b8>)
   80ff8:	4798      	blx	r3
   80ffa:	e040      	b.n	8107e <xQueueSemaphoreTake+0x152>
				prvUnlockQueue( pxQueue );
   80ffc:	4620      	mov	r0, r4
   80ffe:	4b3b      	ldr	r3, [pc, #236]	; (810ec <xQueueSemaphoreTake+0x1c0>)
   81000:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81002:	4b3b      	ldr	r3, [pc, #236]	; (810f0 <xQueueSemaphoreTake+0x1c4>)
   81004:	4798      	blx	r3
   81006:	e009      	b.n	8101c <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue( pxQueue );
   81008:	4620      	mov	r0, r4
   8100a:	4b38      	ldr	r3, [pc, #224]	; (810ec <xQueueSemaphoreTake+0x1c0>)
   8100c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8100e:	4b38      	ldr	r3, [pc, #224]	; (810f0 <xQueueSemaphoreTake+0x1c4>)
   81010:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81012:	4620      	mov	r0, r4
   81014:	4b37      	ldr	r3, [pc, #220]	; (810f4 <xQueueSemaphoreTake+0x1c8>)
   81016:	4798      	blx	r3
   81018:	2800      	cmp	r0, #0
   8101a:	d145      	bne.n	810a8 <xQueueSemaphoreTake+0x17c>
   8101c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   8101e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   81020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   81022:	2b00      	cmp	r3, #0
   81024:	d1b5      	bne.n	80f92 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
   81026:	9b01      	ldr	r3, [sp, #4]
   81028:	2b00      	cmp	r3, #0
   8102a:	d0cf      	beq.n	80fcc <xQueueSemaphoreTake+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   8102c:	2f00      	cmp	r7, #0
   8102e:	d0da      	beq.n	80fe6 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
   81030:	4b2c      	ldr	r3, [pc, #176]	; (810e4 <xQueueSemaphoreTake+0x1b8>)
   81032:	4798      	blx	r3
		vTaskSuspendAll();
   81034:	4b30      	ldr	r3, [pc, #192]	; (810f8 <xQueueSemaphoreTake+0x1cc>)
   81036:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81038:	47b0      	blx	r6
   8103a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8103e:	b25b      	sxtb	r3, r3
   81040:	f1b3 3fff 	cmp.w	r3, #4294967295
   81044:	bf04      	itt	eq
   81046:	2300      	moveq	r3, #0
   81048:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8104c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   81050:	b25b      	sxtb	r3, r3
   81052:	f1b3 3fff 	cmp.w	r3, #4294967295
   81056:	bf04      	itt	eq
   81058:	2300      	moveq	r3, #0
   8105a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8105e:	4b21      	ldr	r3, [pc, #132]	; (810e4 <xQueueSemaphoreTake+0x1b8>)
   81060:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81062:	a901      	add	r1, sp, #4
   81064:	a802      	add	r0, sp, #8
   81066:	4b25      	ldr	r3, [pc, #148]	; (810fc <xQueueSemaphoreTake+0x1d0>)
   81068:	4798      	blx	r3
   8106a:	2800      	cmp	r0, #0
   8106c:	d1cc      	bne.n	81008 <xQueueSemaphoreTake+0xdc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8106e:	4620      	mov	r0, r4
   81070:	4b20      	ldr	r3, [pc, #128]	; (810f4 <xQueueSemaphoreTake+0x1c8>)
   81072:	4798      	blx	r3
   81074:	2800      	cmp	r0, #0
   81076:	d0c1      	beq.n	80ffc <xQueueSemaphoreTake+0xd0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81078:	6823      	ldr	r3, [r4, #0]
   8107a:	2b00      	cmp	r3, #0
   8107c:	d0b6      	beq.n	80fec <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8107e:	9901      	ldr	r1, [sp, #4]
   81080:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81084:	4b1e      	ldr	r3, [pc, #120]	; (81100 <xQueueSemaphoreTake+0x1d4>)
   81086:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81088:	4620      	mov	r0, r4
   8108a:	4b18      	ldr	r3, [pc, #96]	; (810ec <xQueueSemaphoreTake+0x1c0>)
   8108c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8108e:	4b18      	ldr	r3, [pc, #96]	; (810f0 <xQueueSemaphoreTake+0x1c4>)
   81090:	4798      	blx	r3
   81092:	2800      	cmp	r0, #0
   81094:	d1c2      	bne.n	8101c <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
   81096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8109a:	f8c8 3000 	str.w	r3, [r8]
   8109e:	f3bf 8f4f 	dsb	sy
   810a2:	f3bf 8f6f 	isb	sy
   810a6:	e7b9      	b.n	8101c <xQueueSemaphoreTake+0xf0>
					if( xInheritanceOccurred != pdFALSE )
   810a8:	2d00      	cmp	r5, #0
   810aa:	d08b      	beq.n	80fc4 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
   810ac:	4b09      	ldr	r3, [pc, #36]	; (810d4 <xQueueSemaphoreTake+0x1a8>)
   810ae:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   810b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   810b2:	b153      	cbz	r3, 810ca <xQueueSemaphoreTake+0x19e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   810b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   810b6:	6819      	ldr	r1, [r3, #0]
   810b8:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   810bc:	6860      	ldr	r0, [r4, #4]
   810be:	4b11      	ldr	r3, [pc, #68]	; (81104 <xQueueSemaphoreTake+0x1d8>)
   810c0:	4798      	blx	r3
						taskEXIT_CRITICAL();
   810c2:	4b08      	ldr	r3, [pc, #32]	; (810e4 <xQueueSemaphoreTake+0x1b8>)
   810c4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   810c6:	2500      	movs	r5, #0
   810c8:	e77c      	b.n	80fc4 <xQueueSemaphoreTake+0x98>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   810ca:	2100      	movs	r1, #0
   810cc:	e7f6      	b.n	810bc <xQueueSemaphoreTake+0x190>
   810ce:	bf00      	nop
   810d0:	00081acd 	.word	0x00081acd
   810d4:	000805d9 	.word	0x000805d9
   810d8:	00081d31 	.word	0x00081d31
   810dc:	0008198d 	.word	0x0008198d
   810e0:	e000ed04 	.word	0xe000ed04
   810e4:	0008061d 	.word	0x0008061d
   810e8:	00081aed 	.word	0x00081aed
   810ec:	00080965 	.word	0x00080965
   810f0:	000816bd 	.word	0x000816bd
   810f4:	0008089d 	.word	0x0008089d
   810f8:	0008156d 	.word	0x0008156d
   810fc:	00081a35 	.word	0x00081a35
   81100:	00081911 	.word	0x00081911
   81104:	00081c69 	.word	0x00081c69
   81108:	00081a1d 	.word	0x00081a1d

0008110c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   8110c:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   8110e:	4b0a      	ldr	r3, [pc, #40]	; (81138 <vQueueAddToRegistry+0x2c>)
   81110:	681b      	ldr	r3, [r3, #0]
   81112:	b14b      	cbz	r3, 81128 <vQueueAddToRegistry+0x1c>
   81114:	2301      	movs	r3, #1
   81116:	4c08      	ldr	r4, [pc, #32]	; (81138 <vQueueAddToRegistry+0x2c>)
   81118:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   8111c:	b12a      	cbz	r2, 8112a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   8111e:	3301      	adds	r3, #1
   81120:	2b08      	cmp	r3, #8
   81122:	d1f9      	bne.n	81118 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   81124:	bc10      	pop	{r4}
   81126:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   81128:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   8112a:	4a03      	ldr	r2, [pc, #12]	; (81138 <vQueueAddToRegistry+0x2c>)
   8112c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   81130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81134:	6058      	str	r0, [r3, #4]
				break;
   81136:	e7f5      	b.n	81124 <vQueueAddToRegistry+0x18>
   81138:	2007c398 	.word	0x2007c398

0008113c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   8113c:	b570      	push	{r4, r5, r6, lr}
   8113e:	4604      	mov	r4, r0
   81140:	460d      	mov	r5, r1
   81142:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81144:	4b11      	ldr	r3, [pc, #68]	; (8118c <vQueueWaitForMessageRestricted+0x50>)
   81146:	4798      	blx	r3
   81148:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8114c:	b25b      	sxtb	r3, r3
   8114e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81152:	bf04      	itt	eq
   81154:	2300      	moveq	r3, #0
   81156:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8115a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   8115e:	b25b      	sxtb	r3, r3
   81160:	f1b3 3fff 	cmp.w	r3, #4294967295
   81164:	bf04      	itt	eq
   81166:	2300      	moveq	r3, #0
   81168:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8116c:	4b08      	ldr	r3, [pc, #32]	; (81190 <vQueueWaitForMessageRestricted+0x54>)
   8116e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   81170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81172:	b11b      	cbz	r3, 8117c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   81174:	4620      	mov	r0, r4
   81176:	4b07      	ldr	r3, [pc, #28]	; (81194 <vQueueWaitForMessageRestricted+0x58>)
   81178:	4798      	blx	r3
   8117a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   8117c:	4632      	mov	r2, r6
   8117e:	4629      	mov	r1, r5
   81180:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81184:	4b04      	ldr	r3, [pc, #16]	; (81198 <vQueueWaitForMessageRestricted+0x5c>)
   81186:	4798      	blx	r3
   81188:	e7f4      	b.n	81174 <vQueueWaitForMessageRestricted+0x38>
   8118a:	bf00      	nop
   8118c:	000805d9 	.word	0x000805d9
   81190:	0008061d 	.word	0x0008061d
   81194:	00080965 	.word	0x00080965
   81198:	00081949 	.word	0x00081949

0008119c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8119c:	4b08      	ldr	r3, [pc, #32]	; (811c0 <prvResetNextTaskUnblockTime+0x24>)
   8119e:	681b      	ldr	r3, [r3, #0]
   811a0:	681b      	ldr	r3, [r3, #0]
   811a2:	b13b      	cbz	r3, 811b4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   811a4:	4b06      	ldr	r3, [pc, #24]	; (811c0 <prvResetNextTaskUnblockTime+0x24>)
   811a6:	681b      	ldr	r3, [r3, #0]
   811a8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   811aa:	68db      	ldr	r3, [r3, #12]
   811ac:	685a      	ldr	r2, [r3, #4]
   811ae:	4b05      	ldr	r3, [pc, #20]	; (811c4 <prvResetNextTaskUnblockTime+0x28>)
   811b0:	601a      	str	r2, [r3, #0]
   811b2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   811b4:	f04f 32ff 	mov.w	r2, #4294967295
   811b8:	4b02      	ldr	r3, [pc, #8]	; (811c4 <prvResetNextTaskUnblockTime+0x28>)
   811ba:	601a      	str	r2, [r3, #0]
   811bc:	4770      	bx	lr
   811be:	bf00      	nop
   811c0:	2007c1a4 	.word	0x2007c1a4
   811c4:	2007c254 	.word	0x2007c254

000811c8 <prvIdleTask>:
{
   811c8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   811ca:	4d16      	ldr	r5, [pc, #88]	; (81224 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   811cc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8123c <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   811d0:	4f15      	ldr	r7, [pc, #84]	; (81228 <prvIdleTask+0x60>)
				taskYIELD();
   811d2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 81240 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   811d6:	682b      	ldr	r3, [r5, #0]
   811d8:	b1bb      	cbz	r3, 8120a <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   811da:	4e14      	ldr	r6, [pc, #80]	; (8122c <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   811dc:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   811de:	68fb      	ldr	r3, [r7, #12]
   811e0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   811e2:	1d20      	adds	r0, r4, #4
   811e4:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   811e6:	4a12      	ldr	r2, [pc, #72]	; (81230 <prvIdleTask+0x68>)
   811e8:	6813      	ldr	r3, [r2, #0]
   811ea:	3b01      	subs	r3, #1
   811ec:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   811ee:	682b      	ldr	r3, [r5, #0]
   811f0:	3b01      	subs	r3, #1
   811f2:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   811f4:	4b0f      	ldr	r3, [pc, #60]	; (81234 <prvIdleTask+0x6c>)
   811f6:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   811f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   811fa:	f8df a048 	ldr.w	sl, [pc, #72]	; 81244 <prvIdleTask+0x7c>
   811fe:	47d0      	blx	sl
			vPortFree( pxTCB );
   81200:	4620      	mov	r0, r4
   81202:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   81204:	682b      	ldr	r3, [r5, #0]
   81206:	2b00      	cmp	r3, #0
   81208:	d1e8      	bne.n	811dc <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   8120a:	4b0b      	ldr	r3, [pc, #44]	; (81238 <prvIdleTask+0x70>)
   8120c:	681b      	ldr	r3, [r3, #0]
   8120e:	2b01      	cmp	r3, #1
   81210:	d9e1      	bls.n	811d6 <prvIdleTask+0xe>
				taskYIELD();
   81212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81216:	f8c9 3000 	str.w	r3, [r9]
   8121a:	f3bf 8f4f 	dsb	sy
   8121e:	f3bf 8f6f 	isb	sy
   81222:	e7d8      	b.n	811d6 <prvIdleTask+0xe>
   81224:	2007c214 	.word	0x2007c214
   81228:	2007c288 	.word	0x2007c288
   8122c:	000804fd 	.word	0x000804fd
   81230:	2007c210 	.word	0x2007c210
   81234:	0008061d 	.word	0x0008061d
   81238:	2007c1ac 	.word	0x2007c1ac
   8123c:	000805d9 	.word	0x000805d9
   81240:	e000ed04 	.word	0xe000ed04
   81244:	00080885 	.word	0x00080885

00081248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   81248:	b570      	push	{r4, r5, r6, lr}
   8124a:	4604      	mov	r4, r0
   8124c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   8124e:	4b1d      	ldr	r3, [pc, #116]	; (812c4 <prvAddCurrentTaskToDelayedList+0x7c>)
   81250:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81252:	4b1d      	ldr	r3, [pc, #116]	; (812c8 <prvAddCurrentTaskToDelayedList+0x80>)
   81254:	6818      	ldr	r0, [r3, #0]
   81256:	3004      	adds	r0, #4
   81258:	4b1c      	ldr	r3, [pc, #112]	; (812cc <prvAddCurrentTaskToDelayedList+0x84>)
   8125a:	4798      	blx	r3
   8125c:	b948      	cbnz	r0, 81272 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8125e:	4b1a      	ldr	r3, [pc, #104]	; (812c8 <prvAddCurrentTaskToDelayedList+0x80>)
   81260:	681a      	ldr	r2, [r3, #0]
   81262:	491b      	ldr	r1, [pc, #108]	; (812d0 <prvAddCurrentTaskToDelayedList+0x88>)
   81264:	680b      	ldr	r3, [r1, #0]
   81266:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   81268:	2201      	movs	r2, #1
   8126a:	4082      	lsls	r2, r0
   8126c:	ea23 0302 	bic.w	r3, r3, r2
   81270:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81272:	f1b4 3fff 	cmp.w	r4, #4294967295
   81276:	d013      	beq.n	812a0 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   81278:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   8127a:	4b13      	ldr	r3, [pc, #76]	; (812c8 <prvAddCurrentTaskToDelayedList+0x80>)
   8127c:	681b      	ldr	r3, [r3, #0]
   8127e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   81280:	42a5      	cmp	r5, r4
   81282:	d816      	bhi.n	812b2 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81284:	4b13      	ldr	r3, [pc, #76]	; (812d4 <prvAddCurrentTaskToDelayedList+0x8c>)
   81286:	6818      	ldr	r0, [r3, #0]
   81288:	4b0f      	ldr	r3, [pc, #60]	; (812c8 <prvAddCurrentTaskToDelayedList+0x80>)
   8128a:	6819      	ldr	r1, [r3, #0]
   8128c:	3104      	adds	r1, #4
   8128e:	4b12      	ldr	r3, [pc, #72]	; (812d8 <prvAddCurrentTaskToDelayedList+0x90>)
   81290:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   81292:	4b12      	ldr	r3, [pc, #72]	; (812dc <prvAddCurrentTaskToDelayedList+0x94>)
   81294:	681b      	ldr	r3, [r3, #0]
   81296:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   81298:	bf3c      	itt	cc
   8129a:	4b10      	ldrcc	r3, [pc, #64]	; (812dc <prvAddCurrentTaskToDelayedList+0x94>)
   8129c:	601c      	strcc	r4, [r3, #0]
   8129e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   812a0:	2e00      	cmp	r6, #0
   812a2:	d0e9      	beq.n	81278 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   812a4:	4b08      	ldr	r3, [pc, #32]	; (812c8 <prvAddCurrentTaskToDelayedList+0x80>)
   812a6:	6819      	ldr	r1, [r3, #0]
   812a8:	3104      	adds	r1, #4
   812aa:	480d      	ldr	r0, [pc, #52]	; (812e0 <prvAddCurrentTaskToDelayedList+0x98>)
   812ac:	4b0d      	ldr	r3, [pc, #52]	; (812e4 <prvAddCurrentTaskToDelayedList+0x9c>)
   812ae:	4798      	blx	r3
   812b0:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   812b2:	4b0d      	ldr	r3, [pc, #52]	; (812e8 <prvAddCurrentTaskToDelayedList+0xa0>)
   812b4:	6818      	ldr	r0, [r3, #0]
   812b6:	4b04      	ldr	r3, [pc, #16]	; (812c8 <prvAddCurrentTaskToDelayedList+0x80>)
   812b8:	6819      	ldr	r1, [r3, #0]
   812ba:	3104      	adds	r1, #4
   812bc:	4b06      	ldr	r3, [pc, #24]	; (812d8 <prvAddCurrentTaskToDelayedList+0x90>)
   812be:	4798      	blx	r3
   812c0:	bd70      	pop	{r4, r5, r6, pc}
   812c2:	bf00      	nop
   812c4:	2007c29c 	.word	0x2007c29c
   812c8:	2007c1a0 	.word	0x2007c1a0
   812cc:	000804fd 	.word	0x000804fd
   812d0:	2007c224 	.word	0x2007c224
   812d4:	2007c1a4 	.word	0x2007c1a4
   812d8:	000804c9 	.word	0x000804c9
   812dc:	2007c254 	.word	0x2007c254
   812e0:	2007c274 	.word	0x2007c274
   812e4:	000804b1 	.word	0x000804b1
   812e8:	2007c1a8 	.word	0x2007c1a8

000812ec <xTaskCreate>:
	{
   812ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812f0:	b083      	sub	sp, #12
   812f2:	4683      	mov	fp, r0
   812f4:	460d      	mov	r5, r1
   812f6:	9301      	str	r3, [sp, #4]
   812f8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   812fc:	0096      	lsls	r6, r2, #2
   812fe:	4630      	mov	r0, r6
   81300:	4b60      	ldr	r3, [pc, #384]	; (81484 <xTaskCreate+0x198>)
   81302:	4798      	blx	r3
			if( pxStack != NULL )
   81304:	2800      	cmp	r0, #0
   81306:	f000 808d 	beq.w	81424 <xTaskCreate+0x138>
   8130a:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   8130c:	2060      	movs	r0, #96	; 0x60
   8130e:	4b5d      	ldr	r3, [pc, #372]	; (81484 <xTaskCreate+0x198>)
   81310:	4798      	blx	r3
				if( pxNewTCB != NULL )
   81312:	4604      	mov	r4, r0
   81314:	2800      	cmp	r0, #0
   81316:	f000 8082 	beq.w	8141e <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
   8131a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   8131c:	4632      	mov	r2, r6
   8131e:	21a5      	movs	r1, #165	; 0xa5
   81320:	4638      	mov	r0, r7
   81322:	4b59      	ldr	r3, [pc, #356]	; (81488 <xTaskCreate+0x19c>)
   81324:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   81326:	3e04      	subs	r6, #4
   81328:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8132a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   8132c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81330:	782b      	ldrb	r3, [r5, #0]
   81332:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   81336:	782b      	ldrb	r3, [r5, #0]
   81338:	b163      	cbz	r3, 81354 <xTaskCreate+0x68>
   8133a:	462b      	mov	r3, r5
   8133c:	f104 0234 	add.w	r2, r4, #52	; 0x34
   81340:	f105 0113 	add.w	r1, r5, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81344:	7858      	ldrb	r0, [r3, #1]
   81346:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   8134a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   8134e:	b108      	cbz	r0, 81354 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   81350:	428b      	cmp	r3, r1
   81352:	d1f7      	bne.n	81344 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   81354:	2700      	movs	r7, #0
   81356:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
   8135a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8135c:	2d04      	cmp	r5, #4
   8135e:	bf28      	it	cs
   81360:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   81362:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   81364:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
   81366:	6567      	str	r7, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   81368:	f104 0804 	add.w	r8, r4, #4
   8136c:	4640      	mov	r0, r8
   8136e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 814dc <xTaskCreate+0x1f0>
   81372:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   81374:	f104 0018 	add.w	r0, r4, #24
   81378:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   8137a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8137c:	f1c5 0505 	rsb	r5, r5, #5
   81380:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   81382:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   81384:	65a7      	str	r7, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   81386:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8138a:	9a01      	ldr	r2, [sp, #4]
   8138c:	4659      	mov	r1, fp
   8138e:	4630      	mov	r0, r6
   81390:	4b3e      	ldr	r3, [pc, #248]	; (8148c <xTaskCreate+0x1a0>)
   81392:	4798      	blx	r3
   81394:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   81396:	f1ba 0f00 	cmp.w	sl, #0
   8139a:	d001      	beq.n	813a0 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   8139c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   813a0:	4b3b      	ldr	r3, [pc, #236]	; (81490 <xTaskCreate+0x1a4>)
   813a2:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   813a4:	4a3b      	ldr	r2, [pc, #236]	; (81494 <xTaskCreate+0x1a8>)
   813a6:	6813      	ldr	r3, [r2, #0]
   813a8:	3301      	adds	r3, #1
   813aa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   813ac:	4b3a      	ldr	r3, [pc, #232]	; (81498 <xTaskCreate+0x1ac>)
   813ae:	681b      	ldr	r3, [r3, #0]
   813b0:	2b00      	cmp	r3, #0
   813b2:	d03a      	beq.n	8142a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
   813b4:	4b39      	ldr	r3, [pc, #228]	; (8149c <xTaskCreate+0x1b0>)
   813b6:	681b      	ldr	r3, [r3, #0]
   813b8:	b93b      	cbnz	r3, 813ca <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   813ba:	4b37      	ldr	r3, [pc, #220]	; (81498 <xTaskCreate+0x1ac>)
   813bc:	681b      	ldr	r3, [r3, #0]
   813be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   813c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   813c2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   813c4:	bf9c      	itt	ls
   813c6:	4b34      	ldrls	r3, [pc, #208]	; (81498 <xTaskCreate+0x1ac>)
   813c8:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   813ca:	4a35      	ldr	r2, [pc, #212]	; (814a0 <xTaskCreate+0x1b4>)
   813cc:	6813      	ldr	r3, [r2, #0]
   813ce:	3301      	adds	r3, #1
   813d0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   813d2:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
   813d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   813d6:	4a33      	ldr	r2, [pc, #204]	; (814a4 <xTaskCreate+0x1b8>)
   813d8:	6811      	ldr	r1, [r2, #0]
   813da:	2301      	movs	r3, #1
   813dc:	4083      	lsls	r3, r0
   813de:	430b      	orrs	r3, r1
   813e0:	6013      	str	r3, [r2, #0]
   813e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   813e6:	4641      	mov	r1, r8
   813e8:	4b2f      	ldr	r3, [pc, #188]	; (814a8 <xTaskCreate+0x1bc>)
   813ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   813ee:	4b2f      	ldr	r3, [pc, #188]	; (814ac <xTaskCreate+0x1c0>)
   813f0:	4798      	blx	r3
	taskEXIT_CRITICAL();
   813f2:	4b2f      	ldr	r3, [pc, #188]	; (814b0 <xTaskCreate+0x1c4>)
   813f4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   813f6:	4b29      	ldr	r3, [pc, #164]	; (8149c <xTaskCreate+0x1b0>)
   813f8:	681b      	ldr	r3, [r3, #0]
   813fa:	2b00      	cmp	r3, #0
   813fc:	d03b      	beq.n	81476 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   813fe:	4b26      	ldr	r3, [pc, #152]	; (81498 <xTaskCreate+0x1ac>)
   81400:	681b      	ldr	r3, [r3, #0]
   81402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81406:	429a      	cmp	r2, r3
   81408:	d239      	bcs.n	8147e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
   8140a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8140e:	4b29      	ldr	r3, [pc, #164]	; (814b4 <xTaskCreate+0x1c8>)
   81410:	601a      	str	r2, [r3, #0]
   81412:	f3bf 8f4f 	dsb	sy
   81416:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   8141a:	2001      	movs	r0, #1
   8141c:	e02c      	b.n	81478 <xTaskCreate+0x18c>
					vPortFree( pxStack );
   8141e:	4638      	mov	r0, r7
   81420:	4b25      	ldr	r3, [pc, #148]	; (814b8 <xTaskCreate+0x1cc>)
   81422:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81424:	f04f 30ff 	mov.w	r0, #4294967295
   81428:	e026      	b.n	81478 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
   8142a:	4b1b      	ldr	r3, [pc, #108]	; (81498 <xTaskCreate+0x1ac>)
   8142c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   8142e:	6813      	ldr	r3, [r2, #0]
   81430:	2b01      	cmp	r3, #1
   81432:	d1ca      	bne.n	813ca <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   81434:	4e1c      	ldr	r6, [pc, #112]	; (814a8 <xTaskCreate+0x1bc>)
   81436:	4630      	mov	r0, r6
   81438:	4d20      	ldr	r5, [pc, #128]	; (814bc <xTaskCreate+0x1d0>)
   8143a:	47a8      	blx	r5
   8143c:	f106 0014 	add.w	r0, r6, #20
   81440:	47a8      	blx	r5
   81442:	f106 0028 	add.w	r0, r6, #40	; 0x28
   81446:	47a8      	blx	r5
   81448:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   8144c:	47a8      	blx	r5
   8144e:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81452:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   81454:	4f1a      	ldr	r7, [pc, #104]	; (814c0 <xTaskCreate+0x1d4>)
   81456:	4638      	mov	r0, r7
   81458:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   8145a:	4e1a      	ldr	r6, [pc, #104]	; (814c4 <xTaskCreate+0x1d8>)
   8145c:	4630      	mov	r0, r6
   8145e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   81460:	4819      	ldr	r0, [pc, #100]	; (814c8 <xTaskCreate+0x1dc>)
   81462:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   81464:	4819      	ldr	r0, [pc, #100]	; (814cc <xTaskCreate+0x1e0>)
   81466:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   81468:	4819      	ldr	r0, [pc, #100]	; (814d0 <xTaskCreate+0x1e4>)
   8146a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   8146c:	4b19      	ldr	r3, [pc, #100]	; (814d4 <xTaskCreate+0x1e8>)
   8146e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81470:	4b19      	ldr	r3, [pc, #100]	; (814d8 <xTaskCreate+0x1ec>)
   81472:	601e      	str	r6, [r3, #0]
   81474:	e7a9      	b.n	813ca <xTaskCreate+0xde>
			xReturn = pdPASS;
   81476:	2001      	movs	r0, #1
	}
   81478:	b003      	add	sp, #12
   8147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   8147e:	2001      	movs	r0, #1
		return xReturn;
   81480:	e7fa      	b.n	81478 <xTaskCreate+0x18c>
   81482:	bf00      	nop
   81484:	0008081d 	.word	0x0008081d
   81488:	00082a49 	.word	0x00082a49
   8148c:	00080585 	.word	0x00080585
   81490:	000805d9 	.word	0x000805d9
   81494:	2007c210 	.word	0x2007c210
   81498:	2007c1a0 	.word	0x2007c1a0
   8149c:	2007c270 	.word	0x2007c270
   814a0:	2007c220 	.word	0x2007c220
   814a4:	2007c224 	.word	0x2007c224
   814a8:	2007c1ac 	.word	0x2007c1ac
   814ac:	000804b1 	.word	0x000804b1
   814b0:	0008061d 	.word	0x0008061d
   814b4:	e000ed04 	.word	0xe000ed04
   814b8:	00080885 	.word	0x00080885
   814bc:	00080495 	.word	0x00080495
   814c0:	2007c228 	.word	0x2007c228
   814c4:	2007c23c 	.word	0x2007c23c
   814c8:	2007c25c 	.word	0x2007c25c
   814cc:	2007c288 	.word	0x2007c288
   814d0:	2007c274 	.word	0x2007c274
   814d4:	2007c1a4 	.word	0x2007c1a4
   814d8:	2007c1a8 	.word	0x2007c1a8
   814dc:	000804ab 	.word	0x000804ab

000814e0 <vTaskStartScheduler>:
{
   814e0:	b510      	push	{r4, lr}
   814e2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   814e4:	4b18      	ldr	r3, [pc, #96]	; (81548 <vTaskStartScheduler+0x68>)
   814e6:	9301      	str	r3, [sp, #4]
   814e8:	2300      	movs	r3, #0
   814ea:	9300      	str	r3, [sp, #0]
   814ec:	2282      	movs	r2, #130	; 0x82
   814ee:	4917      	ldr	r1, [pc, #92]	; (8154c <vTaskStartScheduler+0x6c>)
   814f0:	4817      	ldr	r0, [pc, #92]	; (81550 <vTaskStartScheduler+0x70>)
   814f2:	4c18      	ldr	r4, [pc, #96]	; (81554 <vTaskStartScheduler+0x74>)
   814f4:	47a0      	blx	r4
		if( xReturn == pdPASS )
   814f6:	2801      	cmp	r0, #1
   814f8:	d004      	beq.n	81504 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   814fa:	f1b0 3fff 	cmp.w	r0, #4294967295
   814fe:	d01a      	beq.n	81536 <vTaskStartScheduler+0x56>
}
   81500:	b002      	add	sp, #8
   81502:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   81504:	4b14      	ldr	r3, [pc, #80]	; (81558 <vTaskStartScheduler+0x78>)
   81506:	4798      	blx	r3
	if( xReturn == pdPASS )
   81508:	2801      	cmp	r0, #1
   8150a:	d1f6      	bne.n	814fa <vTaskStartScheduler+0x1a>
   8150c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81510:	f383 8811 	msr	BASEPRI, r3
   81514:	f3bf 8f6f 	isb	sy
   81518:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   8151c:	f04f 32ff 	mov.w	r2, #4294967295
   81520:	4b0e      	ldr	r3, [pc, #56]	; (8155c <vTaskStartScheduler+0x7c>)
   81522:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   81524:	2201      	movs	r2, #1
   81526:	4b0e      	ldr	r3, [pc, #56]	; (81560 <vTaskStartScheduler+0x80>)
   81528:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   8152a:	2200      	movs	r2, #0
   8152c:	4b0d      	ldr	r3, [pc, #52]	; (81564 <vTaskStartScheduler+0x84>)
   8152e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   81530:	4b0d      	ldr	r3, [pc, #52]	; (81568 <vTaskStartScheduler+0x88>)
   81532:	4798      	blx	r3
   81534:	e7e4      	b.n	81500 <vTaskStartScheduler+0x20>
   81536:	f04f 0340 	mov.w	r3, #64	; 0x40
   8153a:	f383 8811 	msr	BASEPRI, r3
   8153e:	f3bf 8f6f 	isb	sy
   81542:	f3bf 8f4f 	dsb	sy
   81546:	e7fe      	b.n	81546 <vTaskStartScheduler+0x66>
   81548:	2007c250 	.word	0x2007c250
   8154c:	00083ad0 	.word	0x00083ad0
   81550:	000811c9 	.word	0x000811c9
   81554:	000812ed 	.word	0x000812ed
   81558:	00081e09 	.word	0x00081e09
   8155c:	2007c254 	.word	0x2007c254
   81560:	2007c270 	.word	0x2007c270
   81564:	2007c29c 	.word	0x2007c29c
   81568:	000806f1 	.word	0x000806f1

0008156c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   8156c:	4a02      	ldr	r2, [pc, #8]	; (81578 <vTaskSuspendAll+0xc>)
   8156e:	6813      	ldr	r3, [r2, #0]
   81570:	3301      	adds	r3, #1
   81572:	6013      	str	r3, [r2, #0]
   81574:	4770      	bx	lr
   81576:	bf00      	nop
   81578:	2007c21c 	.word	0x2007c21c

0008157c <xTaskGetTickCount>:
		xTicks = xTickCount;
   8157c:	4b01      	ldr	r3, [pc, #4]	; (81584 <xTaskGetTickCount+0x8>)
   8157e:	6818      	ldr	r0, [r3, #0]
}
   81580:	4770      	bx	lr
   81582:	bf00      	nop
   81584:	2007c29c 	.word	0x2007c29c

00081588 <xTaskIncrementTick>:
{
   81588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8158c:	4b3d      	ldr	r3, [pc, #244]	; (81684 <xTaskIncrementTick+0xfc>)
   8158e:	681b      	ldr	r3, [r3, #0]
   81590:	2b00      	cmp	r3, #0
   81592:	d169      	bne.n	81668 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   81594:	4b3c      	ldr	r3, [pc, #240]	; (81688 <xTaskIncrementTick+0x100>)
   81596:	681d      	ldr	r5, [r3, #0]
   81598:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   8159a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   8159c:	b9c5      	cbnz	r5, 815d0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
   8159e:	4b3b      	ldr	r3, [pc, #236]	; (8168c <xTaskIncrementTick+0x104>)
   815a0:	681b      	ldr	r3, [r3, #0]
   815a2:	681b      	ldr	r3, [r3, #0]
   815a4:	b143      	cbz	r3, 815b8 <xTaskIncrementTick+0x30>
   815a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   815aa:	f383 8811 	msr	BASEPRI, r3
   815ae:	f3bf 8f6f 	isb	sy
   815b2:	f3bf 8f4f 	dsb	sy
   815b6:	e7fe      	b.n	815b6 <xTaskIncrementTick+0x2e>
   815b8:	4a34      	ldr	r2, [pc, #208]	; (8168c <xTaskIncrementTick+0x104>)
   815ba:	6811      	ldr	r1, [r2, #0]
   815bc:	4b34      	ldr	r3, [pc, #208]	; (81690 <xTaskIncrementTick+0x108>)
   815be:	6818      	ldr	r0, [r3, #0]
   815c0:	6010      	str	r0, [r2, #0]
   815c2:	6019      	str	r1, [r3, #0]
   815c4:	4a33      	ldr	r2, [pc, #204]	; (81694 <xTaskIncrementTick+0x10c>)
   815c6:	6813      	ldr	r3, [r2, #0]
   815c8:	3301      	adds	r3, #1
   815ca:	6013      	str	r3, [r2, #0]
   815cc:	4b32      	ldr	r3, [pc, #200]	; (81698 <xTaskIncrementTick+0x110>)
   815ce:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   815d0:	4b32      	ldr	r3, [pc, #200]	; (8169c <xTaskIncrementTick+0x114>)
   815d2:	681b      	ldr	r3, [r3, #0]
   815d4:	429d      	cmp	r5, r3
   815d6:	d20c      	bcs.n	815f2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
   815d8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   815da:	4b31      	ldr	r3, [pc, #196]	; (816a0 <xTaskIncrementTick+0x118>)
   815dc:	681b      	ldr	r3, [r3, #0]
   815de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815e4:	009b      	lsls	r3, r3, #2
   815e6:	4a2f      	ldr	r2, [pc, #188]	; (816a4 <xTaskIncrementTick+0x11c>)
   815e8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   815ea:	2b02      	cmp	r3, #2
   815ec:	bf28      	it	cs
   815ee:	2401      	movcs	r4, #1
   815f0:	e03f      	b.n	81672 <xTaskIncrementTick+0xea>
   815f2:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   815f4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8168c <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   815f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 816b8 <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
   815fc:	4f2a      	ldr	r7, [pc, #168]	; (816a8 <xTaskIncrementTick+0x120>)
   815fe:	e01f      	b.n	81640 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81600:	f04f 32ff 	mov.w	r2, #4294967295
   81604:	4b25      	ldr	r3, [pc, #148]	; (8169c <xTaskIncrementTick+0x114>)
   81606:	601a      	str	r2, [r3, #0]
					break;
   81608:	e7e7      	b.n	815da <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
   8160a:	4a24      	ldr	r2, [pc, #144]	; (8169c <xTaskIncrementTick+0x114>)
   8160c:	6013      	str	r3, [r2, #0]
						break;
   8160e:	e7e4      	b.n	815da <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   81610:	f106 0018 	add.w	r0, r6, #24
   81614:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   81616:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   81618:	683a      	ldr	r2, [r7, #0]
   8161a:	2301      	movs	r3, #1
   8161c:	4083      	lsls	r3, r0
   8161e:	4313      	orrs	r3, r2
   81620:	603b      	str	r3, [r7, #0]
   81622:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81626:	4651      	mov	r1, sl
   81628:	4b1e      	ldr	r3, [pc, #120]	; (816a4 <xTaskIncrementTick+0x11c>)
   8162a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8162e:	4b1f      	ldr	r3, [pc, #124]	; (816ac <xTaskIncrementTick+0x124>)
   81630:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81632:	4b1b      	ldr	r3, [pc, #108]	; (816a0 <xTaskIncrementTick+0x118>)
   81634:	681b      	ldr	r3, [r3, #0]
   81636:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   81638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   8163a:	429a      	cmp	r2, r3
   8163c:	bf28      	it	cs
   8163e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81640:	f8d9 3000 	ldr.w	r3, [r9]
   81644:	681b      	ldr	r3, [r3, #0]
   81646:	2b00      	cmp	r3, #0
   81648:	d0da      	beq.n	81600 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8164a:	f8d9 3000 	ldr.w	r3, [r9]
   8164e:	68db      	ldr	r3, [r3, #12]
   81650:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   81652:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   81654:	429d      	cmp	r5, r3
   81656:	d3d8      	bcc.n	8160a <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   81658:	f106 0a04 	add.w	sl, r6, #4
   8165c:	4650      	mov	r0, sl
   8165e:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81660:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   81662:	2b00      	cmp	r3, #0
   81664:	d1d4      	bne.n	81610 <xTaskIncrementTick+0x88>
   81666:	e7d6      	b.n	81616 <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
   81668:	4a11      	ldr	r2, [pc, #68]	; (816b0 <xTaskIncrementTick+0x128>)
   8166a:	6813      	ldr	r3, [r2, #0]
   8166c:	3301      	adds	r3, #1
   8166e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   81670:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   81672:	4b10      	ldr	r3, [pc, #64]	; (816b4 <xTaskIncrementTick+0x12c>)
   81674:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   81676:	2b00      	cmp	r3, #0
}
   81678:	bf0c      	ite	eq
   8167a:	4620      	moveq	r0, r4
   8167c:	2001      	movne	r0, #1
   8167e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81682:	bf00      	nop
   81684:	2007c21c 	.word	0x2007c21c
   81688:	2007c29c 	.word	0x2007c29c
   8168c:	2007c1a4 	.word	0x2007c1a4
   81690:	2007c1a8 	.word	0x2007c1a8
   81694:	2007c258 	.word	0x2007c258
   81698:	0008119d 	.word	0x0008119d
   8169c:	2007c254 	.word	0x2007c254
   816a0:	2007c1a0 	.word	0x2007c1a0
   816a4:	2007c1ac 	.word	0x2007c1ac
   816a8:	2007c224 	.word	0x2007c224
   816ac:	000804b1 	.word	0x000804b1
   816b0:	2007c218 	.word	0x2007c218
   816b4:	2007c2a0 	.word	0x2007c2a0
   816b8:	000804fd 	.word	0x000804fd

000816bc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   816bc:	4b35      	ldr	r3, [pc, #212]	; (81794 <xTaskResumeAll+0xd8>)
   816be:	681b      	ldr	r3, [r3, #0]
   816c0:	b943      	cbnz	r3, 816d4 <xTaskResumeAll+0x18>
   816c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   816c6:	f383 8811 	msr	BASEPRI, r3
   816ca:	f3bf 8f6f 	isb	sy
   816ce:	f3bf 8f4f 	dsb	sy
   816d2:	e7fe      	b.n	816d2 <xTaskResumeAll+0x16>
{
   816d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
   816d8:	4b2f      	ldr	r3, [pc, #188]	; (81798 <xTaskResumeAll+0xdc>)
   816da:	4798      	blx	r3
		--uxSchedulerSuspended;
   816dc:	4b2d      	ldr	r3, [pc, #180]	; (81794 <xTaskResumeAll+0xd8>)
   816de:	681a      	ldr	r2, [r3, #0]
   816e0:	3a01      	subs	r2, #1
   816e2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   816e4:	681b      	ldr	r3, [r3, #0]
   816e6:	2b00      	cmp	r3, #0
   816e8:	d150      	bne.n	8178c <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   816ea:	4b2c      	ldr	r3, [pc, #176]	; (8179c <xTaskResumeAll+0xe0>)
   816ec:	681b      	ldr	r3, [r3, #0]
   816ee:	b92b      	cbnz	r3, 816fc <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
   816f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   816f2:	4b2b      	ldr	r3, [pc, #172]	; (817a0 <xTaskResumeAll+0xe4>)
   816f4:	4798      	blx	r3
}
   816f6:	4620      	mov	r0, r4
   816f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816fc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   816fe:	4f29      	ldr	r7, [pc, #164]	; (817a4 <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   81700:	4e29      	ldr	r6, [pc, #164]	; (817a8 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
   81702:	4d2a      	ldr	r5, [pc, #168]	; (817ac <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   81704:	683b      	ldr	r3, [r7, #0]
   81706:	b303      	cbz	r3, 8174a <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   81708:	68fb      	ldr	r3, [r7, #12]
   8170a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8170c:	f104 0018 	add.w	r0, r4, #24
   81710:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   81712:	f104 0804 	add.w	r8, r4, #4
   81716:	4640      	mov	r0, r8
   81718:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   8171a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8171c:	682a      	ldr	r2, [r5, #0]
   8171e:	2301      	movs	r3, #1
   81720:	4083      	lsls	r3, r0
   81722:	4313      	orrs	r3, r2
   81724:	602b      	str	r3, [r5, #0]
   81726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8172a:	4641      	mov	r1, r8
   8172c:	4b20      	ldr	r3, [pc, #128]	; (817b0 <xTaskResumeAll+0xf4>)
   8172e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81732:	4b20      	ldr	r3, [pc, #128]	; (817b4 <xTaskResumeAll+0xf8>)
   81734:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81736:	4b20      	ldr	r3, [pc, #128]	; (817b8 <xTaskResumeAll+0xfc>)
   81738:	681b      	ldr	r3, [r3, #0]
   8173a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8173e:	429a      	cmp	r2, r3
   81740:	d3e0      	bcc.n	81704 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
   81742:	2201      	movs	r2, #1
   81744:	4b1d      	ldr	r3, [pc, #116]	; (817bc <xTaskResumeAll+0x100>)
   81746:	601a      	str	r2, [r3, #0]
   81748:	e7dc      	b.n	81704 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
   8174a:	b10c      	cbz	r4, 81750 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
   8174c:	4b1c      	ldr	r3, [pc, #112]	; (817c0 <xTaskResumeAll+0x104>)
   8174e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   81750:	4b1c      	ldr	r3, [pc, #112]	; (817c4 <xTaskResumeAll+0x108>)
   81752:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   81754:	b16c      	cbz	r4, 81772 <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
   81756:	4f1c      	ldr	r7, [pc, #112]	; (817c8 <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   81758:	4e18      	ldr	r6, [pc, #96]	; (817bc <xTaskResumeAll+0x100>)
   8175a:	2501      	movs	r5, #1
   8175c:	e001      	b.n	81762 <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   8175e:	3c01      	subs	r4, #1
   81760:	d004      	beq.n	8176c <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   81762:	47b8      	blx	r7
   81764:	2800      	cmp	r0, #0
   81766:	d0fa      	beq.n	8175e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
   81768:	6035      	str	r5, [r6, #0]
   8176a:	e7f8      	b.n	8175e <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
   8176c:	2200      	movs	r2, #0
   8176e:	4b15      	ldr	r3, [pc, #84]	; (817c4 <xTaskResumeAll+0x108>)
   81770:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   81772:	4b12      	ldr	r3, [pc, #72]	; (817bc <xTaskResumeAll+0x100>)
   81774:	681b      	ldr	r3, [r3, #0]
   81776:	b15b      	cbz	r3, 81790 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
   81778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8177c:	4b13      	ldr	r3, [pc, #76]	; (817cc <xTaskResumeAll+0x110>)
   8177e:	601a      	str	r2, [r3, #0]
   81780:	f3bf 8f4f 	dsb	sy
   81784:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   81788:	2401      	movs	r4, #1
   8178a:	e7b2      	b.n	816f2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
   8178c:	2400      	movs	r4, #0
   8178e:	e7b0      	b.n	816f2 <xTaskResumeAll+0x36>
   81790:	2400      	movs	r4, #0
   81792:	e7ae      	b.n	816f2 <xTaskResumeAll+0x36>
   81794:	2007c21c 	.word	0x2007c21c
   81798:	000805d9 	.word	0x000805d9
   8179c:	2007c210 	.word	0x2007c210
   817a0:	0008061d 	.word	0x0008061d
   817a4:	2007c25c 	.word	0x2007c25c
   817a8:	000804fd 	.word	0x000804fd
   817ac:	2007c224 	.word	0x2007c224
   817b0:	2007c1ac 	.word	0x2007c1ac
   817b4:	000804b1 	.word	0x000804b1
   817b8:	2007c1a0 	.word	0x2007c1a0
   817bc:	2007c2a0 	.word	0x2007c2a0
   817c0:	0008119d 	.word	0x0008119d
   817c4:	2007c218 	.word	0x2007c218
   817c8:	00081589 	.word	0x00081589
   817cc:	e000ed04 	.word	0xe000ed04

000817d0 <vTaskDelayUntil>:
	{
   817d0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   817d2:	b150      	cbz	r0, 817ea <vTaskDelayUntil+0x1a>
   817d4:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   817d6:	b989      	cbnz	r1, 817fc <vTaskDelayUntil+0x2c>
   817d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   817dc:	f383 8811 	msr	BASEPRI, r3
   817e0:	f3bf 8f6f 	isb	sy
   817e4:	f3bf 8f4f 	dsb	sy
   817e8:	e7fe      	b.n	817e8 <vTaskDelayUntil+0x18>
   817ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   817ee:	f383 8811 	msr	BASEPRI, r3
   817f2:	f3bf 8f6f 	isb	sy
   817f6:	f3bf 8f4f 	dsb	sy
   817fa:	e7fe      	b.n	817fa <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
   817fc:	4b19      	ldr	r3, [pc, #100]	; (81864 <vTaskDelayUntil+0x94>)
   817fe:	681b      	ldr	r3, [r3, #0]
   81800:	b143      	cbz	r3, 81814 <vTaskDelayUntil+0x44>
   81802:	f04f 0340 	mov.w	r3, #64	; 0x40
   81806:	f383 8811 	msr	BASEPRI, r3
   8180a:	f3bf 8f6f 	isb	sy
   8180e:	f3bf 8f4f 	dsb	sy
   81812:	e7fe      	b.n	81812 <vTaskDelayUntil+0x42>
   81814:	460c      	mov	r4, r1
		vTaskSuspendAll();
   81816:	4b14      	ldr	r3, [pc, #80]	; (81868 <vTaskDelayUntil+0x98>)
   81818:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
   8181a:	4b14      	ldr	r3, [pc, #80]	; (8186c <vTaskDelayUntil+0x9c>)
   8181c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8181e:	682a      	ldr	r2, [r5, #0]
   81820:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
   81822:	4290      	cmp	r0, r2
   81824:	d214      	bcs.n	81850 <vTaskDelayUntil+0x80>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   81826:	42a2      	cmp	r2, r4
   81828:	d916      	bls.n	81858 <vTaskDelayUntil+0x88>
			*pxPreviousWakeTime = xTimeToWake;
   8182a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   8182c:	42a0      	cmp	r0, r4
   8182e:	d203      	bcs.n	81838 <vTaskDelayUntil+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   81830:	2100      	movs	r1, #0
   81832:	1a20      	subs	r0, r4, r0
   81834:	4b0e      	ldr	r3, [pc, #56]	; (81870 <vTaskDelayUntil+0xa0>)
   81836:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
   81838:	4b0e      	ldr	r3, [pc, #56]	; (81874 <vTaskDelayUntil+0xa4>)
   8183a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   8183c:	b980      	cbnz	r0, 81860 <vTaskDelayUntil+0x90>
			portYIELD_WITHIN_API();
   8183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81842:	4b0d      	ldr	r3, [pc, #52]	; (81878 <vTaskDelayUntil+0xa8>)
   81844:	601a      	str	r2, [r3, #0]
   81846:	f3bf 8f4f 	dsb	sy
   8184a:	f3bf 8f6f 	isb	sy
	}
   8184e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   81850:	42a2      	cmp	r2, r4
   81852:	d803      	bhi.n	8185c <vTaskDelayUntil+0x8c>
   81854:	42a0      	cmp	r0, r4
   81856:	d301      	bcc.n	8185c <vTaskDelayUntil+0x8c>
			*pxPreviousWakeTime = xTimeToWake;
   81858:	602c      	str	r4, [r5, #0]
   8185a:	e7ed      	b.n	81838 <vTaskDelayUntil+0x68>
   8185c:	602c      	str	r4, [r5, #0]
   8185e:	e7e7      	b.n	81830 <vTaskDelayUntil+0x60>
   81860:	bd38      	pop	{r3, r4, r5, pc}
   81862:	bf00      	nop
   81864:	2007c21c 	.word	0x2007c21c
   81868:	0008156d 	.word	0x0008156d
   8186c:	2007c29c 	.word	0x2007c29c
   81870:	00081249 	.word	0x00081249
   81874:	000816bd 	.word	0x000816bd
   81878:	e000ed04 	.word	0xe000ed04

0008187c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   8187c:	4b1f      	ldr	r3, [pc, #124]	; (818fc <vTaskSwitchContext+0x80>)
   8187e:	681b      	ldr	r3, [r3, #0]
   81880:	b9c3      	cbnz	r3, 818b4 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
   81882:	2200      	movs	r2, #0
   81884:	4b1e      	ldr	r3, [pc, #120]	; (81900 <vTaskSwitchContext+0x84>)
   81886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81888:	4b1e      	ldr	r3, [pc, #120]	; (81904 <vTaskSwitchContext+0x88>)
   8188a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   8188c:	fab3 f383 	clz	r3, r3
   81890:	b2db      	uxtb	r3, r3
   81892:	f1c3 031f 	rsb	r3, r3, #31
   81896:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   8189a:	0092      	lsls	r2, r2, #2
   8189c:	491a      	ldr	r1, [pc, #104]	; (81908 <vTaskSwitchContext+0x8c>)
   8189e:	588a      	ldr	r2, [r1, r2]
   818a0:	b962      	cbnz	r2, 818bc <vTaskSwitchContext+0x40>
	__asm volatile
   818a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   818a6:	f383 8811 	msr	BASEPRI, r3
   818aa:	f3bf 8f6f 	isb	sy
   818ae:	f3bf 8f4f 	dsb	sy
   818b2:	e7fe      	b.n	818b2 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
   818b4:	2201      	movs	r2, #1
   818b6:	4b12      	ldr	r3, [pc, #72]	; (81900 <vTaskSwitchContext+0x84>)
   818b8:	601a      	str	r2, [r3, #0]
   818ba:	4770      	bx	lr
{
   818bc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   818be:	4a12      	ldr	r2, [pc, #72]	; (81908 <vTaskSwitchContext+0x8c>)
   818c0:	0099      	lsls	r1, r3, #2
   818c2:	18c8      	adds	r0, r1, r3
   818c4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   818c8:	6844      	ldr	r4, [r0, #4]
   818ca:	6864      	ldr	r4, [r4, #4]
   818cc:	6044      	str	r4, [r0, #4]
   818ce:	4419      	add	r1, r3
   818d0:	4602      	mov	r2, r0
   818d2:	3208      	adds	r2, #8
   818d4:	4294      	cmp	r4, r2
   818d6:	d00a      	beq.n	818ee <vTaskSwitchContext+0x72>
   818d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818dc:	4a0a      	ldr	r2, [pc, #40]	; (81908 <vTaskSwitchContext+0x8c>)
   818de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   818e2:	685b      	ldr	r3, [r3, #4]
   818e4:	68da      	ldr	r2, [r3, #12]
   818e6:	4b09      	ldr	r3, [pc, #36]	; (8190c <vTaskSwitchContext+0x90>)
   818e8:	601a      	str	r2, [r3, #0]
}
   818ea:	bc10      	pop	{r4}
   818ec:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   818ee:	6860      	ldr	r0, [r4, #4]
   818f0:	4a05      	ldr	r2, [pc, #20]	; (81908 <vTaskSwitchContext+0x8c>)
   818f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   818f6:	6050      	str	r0, [r2, #4]
   818f8:	e7ee      	b.n	818d8 <vTaskSwitchContext+0x5c>
   818fa:	bf00      	nop
   818fc:	2007c21c 	.word	0x2007c21c
   81900:	2007c2a0 	.word	0x2007c2a0
   81904:	2007c224 	.word	0x2007c224
   81908:	2007c1ac 	.word	0x2007c1ac
   8190c:	2007c1a0 	.word	0x2007c1a0

00081910 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   81910:	b940      	cbnz	r0, 81924 <vTaskPlaceOnEventList+0x14>
   81912:	f04f 0340 	mov.w	r3, #64	; 0x40
   81916:	f383 8811 	msr	BASEPRI, r3
   8191a:	f3bf 8f6f 	isb	sy
   8191e:	f3bf 8f4f 	dsb	sy
   81922:	e7fe      	b.n	81922 <vTaskPlaceOnEventList+0x12>
{
   81924:	b510      	push	{r4, lr}
   81926:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81928:	4b04      	ldr	r3, [pc, #16]	; (8193c <vTaskPlaceOnEventList+0x2c>)
   8192a:	6819      	ldr	r1, [r3, #0]
   8192c:	3118      	adds	r1, #24
   8192e:	4b04      	ldr	r3, [pc, #16]	; (81940 <vTaskPlaceOnEventList+0x30>)
   81930:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   81932:	2101      	movs	r1, #1
   81934:	4620      	mov	r0, r4
   81936:	4b03      	ldr	r3, [pc, #12]	; (81944 <vTaskPlaceOnEventList+0x34>)
   81938:	4798      	blx	r3
   8193a:	bd10      	pop	{r4, pc}
   8193c:	2007c1a0 	.word	0x2007c1a0
   81940:	000804c9 	.word	0x000804c9
   81944:	00081249 	.word	0x00081249

00081948 <vTaskPlaceOnEventListRestricted>:
	{
   81948:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   8194a:	b178      	cbz	r0, 8196c <vTaskPlaceOnEventListRestricted+0x24>
   8194c:	4614      	mov	r4, r2
   8194e:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81950:	4b0b      	ldr	r3, [pc, #44]	; (81980 <vTaskPlaceOnEventListRestricted+0x38>)
   81952:	6819      	ldr	r1, [r3, #0]
   81954:	3118      	adds	r1, #24
   81956:	4b0b      	ldr	r3, [pc, #44]	; (81984 <vTaskPlaceOnEventListRestricted+0x3c>)
   81958:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   8195a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   8195c:	4621      	mov	r1, r4
   8195e:	bf0c      	ite	eq
   81960:	4628      	moveq	r0, r5
   81962:	f04f 30ff 	movne.w	r0, #4294967295
   81966:	4b08      	ldr	r3, [pc, #32]	; (81988 <vTaskPlaceOnEventListRestricted+0x40>)
   81968:	4798      	blx	r3
   8196a:	bd38      	pop	{r3, r4, r5, pc}
   8196c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81970:	f383 8811 	msr	BASEPRI, r3
   81974:	f3bf 8f6f 	isb	sy
   81978:	f3bf 8f4f 	dsb	sy
   8197c:	e7fe      	b.n	8197c <vTaskPlaceOnEventListRestricted+0x34>
   8197e:	bf00      	nop
   81980:	2007c1a0 	.word	0x2007c1a0
   81984:	000804b1 	.word	0x000804b1
   81988:	00081249 	.word	0x00081249

0008198c <xTaskRemoveFromEventList>:
{
   8198c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8198e:	68c3      	ldr	r3, [r0, #12]
   81990:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81992:	b32c      	cbz	r4, 819e0 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81994:	f104 0518 	add.w	r5, r4, #24
   81998:	4628      	mov	r0, r5
   8199a:	4b18      	ldr	r3, [pc, #96]	; (819fc <xTaskRemoveFromEventList+0x70>)
   8199c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8199e:	4b18      	ldr	r3, [pc, #96]	; (81a00 <xTaskRemoveFromEventList+0x74>)
   819a0:	681b      	ldr	r3, [r3, #0]
   819a2:	bb33      	cbnz	r3, 819f2 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   819a4:	1d25      	adds	r5, r4, #4
   819a6:	4628      	mov	r0, r5
   819a8:	4b14      	ldr	r3, [pc, #80]	; (819fc <xTaskRemoveFromEventList+0x70>)
   819aa:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   819ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   819ae:	4a15      	ldr	r2, [pc, #84]	; (81a04 <xTaskRemoveFromEventList+0x78>)
   819b0:	6811      	ldr	r1, [r2, #0]
   819b2:	2301      	movs	r3, #1
   819b4:	4083      	lsls	r3, r0
   819b6:	430b      	orrs	r3, r1
   819b8:	6013      	str	r3, [r2, #0]
   819ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   819be:	4629      	mov	r1, r5
   819c0:	4b11      	ldr	r3, [pc, #68]	; (81a08 <xTaskRemoveFromEventList+0x7c>)
   819c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   819c6:	4b11      	ldr	r3, [pc, #68]	; (81a0c <xTaskRemoveFromEventList+0x80>)
   819c8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   819ca:	4b11      	ldr	r3, [pc, #68]	; (81a10 <xTaskRemoveFromEventList+0x84>)
   819cc:	681b      	ldr	r3, [r3, #0]
   819ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   819d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   819d2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   819d4:	bf83      	ittte	hi
   819d6:	2001      	movhi	r0, #1
   819d8:	4b0e      	ldrhi	r3, [pc, #56]	; (81a14 <xTaskRemoveFromEventList+0x88>)
   819da:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   819dc:	2000      	movls	r0, #0
}
   819de:	bd38      	pop	{r3, r4, r5, pc}
   819e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   819e4:	f383 8811 	msr	BASEPRI, r3
   819e8:	f3bf 8f6f 	isb	sy
   819ec:	f3bf 8f4f 	dsb	sy
   819f0:	e7fe      	b.n	819f0 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   819f2:	4629      	mov	r1, r5
   819f4:	4808      	ldr	r0, [pc, #32]	; (81a18 <xTaskRemoveFromEventList+0x8c>)
   819f6:	4b05      	ldr	r3, [pc, #20]	; (81a0c <xTaskRemoveFromEventList+0x80>)
   819f8:	4798      	blx	r3
   819fa:	e7e6      	b.n	819ca <xTaskRemoveFromEventList+0x3e>
   819fc:	000804fd 	.word	0x000804fd
   81a00:	2007c21c 	.word	0x2007c21c
   81a04:	2007c224 	.word	0x2007c224
   81a08:	2007c1ac 	.word	0x2007c1ac
   81a0c:	000804b1 	.word	0x000804b1
   81a10:	2007c1a0 	.word	0x2007c1a0
   81a14:	2007c2a0 	.word	0x2007c2a0
   81a18:	2007c25c 	.word	0x2007c25c

00081a1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81a1c:	4b03      	ldr	r3, [pc, #12]	; (81a2c <vTaskInternalSetTimeOutState+0x10>)
   81a1e:	681b      	ldr	r3, [r3, #0]
   81a20:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81a22:	4b03      	ldr	r3, [pc, #12]	; (81a30 <vTaskInternalSetTimeOutState+0x14>)
   81a24:	681b      	ldr	r3, [r3, #0]
   81a26:	6043      	str	r3, [r0, #4]
   81a28:	4770      	bx	lr
   81a2a:	bf00      	nop
   81a2c:	2007c258 	.word	0x2007c258
   81a30:	2007c29c 	.word	0x2007c29c

00081a34 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   81a34:	b1e8      	cbz	r0, 81a72 <xTaskCheckForTimeOut+0x3e>
{
   81a36:	b570      	push	{r4, r5, r6, lr}
   81a38:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
   81a3a:	b319      	cbz	r1, 81a84 <xTaskCheckForTimeOut+0x50>
   81a3c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
   81a3e:	4b1b      	ldr	r3, [pc, #108]	; (81aac <xTaskCheckForTimeOut+0x78>)
   81a40:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   81a42:	4b1b      	ldr	r3, [pc, #108]	; (81ab0 <xTaskCheckForTimeOut+0x7c>)
   81a44:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81a46:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   81a48:	6823      	ldr	r3, [r4, #0]
   81a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
   81a4e:	d029      	beq.n	81aa4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   81a50:	4818      	ldr	r0, [pc, #96]	; (81ab4 <xTaskCheckForTimeOut+0x80>)
   81a52:	6800      	ldr	r0, [r0, #0]
   81a54:	682e      	ldr	r6, [r5, #0]
   81a56:	4286      	cmp	r6, r0
   81a58:	d001      	beq.n	81a5e <xTaskCheckForTimeOut+0x2a>
   81a5a:	428a      	cmp	r2, r1
   81a5c:	d224      	bcs.n	81aa8 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81a5e:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   81a60:	429a      	cmp	r2, r3
   81a62:	d318      	bcc.n	81a96 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
   81a64:	2300      	movs	r3, #0
   81a66:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   81a68:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81a6a:	4b13      	ldr	r3, [pc, #76]	; (81ab8 <xTaskCheckForTimeOut+0x84>)
   81a6c:	4798      	blx	r3
}
   81a6e:	4620      	mov	r0, r4
   81a70:	bd70      	pop	{r4, r5, r6, pc}
   81a72:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a76:	f383 8811 	msr	BASEPRI, r3
   81a7a:	f3bf 8f6f 	isb	sy
   81a7e:	f3bf 8f4f 	dsb	sy
   81a82:	e7fe      	b.n	81a82 <xTaskCheckForTimeOut+0x4e>
   81a84:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a88:	f383 8811 	msr	BASEPRI, r3
   81a8c:	f3bf 8f6f 	isb	sy
   81a90:	f3bf 8f4f 	dsb	sy
   81a94:	e7fe      	b.n	81a94 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   81a96:	1a9b      	subs	r3, r3, r2
   81a98:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   81a9a:	4628      	mov	r0, r5
   81a9c:	4b07      	ldr	r3, [pc, #28]	; (81abc <xTaskCheckForTimeOut+0x88>)
   81a9e:	4798      	blx	r3
			xReturn = pdFALSE;
   81aa0:	2400      	movs	r4, #0
   81aa2:	e7e2      	b.n	81a6a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   81aa4:	2400      	movs	r4, #0
   81aa6:	e7e0      	b.n	81a6a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   81aa8:	2401      	movs	r4, #1
   81aaa:	e7de      	b.n	81a6a <xTaskCheckForTimeOut+0x36>
   81aac:	000805d9 	.word	0x000805d9
   81ab0:	2007c29c 	.word	0x2007c29c
   81ab4:	2007c258 	.word	0x2007c258
   81ab8:	0008061d 	.word	0x0008061d
   81abc:	00081a1d 	.word	0x00081a1d

00081ac0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   81ac0:	2201      	movs	r2, #1
   81ac2:	4b01      	ldr	r3, [pc, #4]	; (81ac8 <vTaskMissedYield+0x8>)
   81ac4:	601a      	str	r2, [r3, #0]
   81ac6:	4770      	bx	lr
   81ac8:	2007c2a0 	.word	0x2007c2a0

00081acc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   81acc:	4b05      	ldr	r3, [pc, #20]	; (81ae4 <xTaskGetSchedulerState+0x18>)
   81ace:	681b      	ldr	r3, [r3, #0]
   81ad0:	b133      	cbz	r3, 81ae0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81ad2:	4b05      	ldr	r3, [pc, #20]	; (81ae8 <xTaskGetSchedulerState+0x1c>)
   81ad4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   81ad6:	2b00      	cmp	r3, #0
   81ad8:	bf0c      	ite	eq
   81ada:	2002      	moveq	r0, #2
   81adc:	2000      	movne	r0, #0
   81ade:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81ae0:	2001      	movs	r0, #1
	}
   81ae2:	4770      	bx	lr
   81ae4:	2007c270 	.word	0x2007c270
   81ae8:	2007c21c 	.word	0x2007c21c

00081aec <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
   81aec:	2800      	cmp	r0, #0
   81aee:	d050      	beq.n	81b92 <xTaskPriorityInherit+0xa6>
	{
   81af0:	b538      	push	{r3, r4, r5, lr}
   81af2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   81af4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81af6:	4928      	ldr	r1, [pc, #160]	; (81b98 <xTaskPriorityInherit+0xac>)
   81af8:	6809      	ldr	r1, [r1, #0]
   81afa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81afc:	428a      	cmp	r2, r1
   81afe:	d23f      	bcs.n	81b80 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   81b00:	6981      	ldr	r1, [r0, #24]
   81b02:	2900      	cmp	r1, #0
   81b04:	db05      	blt.n	81b12 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81b06:	4924      	ldr	r1, [pc, #144]	; (81b98 <xTaskPriorityInherit+0xac>)
   81b08:	6809      	ldr	r1, [r1, #0]
   81b0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81b0c:	f1c1 0105 	rsb	r1, r1, #5
   81b10:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   81b12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81b16:	4921      	ldr	r1, [pc, #132]	; (81b9c <xTaskPriorityInherit+0xb0>)
   81b18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   81b1c:	6961      	ldr	r1, [r4, #20]
   81b1e:	4291      	cmp	r1, r2
   81b20:	d005      	beq.n	81b2e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   81b22:	4a1d      	ldr	r2, [pc, #116]	; (81b98 <xTaskPriorityInherit+0xac>)
   81b24:	6812      	ldr	r2, [r2, #0]
   81b26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81b28:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
   81b2a:	2001      	movs	r0, #1
   81b2c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81b2e:	1d25      	adds	r5, r4, #4
   81b30:	4628      	mov	r0, r5
   81b32:	4b1b      	ldr	r3, [pc, #108]	; (81ba0 <xTaskPriorityInherit+0xb4>)
   81b34:	4798      	blx	r3
   81b36:	b970      	cbnz	r0, 81b56 <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
   81b38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81b3a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   81b3e:	009b      	lsls	r3, r3, #2
   81b40:	4916      	ldr	r1, [pc, #88]	; (81b9c <xTaskPriorityInherit+0xb0>)
   81b42:	58cb      	ldr	r3, [r1, r3]
   81b44:	b93b      	cbnz	r3, 81b56 <xTaskPriorityInherit+0x6a>
   81b46:	4817      	ldr	r0, [pc, #92]	; (81ba4 <xTaskPriorityInherit+0xb8>)
   81b48:	6803      	ldr	r3, [r0, #0]
   81b4a:	2101      	movs	r1, #1
   81b4c:	fa01 f202 	lsl.w	r2, r1, r2
   81b50:	ea23 0202 	bic.w	r2, r3, r2
   81b54:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   81b56:	4b10      	ldr	r3, [pc, #64]	; (81b98 <xTaskPriorityInherit+0xac>)
   81b58:	681b      	ldr	r3, [r3, #0]
   81b5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81b5c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   81b5e:	4a11      	ldr	r2, [pc, #68]	; (81ba4 <xTaskPriorityInherit+0xb8>)
   81b60:	6811      	ldr	r1, [r2, #0]
   81b62:	2401      	movs	r4, #1
   81b64:	fa04 f300 	lsl.w	r3, r4, r0
   81b68:	430b      	orrs	r3, r1
   81b6a:	6013      	str	r3, [r2, #0]
   81b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b70:	4629      	mov	r1, r5
   81b72:	4b0a      	ldr	r3, [pc, #40]	; (81b9c <xTaskPriorityInherit+0xb0>)
   81b74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81b78:	4b0b      	ldr	r3, [pc, #44]	; (81ba8 <xTaskPriorityInherit+0xbc>)
   81b7a:	4798      	blx	r3
				xReturn = pdTRUE;
   81b7c:	4620      	mov	r0, r4
   81b7e:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   81b80:	4a05      	ldr	r2, [pc, #20]	; (81b98 <xTaskPriorityInherit+0xac>)
   81b82:	6812      	ldr	r2, [r2, #0]
   81b84:	6d00      	ldr	r0, [r0, #80]	; 0x50
   81b86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   81b88:	4298      	cmp	r0, r3
   81b8a:	bf2c      	ite	cs
   81b8c:	2000      	movcs	r0, #0
   81b8e:	2001      	movcc	r0, #1
   81b90:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   81b92:	2000      	movs	r0, #0
		return xReturn;
   81b94:	4770      	bx	lr
   81b96:	bf00      	nop
   81b98:	2007c1a0 	.word	0x2007c1a0
   81b9c:	2007c1ac 	.word	0x2007c1ac
   81ba0:	000804fd 	.word	0x000804fd
   81ba4:	2007c224 	.word	0x2007c224
   81ba8:	000804b1 	.word	0x000804b1

00081bac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   81bac:	2800      	cmp	r0, #0
   81bae:	d04a      	beq.n	81c46 <xTaskPriorityDisinherit+0x9a>
	{
   81bb0:	b538      	push	{r3, r4, r5, lr}
   81bb2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   81bb4:	4a27      	ldr	r2, [pc, #156]	; (81c54 <xTaskPriorityDisinherit+0xa8>)
   81bb6:	6812      	ldr	r2, [r2, #0]
   81bb8:	4290      	cmp	r0, r2
   81bba:	d008      	beq.n	81bce <xTaskPriorityDisinherit+0x22>
   81bbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   81bc0:	f383 8811 	msr	BASEPRI, r3
   81bc4:	f3bf 8f6f 	isb	sy
   81bc8:	f3bf 8f4f 	dsb	sy
   81bcc:	e7fe      	b.n	81bcc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
   81bce:	6d42      	ldr	r2, [r0, #84]	; 0x54
   81bd0:	b942      	cbnz	r2, 81be4 <xTaskPriorityDisinherit+0x38>
   81bd2:	f04f 0340 	mov.w	r3, #64	; 0x40
   81bd6:	f383 8811 	msr	BASEPRI, r3
   81bda:	f3bf 8f6f 	isb	sy
   81bde:	f3bf 8f4f 	dsb	sy
   81be2:	e7fe      	b.n	81be2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
   81be4:	3a01      	subs	r2, #1
   81be6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81be8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81bea:	6d21      	ldr	r1, [r4, #80]	; 0x50
   81bec:	4288      	cmp	r0, r1
   81bee:	d02c      	beq.n	81c4a <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   81bf0:	2a00      	cmp	r2, #0
   81bf2:	d12c      	bne.n	81c4e <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81bf4:	1d25      	adds	r5, r4, #4
   81bf6:	4628      	mov	r0, r5
   81bf8:	4b17      	ldr	r3, [pc, #92]	; (81c58 <xTaskPriorityDisinherit+0xac>)
   81bfa:	4798      	blx	r3
   81bfc:	b968      	cbnz	r0, 81c1a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81bfe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81c00:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81c04:	009b      	lsls	r3, r3, #2
   81c06:	4a15      	ldr	r2, [pc, #84]	; (81c5c <xTaskPriorityDisinherit+0xb0>)
   81c08:	58d3      	ldr	r3, [r2, r3]
   81c0a:	b933      	cbnz	r3, 81c1a <xTaskPriorityDisinherit+0x6e>
   81c0c:	4814      	ldr	r0, [pc, #80]	; (81c60 <xTaskPriorityDisinherit+0xb4>)
   81c0e:	6803      	ldr	r3, [r0, #0]
   81c10:	2201      	movs	r2, #1
   81c12:	408a      	lsls	r2, r1
   81c14:	ea23 0302 	bic.w	r3, r3, r2
   81c18:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   81c1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   81c1c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81c1e:	f1c0 0305 	rsb	r3, r0, #5
   81c22:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   81c24:	4a0e      	ldr	r2, [pc, #56]	; (81c60 <xTaskPriorityDisinherit+0xb4>)
   81c26:	6811      	ldr	r1, [r2, #0]
   81c28:	2401      	movs	r4, #1
   81c2a:	fa04 f300 	lsl.w	r3, r4, r0
   81c2e:	430b      	orrs	r3, r1
   81c30:	6013      	str	r3, [r2, #0]
   81c32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c36:	4629      	mov	r1, r5
   81c38:	4b08      	ldr	r3, [pc, #32]	; (81c5c <xTaskPriorityDisinherit+0xb0>)
   81c3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81c3e:	4b09      	ldr	r3, [pc, #36]	; (81c64 <xTaskPriorityDisinherit+0xb8>)
   81c40:	4798      	blx	r3
					xReturn = pdTRUE;
   81c42:	4620      	mov	r0, r4
   81c44:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   81c46:	2000      	movs	r0, #0
   81c48:	4770      	bx	lr
   81c4a:	2000      	movs	r0, #0
   81c4c:	bd38      	pop	{r3, r4, r5, pc}
   81c4e:	2000      	movs	r0, #0
	}
   81c50:	bd38      	pop	{r3, r4, r5, pc}
   81c52:	bf00      	nop
   81c54:	2007c1a0 	.word	0x2007c1a0
   81c58:	000804fd 	.word	0x000804fd
   81c5c:	2007c1ac 	.word	0x2007c1ac
   81c60:	2007c224 	.word	0x2007c224
   81c64:	000804b1 	.word	0x000804b1

00081c68 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
   81c68:	2800      	cmp	r0, #0
   81c6a:	d055      	beq.n	81d18 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
   81c6c:	b538      	push	{r3, r4, r5, lr}
   81c6e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
   81c70:	6d40      	ldr	r0, [r0, #84]	; 0x54
   81c72:	b940      	cbnz	r0, 81c86 <vTaskPriorityDisinheritAfterTimeout+0x1e>
   81c74:	f04f 0340 	mov.w	r3, #64	; 0x40
   81c78:	f383 8811 	msr	BASEPRI, r3
   81c7c:	f3bf 8f6f 	isb	sy
   81c80:	f3bf 8f4f 	dsb	sy
   81c84:	e7fe      	b.n	81c84 <vTaskPriorityDisinheritAfterTimeout+0x1c>
   81c86:	6d22      	ldr	r2, [r4, #80]	; 0x50
   81c88:	428a      	cmp	r2, r1
   81c8a:	bf38      	it	cc
   81c8c:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   81c8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81c90:	4291      	cmp	r1, r2
   81c92:	d001      	beq.n	81c98 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   81c94:	2801      	cmp	r0, #1
   81c96:	d000      	beq.n	81c9a <vTaskPriorityDisinheritAfterTimeout+0x32>
   81c98:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
   81c9a:	4820      	ldr	r0, [pc, #128]	; (81d1c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
   81c9c:	6800      	ldr	r0, [r0, #0]
   81c9e:	4284      	cmp	r4, r0
   81ca0:	d108      	bne.n	81cb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
   81ca2:	f04f 0340 	mov.w	r3, #64	; 0x40
   81ca6:	f383 8811 	msr	BASEPRI, r3
   81caa:	f3bf 8f6f 	isb	sy
   81cae:	f3bf 8f4f 	dsb	sy
   81cb2:	e7fe      	b.n	81cb2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
   81cb4:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   81cb6:	69a0      	ldr	r0, [r4, #24]
   81cb8:	2800      	cmp	r0, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81cba:	bfa4      	itt	ge
   81cbc:	f1c2 0205 	rsbge	r2, r2, #5
   81cc0:	61a2      	strge	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   81cc2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81cc6:	4a16      	ldr	r2, [pc, #88]	; (81d20 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   81cc8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   81ccc:	6962      	ldr	r2, [r4, #20]
   81cce:	428a      	cmp	r2, r1
   81cd0:	d1e2      	bne.n	81c98 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81cd2:	1d25      	adds	r5, r4, #4
   81cd4:	4628      	mov	r0, r5
   81cd6:	4b13      	ldr	r3, [pc, #76]	; (81d24 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
   81cd8:	4798      	blx	r3
   81cda:	b968      	cbnz	r0, 81cf8 <vTaskPriorityDisinheritAfterTimeout+0x90>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81cdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81cde:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81ce2:	009b      	lsls	r3, r3, #2
   81ce4:	4a0e      	ldr	r2, [pc, #56]	; (81d20 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   81ce6:	58d3      	ldr	r3, [r2, r3]
   81ce8:	b933      	cbnz	r3, 81cf8 <vTaskPriorityDisinheritAfterTimeout+0x90>
   81cea:	480f      	ldr	r0, [pc, #60]	; (81d28 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
   81cec:	6803      	ldr	r3, [r0, #0]
   81cee:	2201      	movs	r2, #1
   81cf0:	408a      	lsls	r2, r1
   81cf2:	ea23 0302 	bic.w	r3, r3, r2
   81cf6:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
   81cf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81cfa:	4a0b      	ldr	r2, [pc, #44]	; (81d28 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
   81cfc:	6811      	ldr	r1, [r2, #0]
   81cfe:	2301      	movs	r3, #1
   81d00:	4083      	lsls	r3, r0
   81d02:	430b      	orrs	r3, r1
   81d04:	6013      	str	r3, [r2, #0]
   81d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81d0a:	4629      	mov	r1, r5
   81d0c:	4b04      	ldr	r3, [pc, #16]	; (81d20 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   81d0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81d12:	4b06      	ldr	r3, [pc, #24]	; (81d2c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
   81d14:	4798      	blx	r3
	}
   81d16:	e7bf      	b.n	81c98 <vTaskPriorityDisinheritAfterTimeout+0x30>
   81d18:	4770      	bx	lr
   81d1a:	bf00      	nop
   81d1c:	2007c1a0 	.word	0x2007c1a0
   81d20:	2007c1ac 	.word	0x2007c1ac
   81d24:	000804fd 	.word	0x000804fd
   81d28:	2007c224 	.word	0x2007c224
   81d2c:	000804b1 	.word	0x000804b1

00081d30 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   81d30:	4b05      	ldr	r3, [pc, #20]	; (81d48 <pvTaskIncrementMutexHeldCount+0x18>)
   81d32:	681b      	ldr	r3, [r3, #0]
   81d34:	b123      	cbz	r3, 81d40 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
   81d36:	4b04      	ldr	r3, [pc, #16]	; (81d48 <pvTaskIncrementMutexHeldCount+0x18>)
   81d38:	681a      	ldr	r2, [r3, #0]
   81d3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   81d3c:	3301      	adds	r3, #1
   81d3e:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
   81d40:	4b01      	ldr	r3, [pc, #4]	; (81d48 <pvTaskIncrementMutexHeldCount+0x18>)
   81d42:	6818      	ldr	r0, [r3, #0]
	}
   81d44:	4770      	bx	lr
   81d46:	bf00      	nop
   81d48:	2007c1a0 	.word	0x2007c1a0

00081d4c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   81d4c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81d4e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81d50:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81d52:	4291      	cmp	r1, r2
   81d54:	d80c      	bhi.n	81d70 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81d56:	1ad2      	subs	r2, r2, r3
   81d58:	6983      	ldr	r3, [r0, #24]
   81d5a:	429a      	cmp	r2, r3
   81d5c:	d301      	bcc.n	81d62 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81d5e:	2001      	movs	r0, #1
   81d60:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81d62:	1d01      	adds	r1, r0, #4
   81d64:	4b09      	ldr	r3, [pc, #36]	; (81d8c <prvInsertTimerInActiveList+0x40>)
   81d66:	6818      	ldr	r0, [r3, #0]
   81d68:	4b09      	ldr	r3, [pc, #36]	; (81d90 <prvInsertTimerInActiveList+0x44>)
   81d6a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81d6c:	2000      	movs	r0, #0
   81d6e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81d70:	429a      	cmp	r2, r3
   81d72:	d201      	bcs.n	81d78 <prvInsertTimerInActiveList+0x2c>
   81d74:	4299      	cmp	r1, r3
   81d76:	d206      	bcs.n	81d86 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81d78:	1d01      	adds	r1, r0, #4
   81d7a:	4b06      	ldr	r3, [pc, #24]	; (81d94 <prvInsertTimerInActiveList+0x48>)
   81d7c:	6818      	ldr	r0, [r3, #0]
   81d7e:	4b04      	ldr	r3, [pc, #16]	; (81d90 <prvInsertTimerInActiveList+0x44>)
   81d80:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81d82:	2000      	movs	r0, #0
   81d84:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   81d86:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   81d88:	bd08      	pop	{r3, pc}
   81d8a:	bf00      	nop
   81d8c:	2007c2a8 	.word	0x2007c2a8
   81d90:	000804c9 	.word	0x000804c9
   81d94:	2007c2a4 	.word	0x2007c2a4

00081d98 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81d98:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81d9a:	4b10      	ldr	r3, [pc, #64]	; (81ddc <prvCheckForValidListAndQueue+0x44>)
   81d9c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81d9e:	4b10      	ldr	r3, [pc, #64]	; (81de0 <prvCheckForValidListAndQueue+0x48>)
   81da0:	681b      	ldr	r3, [r3, #0]
   81da2:	b113      	cbz	r3, 81daa <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   81da4:	4b0f      	ldr	r3, [pc, #60]	; (81de4 <prvCheckForValidListAndQueue+0x4c>)
   81da6:	4798      	blx	r3
   81da8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   81daa:	4d0f      	ldr	r5, [pc, #60]	; (81de8 <prvCheckForValidListAndQueue+0x50>)
   81dac:	4628      	mov	r0, r5
   81dae:	4e0f      	ldr	r6, [pc, #60]	; (81dec <prvCheckForValidListAndQueue+0x54>)
   81db0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81db2:	4c0f      	ldr	r4, [pc, #60]	; (81df0 <prvCheckForValidListAndQueue+0x58>)
   81db4:	4620      	mov	r0, r4
   81db6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81db8:	4b0e      	ldr	r3, [pc, #56]	; (81df4 <prvCheckForValidListAndQueue+0x5c>)
   81dba:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81dbc:	4b0e      	ldr	r3, [pc, #56]	; (81df8 <prvCheckForValidListAndQueue+0x60>)
   81dbe:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   81dc0:	2200      	movs	r2, #0
   81dc2:	2110      	movs	r1, #16
   81dc4:	2005      	movs	r0, #5
   81dc6:	4b0d      	ldr	r3, [pc, #52]	; (81dfc <prvCheckForValidListAndQueue+0x64>)
   81dc8:	4798      	blx	r3
   81dca:	4b05      	ldr	r3, [pc, #20]	; (81de0 <prvCheckForValidListAndQueue+0x48>)
   81dcc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   81dce:	2800      	cmp	r0, #0
   81dd0:	d0e8      	beq.n	81da4 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   81dd2:	490b      	ldr	r1, [pc, #44]	; (81e00 <prvCheckForValidListAndQueue+0x68>)
   81dd4:	4b0b      	ldr	r3, [pc, #44]	; (81e04 <prvCheckForValidListAndQueue+0x6c>)
   81dd6:	4798      	blx	r3
   81dd8:	e7e4      	b.n	81da4 <prvCheckForValidListAndQueue+0xc>
   81dda:	bf00      	nop
   81ddc:	000805d9 	.word	0x000805d9
   81de0:	2007c2d8 	.word	0x2007c2d8
   81de4:	0008061d 	.word	0x0008061d
   81de8:	2007c2ac 	.word	0x2007c2ac
   81dec:	00080495 	.word	0x00080495
   81df0:	2007c2c0 	.word	0x2007c2c0
   81df4:	2007c2a4 	.word	0x2007c2a4
   81df8:	2007c2a8 	.word	0x2007c2a8
   81dfc:	00080a8d 	.word	0x00080a8d
   81e00:	00083ad8 	.word	0x00083ad8
   81e04:	0008110d 	.word	0x0008110d

00081e08 <xTimerCreateTimerTask>:
{
   81e08:	b510      	push	{r4, lr}
   81e0a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   81e0c:	4b0d      	ldr	r3, [pc, #52]	; (81e44 <xTimerCreateTimerTask+0x3c>)
   81e0e:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81e10:	4b0d      	ldr	r3, [pc, #52]	; (81e48 <xTimerCreateTimerTask+0x40>)
   81e12:	681b      	ldr	r3, [r3, #0]
   81e14:	b16b      	cbz	r3, 81e32 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
   81e16:	4b0d      	ldr	r3, [pc, #52]	; (81e4c <xTimerCreateTimerTask+0x44>)
   81e18:	9301      	str	r3, [sp, #4]
   81e1a:	2304      	movs	r3, #4
   81e1c:	9300      	str	r3, [sp, #0]
   81e1e:	2300      	movs	r3, #0
   81e20:	f44f 7282 	mov.w	r2, #260	; 0x104
   81e24:	490a      	ldr	r1, [pc, #40]	; (81e50 <xTimerCreateTimerTask+0x48>)
   81e26:	480b      	ldr	r0, [pc, #44]	; (81e54 <xTimerCreateTimerTask+0x4c>)
   81e28:	4c0b      	ldr	r4, [pc, #44]	; (81e58 <xTimerCreateTimerTask+0x50>)
   81e2a:	47a0      	blx	r4
	configASSERT( xReturn );
   81e2c:	b108      	cbz	r0, 81e32 <xTimerCreateTimerTask+0x2a>
}
   81e2e:	b002      	add	sp, #8
   81e30:	bd10      	pop	{r4, pc}
   81e32:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e36:	f383 8811 	msr	BASEPRI, r3
   81e3a:	f3bf 8f6f 	isb	sy
   81e3e:	f3bf 8f4f 	dsb	sy
   81e42:	e7fe      	b.n	81e42 <xTimerCreateTimerTask+0x3a>
   81e44:	00081d99 	.word	0x00081d99
   81e48:	2007c2d8 	.word	0x2007c2d8
   81e4c:	2007c2dc 	.word	0x2007c2dc
   81e50:	00083ae0 	.word	0x00083ae0
   81e54:	00081f7d 	.word	0x00081f7d
   81e58:	000812ed 	.word	0x000812ed

00081e5c <xTimerGenericCommand>:
	configASSERT( xTimer );
   81e5c:	b1d8      	cbz	r0, 81e96 <xTimerGenericCommand+0x3a>
{
   81e5e:	b530      	push	{r4, r5, lr}
   81e60:	b085      	sub	sp, #20
   81e62:	4615      	mov	r5, r2
   81e64:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
   81e66:	4a14      	ldr	r2, [pc, #80]	; (81eb8 <xTimerGenericCommand+0x5c>)
   81e68:	6810      	ldr	r0, [r2, #0]
   81e6a:	b310      	cbz	r0, 81eb2 <xTimerGenericCommand+0x56>
   81e6c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
   81e6e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   81e70:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   81e72:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   81e74:	2905      	cmp	r1, #5
   81e76:	dc17      	bgt.n	81ea8 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81e78:	4b10      	ldr	r3, [pc, #64]	; (81ebc <xTimerGenericCommand+0x60>)
   81e7a:	4798      	blx	r3
   81e7c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   81e7e:	f04f 0300 	mov.w	r3, #0
   81e82:	bf0c      	ite	eq
   81e84:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81e86:	461a      	movne	r2, r3
   81e88:	4669      	mov	r1, sp
   81e8a:	480b      	ldr	r0, [pc, #44]	; (81eb8 <xTimerGenericCommand+0x5c>)
   81e8c:	6800      	ldr	r0, [r0, #0]
   81e8e:	4c0c      	ldr	r4, [pc, #48]	; (81ec0 <xTimerGenericCommand+0x64>)
   81e90:	47a0      	blx	r4
}
   81e92:	b005      	add	sp, #20
   81e94:	bd30      	pop	{r4, r5, pc}
   81e96:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e9a:	f383 8811 	msr	BASEPRI, r3
   81e9e:	f3bf 8f6f 	isb	sy
   81ea2:	f3bf 8f4f 	dsb	sy
   81ea6:	e7fe      	b.n	81ea6 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81ea8:	2300      	movs	r3, #0
   81eaa:	4669      	mov	r1, sp
   81eac:	4c05      	ldr	r4, [pc, #20]	; (81ec4 <xTimerGenericCommand+0x68>)
   81eae:	47a0      	blx	r4
   81eb0:	e7ef      	b.n	81e92 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
   81eb2:	2000      	movs	r0, #0
	return xReturn;
   81eb4:	e7ed      	b.n	81e92 <xTimerGenericCommand+0x36>
   81eb6:	bf00      	nop
   81eb8:	2007c2d8 	.word	0x2007c2d8
   81ebc:	00081acd 	.word	0x00081acd
   81ec0:	00080ae1 	.word	0x00080ae1
   81ec4:	00080cc1 	.word	0x00080cc1

00081ec8 <prvSampleTimeNow>:
{
   81ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ecc:	b082      	sub	sp, #8
   81ece:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   81ed0:	4b23      	ldr	r3, [pc, #140]	; (81f60 <prvSampleTimeNow+0x98>)
   81ed2:	4798      	blx	r3
   81ed4:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   81ed6:	4b23      	ldr	r3, [pc, #140]	; (81f64 <prvSampleTimeNow+0x9c>)
   81ed8:	681b      	ldr	r3, [r3, #0]
   81eda:	4298      	cmp	r0, r3
   81edc:	d319      	bcc.n	81f12 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
   81ede:	2300      	movs	r3, #0
   81ee0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   81ee4:	4b1f      	ldr	r3, [pc, #124]	; (81f64 <prvSampleTimeNow+0x9c>)
   81ee6:	601f      	str	r7, [r3, #0]
}
   81ee8:	4638      	mov	r0, r7
   81eea:	b002      	add	sp, #8
   81eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81ef0:	2100      	movs	r1, #0
   81ef2:	9100      	str	r1, [sp, #0]
   81ef4:	460b      	mov	r3, r1
   81ef6:	4652      	mov	r2, sl
   81ef8:	4620      	mov	r0, r4
   81efa:	4c1b      	ldr	r4, [pc, #108]	; (81f68 <prvSampleTimeNow+0xa0>)
   81efc:	47a0      	blx	r4
				configASSERT( xResult );
   81efe:	b950      	cbnz	r0, 81f16 <prvSampleTimeNow+0x4e>
   81f00:	f04f 0340 	mov.w	r3, #64	; 0x40
   81f04:	f383 8811 	msr	BASEPRI, r3
   81f08:	f3bf 8f6f 	isb	sy
   81f0c:	f3bf 8f4f 	dsb	sy
   81f10:	e7fe      	b.n	81f10 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81f12:	4d16      	ldr	r5, [pc, #88]	; (81f6c <prvSampleTimeNow+0xa4>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f14:	4e16      	ldr	r6, [pc, #88]	; (81f70 <prvSampleTimeNow+0xa8>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81f16:	682b      	ldr	r3, [r5, #0]
   81f18:	681a      	ldr	r2, [r3, #0]
   81f1a:	b1c2      	cbz	r2, 81f4e <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f1c:	68db      	ldr	r3, [r3, #12]
   81f1e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f22:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f24:	f104 0904 	add.w	r9, r4, #4
   81f28:	4648      	mov	r0, r9
   81f2a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f2e:	4620      	mov	r0, r4
   81f30:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81f32:	69e3      	ldr	r3, [r4, #28]
   81f34:	2b01      	cmp	r3, #1
   81f36:	d1ee      	bne.n	81f16 <prvSampleTimeNow+0x4e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81f38:	69a3      	ldr	r3, [r4, #24]
   81f3a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81f3c:	459a      	cmp	sl, r3
   81f3e:	d2d7      	bcs.n	81ef0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81f40:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81f42:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81f44:	4649      	mov	r1, r9
   81f46:	6828      	ldr	r0, [r5, #0]
   81f48:	4b0a      	ldr	r3, [pc, #40]	; (81f74 <prvSampleTimeNow+0xac>)
   81f4a:	4798      	blx	r3
   81f4c:	e7e3      	b.n	81f16 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList = pxOverflowTimerList;
   81f4e:	4a0a      	ldr	r2, [pc, #40]	; (81f78 <prvSampleTimeNow+0xb0>)
   81f50:	6810      	ldr	r0, [r2, #0]
   81f52:	4906      	ldr	r1, [pc, #24]	; (81f6c <prvSampleTimeNow+0xa4>)
   81f54:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81f56:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81f58:	2301      	movs	r3, #1
   81f5a:	f8c8 3000 	str.w	r3, [r8]
   81f5e:	e7c1      	b.n	81ee4 <prvSampleTimeNow+0x1c>
   81f60:	0008157d 	.word	0x0008157d
   81f64:	2007c2d4 	.word	0x2007c2d4
   81f68:	00081e5d 	.word	0x00081e5d
   81f6c:	2007c2a4 	.word	0x2007c2a4
   81f70:	000804fd 	.word	0x000804fd
   81f74:	000804c9 	.word	0x000804c9
   81f78:	2007c2a8 	.word	0x2007c2a8

00081f7c <prvTimerTask>:
{
   81f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f80:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81f82:	4e70      	ldr	r6, [pc, #448]	; (82144 <prvTimerTask+0x1c8>)
			( void ) xTaskResumeAll();
   81f84:	4f70      	ldr	r7, [pc, #448]	; (82148 <prvTimerTask+0x1cc>)
					portYIELD_WITHIN_API();
   81f86:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 82170 <prvTimerTask+0x1f4>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f8a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 82174 <prvTimerTask+0x1f8>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81f8e:	6833      	ldr	r3, [r6, #0]
   81f90:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81f92:	b172      	cbz	r2, 81fb2 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f94:	68db      	ldr	r3, [r3, #12]
   81f96:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   81f98:	4b6c      	ldr	r3, [pc, #432]	; (8214c <prvTimerTask+0x1d0>)
   81f9a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81f9c:	a804      	add	r0, sp, #16
   81f9e:	4b6c      	ldr	r3, [pc, #432]	; (82150 <prvTimerTask+0x1d4>)
   81fa0:	4798      	blx	r3
   81fa2:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81fa4:	9b04      	ldr	r3, [sp, #16]
   81fa6:	2b00      	cmp	r3, #0
   81fa8:	d152      	bne.n	82050 <prvTimerTask+0xd4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81faa:	42a0      	cmp	r0, r4
   81fac:	d223      	bcs.n	81ff6 <prvTimerTask+0x7a>
   81fae:	2200      	movs	r2, #0
   81fb0:	e00f      	b.n	81fd2 <prvTimerTask+0x56>
	vTaskSuspendAll();
   81fb2:	4b66      	ldr	r3, [pc, #408]	; (8214c <prvTimerTask+0x1d0>)
   81fb4:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81fb6:	a804      	add	r0, sp, #16
   81fb8:	4b65      	ldr	r3, [pc, #404]	; (82150 <prvTimerTask+0x1d4>)
   81fba:	4798      	blx	r3
   81fbc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81fbe:	9b04      	ldr	r3, [sp, #16]
   81fc0:	2b00      	cmp	r3, #0
   81fc2:	d145      	bne.n	82050 <prvTimerTask+0xd4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   81fc4:	4b63      	ldr	r3, [pc, #396]	; (82154 <prvTimerTask+0x1d8>)
   81fc6:	681b      	ldr	r3, [r3, #0]
   81fc8:	681a      	ldr	r2, [r3, #0]
   81fca:	fab2 f282 	clz	r2, r2
   81fce:	0952      	lsrs	r2, r2, #5
   81fd0:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   81fd2:	1b61      	subs	r1, r4, r5
   81fd4:	4b60      	ldr	r3, [pc, #384]	; (82158 <prvTimerTask+0x1dc>)
   81fd6:	6818      	ldr	r0, [r3, #0]
   81fd8:	4b60      	ldr	r3, [pc, #384]	; (8215c <prvTimerTask+0x1e0>)
   81fda:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81fdc:	47b8      	blx	r7
   81fde:	b938      	cbnz	r0, 81ff0 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
   81fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81fe4:	f8c9 3000 	str.w	r3, [r9]
   81fe8:	f3bf 8f4f 	dsb	sy
   81fec:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81ff0:	4d59      	ldr	r5, [pc, #356]	; (82158 <prvTimerTask+0x1dc>)
   81ff2:	4c5b      	ldr	r4, [pc, #364]	; (82160 <prvTimerTask+0x1e4>)
   81ff4:	e035      	b.n	82062 <prvTimerTask+0xe6>
				( void ) xTaskResumeAll();
   81ff6:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ff8:	6833      	ldr	r3, [r6, #0]
   81ffa:	68db      	ldr	r3, [r3, #12]
   81ffc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   82000:	f10a 0004 	add.w	r0, sl, #4
   82004:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   82006:	f8da 301c 	ldr.w	r3, [sl, #28]
   8200a:	2b01      	cmp	r3, #1
   8200c:	d004      	beq.n	82018 <prvTimerTask+0x9c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8200e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   82012:	4650      	mov	r0, sl
   82014:	4798      	blx	r3
   82016:	e7eb      	b.n	81ff0 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   82018:	f8da 1018 	ldr.w	r1, [sl, #24]
   8201c:	4623      	mov	r3, r4
   8201e:	462a      	mov	r2, r5
   82020:	4421      	add	r1, r4
   82022:	4650      	mov	r0, sl
   82024:	4d4f      	ldr	r5, [pc, #316]	; (82164 <prvTimerTask+0x1e8>)
   82026:	47a8      	blx	r5
   82028:	2800      	cmp	r0, #0
   8202a:	d0f0      	beq.n	8200e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8202c:	2100      	movs	r1, #0
   8202e:	9100      	str	r1, [sp, #0]
   82030:	460b      	mov	r3, r1
   82032:	4622      	mov	r2, r4
   82034:	4650      	mov	r0, sl
   82036:	4c4c      	ldr	r4, [pc, #304]	; (82168 <prvTimerTask+0x1ec>)
   82038:	47a0      	blx	r4
			configASSERT( xResult );
   8203a:	2800      	cmp	r0, #0
   8203c:	d1e7      	bne.n	8200e <prvTimerTask+0x92>
   8203e:	f04f 0340 	mov.w	r3, #64	; 0x40
   82042:	f383 8811 	msr	BASEPRI, r3
   82046:	f3bf 8f6f 	isb	sy
   8204a:	f3bf 8f4f 	dsb	sy
   8204e:	e7fe      	b.n	8204e <prvTimerTask+0xd2>
			( void ) xTaskResumeAll();
   82050:	47b8      	blx	r7
   82052:	e7cd      	b.n	81ff0 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   82054:	9907      	ldr	r1, [sp, #28]
   82056:	9806      	ldr	r0, [sp, #24]
   82058:	9b05      	ldr	r3, [sp, #20]
   8205a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   8205c:	9b04      	ldr	r3, [sp, #16]
   8205e:	2b00      	cmp	r3, #0
   82060:	da08      	bge.n	82074 <prvTimerTask+0xf8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   82062:	2200      	movs	r2, #0
   82064:	a904      	add	r1, sp, #16
   82066:	6828      	ldr	r0, [r5, #0]
   82068:	47a0      	blx	r4
   8206a:	2800      	cmp	r0, #0
   8206c:	d08f      	beq.n	81f8e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   8206e:	9b04      	ldr	r3, [sp, #16]
   82070:	2b00      	cmp	r3, #0
   82072:	dbef      	blt.n	82054 <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   82074:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   82078:	f8da 3014 	ldr.w	r3, [sl, #20]
   8207c:	b113      	cbz	r3, 82084 <prvTimerTask+0x108>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8207e:	f10a 0004 	add.w	r0, sl, #4
   82082:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82084:	a803      	add	r0, sp, #12
   82086:	4b32      	ldr	r3, [pc, #200]	; (82150 <prvTimerTask+0x1d4>)
   82088:	4798      	blx	r3
			switch( xMessage.xMessageID )
   8208a:	9b04      	ldr	r3, [sp, #16]
   8208c:	2b09      	cmp	r3, #9
   8208e:	d8e8      	bhi.n	82062 <prvTimerTask+0xe6>
   82090:	a201      	add	r2, pc, #4	; (adr r2, 82098 <prvTimerTask+0x11c>)
   82092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82096:	bf00      	nop
   82098:	000820c1 	.word	0x000820c1
   8209c:	000820c1 	.word	0x000820c1
   820a0:	000820c1 	.word	0x000820c1
   820a4:	00082063 	.word	0x00082063
   820a8:	00082113 	.word	0x00082113
   820ac:	0008213b 	.word	0x0008213b
   820b0:	000820c1 	.word	0x000820c1
   820b4:	000820c1 	.word	0x000820c1
   820b8:	00082063 	.word	0x00082063
   820bc:	00082113 	.word	0x00082113
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   820c0:	9c05      	ldr	r4, [sp, #20]
   820c2:	f8da 1018 	ldr.w	r1, [sl, #24]
   820c6:	4623      	mov	r3, r4
   820c8:	4602      	mov	r2, r0
   820ca:	4421      	add	r1, r4
   820cc:	4650      	mov	r0, sl
   820ce:	4c25      	ldr	r4, [pc, #148]	; (82164 <prvTimerTask+0x1e8>)
   820d0:	47a0      	blx	r4
   820d2:	2800      	cmp	r0, #0
   820d4:	d08d      	beq.n	81ff2 <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   820d6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   820da:	4650      	mov	r0, sl
   820dc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   820de:	f8da 301c 	ldr.w	r3, [sl, #28]
   820e2:	2b01      	cmp	r3, #1
   820e4:	d185      	bne.n	81ff2 <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   820e6:	f8da 2018 	ldr.w	r2, [sl, #24]
   820ea:	2100      	movs	r1, #0
   820ec:	9100      	str	r1, [sp, #0]
   820ee:	460b      	mov	r3, r1
   820f0:	9805      	ldr	r0, [sp, #20]
   820f2:	4402      	add	r2, r0
   820f4:	4650      	mov	r0, sl
   820f6:	4c1c      	ldr	r4, [pc, #112]	; (82168 <prvTimerTask+0x1ec>)
   820f8:	47a0      	blx	r4
							configASSERT( xResult );
   820fa:	2800      	cmp	r0, #0
   820fc:	f47f af79 	bne.w	81ff2 <prvTimerTask+0x76>
   82100:	f04f 0340 	mov.w	r3, #64	; 0x40
   82104:	f383 8811 	msr	BASEPRI, r3
   82108:	f3bf 8f6f 	isb	sy
   8210c:	f3bf 8f4f 	dsb	sy
   82110:	e7fe      	b.n	82110 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   82112:	9905      	ldr	r1, [sp, #20]
   82114:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82118:	b131      	cbz	r1, 82128 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8211a:	4603      	mov	r3, r0
   8211c:	4602      	mov	r2, r0
   8211e:	4401      	add	r1, r0
   82120:	4650      	mov	r0, sl
   82122:	4c10      	ldr	r4, [pc, #64]	; (82164 <prvTimerTask+0x1e8>)
   82124:	47a0      	blx	r4
   82126:	e764      	b.n	81ff2 <prvTimerTask+0x76>
   82128:	f04f 0340 	mov.w	r3, #64	; 0x40
   8212c:	f383 8811 	msr	BASEPRI, r3
   82130:	f3bf 8f6f 	isb	sy
   82134:	f3bf 8f4f 	dsb	sy
   82138:	e7fe      	b.n	82138 <prvTimerTask+0x1bc>
						vPortFree( pxTimer );
   8213a:	4650      	mov	r0, sl
   8213c:	4b0b      	ldr	r3, [pc, #44]	; (8216c <prvTimerTask+0x1f0>)
   8213e:	4798      	blx	r3
   82140:	e757      	b.n	81ff2 <prvTimerTask+0x76>
   82142:	bf00      	nop
   82144:	2007c2a4 	.word	0x2007c2a4
   82148:	000816bd 	.word	0x000816bd
   8214c:	0008156d 	.word	0x0008156d
   82150:	00081ec9 	.word	0x00081ec9
   82154:	2007c2a8 	.word	0x2007c2a8
   82158:	2007c2d8 	.word	0x2007c2d8
   8215c:	0008113d 	.word	0x0008113d
   82160:	00080da5 	.word	0x00080da5
   82164:	00081d4d 	.word	0x00081d4d
   82168:	00081e5d 	.word	0x00081e5d
   8216c:	00080885 	.word	0x00080885
   82170:	e000ed04 	.word	0xe000ed04
   82174:	000804fd 	.word	0x000804fd

00082178 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82178:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8217a:	480e      	ldr	r0, [pc, #56]	; (821b4 <sysclk_init+0x3c>)
   8217c:	4b0e      	ldr	r3, [pc, #56]	; (821b8 <sysclk_init+0x40>)
   8217e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82180:	213e      	movs	r1, #62	; 0x3e
   82182:	2000      	movs	r0, #0
   82184:	4b0d      	ldr	r3, [pc, #52]	; (821bc <sysclk_init+0x44>)
   82186:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82188:	4c0d      	ldr	r4, [pc, #52]	; (821c0 <sysclk_init+0x48>)
   8218a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8218c:	2800      	cmp	r0, #0
   8218e:	d0fc      	beq.n	8218a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82190:	4b0c      	ldr	r3, [pc, #48]	; (821c4 <sysclk_init+0x4c>)
   82192:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82194:	4a0c      	ldr	r2, [pc, #48]	; (821c8 <sysclk_init+0x50>)
   82196:	4b0d      	ldr	r3, [pc, #52]	; (821cc <sysclk_init+0x54>)
   82198:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8219a:	4c0d      	ldr	r4, [pc, #52]	; (821d0 <sysclk_init+0x58>)
   8219c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8219e:	2800      	cmp	r0, #0
   821a0:	d0fc      	beq.n	8219c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   821a2:	2010      	movs	r0, #16
   821a4:	4b0b      	ldr	r3, [pc, #44]	; (821d4 <sysclk_init+0x5c>)
   821a6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   821a8:	4b0b      	ldr	r3, [pc, #44]	; (821d8 <sysclk_init+0x60>)
   821aa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   821ac:	4801      	ldr	r0, [pc, #4]	; (821b4 <sysclk_init+0x3c>)
   821ae:	4b02      	ldr	r3, [pc, #8]	; (821b8 <sysclk_init+0x40>)
   821b0:	4798      	blx	r3
   821b2:	bd10      	pop	{r4, pc}
   821b4:	0501bd00 	.word	0x0501bd00
   821b8:	200700a5 	.word	0x200700a5
   821bc:	0008256d 	.word	0x0008256d
   821c0:	000825c1 	.word	0x000825c1
   821c4:	000825d1 	.word	0x000825d1
   821c8:	200d3f01 	.word	0x200d3f01
   821cc:	400e0600 	.word	0x400e0600
   821d0:	000825e1 	.word	0x000825e1
   821d4:	00082509 	.word	0x00082509
   821d8:	000826ad 	.word	0x000826ad

000821dc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   821dc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   821de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   821e2:	4b16      	ldr	r3, [pc, #88]	; (8223c <board_init+0x60>)
   821e4:	605a      	str	r2, [r3, #4]
   821e6:	200b      	movs	r0, #11
   821e8:	4c15      	ldr	r4, [pc, #84]	; (82240 <board_init+0x64>)
   821ea:	47a0      	blx	r4
   821ec:	200c      	movs	r0, #12
   821ee:	47a0      	blx	r4
   821f0:	200d      	movs	r0, #13
   821f2:	47a0      	blx	r4
   821f4:	200e      	movs	r0, #14
   821f6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   821f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821fc:	203b      	movs	r0, #59	; 0x3b
   821fe:	4c11      	ldr	r4, [pc, #68]	; (82244 <board_init+0x68>)
   82200:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82202:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82206:	2055      	movs	r0, #85	; 0x55
   82208:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8220a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8220e:	2056      	movs	r0, #86	; 0x56
   82210:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82212:	490d      	ldr	r1, [pc, #52]	; (82248 <board_init+0x6c>)
   82214:	2068      	movs	r0, #104	; 0x68
   82216:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82218:	490c      	ldr	r1, [pc, #48]	; (8224c <board_init+0x70>)
   8221a:	205c      	movs	r0, #92	; 0x5c
   8221c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8221e:	4a0c      	ldr	r2, [pc, #48]	; (82250 <board_init+0x74>)
   82220:	f44f 7140 	mov.w	r1, #768	; 0x300
   82224:	480b      	ldr	r0, [pc, #44]	; (82254 <board_init+0x78>)
   82226:	4b0c      	ldr	r3, [pc, #48]	; (82258 <board_init+0x7c>)
   82228:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8222a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8222e:	202b      	movs	r0, #43	; 0x2b
   82230:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82232:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82236:	202a      	movs	r0, #42	; 0x2a
   82238:	47a0      	blx	r4
   8223a:	bd10      	pop	{r4, pc}
   8223c:	400e1a50 	.word	0x400e1a50
   82240:	000825f1 	.word	0x000825f1
   82244:	000822fd 	.word	0x000822fd
   82248:	28000079 	.word	0x28000079
   8224c:	28000001 	.word	0x28000001
   82250:	08000001 	.word	0x08000001
   82254:	400e0e00 	.word	0x400e0e00
   82258:	000823cd 	.word	0x000823cd

0008225c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8225c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8225e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82262:	d016      	beq.n	82292 <pio_set_peripheral+0x36>
   82264:	d80b      	bhi.n	8227e <pio_set_peripheral+0x22>
   82266:	b149      	cbz	r1, 8227c <pio_set_peripheral+0x20>
   82268:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8226c:	d105      	bne.n	8227a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8226e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82270:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82272:	400b      	ands	r3, r1
   82274:	ea23 0302 	bic.w	r3, r3, r2
   82278:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8227a:	6042      	str	r2, [r0, #4]
   8227c:	4770      	bx	lr
	switch (ul_type) {
   8227e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82282:	d0fb      	beq.n	8227c <pio_set_peripheral+0x20>
   82284:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82288:	d0f8      	beq.n	8227c <pio_set_peripheral+0x20>
   8228a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8228e:	d1f4      	bne.n	8227a <pio_set_peripheral+0x1e>
   82290:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   82292:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82294:	4313      	orrs	r3, r2
   82296:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82298:	e7ef      	b.n	8227a <pio_set_peripheral+0x1e>

0008229a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8229a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8229c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   822a0:	bf14      	ite	ne
   822a2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   822a4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   822a6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   822aa:	bf14      	ite	ne
   822ac:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   822ae:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   822b0:	f012 0f02 	tst.w	r2, #2
   822b4:	d107      	bne.n	822c6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   822b6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   822ba:	bf18      	it	ne
   822bc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   822c0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   822c2:	6001      	str	r1, [r0, #0]
   822c4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   822c6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   822ca:	e7f9      	b.n	822c0 <pio_set_input+0x26>

000822cc <pio_set_output>:
{
   822cc:	b410      	push	{r4}
   822ce:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   822d0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   822d2:	b944      	cbnz	r4, 822e6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   822d4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   822d6:	b143      	cbz	r3, 822ea <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   822d8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   822da:	b942      	cbnz	r2, 822ee <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   822dc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   822de:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   822e0:	6001      	str	r1, [r0, #0]
}
   822e2:	bc10      	pop	{r4}
   822e4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   822e6:	6641      	str	r1, [r0, #100]	; 0x64
   822e8:	e7f5      	b.n	822d6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   822ea:	6541      	str	r1, [r0, #84]	; 0x54
   822ec:	e7f5      	b.n	822da <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   822ee:	6301      	str	r1, [r0, #48]	; 0x30
   822f0:	e7f5      	b.n	822de <pio_set_output+0x12>

000822f2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   822f2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   822f4:	4770      	bx	lr

000822f6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   822f6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   822f8:	4770      	bx	lr
	...

000822fc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   822fc:	b570      	push	{r4, r5, r6, lr}
   822fe:	b082      	sub	sp, #8
   82300:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82302:	0943      	lsrs	r3, r0, #5
   82304:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82308:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8230c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8230e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82312:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82316:	d031      	beq.n	8237c <pio_configure_pin+0x80>
   82318:	d816      	bhi.n	82348 <pio_configure_pin+0x4c>
   8231a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8231e:	d01b      	beq.n	82358 <pio_configure_pin+0x5c>
   82320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82324:	d116      	bne.n	82354 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82326:	f000 001f 	and.w	r0, r0, #31
   8232a:	2601      	movs	r6, #1
   8232c:	4086      	lsls	r6, r0
   8232e:	4632      	mov	r2, r6
   82330:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82334:	4620      	mov	r0, r4
   82336:	4b22      	ldr	r3, [pc, #136]	; (823c0 <pio_configure_pin+0xc4>)
   82338:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8233a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8233e:	bf14      	ite	ne
   82340:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82342:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82344:	2001      	movs	r0, #1
   82346:	e017      	b.n	82378 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8234c:	d021      	beq.n	82392 <pio_configure_pin+0x96>
   8234e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82352:	d01e      	beq.n	82392 <pio_configure_pin+0x96>
		return 0;
   82354:	2000      	movs	r0, #0
   82356:	e00f      	b.n	82378 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82358:	f000 001f 	and.w	r0, r0, #31
   8235c:	2601      	movs	r6, #1
   8235e:	4086      	lsls	r6, r0
   82360:	4632      	mov	r2, r6
   82362:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82366:	4620      	mov	r0, r4
   82368:	4b15      	ldr	r3, [pc, #84]	; (823c0 <pio_configure_pin+0xc4>)
   8236a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8236c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82370:	bf14      	ite	ne
   82372:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82374:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82376:	2001      	movs	r0, #1
}
   82378:	b002      	add	sp, #8
   8237a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8237c:	f000 011f 	and.w	r1, r0, #31
   82380:	2601      	movs	r6, #1
   82382:	462a      	mov	r2, r5
   82384:	fa06 f101 	lsl.w	r1, r6, r1
   82388:	4620      	mov	r0, r4
   8238a:	4b0e      	ldr	r3, [pc, #56]	; (823c4 <pio_configure_pin+0xc8>)
   8238c:	4798      	blx	r3
	return 1;
   8238e:	4630      	mov	r0, r6
		break;
   82390:	e7f2      	b.n	82378 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82392:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82396:	f000 011f 	and.w	r1, r0, #31
   8239a:	2601      	movs	r6, #1
   8239c:	ea05 0306 	and.w	r3, r5, r6
   823a0:	9300      	str	r3, [sp, #0]
   823a2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   823a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   823aa:	bf14      	ite	ne
   823ac:	2200      	movne	r2, #0
   823ae:	2201      	moveq	r2, #1
   823b0:	fa06 f101 	lsl.w	r1, r6, r1
   823b4:	4620      	mov	r0, r4
   823b6:	4c04      	ldr	r4, [pc, #16]	; (823c8 <pio_configure_pin+0xcc>)
   823b8:	47a0      	blx	r4
	return 1;
   823ba:	4630      	mov	r0, r6
		break;
   823bc:	e7dc      	b.n	82378 <pio_configure_pin+0x7c>
   823be:	bf00      	nop
   823c0:	0008225d 	.word	0x0008225d
   823c4:	0008229b 	.word	0x0008229b
   823c8:	000822cd 	.word	0x000822cd

000823cc <pio_configure_pin_group>:
{
   823cc:	b570      	push	{r4, r5, r6, lr}
   823ce:	b082      	sub	sp, #8
   823d0:	4605      	mov	r5, r0
   823d2:	460e      	mov	r6, r1
   823d4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   823d6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   823da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823de:	d027      	beq.n	82430 <pio_configure_pin_group+0x64>
   823e0:	d811      	bhi.n	82406 <pio_configure_pin_group+0x3a>
   823e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   823e6:	d016      	beq.n	82416 <pio_configure_pin_group+0x4a>
   823e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   823ec:	d111      	bne.n	82412 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   823ee:	460a      	mov	r2, r1
   823f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   823f4:	4b19      	ldr	r3, [pc, #100]	; (8245c <pio_configure_pin_group+0x90>)
   823f6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   823f8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   823fc:	bf14      	ite	ne
   823fe:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82400:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82402:	2001      	movs	r0, #1
   82404:	e012      	b.n	8242c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   82406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8240a:	d015      	beq.n	82438 <pio_configure_pin_group+0x6c>
   8240c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82410:	d012      	beq.n	82438 <pio_configure_pin_group+0x6c>
		return 0;
   82412:	2000      	movs	r0, #0
   82414:	e00a      	b.n	8242c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82416:	460a      	mov	r2, r1
   82418:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8241c:	4b0f      	ldr	r3, [pc, #60]	; (8245c <pio_configure_pin_group+0x90>)
   8241e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82420:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82424:	bf14      	ite	ne
   82426:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82428:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8242a:	2001      	movs	r0, #1
}
   8242c:	b002      	add	sp, #8
   8242e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82430:	4b0b      	ldr	r3, [pc, #44]	; (82460 <pio_configure_pin_group+0x94>)
   82432:	4798      	blx	r3
	return 1;
   82434:	2001      	movs	r0, #1
		break;
   82436:	e7f9      	b.n	8242c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82438:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8243c:	f004 0301 	and.w	r3, r4, #1
   82440:	9300      	str	r3, [sp, #0]
   82442:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82446:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8244a:	bf14      	ite	ne
   8244c:	2200      	movne	r2, #0
   8244e:	2201      	moveq	r2, #1
   82450:	4631      	mov	r1, r6
   82452:	4628      	mov	r0, r5
   82454:	4c03      	ldr	r4, [pc, #12]	; (82464 <pio_configure_pin_group+0x98>)
   82456:	47a0      	blx	r4
	return 1;
   82458:	2001      	movs	r0, #1
		break;
   8245a:	e7e7      	b.n	8242c <pio_configure_pin_group+0x60>
   8245c:	0008225d 	.word	0x0008225d
   82460:	0008229b 	.word	0x0008229b
   82464:	000822cd 	.word	0x000822cd

00082468 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8246c:	4604      	mov	r4, r0
   8246e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82470:	4b0e      	ldr	r3, [pc, #56]	; (824ac <pio_handler_process+0x44>)
   82472:	4798      	blx	r3
   82474:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82476:	4620      	mov	r0, r4
   82478:	4b0d      	ldr	r3, [pc, #52]	; (824b0 <pio_handler_process+0x48>)
   8247a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8247c:	4005      	ands	r5, r0
   8247e:	d013      	beq.n	824a8 <pio_handler_process+0x40>
   82480:	4c0c      	ldr	r4, [pc, #48]	; (824b4 <pio_handler_process+0x4c>)
   82482:	f104 0660 	add.w	r6, r4, #96	; 0x60
   82486:	e003      	b.n	82490 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82488:	42b4      	cmp	r4, r6
   8248a:	d00d      	beq.n	824a8 <pio_handler_process+0x40>
   8248c:	3410      	adds	r4, #16
		while (status != 0) {
   8248e:	b15d      	cbz	r5, 824a8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82490:	6820      	ldr	r0, [r4, #0]
   82492:	4540      	cmp	r0, r8
   82494:	d1f8      	bne.n	82488 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82496:	6861      	ldr	r1, [r4, #4]
   82498:	4229      	tst	r1, r5
   8249a:	d0f5      	beq.n	82488 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8249c:	68e3      	ldr	r3, [r4, #12]
   8249e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   824a0:	6863      	ldr	r3, [r4, #4]
   824a2:	ea25 0503 	bic.w	r5, r5, r3
   824a6:	e7ef      	b.n	82488 <pio_handler_process+0x20>
   824a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824ac:	000822f3 	.word	0x000822f3
   824b0:	000822f7 	.word	0x000822f7
   824b4:	2007c2e0 	.word	0x2007c2e0

000824b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   824b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   824ba:	210b      	movs	r1, #11
   824bc:	4801      	ldr	r0, [pc, #4]	; (824c4 <PIOA_Handler+0xc>)
   824be:	4b02      	ldr	r3, [pc, #8]	; (824c8 <PIOA_Handler+0x10>)
   824c0:	4798      	blx	r3
   824c2:	bd08      	pop	{r3, pc}
   824c4:	400e0e00 	.word	0x400e0e00
   824c8:	00082469 	.word	0x00082469

000824cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   824cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   824ce:	210c      	movs	r1, #12
   824d0:	4801      	ldr	r0, [pc, #4]	; (824d8 <PIOB_Handler+0xc>)
   824d2:	4b02      	ldr	r3, [pc, #8]	; (824dc <PIOB_Handler+0x10>)
   824d4:	4798      	blx	r3
   824d6:	bd08      	pop	{r3, pc}
   824d8:	400e1000 	.word	0x400e1000
   824dc:	00082469 	.word	0x00082469

000824e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   824e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   824e2:	210d      	movs	r1, #13
   824e4:	4801      	ldr	r0, [pc, #4]	; (824ec <PIOC_Handler+0xc>)
   824e6:	4b02      	ldr	r3, [pc, #8]	; (824f0 <PIOC_Handler+0x10>)
   824e8:	4798      	blx	r3
   824ea:	bd08      	pop	{r3, pc}
   824ec:	400e1200 	.word	0x400e1200
   824f0:	00082469 	.word	0x00082469

000824f4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   824f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   824f6:	210e      	movs	r1, #14
   824f8:	4801      	ldr	r0, [pc, #4]	; (82500 <PIOD_Handler+0xc>)
   824fa:	4b02      	ldr	r3, [pc, #8]	; (82504 <PIOD_Handler+0x10>)
   824fc:	4798      	blx	r3
   824fe:	bd08      	pop	{r3, pc}
   82500:	400e1400 	.word	0x400e1400
   82504:	00082469 	.word	0x00082469

00082508 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82508:	4a17      	ldr	r2, [pc, #92]	; (82568 <pmc_switch_mck_to_pllack+0x60>)
   8250a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82510:	4318      	orrs	r0, r3
   82512:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82514:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82516:	f013 0f08 	tst.w	r3, #8
   8251a:	d10a      	bne.n	82532 <pmc_switch_mck_to_pllack+0x2a>
   8251c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82520:	4911      	ldr	r1, [pc, #68]	; (82568 <pmc_switch_mck_to_pllack+0x60>)
   82522:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82524:	f012 0f08 	tst.w	r2, #8
   82528:	d103      	bne.n	82532 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8252a:	3b01      	subs	r3, #1
   8252c:	d1f9      	bne.n	82522 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8252e:	2001      	movs	r0, #1
   82530:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82532:	4a0d      	ldr	r2, [pc, #52]	; (82568 <pmc_switch_mck_to_pllack+0x60>)
   82534:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82536:	f023 0303 	bic.w	r3, r3, #3
   8253a:	f043 0302 	orr.w	r3, r3, #2
   8253e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82540:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82542:	f013 0f08 	tst.w	r3, #8
   82546:	d10a      	bne.n	8255e <pmc_switch_mck_to_pllack+0x56>
   82548:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8254c:	4906      	ldr	r1, [pc, #24]	; (82568 <pmc_switch_mck_to_pllack+0x60>)
   8254e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82550:	f012 0f08 	tst.w	r2, #8
   82554:	d105      	bne.n	82562 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82556:	3b01      	subs	r3, #1
   82558:	d1f9      	bne.n	8254e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8255a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8255c:	4770      	bx	lr
	return 0;
   8255e:	2000      	movs	r0, #0
   82560:	4770      	bx	lr
   82562:	2000      	movs	r0, #0
   82564:	4770      	bx	lr
   82566:	bf00      	nop
   82568:	400e0600 	.word	0x400e0600

0008256c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8256c:	b9c8      	cbnz	r0, 825a2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8256e:	4a11      	ldr	r2, [pc, #68]	; (825b4 <pmc_switch_mainck_to_xtal+0x48>)
   82570:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82572:	0209      	lsls	r1, r1, #8
   82574:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82576:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8257a:	f023 0303 	bic.w	r3, r3, #3
   8257e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82582:	f043 0301 	orr.w	r3, r3, #1
   82586:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82588:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8258a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8258c:	f013 0f01 	tst.w	r3, #1
   82590:	d0fb      	beq.n	8258a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82592:	4a08      	ldr	r2, [pc, #32]	; (825b4 <pmc_switch_mainck_to_xtal+0x48>)
   82594:	6a13      	ldr	r3, [r2, #32]
   82596:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8259e:	6213      	str	r3, [r2, #32]
   825a0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   825a2:	4904      	ldr	r1, [pc, #16]	; (825b4 <pmc_switch_mainck_to_xtal+0x48>)
   825a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   825a6:	4a04      	ldr	r2, [pc, #16]	; (825b8 <pmc_switch_mainck_to_xtal+0x4c>)
   825a8:	401a      	ands	r2, r3
   825aa:	4b04      	ldr	r3, [pc, #16]	; (825bc <pmc_switch_mainck_to_xtal+0x50>)
   825ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   825ae:	620b      	str	r3, [r1, #32]
   825b0:	4770      	bx	lr
   825b2:	bf00      	nop
   825b4:	400e0600 	.word	0x400e0600
   825b8:	fec8fffc 	.word	0xfec8fffc
   825bc:	01370002 	.word	0x01370002

000825c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   825c0:	4b02      	ldr	r3, [pc, #8]	; (825cc <pmc_osc_is_ready_mainck+0xc>)
   825c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   825c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   825c8:	4770      	bx	lr
   825ca:	bf00      	nop
   825cc:	400e0600 	.word	0x400e0600

000825d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   825d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   825d4:	4b01      	ldr	r3, [pc, #4]	; (825dc <pmc_disable_pllack+0xc>)
   825d6:	629a      	str	r2, [r3, #40]	; 0x28
   825d8:	4770      	bx	lr
   825da:	bf00      	nop
   825dc:	400e0600 	.word	0x400e0600

000825e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   825e0:	4b02      	ldr	r3, [pc, #8]	; (825ec <pmc_is_locked_pllack+0xc>)
   825e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   825e4:	f000 0002 	and.w	r0, r0, #2
   825e8:	4770      	bx	lr
   825ea:	bf00      	nop
   825ec:	400e0600 	.word	0x400e0600

000825f0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   825f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   825f4:	4b05      	ldr	r3, [pc, #20]	; (8260c <pmc_enable_periph_clk+0x1c>)
   825f6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   825fa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   825fe:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   82602:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   82606:	2000      	movs	r0, #0
   82608:	4770      	bx	lr
   8260a:	bf00      	nop
   8260c:	400e0600 	.word	0x400e0600

00082610 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82610:	e7fe      	b.n	82610 <Dummy_Handler>
	...

00082614 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82614:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82616:	4b1c      	ldr	r3, [pc, #112]	; (82688 <Reset_Handler+0x74>)
   82618:	4a1c      	ldr	r2, [pc, #112]	; (8268c <Reset_Handler+0x78>)
   8261a:	429a      	cmp	r2, r3
   8261c:	d010      	beq.n	82640 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8261e:	4b1c      	ldr	r3, [pc, #112]	; (82690 <Reset_Handler+0x7c>)
   82620:	4a19      	ldr	r2, [pc, #100]	; (82688 <Reset_Handler+0x74>)
   82622:	429a      	cmp	r2, r3
   82624:	d20c      	bcs.n	82640 <Reset_Handler+0x2c>
   82626:	3b01      	subs	r3, #1
   82628:	1a9b      	subs	r3, r3, r2
   8262a:	f023 0303 	bic.w	r3, r3, #3
   8262e:	3304      	adds	r3, #4
   82630:	4413      	add	r3, r2
   82632:	4916      	ldr	r1, [pc, #88]	; (8268c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82634:	f851 0b04 	ldr.w	r0, [r1], #4
   82638:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8263c:	429a      	cmp	r2, r3
   8263e:	d1f9      	bne.n	82634 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82640:	4b14      	ldr	r3, [pc, #80]	; (82694 <Reset_Handler+0x80>)
   82642:	4a15      	ldr	r2, [pc, #84]	; (82698 <Reset_Handler+0x84>)
   82644:	429a      	cmp	r2, r3
   82646:	d20a      	bcs.n	8265e <Reset_Handler+0x4a>
   82648:	3b01      	subs	r3, #1
   8264a:	1a9b      	subs	r3, r3, r2
   8264c:	f023 0303 	bic.w	r3, r3, #3
   82650:	3304      	adds	r3, #4
   82652:	4413      	add	r3, r2
		*pDest++ = 0;
   82654:	2100      	movs	r1, #0
   82656:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8265a:	4293      	cmp	r3, r2
   8265c:	d1fb      	bne.n	82656 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8265e:	4b0f      	ldr	r3, [pc, #60]	; (8269c <Reset_Handler+0x88>)
   82660:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82664:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82668:	490d      	ldr	r1, [pc, #52]	; (826a0 <Reset_Handler+0x8c>)
   8266a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8266c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82674:	d203      	bcs.n	8267e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82676:	688b      	ldr	r3, [r1, #8]
   82678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8267c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8267e:	4b09      	ldr	r3, [pc, #36]	; (826a4 <Reset_Handler+0x90>)
   82680:	4798      	blx	r3

	/* Branch to main function */
	main();
   82682:	4b09      	ldr	r3, [pc, #36]	; (826a8 <Reset_Handler+0x94>)
   82684:	4798      	blx	r3
   82686:	e7fe      	b.n	82686 <Reset_Handler+0x72>
   82688:	20070000 	.word	0x20070000
   8268c:	00083b50 	.word	0x00083b50
   82690:	20070974 	.word	0x20070974
   82694:	2007c400 	.word	0x2007c400
   82698:	20070974 	.word	0x20070974
   8269c:	00080000 	.word	0x00080000
   826a0:	e000ed00 	.word	0xe000ed00
   826a4:	0008290d 	.word	0x0008290d
   826a8:	000828d5 	.word	0x000828d5

000826ac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   826ac:	4b3d      	ldr	r3, [pc, #244]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   826ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826b0:	f003 0303 	and.w	r3, r3, #3
   826b4:	2b03      	cmp	r3, #3
   826b6:	d80e      	bhi.n	826d6 <SystemCoreClockUpdate+0x2a>
   826b8:	e8df f003 	tbb	[pc, r3]
   826bc:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   826c0:	4b39      	ldr	r3, [pc, #228]	; (827a8 <SystemCoreClockUpdate+0xfc>)
   826c2:	695b      	ldr	r3, [r3, #20]
   826c4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   826c8:	bf14      	ite	ne
   826ca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   826ce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   826d2:	4b36      	ldr	r3, [pc, #216]	; (827ac <SystemCoreClockUpdate+0x100>)
   826d4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   826d6:	4b33      	ldr	r3, [pc, #204]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   826d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826da:	f003 0370 	and.w	r3, r3, #112	; 0x70
   826de:	2b70      	cmp	r3, #112	; 0x70
   826e0:	d057      	beq.n	82792 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   826e2:	4b30      	ldr	r3, [pc, #192]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   826e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   826e6:	4931      	ldr	r1, [pc, #196]	; (827ac <SystemCoreClockUpdate+0x100>)
   826e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   826ec:	680b      	ldr	r3, [r1, #0]
   826ee:	40d3      	lsrs	r3, r2
   826f0:	600b      	str	r3, [r1, #0]
   826f2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   826f4:	4b2b      	ldr	r3, [pc, #172]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   826f6:	6a1b      	ldr	r3, [r3, #32]
   826f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   826fc:	d003      	beq.n	82706 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   826fe:	4a2c      	ldr	r2, [pc, #176]	; (827b0 <SystemCoreClockUpdate+0x104>)
   82700:	4b2a      	ldr	r3, [pc, #168]	; (827ac <SystemCoreClockUpdate+0x100>)
   82702:	601a      	str	r2, [r3, #0]
   82704:	e7e7      	b.n	826d6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82706:	4a2b      	ldr	r2, [pc, #172]	; (827b4 <SystemCoreClockUpdate+0x108>)
   82708:	4b28      	ldr	r3, [pc, #160]	; (827ac <SystemCoreClockUpdate+0x100>)
   8270a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8270c:	4b25      	ldr	r3, [pc, #148]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   8270e:	6a1b      	ldr	r3, [r3, #32]
   82710:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82714:	2b10      	cmp	r3, #16
   82716:	d005      	beq.n	82724 <SystemCoreClockUpdate+0x78>
   82718:	2b20      	cmp	r3, #32
   8271a:	d1dc      	bne.n	826d6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8271c:	4a24      	ldr	r2, [pc, #144]	; (827b0 <SystemCoreClockUpdate+0x104>)
   8271e:	4b23      	ldr	r3, [pc, #140]	; (827ac <SystemCoreClockUpdate+0x100>)
   82720:	601a      	str	r2, [r3, #0]
				break;
   82722:	e7d8      	b.n	826d6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82724:	4a24      	ldr	r2, [pc, #144]	; (827b8 <SystemCoreClockUpdate+0x10c>)
   82726:	4b21      	ldr	r3, [pc, #132]	; (827ac <SystemCoreClockUpdate+0x100>)
   82728:	601a      	str	r2, [r3, #0]
				break;
   8272a:	e7d4      	b.n	826d6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8272c:	4b1d      	ldr	r3, [pc, #116]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   8272e:	6a1b      	ldr	r3, [r3, #32]
   82730:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82734:	d00c      	beq.n	82750 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82736:	4a1e      	ldr	r2, [pc, #120]	; (827b0 <SystemCoreClockUpdate+0x104>)
   82738:	4b1c      	ldr	r3, [pc, #112]	; (827ac <SystemCoreClockUpdate+0x100>)
   8273a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8273c:	4b19      	ldr	r3, [pc, #100]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   8273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82740:	f003 0303 	and.w	r3, r3, #3
   82744:	2b02      	cmp	r3, #2
   82746:	d016      	beq.n	82776 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82748:	4a1c      	ldr	r2, [pc, #112]	; (827bc <SystemCoreClockUpdate+0x110>)
   8274a:	4b18      	ldr	r3, [pc, #96]	; (827ac <SystemCoreClockUpdate+0x100>)
   8274c:	601a      	str	r2, [r3, #0]
   8274e:	e7c2      	b.n	826d6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82750:	4a18      	ldr	r2, [pc, #96]	; (827b4 <SystemCoreClockUpdate+0x108>)
   82752:	4b16      	ldr	r3, [pc, #88]	; (827ac <SystemCoreClockUpdate+0x100>)
   82754:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82756:	4b13      	ldr	r3, [pc, #76]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   82758:	6a1b      	ldr	r3, [r3, #32]
   8275a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8275e:	2b10      	cmp	r3, #16
   82760:	d005      	beq.n	8276e <SystemCoreClockUpdate+0xc2>
   82762:	2b20      	cmp	r3, #32
   82764:	d1ea      	bne.n	8273c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82766:	4a12      	ldr	r2, [pc, #72]	; (827b0 <SystemCoreClockUpdate+0x104>)
   82768:	4b10      	ldr	r3, [pc, #64]	; (827ac <SystemCoreClockUpdate+0x100>)
   8276a:	601a      	str	r2, [r3, #0]
				break;
   8276c:	e7e6      	b.n	8273c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8276e:	4a12      	ldr	r2, [pc, #72]	; (827b8 <SystemCoreClockUpdate+0x10c>)
   82770:	4b0e      	ldr	r3, [pc, #56]	; (827ac <SystemCoreClockUpdate+0x100>)
   82772:	601a      	str	r2, [r3, #0]
				break;
   82774:	e7e2      	b.n	8273c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82776:	4a0b      	ldr	r2, [pc, #44]	; (827a4 <SystemCoreClockUpdate+0xf8>)
   82778:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8277a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8277c:	480b      	ldr	r0, [pc, #44]	; (827ac <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8277e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   82782:	6803      	ldr	r3, [r0, #0]
   82784:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82788:	b2d2      	uxtb	r2, r2
   8278a:	fbb3 f3f2 	udiv	r3, r3, r2
   8278e:	6003      	str	r3, [r0, #0]
   82790:	e7a1      	b.n	826d6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   82792:	4a06      	ldr	r2, [pc, #24]	; (827ac <SystemCoreClockUpdate+0x100>)
   82794:	6813      	ldr	r3, [r2, #0]
   82796:	490a      	ldr	r1, [pc, #40]	; (827c0 <SystemCoreClockUpdate+0x114>)
   82798:	fba1 1303 	umull	r1, r3, r1, r3
   8279c:	085b      	lsrs	r3, r3, #1
   8279e:	6013      	str	r3, [r2, #0]
   827a0:	4770      	bx	lr
   827a2:	bf00      	nop
   827a4:	400e0600 	.word	0x400e0600
   827a8:	400e1a10 	.word	0x400e1a10
   827ac:	20070130 	.word	0x20070130
   827b0:	00b71b00 	.word	0x00b71b00
   827b4:	003d0900 	.word	0x003d0900
   827b8:	007a1200 	.word	0x007a1200
   827bc:	0e4e1c00 	.word	0x0e4e1c00
   827c0:	aaaaaaab 	.word	0xaaaaaaab

000827c4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   827c4:	4b0a      	ldr	r3, [pc, #40]	; (827f0 <_sbrk+0x2c>)
   827c6:	681b      	ldr	r3, [r3, #0]
   827c8:	b153      	cbz	r3, 827e0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   827ca:	4b09      	ldr	r3, [pc, #36]	; (827f0 <_sbrk+0x2c>)
   827cc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   827ce:	181a      	adds	r2, r3, r0
   827d0:	4908      	ldr	r1, [pc, #32]	; (827f4 <_sbrk+0x30>)
   827d2:	4291      	cmp	r1, r2
   827d4:	db08      	blt.n	827e8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   827d6:	4610      	mov	r0, r2
   827d8:	4a05      	ldr	r2, [pc, #20]	; (827f0 <_sbrk+0x2c>)
   827da:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   827dc:	4618      	mov	r0, r3
   827de:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   827e0:	4a05      	ldr	r2, [pc, #20]	; (827f8 <_sbrk+0x34>)
   827e2:	4b03      	ldr	r3, [pc, #12]	; (827f0 <_sbrk+0x2c>)
   827e4:	601a      	str	r2, [r3, #0]
   827e6:	e7f0      	b.n	827ca <_sbrk+0x6>
		return (caddr_t) -1;	
   827e8:	f04f 30ff 	mov.w	r0, #4294967295
}
   827ec:	4770      	bx	lr
   827ee:	bf00      	nop
   827f0:	2007c350 	.word	0x2007c350
   827f4:	20087ffc 	.word	0x20087ffc
   827f8:	2007e400 	.word	0x2007e400

000827fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   827fc:	f04f 30ff 	mov.w	r0, #4294967295
   82800:	4770      	bx	lr

00082802 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82806:	604b      	str	r3, [r1, #4]

	return 0;
}
   82808:	2000      	movs	r0, #0
   8280a:	4770      	bx	lr

0008280c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8280c:	2000      	movs	r0, #0
   8280e:	4770      	bx	lr

00082810 <writer1>:

#include <writer1.h>

void writer1(void*);

void writer1 (void *pvParameters) {
   82810:	b500      	push	{lr}
   82812:	b085      	sub	sp, #20
	portTickType xLastWakeTime ;
	xLastWakeTime = xTaskGetTickCount();
   82814:	4b08      	ldr	r3, [pc, #32]	; (82838 <writer1+0x28>)
   82816:	4798      	blx	r3
   82818:	9003      	str	r0, [sp, #12]
	char cStr[] = "Vad "; 	/* Creates the string to be printed to the console */
   8281a:	4b08      	ldr	r3, [pc, #32]	; (8283c <writer1+0x2c>)
   8281c:	e893 0003 	ldmia.w	r3, {r0, r1}
   82820:	9001      	str	r0, [sp, #4]
   82822:	f88d 1008 	strb.w	r1, [sp, #8]
	
	for(;;) {
		
		printfConsole(cStr);	/* Calls the printing function defined in the console_po.c file */
   82826:	4d06      	ldr	r5, [pc, #24]	; (82840 <writer1+0x30>)
		vTaskDelayUntil(&xLastWakeTime, (writer1Period/portTICK_PERIOD_MS));
   82828:	4c06      	ldr	r4, [pc, #24]	; (82844 <writer1+0x34>)
		printfConsole(cStr);	/* Calls the printing function defined in the console_po.c file */
   8282a:	a801      	add	r0, sp, #4
   8282c:	47a8      	blx	r5
		vTaskDelayUntil(&xLastWakeTime, (writer1Period/portTICK_PERIOD_MS));
   8282e:	2101      	movs	r1, #1
   82830:	a803      	add	r0, sp, #12
   82832:	47a0      	blx	r4
   82834:	e7f9      	b.n	8282a <writer1+0x1a>
   82836:	bf00      	nop
   82838:	0008157d 	.word	0x0008157d
   8283c:	00083b00 	.word	0x00083b00
   82840:	00080361 	.word	0x00080361
   82844:	000817d1 	.word	0x000817d1

00082848 <init_writer1>:
	}
	
	vTaskDelete( NULL );
}
	
void init_writer1() {
   82848:	b510      	push	{r4, lr}
   8284a:	b082      	sub	sp, #8
	/* Create task */
	xTaskCreate(
   8284c:	2300      	movs	r3, #0
   8284e:	9301      	str	r3, [sp, #4]
   82850:	2201      	movs	r2, #1
   82852:	9200      	str	r2, [sp, #0]
   82854:	22fa      	movs	r2, #250	; 0xfa
   82856:	4903      	ldr	r1, [pc, #12]	; (82864 <init_writer1+0x1c>)
   82858:	4803      	ldr	r0, [pc, #12]	; (82868 <init_writer1+0x20>)
   8285a:	4c04      	ldr	r4, [pc, #16]	; (8286c <init_writer1+0x24>)
   8285c:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */							
	NULL,						/* Parameter passed into the task. */
	1,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   8285e:	b002      	add	sp, #8
   82860:	bd10      	pop	{r4, pc}
   82862:	bf00      	nop
   82864:	00083ae8 	.word	0x00083ae8
   82868:	00082811 	.word	0x00082811
   8286c:	000812ed 	.word	0x000812ed

00082870 <writer2>:


void writer2 (void*);


void writer2 (void *pvParameters) {
   82870:	b500      	push	{lr}
   82872:	b085      	sub	sp, #20
	portTickType xLastWakeTime ;
	xLastWakeTime = xTaskGetTickCount();
   82874:	4b09      	ldr	r3, [pc, #36]	; (8289c <writer2+0x2c>)
   82876:	4798      	blx	r3
   82878:	9003      	str	r0, [sp, #12]
	char cStr[] = "Bra! \n"; 	/* Creates the string to be printed to the console */
   8287a:	4b09      	ldr	r3, [pc, #36]	; (828a0 <writer2+0x30>)
   8287c:	e893 0003 	ldmia.w	r3, {r0, r1}
   82880:	9001      	str	r0, [sp, #4]
   82882:	f8ad 1008 	strh.w	r1, [sp, #8]
   82886:	0c09      	lsrs	r1, r1, #16
   82888:	f88d 100a 	strb.w	r1, [sp, #10]
	
	for(;;) {
		
		printfConsole(cStr);	/* Calls the printing function defined in the console_po.c file */
   8288c:	4d05      	ldr	r5, [pc, #20]	; (828a4 <writer2+0x34>)
		vTaskDelayUntil(&xLastWakeTime, (writer2Period/portTICK_PERIOD_MS));
   8288e:	4c06      	ldr	r4, [pc, #24]	; (828a8 <writer2+0x38>)
		printfConsole(cStr);	/* Calls the printing function defined in the console_po.c file */
   82890:	a801      	add	r0, sp, #4
   82892:	47a8      	blx	r5
		vTaskDelayUntil(&xLastWakeTime, (writer2Period/portTICK_PERIOD_MS));
   82894:	2101      	movs	r1, #1
   82896:	a803      	add	r0, sp, #12
   82898:	47a0      	blx	r4
   8289a:	e7f9      	b.n	82890 <writer2+0x20>
   8289c:	0008157d 	.word	0x0008157d
   828a0:	00083b20 	.word	0x00083b20
   828a4:	00080361 	.word	0x00080361
   828a8:	000817d1 	.word	0x000817d1

000828ac <init_writer2>:
	vTaskDelete( NULL );
}



void init_writer2() {
   828ac:	b510      	push	{r4, lr}
   828ae:	b082      	sub	sp, #8
	/* Create task */
	xTaskCreate(
   828b0:	2300      	movs	r3, #0
   828b2:	9301      	str	r3, [sp, #4]
   828b4:	2201      	movs	r2, #1
   828b6:	9200      	str	r2, [sp, #0]
   828b8:	22fa      	movs	r2, #250	; 0xfa
   828ba:	4903      	ldr	r1, [pc, #12]	; (828c8 <init_writer2+0x1c>)
   828bc:	4803      	ldr	r0, [pc, #12]	; (828cc <init_writer2+0x20>)
   828be:	4c04      	ldr	r4, [pc, #16]	; (828d0 <init_writer2+0x24>)
   828c0:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */								// What's this?
	NULL,						/* Parameter passed into the task. */
	1,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   828c2:	b002      	add	sp, #8
   828c4:	bd10      	pop	{r4, pc}
   828c6:	bf00      	nop
   828c8:	00083b08 	.word	0x00083b08
   828cc:	00082871 	.word	0x00082871
   828d0:	000812ed 	.word	0x000812ed

000828d4 <main>:

#include <writer1.h>
#include <writer2.h>

int main (void)
{
   828d4:	b508      	push	{r3, lr}
	/* System clock initialization */
	sysclk_init();
   828d6:	4b07      	ldr	r3, [pc, #28]	; (828f4 <main+0x20>)
   828d8:	4798      	blx	r3
	
	/* Board peripherals initialization */
	board_init();
   828da:	4b07      	ldr	r3, [pc, #28]	; (828f8 <main+0x24>)
   828dc:	4798      	blx	r3
	
	/* Init UART console */
	console_init();
   828de:	4b07      	ldr	r3, [pc, #28]	; (828fc <main+0x28>)
   828e0:	4798      	blx	r3
	/* Init tasks */
	init_writer1();
   828e2:	4b07      	ldr	r3, [pc, #28]	; (82900 <main+0x2c>)
   828e4:	4798      	blx	r3
	init_writer2();
   828e6:	4b07      	ldr	r3, [pc, #28]	; (82904 <main+0x30>)
   828e8:	4798      	blx	r3
	
	/* Start scheduler */
	vTaskStartScheduler();
   828ea:	4b07      	ldr	r3, [pc, #28]	; (82908 <main+0x34>)
   828ec:	4798      	blx	r3
	
	/* Should never reach here ... */
	return 1;
}
   828ee:	2001      	movs	r0, #1
   828f0:	bd08      	pop	{r3, pc}
   828f2:	bf00      	nop
   828f4:	00082179 	.word	0x00082179
   828f8:	000821dd 	.word	0x000821dd
   828fc:	000803b1 	.word	0x000803b1
   82900:	00082849 	.word	0x00082849
   82904:	000828ad 	.word	0x000828ad
   82908:	000814e1 	.word	0x000814e1

0008290c <__libc_init_array>:
   8290c:	b570      	push	{r4, r5, r6, lr}
   8290e:	4e0f      	ldr	r6, [pc, #60]	; (8294c <__libc_init_array+0x40>)
   82910:	4d0f      	ldr	r5, [pc, #60]	; (82950 <__libc_init_array+0x44>)
   82912:	1b76      	subs	r6, r6, r5
   82914:	10b6      	asrs	r6, r6, #2
   82916:	bf18      	it	ne
   82918:	2400      	movne	r4, #0
   8291a:	d005      	beq.n	82928 <__libc_init_array+0x1c>
   8291c:	3401      	adds	r4, #1
   8291e:	f855 3b04 	ldr.w	r3, [r5], #4
   82922:	4798      	blx	r3
   82924:	42a6      	cmp	r6, r4
   82926:	d1f9      	bne.n	8291c <__libc_init_array+0x10>
   82928:	4e0a      	ldr	r6, [pc, #40]	; (82954 <__libc_init_array+0x48>)
   8292a:	4d0b      	ldr	r5, [pc, #44]	; (82958 <__libc_init_array+0x4c>)
   8292c:	f001 f8fe 	bl	83b2c <_init>
   82930:	1b76      	subs	r6, r6, r5
   82932:	10b6      	asrs	r6, r6, #2
   82934:	bf18      	it	ne
   82936:	2400      	movne	r4, #0
   82938:	d006      	beq.n	82948 <__libc_init_array+0x3c>
   8293a:	3401      	adds	r4, #1
   8293c:	f855 3b04 	ldr.w	r3, [r5], #4
   82940:	4798      	blx	r3
   82942:	42a6      	cmp	r6, r4
   82944:	d1f9      	bne.n	8293a <__libc_init_array+0x2e>
   82946:	bd70      	pop	{r4, r5, r6, pc}
   82948:	bd70      	pop	{r4, r5, r6, pc}
   8294a:	bf00      	nop
   8294c:	00083b38 	.word	0x00083b38
   82950:	00083b38 	.word	0x00083b38
   82954:	00083b40 	.word	0x00083b40
   82958:	00083b38 	.word	0x00083b38

0008295c <memcpy>:
   8295c:	4684      	mov	ip, r0
   8295e:	ea41 0300 	orr.w	r3, r1, r0
   82962:	f013 0303 	ands.w	r3, r3, #3
   82966:	d149      	bne.n	829fc <memcpy+0xa0>
   82968:	3a40      	subs	r2, #64	; 0x40
   8296a:	d323      	bcc.n	829b4 <memcpy+0x58>
   8296c:	680b      	ldr	r3, [r1, #0]
   8296e:	6003      	str	r3, [r0, #0]
   82970:	684b      	ldr	r3, [r1, #4]
   82972:	6043      	str	r3, [r0, #4]
   82974:	688b      	ldr	r3, [r1, #8]
   82976:	6083      	str	r3, [r0, #8]
   82978:	68cb      	ldr	r3, [r1, #12]
   8297a:	60c3      	str	r3, [r0, #12]
   8297c:	690b      	ldr	r3, [r1, #16]
   8297e:	6103      	str	r3, [r0, #16]
   82980:	694b      	ldr	r3, [r1, #20]
   82982:	6143      	str	r3, [r0, #20]
   82984:	698b      	ldr	r3, [r1, #24]
   82986:	6183      	str	r3, [r0, #24]
   82988:	69cb      	ldr	r3, [r1, #28]
   8298a:	61c3      	str	r3, [r0, #28]
   8298c:	6a0b      	ldr	r3, [r1, #32]
   8298e:	6203      	str	r3, [r0, #32]
   82990:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82992:	6243      	str	r3, [r0, #36]	; 0x24
   82994:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82996:	6283      	str	r3, [r0, #40]	; 0x28
   82998:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8299a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8299c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8299e:	6303      	str	r3, [r0, #48]	; 0x30
   829a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   829a2:	6343      	str	r3, [r0, #52]	; 0x34
   829a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   829a6:	6383      	str	r3, [r0, #56]	; 0x38
   829a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   829aa:	63c3      	str	r3, [r0, #60]	; 0x3c
   829ac:	3040      	adds	r0, #64	; 0x40
   829ae:	3140      	adds	r1, #64	; 0x40
   829b0:	3a40      	subs	r2, #64	; 0x40
   829b2:	d2db      	bcs.n	8296c <memcpy+0x10>
   829b4:	3230      	adds	r2, #48	; 0x30
   829b6:	d30b      	bcc.n	829d0 <memcpy+0x74>
   829b8:	680b      	ldr	r3, [r1, #0]
   829ba:	6003      	str	r3, [r0, #0]
   829bc:	684b      	ldr	r3, [r1, #4]
   829be:	6043      	str	r3, [r0, #4]
   829c0:	688b      	ldr	r3, [r1, #8]
   829c2:	6083      	str	r3, [r0, #8]
   829c4:	68cb      	ldr	r3, [r1, #12]
   829c6:	60c3      	str	r3, [r0, #12]
   829c8:	3010      	adds	r0, #16
   829ca:	3110      	adds	r1, #16
   829cc:	3a10      	subs	r2, #16
   829ce:	d2f3      	bcs.n	829b8 <memcpy+0x5c>
   829d0:	320c      	adds	r2, #12
   829d2:	d305      	bcc.n	829e0 <memcpy+0x84>
   829d4:	f851 3b04 	ldr.w	r3, [r1], #4
   829d8:	f840 3b04 	str.w	r3, [r0], #4
   829dc:	3a04      	subs	r2, #4
   829de:	d2f9      	bcs.n	829d4 <memcpy+0x78>
   829e0:	3204      	adds	r2, #4
   829e2:	d008      	beq.n	829f6 <memcpy+0x9a>
   829e4:	07d2      	lsls	r2, r2, #31
   829e6:	bf1c      	itt	ne
   829e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   829ec:	f800 3b01 	strbne.w	r3, [r0], #1
   829f0:	d301      	bcc.n	829f6 <memcpy+0x9a>
   829f2:	880b      	ldrh	r3, [r1, #0]
   829f4:	8003      	strh	r3, [r0, #0]
   829f6:	4660      	mov	r0, ip
   829f8:	4770      	bx	lr
   829fa:	bf00      	nop
   829fc:	2a08      	cmp	r2, #8
   829fe:	d313      	bcc.n	82a28 <memcpy+0xcc>
   82a00:	078b      	lsls	r3, r1, #30
   82a02:	d0b1      	beq.n	82968 <memcpy+0xc>
   82a04:	f010 0303 	ands.w	r3, r0, #3
   82a08:	d0ae      	beq.n	82968 <memcpy+0xc>
   82a0a:	f1c3 0304 	rsb	r3, r3, #4
   82a0e:	1ad2      	subs	r2, r2, r3
   82a10:	07db      	lsls	r3, r3, #31
   82a12:	bf1c      	itt	ne
   82a14:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82a18:	f800 3b01 	strbne.w	r3, [r0], #1
   82a1c:	d3a4      	bcc.n	82968 <memcpy+0xc>
   82a1e:	f831 3b02 	ldrh.w	r3, [r1], #2
   82a22:	f820 3b02 	strh.w	r3, [r0], #2
   82a26:	e79f      	b.n	82968 <memcpy+0xc>
   82a28:	3a04      	subs	r2, #4
   82a2a:	d3d9      	bcc.n	829e0 <memcpy+0x84>
   82a2c:	3a01      	subs	r2, #1
   82a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
   82a32:	f800 3b01 	strb.w	r3, [r0], #1
   82a36:	d2f9      	bcs.n	82a2c <memcpy+0xd0>
   82a38:	780b      	ldrb	r3, [r1, #0]
   82a3a:	7003      	strb	r3, [r0, #0]
   82a3c:	784b      	ldrb	r3, [r1, #1]
   82a3e:	7043      	strb	r3, [r0, #1]
   82a40:	788b      	ldrb	r3, [r1, #2]
   82a42:	7083      	strb	r3, [r0, #2]
   82a44:	4660      	mov	r0, ip
   82a46:	4770      	bx	lr

00082a48 <memset>:
   82a48:	b470      	push	{r4, r5, r6}
   82a4a:	0786      	lsls	r6, r0, #30
   82a4c:	d046      	beq.n	82adc <memset+0x94>
   82a4e:	1e54      	subs	r4, r2, #1
   82a50:	2a00      	cmp	r2, #0
   82a52:	d041      	beq.n	82ad8 <memset+0x90>
   82a54:	b2ca      	uxtb	r2, r1
   82a56:	4603      	mov	r3, r0
   82a58:	e002      	b.n	82a60 <memset+0x18>
   82a5a:	f114 34ff 	adds.w	r4, r4, #4294967295
   82a5e:	d33b      	bcc.n	82ad8 <memset+0x90>
   82a60:	f803 2b01 	strb.w	r2, [r3], #1
   82a64:	079d      	lsls	r5, r3, #30
   82a66:	d1f8      	bne.n	82a5a <memset+0x12>
   82a68:	2c03      	cmp	r4, #3
   82a6a:	d92e      	bls.n	82aca <memset+0x82>
   82a6c:	b2cd      	uxtb	r5, r1
   82a6e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82a72:	2c0f      	cmp	r4, #15
   82a74:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82a78:	d919      	bls.n	82aae <memset+0x66>
   82a7a:	4626      	mov	r6, r4
   82a7c:	f103 0210 	add.w	r2, r3, #16
   82a80:	3e10      	subs	r6, #16
   82a82:	2e0f      	cmp	r6, #15
   82a84:	f842 5c10 	str.w	r5, [r2, #-16]
   82a88:	f842 5c0c 	str.w	r5, [r2, #-12]
   82a8c:	f842 5c08 	str.w	r5, [r2, #-8]
   82a90:	f842 5c04 	str.w	r5, [r2, #-4]
   82a94:	f102 0210 	add.w	r2, r2, #16
   82a98:	d8f2      	bhi.n	82a80 <memset+0x38>
   82a9a:	f1a4 0210 	sub.w	r2, r4, #16
   82a9e:	f022 020f 	bic.w	r2, r2, #15
   82aa2:	f004 040f 	and.w	r4, r4, #15
   82aa6:	3210      	adds	r2, #16
   82aa8:	2c03      	cmp	r4, #3
   82aaa:	4413      	add	r3, r2
   82aac:	d90d      	bls.n	82aca <memset+0x82>
   82aae:	461e      	mov	r6, r3
   82ab0:	4622      	mov	r2, r4
   82ab2:	3a04      	subs	r2, #4
   82ab4:	2a03      	cmp	r2, #3
   82ab6:	f846 5b04 	str.w	r5, [r6], #4
   82aba:	d8fa      	bhi.n	82ab2 <memset+0x6a>
   82abc:	1f22      	subs	r2, r4, #4
   82abe:	f022 0203 	bic.w	r2, r2, #3
   82ac2:	3204      	adds	r2, #4
   82ac4:	4413      	add	r3, r2
   82ac6:	f004 0403 	and.w	r4, r4, #3
   82aca:	b12c      	cbz	r4, 82ad8 <memset+0x90>
   82acc:	b2c9      	uxtb	r1, r1
   82ace:	441c      	add	r4, r3
   82ad0:	f803 1b01 	strb.w	r1, [r3], #1
   82ad4:	429c      	cmp	r4, r3
   82ad6:	d1fb      	bne.n	82ad0 <memset+0x88>
   82ad8:	bc70      	pop	{r4, r5, r6}
   82ada:	4770      	bx	lr
   82adc:	4614      	mov	r4, r2
   82ade:	4603      	mov	r3, r0
   82ae0:	e7c2      	b.n	82a68 <memset+0x20>
   82ae2:	bf00      	nop

00082ae4 <setbuf>:
   82ae4:	2900      	cmp	r1, #0
   82ae6:	bf0c      	ite	eq
   82ae8:	2202      	moveq	r2, #2
   82aea:	2200      	movne	r2, #0
   82aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82af0:	f000 b800 	b.w	82af4 <setvbuf>

00082af4 <setvbuf>:
   82af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82af8:	4d61      	ldr	r5, [pc, #388]	; (82c80 <setvbuf+0x18c>)
   82afa:	b083      	sub	sp, #12
   82afc:	682d      	ldr	r5, [r5, #0]
   82afe:	4604      	mov	r4, r0
   82b00:	460f      	mov	r7, r1
   82b02:	4690      	mov	r8, r2
   82b04:	461e      	mov	r6, r3
   82b06:	b115      	cbz	r5, 82b0e <setvbuf+0x1a>
   82b08:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82b0a:	2b00      	cmp	r3, #0
   82b0c:	d064      	beq.n	82bd8 <setvbuf+0xe4>
   82b0e:	f1b8 0f02 	cmp.w	r8, #2
   82b12:	d006      	beq.n	82b22 <setvbuf+0x2e>
   82b14:	f1b8 0f01 	cmp.w	r8, #1
   82b18:	f200 809f 	bhi.w	82c5a <setvbuf+0x166>
   82b1c:	2e00      	cmp	r6, #0
   82b1e:	f2c0 809c 	blt.w	82c5a <setvbuf+0x166>
   82b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82b24:	07d8      	lsls	r0, r3, #31
   82b26:	d534      	bpl.n	82b92 <setvbuf+0x9e>
   82b28:	4621      	mov	r1, r4
   82b2a:	4628      	mov	r0, r5
   82b2c:	f000 f956 	bl	82ddc <_fflush_r>
   82b30:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82b32:	b141      	cbz	r1, 82b46 <setvbuf+0x52>
   82b34:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82b38:	4299      	cmp	r1, r3
   82b3a:	d002      	beq.n	82b42 <setvbuf+0x4e>
   82b3c:	4628      	mov	r0, r5
   82b3e:	f000 fa4b 	bl	82fd8 <_free_r>
   82b42:	2300      	movs	r3, #0
   82b44:	6323      	str	r3, [r4, #48]	; 0x30
   82b46:	2200      	movs	r2, #0
   82b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b4c:	61a2      	str	r2, [r4, #24]
   82b4e:	6062      	str	r2, [r4, #4]
   82b50:	061a      	lsls	r2, r3, #24
   82b52:	d43a      	bmi.n	82bca <setvbuf+0xd6>
   82b54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82b58:	f023 0303 	bic.w	r3, r3, #3
   82b5c:	f1b8 0f02 	cmp.w	r8, #2
   82b60:	81a3      	strh	r3, [r4, #12]
   82b62:	d01d      	beq.n	82ba0 <setvbuf+0xac>
   82b64:	ab01      	add	r3, sp, #4
   82b66:	466a      	mov	r2, sp
   82b68:	4621      	mov	r1, r4
   82b6a:	4628      	mov	r0, r5
   82b6c:	f000 fb4a 	bl	83204 <__swhatbuf_r>
   82b70:	89a3      	ldrh	r3, [r4, #12]
   82b72:	4318      	orrs	r0, r3
   82b74:	81a0      	strh	r0, [r4, #12]
   82b76:	2e00      	cmp	r6, #0
   82b78:	d132      	bne.n	82be0 <setvbuf+0xec>
   82b7a:	9e00      	ldr	r6, [sp, #0]
   82b7c:	4630      	mov	r0, r6
   82b7e:	f000 fb6f 	bl	83260 <malloc>
   82b82:	4607      	mov	r7, r0
   82b84:	2800      	cmp	r0, #0
   82b86:	d06b      	beq.n	82c60 <setvbuf+0x16c>
   82b88:	89a3      	ldrh	r3, [r4, #12]
   82b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b8e:	81a3      	strh	r3, [r4, #12]
   82b90:	e028      	b.n	82be4 <setvbuf+0xf0>
   82b92:	89a3      	ldrh	r3, [r4, #12]
   82b94:	0599      	lsls	r1, r3, #22
   82b96:	d4c7      	bmi.n	82b28 <setvbuf+0x34>
   82b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82b9a:	f000 fb2f 	bl	831fc <__retarget_lock_acquire_recursive>
   82b9e:	e7c3      	b.n	82b28 <setvbuf+0x34>
   82ba0:	2500      	movs	r5, #0
   82ba2:	2600      	movs	r6, #0
   82ba4:	2001      	movs	r0, #1
   82ba6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82bac:	f043 0302 	orr.w	r3, r3, #2
   82bb0:	60a6      	str	r6, [r4, #8]
   82bb2:	07ce      	lsls	r6, r1, #31
   82bb4:	81a3      	strh	r3, [r4, #12]
   82bb6:	6160      	str	r0, [r4, #20]
   82bb8:	6022      	str	r2, [r4, #0]
   82bba:	6122      	str	r2, [r4, #16]
   82bbc:	d401      	bmi.n	82bc2 <setvbuf+0xce>
   82bbe:	0598      	lsls	r0, r3, #22
   82bc0:	d53e      	bpl.n	82c40 <setvbuf+0x14c>
   82bc2:	4628      	mov	r0, r5
   82bc4:	b003      	add	sp, #12
   82bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82bca:	6921      	ldr	r1, [r4, #16]
   82bcc:	4628      	mov	r0, r5
   82bce:	f000 fa03 	bl	82fd8 <_free_r>
   82bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bd6:	e7bd      	b.n	82b54 <setvbuf+0x60>
   82bd8:	4628      	mov	r0, r5
   82bda:	f000 f957 	bl	82e8c <__sinit>
   82bde:	e796      	b.n	82b0e <setvbuf+0x1a>
   82be0:	2f00      	cmp	r7, #0
   82be2:	d0cb      	beq.n	82b7c <setvbuf+0x88>
   82be4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82be6:	2b00      	cmp	r3, #0
   82be8:	d033      	beq.n	82c52 <setvbuf+0x15e>
   82bea:	9b00      	ldr	r3, [sp, #0]
   82bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82bf0:	429e      	cmp	r6, r3
   82bf2:	bf1c      	itt	ne
   82bf4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82bf8:	81a2      	strhne	r2, [r4, #12]
   82bfa:	f1b8 0f01 	cmp.w	r8, #1
   82bfe:	bf04      	itt	eq
   82c00:	f042 0201 	orreq.w	r2, r2, #1
   82c04:	81a2      	strheq	r2, [r4, #12]
   82c06:	b292      	uxth	r2, r2
   82c08:	f012 0308 	ands.w	r3, r2, #8
   82c0c:	6027      	str	r7, [r4, #0]
   82c0e:	6127      	str	r7, [r4, #16]
   82c10:	6166      	str	r6, [r4, #20]
   82c12:	d00e      	beq.n	82c32 <setvbuf+0x13e>
   82c14:	07d1      	lsls	r1, r2, #31
   82c16:	d51a      	bpl.n	82c4e <setvbuf+0x15a>
   82c18:	2300      	movs	r3, #0
   82c1a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82c1c:	4276      	negs	r6, r6
   82c1e:	f015 0501 	ands.w	r5, r5, #1
   82c22:	61a6      	str	r6, [r4, #24]
   82c24:	60a3      	str	r3, [r4, #8]
   82c26:	d009      	beq.n	82c3c <setvbuf+0x148>
   82c28:	2500      	movs	r5, #0
   82c2a:	4628      	mov	r0, r5
   82c2c:	b003      	add	sp, #12
   82c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82c32:	60a3      	str	r3, [r4, #8]
   82c34:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82c36:	f015 0501 	ands.w	r5, r5, #1
   82c3a:	d1f5      	bne.n	82c28 <setvbuf+0x134>
   82c3c:	0593      	lsls	r3, r2, #22
   82c3e:	d4c0      	bmi.n	82bc2 <setvbuf+0xce>
   82c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82c42:	f000 fadd 	bl	83200 <__retarget_lock_release_recursive>
   82c46:	4628      	mov	r0, r5
   82c48:	b003      	add	sp, #12
   82c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82c4e:	60a6      	str	r6, [r4, #8]
   82c50:	e7f0      	b.n	82c34 <setvbuf+0x140>
   82c52:	4628      	mov	r0, r5
   82c54:	f000 f91a 	bl	82e8c <__sinit>
   82c58:	e7c7      	b.n	82bea <setvbuf+0xf6>
   82c5a:	f04f 35ff 	mov.w	r5, #4294967295
   82c5e:	e7b0      	b.n	82bc2 <setvbuf+0xce>
   82c60:	f8dd 9000 	ldr.w	r9, [sp]
   82c64:	45b1      	cmp	r9, r6
   82c66:	d004      	beq.n	82c72 <setvbuf+0x17e>
   82c68:	4648      	mov	r0, r9
   82c6a:	f000 faf9 	bl	83260 <malloc>
   82c6e:	4607      	mov	r7, r0
   82c70:	b920      	cbnz	r0, 82c7c <setvbuf+0x188>
   82c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c76:	f04f 35ff 	mov.w	r5, #4294967295
   82c7a:	e792      	b.n	82ba2 <setvbuf+0xae>
   82c7c:	464e      	mov	r6, r9
   82c7e:	e783      	b.n	82b88 <setvbuf+0x94>
   82c80:	20070134 	.word	0x20070134

00082c84 <register_fini>:
   82c84:	4b02      	ldr	r3, [pc, #8]	; (82c90 <register_fini+0xc>)
   82c86:	b113      	cbz	r3, 82c8e <register_fini+0xa>
   82c88:	4802      	ldr	r0, [pc, #8]	; (82c94 <register_fini+0x10>)
   82c8a:	f000 b805 	b.w	82c98 <atexit>
   82c8e:	4770      	bx	lr
   82c90:	00000000 	.word	0x00000000
   82c94:	00082f05 	.word	0x00082f05

00082c98 <atexit>:
   82c98:	2300      	movs	r3, #0
   82c9a:	4601      	mov	r1, r0
   82c9c:	461a      	mov	r2, r3
   82c9e:	4618      	mov	r0, r3
   82ca0:	f000 be00 	b.w	838a4 <__register_exitproc>

00082ca4 <__sflush_r>:
   82ca4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82cac:	b29a      	uxth	r2, r3
   82cae:	460d      	mov	r5, r1
   82cb0:	0711      	lsls	r1, r2, #28
   82cb2:	4680      	mov	r8, r0
   82cb4:	d43a      	bmi.n	82d2c <__sflush_r+0x88>
   82cb6:	686a      	ldr	r2, [r5, #4]
   82cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82cbc:	2a00      	cmp	r2, #0
   82cbe:	81ab      	strh	r3, [r5, #12]
   82cc0:	dd70      	ble.n	82da4 <__sflush_r+0x100>
   82cc2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82cc4:	2c00      	cmp	r4, #0
   82cc6:	d04a      	beq.n	82d5e <__sflush_r+0xba>
   82cc8:	2200      	movs	r2, #0
   82cca:	b29b      	uxth	r3, r3
   82ccc:	f8d8 6000 	ldr.w	r6, [r8]
   82cd0:	f8c8 2000 	str.w	r2, [r8]
   82cd4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82cd8:	d068      	beq.n	82dac <__sflush_r+0x108>
   82cda:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82cdc:	075f      	lsls	r7, r3, #29
   82cde:	d505      	bpl.n	82cec <__sflush_r+0x48>
   82ce0:	6869      	ldr	r1, [r5, #4]
   82ce2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82ce4:	1a52      	subs	r2, r2, r1
   82ce6:	b10b      	cbz	r3, 82cec <__sflush_r+0x48>
   82ce8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82cea:	1ad2      	subs	r2, r2, r3
   82cec:	2300      	movs	r3, #0
   82cee:	69e9      	ldr	r1, [r5, #28]
   82cf0:	4640      	mov	r0, r8
   82cf2:	47a0      	blx	r4
   82cf4:	1c44      	adds	r4, r0, #1
   82cf6:	d03d      	beq.n	82d74 <__sflush_r+0xd0>
   82cf8:	2100      	movs	r1, #0
   82cfa:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82cfe:	692a      	ldr	r2, [r5, #16]
   82d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82d04:	81ab      	strh	r3, [r5, #12]
   82d06:	04db      	lsls	r3, r3, #19
   82d08:	6069      	str	r1, [r5, #4]
   82d0a:	602a      	str	r2, [r5, #0]
   82d0c:	d448      	bmi.n	82da0 <__sflush_r+0xfc>
   82d0e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82d10:	f8c8 6000 	str.w	r6, [r8]
   82d14:	b319      	cbz	r1, 82d5e <__sflush_r+0xba>
   82d16:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82d1a:	4299      	cmp	r1, r3
   82d1c:	d002      	beq.n	82d24 <__sflush_r+0x80>
   82d1e:	4640      	mov	r0, r8
   82d20:	f000 f95a 	bl	82fd8 <_free_r>
   82d24:	2000      	movs	r0, #0
   82d26:	6328      	str	r0, [r5, #48]	; 0x30
   82d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d2c:	692e      	ldr	r6, [r5, #16]
   82d2e:	b1b6      	cbz	r6, 82d5e <__sflush_r+0xba>
   82d30:	0791      	lsls	r1, r2, #30
   82d32:	bf18      	it	ne
   82d34:	2300      	movne	r3, #0
   82d36:	682c      	ldr	r4, [r5, #0]
   82d38:	bf08      	it	eq
   82d3a:	696b      	ldreq	r3, [r5, #20]
   82d3c:	602e      	str	r6, [r5, #0]
   82d3e:	1ba4      	subs	r4, r4, r6
   82d40:	60ab      	str	r3, [r5, #8]
   82d42:	e00a      	b.n	82d5a <__sflush_r+0xb6>
   82d44:	4623      	mov	r3, r4
   82d46:	4632      	mov	r2, r6
   82d48:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82d4a:	69e9      	ldr	r1, [r5, #28]
   82d4c:	4640      	mov	r0, r8
   82d4e:	47b8      	blx	r7
   82d50:	2800      	cmp	r0, #0
   82d52:	eba4 0400 	sub.w	r4, r4, r0
   82d56:	4406      	add	r6, r0
   82d58:	dd04      	ble.n	82d64 <__sflush_r+0xc0>
   82d5a:	2c00      	cmp	r4, #0
   82d5c:	dcf2      	bgt.n	82d44 <__sflush_r+0xa0>
   82d5e:	2000      	movs	r0, #0
   82d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d64:	89ab      	ldrh	r3, [r5, #12]
   82d66:	f04f 30ff 	mov.w	r0, #4294967295
   82d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d6e:	81ab      	strh	r3, [r5, #12]
   82d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d74:	f8d8 4000 	ldr.w	r4, [r8]
   82d78:	2c1d      	cmp	r4, #29
   82d7a:	d8f3      	bhi.n	82d64 <__sflush_r+0xc0>
   82d7c:	4b16      	ldr	r3, [pc, #88]	; (82dd8 <__sflush_r+0x134>)
   82d7e:	40e3      	lsrs	r3, r4
   82d80:	43db      	mvns	r3, r3
   82d82:	f013 0301 	ands.w	r3, r3, #1
   82d86:	d1ed      	bne.n	82d64 <__sflush_r+0xc0>
   82d88:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82d8c:	6929      	ldr	r1, [r5, #16]
   82d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82d92:	81aa      	strh	r2, [r5, #12]
   82d94:	04d2      	lsls	r2, r2, #19
   82d96:	606b      	str	r3, [r5, #4]
   82d98:	6029      	str	r1, [r5, #0]
   82d9a:	d5b8      	bpl.n	82d0e <__sflush_r+0x6a>
   82d9c:	2c00      	cmp	r4, #0
   82d9e:	d1b6      	bne.n	82d0e <__sflush_r+0x6a>
   82da0:	6528      	str	r0, [r5, #80]	; 0x50
   82da2:	e7b4      	b.n	82d0e <__sflush_r+0x6a>
   82da4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82da6:	2a00      	cmp	r2, #0
   82da8:	dc8b      	bgt.n	82cc2 <__sflush_r+0x1e>
   82daa:	e7d8      	b.n	82d5e <__sflush_r+0xba>
   82dac:	2301      	movs	r3, #1
   82dae:	69e9      	ldr	r1, [r5, #28]
   82db0:	4640      	mov	r0, r8
   82db2:	47a0      	blx	r4
   82db4:	1c43      	adds	r3, r0, #1
   82db6:	4602      	mov	r2, r0
   82db8:	d002      	beq.n	82dc0 <__sflush_r+0x11c>
   82dba:	89ab      	ldrh	r3, [r5, #12]
   82dbc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82dbe:	e78d      	b.n	82cdc <__sflush_r+0x38>
   82dc0:	f8d8 3000 	ldr.w	r3, [r8]
   82dc4:	2b00      	cmp	r3, #0
   82dc6:	d0f8      	beq.n	82dba <__sflush_r+0x116>
   82dc8:	2b1d      	cmp	r3, #29
   82dca:	d001      	beq.n	82dd0 <__sflush_r+0x12c>
   82dcc:	2b16      	cmp	r3, #22
   82dce:	d1c9      	bne.n	82d64 <__sflush_r+0xc0>
   82dd0:	f8c8 6000 	str.w	r6, [r8]
   82dd4:	e7c3      	b.n	82d5e <__sflush_r+0xba>
   82dd6:	bf00      	nop
   82dd8:	20400001 	.word	0x20400001

00082ddc <_fflush_r>:
   82ddc:	b538      	push	{r3, r4, r5, lr}
   82dde:	460d      	mov	r5, r1
   82de0:	4604      	mov	r4, r0
   82de2:	b108      	cbz	r0, 82de8 <_fflush_r+0xc>
   82de4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82de6:	b1bb      	cbz	r3, 82e18 <_fflush_r+0x3c>
   82de8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82dec:	b188      	cbz	r0, 82e12 <_fflush_r+0x36>
   82dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82df0:	07db      	lsls	r3, r3, #31
   82df2:	d401      	bmi.n	82df8 <_fflush_r+0x1c>
   82df4:	0581      	lsls	r1, r0, #22
   82df6:	d517      	bpl.n	82e28 <_fflush_r+0x4c>
   82df8:	4620      	mov	r0, r4
   82dfa:	4629      	mov	r1, r5
   82dfc:	f7ff ff52 	bl	82ca4 <__sflush_r>
   82e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82e02:	4604      	mov	r4, r0
   82e04:	07da      	lsls	r2, r3, #31
   82e06:	d402      	bmi.n	82e0e <_fflush_r+0x32>
   82e08:	89ab      	ldrh	r3, [r5, #12]
   82e0a:	059b      	lsls	r3, r3, #22
   82e0c:	d507      	bpl.n	82e1e <_fflush_r+0x42>
   82e0e:	4620      	mov	r0, r4
   82e10:	bd38      	pop	{r3, r4, r5, pc}
   82e12:	4604      	mov	r4, r0
   82e14:	4620      	mov	r0, r4
   82e16:	bd38      	pop	{r3, r4, r5, pc}
   82e18:	f000 f838 	bl	82e8c <__sinit>
   82e1c:	e7e4      	b.n	82de8 <_fflush_r+0xc>
   82e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82e20:	f000 f9ee 	bl	83200 <__retarget_lock_release_recursive>
   82e24:	4620      	mov	r0, r4
   82e26:	bd38      	pop	{r3, r4, r5, pc}
   82e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82e2a:	f000 f9e7 	bl	831fc <__retarget_lock_acquire_recursive>
   82e2e:	e7e3      	b.n	82df8 <_fflush_r+0x1c>

00082e30 <_cleanup_r>:
   82e30:	4901      	ldr	r1, [pc, #4]	; (82e38 <_cleanup_r+0x8>)
   82e32:	f000 b9b7 	b.w	831a4 <_fwalk_reent>
   82e36:	bf00      	nop
   82e38:	0008398d 	.word	0x0008398d

00082e3c <std.isra.0>:
   82e3c:	2300      	movs	r3, #0
   82e3e:	b510      	push	{r4, lr}
   82e40:	4604      	mov	r4, r0
   82e42:	8181      	strh	r1, [r0, #12]
   82e44:	81c2      	strh	r2, [r0, #14]
   82e46:	6003      	str	r3, [r0, #0]
   82e48:	6043      	str	r3, [r0, #4]
   82e4a:	6083      	str	r3, [r0, #8]
   82e4c:	6643      	str	r3, [r0, #100]	; 0x64
   82e4e:	6103      	str	r3, [r0, #16]
   82e50:	6143      	str	r3, [r0, #20]
   82e52:	6183      	str	r3, [r0, #24]
   82e54:	4619      	mov	r1, r3
   82e56:	2208      	movs	r2, #8
   82e58:	305c      	adds	r0, #92	; 0x5c
   82e5a:	f7ff fdf5 	bl	82a48 <memset>
   82e5e:	4807      	ldr	r0, [pc, #28]	; (82e7c <std.isra.0+0x40>)
   82e60:	4907      	ldr	r1, [pc, #28]	; (82e80 <std.isra.0+0x44>)
   82e62:	4a08      	ldr	r2, [pc, #32]	; (82e84 <std.isra.0+0x48>)
   82e64:	4b08      	ldr	r3, [pc, #32]	; (82e88 <std.isra.0+0x4c>)
   82e66:	6220      	str	r0, [r4, #32]
   82e68:	61e4      	str	r4, [r4, #28]
   82e6a:	6261      	str	r1, [r4, #36]	; 0x24
   82e6c:	62a2      	str	r2, [r4, #40]	; 0x28
   82e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
   82e70:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82e78:	f000 b9bc 	b.w	831f4 <__retarget_lock_init_recursive>
   82e7c:	000837f1 	.word	0x000837f1
   82e80:	00083815 	.word	0x00083815
   82e84:	00083851 	.word	0x00083851
   82e88:	00083871 	.word	0x00083871

00082e8c <__sinit>:
   82e8c:	b510      	push	{r4, lr}
   82e8e:	4604      	mov	r4, r0
   82e90:	4814      	ldr	r0, [pc, #80]	; (82ee4 <__sinit+0x58>)
   82e92:	f000 f9b3 	bl	831fc <__retarget_lock_acquire_recursive>
   82e96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82e98:	b9fa      	cbnz	r2, 82eda <__sinit+0x4e>
   82e9a:	2003      	movs	r0, #3
   82e9c:	4912      	ldr	r1, [pc, #72]	; (82ee8 <__sinit+0x5c>)
   82e9e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82ea2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82ea6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82eaa:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82eae:	63e1      	str	r1, [r4, #60]	; 0x3c
   82eb0:	6860      	ldr	r0, [r4, #4]
   82eb2:	2104      	movs	r1, #4
   82eb4:	f7ff ffc2 	bl	82e3c <std.isra.0>
   82eb8:	68a0      	ldr	r0, [r4, #8]
   82eba:	2201      	movs	r2, #1
   82ebc:	2109      	movs	r1, #9
   82ebe:	f7ff ffbd 	bl	82e3c <std.isra.0>
   82ec2:	68e0      	ldr	r0, [r4, #12]
   82ec4:	2202      	movs	r2, #2
   82ec6:	2112      	movs	r1, #18
   82ec8:	f7ff ffb8 	bl	82e3c <std.isra.0>
   82ecc:	2301      	movs	r3, #1
   82ece:	4805      	ldr	r0, [pc, #20]	; (82ee4 <__sinit+0x58>)
   82ed0:	63a3      	str	r3, [r4, #56]	; 0x38
   82ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82ed6:	f000 b993 	b.w	83200 <__retarget_lock_release_recursive>
   82eda:	4802      	ldr	r0, [pc, #8]	; (82ee4 <__sinit+0x58>)
   82edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82ee0:	f000 b98e 	b.w	83200 <__retarget_lock_release_recursive>
   82ee4:	2007c3e4 	.word	0x2007c3e4
   82ee8:	00082e31 	.word	0x00082e31

00082eec <__sfp_lock_acquire>:
   82eec:	4801      	ldr	r0, [pc, #4]	; (82ef4 <__sfp_lock_acquire+0x8>)
   82eee:	f000 b985 	b.w	831fc <__retarget_lock_acquire_recursive>
   82ef2:	bf00      	nop
   82ef4:	2007c3f8 	.word	0x2007c3f8

00082ef8 <__sfp_lock_release>:
   82ef8:	4801      	ldr	r0, [pc, #4]	; (82f00 <__sfp_lock_release+0x8>)
   82efa:	f000 b981 	b.w	83200 <__retarget_lock_release_recursive>
   82efe:	bf00      	nop
   82f00:	2007c3f8 	.word	0x2007c3f8

00082f04 <__libc_fini_array>:
   82f04:	b538      	push	{r3, r4, r5, lr}
   82f06:	4c0a      	ldr	r4, [pc, #40]	; (82f30 <__libc_fini_array+0x2c>)
   82f08:	4d0a      	ldr	r5, [pc, #40]	; (82f34 <__libc_fini_array+0x30>)
   82f0a:	1b64      	subs	r4, r4, r5
   82f0c:	10a4      	asrs	r4, r4, #2
   82f0e:	d00a      	beq.n	82f26 <__libc_fini_array+0x22>
   82f10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82f14:	3b01      	subs	r3, #1
   82f16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82f1a:	3c01      	subs	r4, #1
   82f1c:	f855 3904 	ldr.w	r3, [r5], #-4
   82f20:	4798      	blx	r3
   82f22:	2c00      	cmp	r4, #0
   82f24:	d1f9      	bne.n	82f1a <__libc_fini_array+0x16>
   82f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82f2a:	f000 be09 	b.w	83b40 <_fini>
   82f2e:	bf00      	nop
   82f30:	00083b50 	.word	0x00083b50
   82f34:	00083b4c 	.word	0x00083b4c

00082f38 <_malloc_trim_r>:
   82f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f3a:	460c      	mov	r4, r1
   82f3c:	4f23      	ldr	r7, [pc, #140]	; (82fcc <_malloc_trim_r+0x94>)
   82f3e:	4606      	mov	r6, r0
   82f40:	f000 fc38 	bl	837b4 <__malloc_lock>
   82f44:	68bb      	ldr	r3, [r7, #8]
   82f46:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82f4a:	685d      	ldr	r5, [r3, #4]
   82f4c:	310f      	adds	r1, #15
   82f4e:	f025 0503 	bic.w	r5, r5, #3
   82f52:	4429      	add	r1, r5
   82f54:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82f58:	f021 010f 	bic.w	r1, r1, #15
   82f5c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82f60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82f64:	db07      	blt.n	82f76 <_malloc_trim_r+0x3e>
   82f66:	2100      	movs	r1, #0
   82f68:	4630      	mov	r0, r6
   82f6a:	f000 fc2f 	bl	837cc <_sbrk_r>
   82f6e:	68bb      	ldr	r3, [r7, #8]
   82f70:	442b      	add	r3, r5
   82f72:	4298      	cmp	r0, r3
   82f74:	d004      	beq.n	82f80 <_malloc_trim_r+0x48>
   82f76:	4630      	mov	r0, r6
   82f78:	f000 fc22 	bl	837c0 <__malloc_unlock>
   82f7c:	2000      	movs	r0, #0
   82f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f80:	4261      	negs	r1, r4
   82f82:	4630      	mov	r0, r6
   82f84:	f000 fc22 	bl	837cc <_sbrk_r>
   82f88:	3001      	adds	r0, #1
   82f8a:	d00d      	beq.n	82fa8 <_malloc_trim_r+0x70>
   82f8c:	4b10      	ldr	r3, [pc, #64]	; (82fd0 <_malloc_trim_r+0x98>)
   82f8e:	68ba      	ldr	r2, [r7, #8]
   82f90:	6819      	ldr	r1, [r3, #0]
   82f92:	1b2d      	subs	r5, r5, r4
   82f94:	f045 0501 	orr.w	r5, r5, #1
   82f98:	4630      	mov	r0, r6
   82f9a:	1b09      	subs	r1, r1, r4
   82f9c:	6055      	str	r5, [r2, #4]
   82f9e:	6019      	str	r1, [r3, #0]
   82fa0:	f000 fc0e 	bl	837c0 <__malloc_unlock>
   82fa4:	2001      	movs	r0, #1
   82fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82fa8:	2100      	movs	r1, #0
   82faa:	4630      	mov	r0, r6
   82fac:	f000 fc0e 	bl	837cc <_sbrk_r>
   82fb0:	68ba      	ldr	r2, [r7, #8]
   82fb2:	1a83      	subs	r3, r0, r2
   82fb4:	2b0f      	cmp	r3, #15
   82fb6:	ddde      	ble.n	82f76 <_malloc_trim_r+0x3e>
   82fb8:	4c06      	ldr	r4, [pc, #24]	; (82fd4 <_malloc_trim_r+0x9c>)
   82fba:	4905      	ldr	r1, [pc, #20]	; (82fd0 <_malloc_trim_r+0x98>)
   82fbc:	6824      	ldr	r4, [r4, #0]
   82fbe:	f043 0301 	orr.w	r3, r3, #1
   82fc2:	1b00      	subs	r0, r0, r4
   82fc4:	6053      	str	r3, [r2, #4]
   82fc6:	6008      	str	r0, [r1, #0]
   82fc8:	e7d5      	b.n	82f76 <_malloc_trim_r+0x3e>
   82fca:	bf00      	nop
   82fcc:	20070564 	.word	0x20070564
   82fd0:	2007c354 	.word	0x2007c354
   82fd4:	2007096c 	.word	0x2007096c

00082fd8 <_free_r>:
   82fd8:	2900      	cmp	r1, #0
   82fda:	d044      	beq.n	83066 <_free_r+0x8e>
   82fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82fe0:	460d      	mov	r5, r1
   82fe2:	4680      	mov	r8, r0
   82fe4:	f000 fbe6 	bl	837b4 <__malloc_lock>
   82fe8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82fec:	4969      	ldr	r1, [pc, #420]	; (83194 <_free_r+0x1bc>)
   82fee:	f1a5 0408 	sub.w	r4, r5, #8
   82ff2:	f027 0301 	bic.w	r3, r7, #1
   82ff6:	18e2      	adds	r2, r4, r3
   82ff8:	688e      	ldr	r6, [r1, #8]
   82ffa:	6850      	ldr	r0, [r2, #4]
   82ffc:	42b2      	cmp	r2, r6
   82ffe:	f020 0003 	bic.w	r0, r0, #3
   83002:	d05e      	beq.n	830c2 <_free_r+0xea>
   83004:	07fe      	lsls	r6, r7, #31
   83006:	6050      	str	r0, [r2, #4]
   83008:	d40b      	bmi.n	83022 <_free_r+0x4a>
   8300a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8300e:	f101 0e08 	add.w	lr, r1, #8
   83012:	1be4      	subs	r4, r4, r7
   83014:	68a5      	ldr	r5, [r4, #8]
   83016:	443b      	add	r3, r7
   83018:	4575      	cmp	r5, lr
   8301a:	d06d      	beq.n	830f8 <_free_r+0x120>
   8301c:	68e7      	ldr	r7, [r4, #12]
   8301e:	60ef      	str	r7, [r5, #12]
   83020:	60bd      	str	r5, [r7, #8]
   83022:	1815      	adds	r5, r2, r0
   83024:	686d      	ldr	r5, [r5, #4]
   83026:	07ed      	lsls	r5, r5, #31
   83028:	d53e      	bpl.n	830a8 <_free_r+0xd0>
   8302a:	f043 0201 	orr.w	r2, r3, #1
   8302e:	6062      	str	r2, [r4, #4]
   83030:	50e3      	str	r3, [r4, r3]
   83032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83036:	d217      	bcs.n	83068 <_free_r+0x90>
   83038:	2201      	movs	r2, #1
   8303a:	08db      	lsrs	r3, r3, #3
   8303c:	1098      	asrs	r0, r3, #2
   8303e:	684d      	ldr	r5, [r1, #4]
   83040:	4413      	add	r3, r2
   83042:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83046:	4082      	lsls	r2, r0
   83048:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8304c:	432a      	orrs	r2, r5
   8304e:	3808      	subs	r0, #8
   83050:	60e0      	str	r0, [r4, #12]
   83052:	60a7      	str	r7, [r4, #8]
   83054:	604a      	str	r2, [r1, #4]
   83056:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8305a:	60fc      	str	r4, [r7, #12]
   8305c:	4640      	mov	r0, r8
   8305e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83062:	f000 bbad 	b.w	837c0 <__malloc_unlock>
   83066:	4770      	bx	lr
   83068:	0a5a      	lsrs	r2, r3, #9
   8306a:	2a04      	cmp	r2, #4
   8306c:	d852      	bhi.n	83114 <_free_r+0x13c>
   8306e:	099a      	lsrs	r2, r3, #6
   83070:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83074:	00ff      	lsls	r7, r7, #3
   83076:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8307a:	19c8      	adds	r0, r1, r7
   8307c:	59ca      	ldr	r2, [r1, r7]
   8307e:	3808      	subs	r0, #8
   83080:	4290      	cmp	r0, r2
   83082:	d04f      	beq.n	83124 <_free_r+0x14c>
   83084:	6851      	ldr	r1, [r2, #4]
   83086:	f021 0103 	bic.w	r1, r1, #3
   8308a:	428b      	cmp	r3, r1
   8308c:	d232      	bcs.n	830f4 <_free_r+0x11c>
   8308e:	6892      	ldr	r2, [r2, #8]
   83090:	4290      	cmp	r0, r2
   83092:	d1f7      	bne.n	83084 <_free_r+0xac>
   83094:	68c3      	ldr	r3, [r0, #12]
   83096:	60a0      	str	r0, [r4, #8]
   83098:	60e3      	str	r3, [r4, #12]
   8309a:	609c      	str	r4, [r3, #8]
   8309c:	60c4      	str	r4, [r0, #12]
   8309e:	4640      	mov	r0, r8
   830a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   830a4:	f000 bb8c 	b.w	837c0 <__malloc_unlock>
   830a8:	6895      	ldr	r5, [r2, #8]
   830aa:	4f3b      	ldr	r7, [pc, #236]	; (83198 <_free_r+0x1c0>)
   830ac:	4403      	add	r3, r0
   830ae:	42bd      	cmp	r5, r7
   830b0:	d040      	beq.n	83134 <_free_r+0x15c>
   830b2:	68d0      	ldr	r0, [r2, #12]
   830b4:	f043 0201 	orr.w	r2, r3, #1
   830b8:	60e8      	str	r0, [r5, #12]
   830ba:	6085      	str	r5, [r0, #8]
   830bc:	6062      	str	r2, [r4, #4]
   830be:	50e3      	str	r3, [r4, r3]
   830c0:	e7b7      	b.n	83032 <_free_r+0x5a>
   830c2:	07ff      	lsls	r7, r7, #31
   830c4:	4403      	add	r3, r0
   830c6:	d407      	bmi.n	830d8 <_free_r+0x100>
   830c8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   830cc:	1b64      	subs	r4, r4, r5
   830ce:	68e2      	ldr	r2, [r4, #12]
   830d0:	68a0      	ldr	r0, [r4, #8]
   830d2:	442b      	add	r3, r5
   830d4:	60c2      	str	r2, [r0, #12]
   830d6:	6090      	str	r0, [r2, #8]
   830d8:	4a30      	ldr	r2, [pc, #192]	; (8319c <_free_r+0x1c4>)
   830da:	f043 0001 	orr.w	r0, r3, #1
   830de:	6812      	ldr	r2, [r2, #0]
   830e0:	6060      	str	r0, [r4, #4]
   830e2:	4293      	cmp	r3, r2
   830e4:	608c      	str	r4, [r1, #8]
   830e6:	d3b9      	bcc.n	8305c <_free_r+0x84>
   830e8:	4b2d      	ldr	r3, [pc, #180]	; (831a0 <_free_r+0x1c8>)
   830ea:	4640      	mov	r0, r8
   830ec:	6819      	ldr	r1, [r3, #0]
   830ee:	f7ff ff23 	bl	82f38 <_malloc_trim_r>
   830f2:	e7b3      	b.n	8305c <_free_r+0x84>
   830f4:	4610      	mov	r0, r2
   830f6:	e7cd      	b.n	83094 <_free_r+0xbc>
   830f8:	1811      	adds	r1, r2, r0
   830fa:	6849      	ldr	r1, [r1, #4]
   830fc:	07c9      	lsls	r1, r1, #31
   830fe:	d444      	bmi.n	8318a <_free_r+0x1b2>
   83100:	6891      	ldr	r1, [r2, #8]
   83102:	4403      	add	r3, r0
   83104:	68d2      	ldr	r2, [r2, #12]
   83106:	f043 0001 	orr.w	r0, r3, #1
   8310a:	60ca      	str	r2, [r1, #12]
   8310c:	6091      	str	r1, [r2, #8]
   8310e:	6060      	str	r0, [r4, #4]
   83110:	50e3      	str	r3, [r4, r3]
   83112:	e7a3      	b.n	8305c <_free_r+0x84>
   83114:	2a14      	cmp	r2, #20
   83116:	d816      	bhi.n	83146 <_free_r+0x16e>
   83118:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8311c:	00ff      	lsls	r7, r7, #3
   8311e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83122:	e7aa      	b.n	8307a <_free_r+0xa2>
   83124:	2301      	movs	r3, #1
   83126:	10aa      	asrs	r2, r5, #2
   83128:	684d      	ldr	r5, [r1, #4]
   8312a:	4093      	lsls	r3, r2
   8312c:	432b      	orrs	r3, r5
   8312e:	604b      	str	r3, [r1, #4]
   83130:	4603      	mov	r3, r0
   83132:	e7b0      	b.n	83096 <_free_r+0xbe>
   83134:	f043 0201 	orr.w	r2, r3, #1
   83138:	614c      	str	r4, [r1, #20]
   8313a:	610c      	str	r4, [r1, #16]
   8313c:	60e5      	str	r5, [r4, #12]
   8313e:	60a5      	str	r5, [r4, #8]
   83140:	6062      	str	r2, [r4, #4]
   83142:	50e3      	str	r3, [r4, r3]
   83144:	e78a      	b.n	8305c <_free_r+0x84>
   83146:	2a54      	cmp	r2, #84	; 0x54
   83148:	d806      	bhi.n	83158 <_free_r+0x180>
   8314a:	0b1a      	lsrs	r2, r3, #12
   8314c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83150:	00ff      	lsls	r7, r7, #3
   83152:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83156:	e790      	b.n	8307a <_free_r+0xa2>
   83158:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8315c:	d806      	bhi.n	8316c <_free_r+0x194>
   8315e:	0bda      	lsrs	r2, r3, #15
   83160:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83164:	00ff      	lsls	r7, r7, #3
   83166:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8316a:	e786      	b.n	8307a <_free_r+0xa2>
   8316c:	f240 5054 	movw	r0, #1364	; 0x554
   83170:	4282      	cmp	r2, r0
   83172:	d806      	bhi.n	83182 <_free_r+0x1aa>
   83174:	0c9a      	lsrs	r2, r3, #18
   83176:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8317a:	00ff      	lsls	r7, r7, #3
   8317c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83180:	e77b      	b.n	8307a <_free_r+0xa2>
   83182:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83186:	257e      	movs	r5, #126	; 0x7e
   83188:	e777      	b.n	8307a <_free_r+0xa2>
   8318a:	f043 0101 	orr.w	r1, r3, #1
   8318e:	6061      	str	r1, [r4, #4]
   83190:	6013      	str	r3, [r2, #0]
   83192:	e763      	b.n	8305c <_free_r+0x84>
   83194:	20070564 	.word	0x20070564
   83198:	2007056c 	.word	0x2007056c
   8319c:	20070970 	.word	0x20070970
   831a0:	2007c384 	.word	0x2007c384

000831a4 <_fwalk_reent>:
   831a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   831a8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   831ac:	d01e      	beq.n	831ec <_fwalk_reent+0x48>
   831ae:	4688      	mov	r8, r1
   831b0:	4607      	mov	r7, r0
   831b2:	f04f 0900 	mov.w	r9, #0
   831b6:	6875      	ldr	r5, [r6, #4]
   831b8:	68b4      	ldr	r4, [r6, #8]
   831ba:	3d01      	subs	r5, #1
   831bc:	d410      	bmi.n	831e0 <_fwalk_reent+0x3c>
   831be:	89a3      	ldrh	r3, [r4, #12]
   831c0:	3d01      	subs	r5, #1
   831c2:	2b01      	cmp	r3, #1
   831c4:	d908      	bls.n	831d8 <_fwalk_reent+0x34>
   831c6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   831ca:	3301      	adds	r3, #1
   831cc:	d004      	beq.n	831d8 <_fwalk_reent+0x34>
   831ce:	4621      	mov	r1, r4
   831d0:	4638      	mov	r0, r7
   831d2:	47c0      	blx	r8
   831d4:	ea49 0900 	orr.w	r9, r9, r0
   831d8:	1c6b      	adds	r3, r5, #1
   831da:	f104 0468 	add.w	r4, r4, #104	; 0x68
   831de:	d1ee      	bne.n	831be <_fwalk_reent+0x1a>
   831e0:	6836      	ldr	r6, [r6, #0]
   831e2:	2e00      	cmp	r6, #0
   831e4:	d1e7      	bne.n	831b6 <_fwalk_reent+0x12>
   831e6:	4648      	mov	r0, r9
   831e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   831ec:	46b1      	mov	r9, r6
   831ee:	4648      	mov	r0, r9
   831f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000831f4 <__retarget_lock_init_recursive>:
   831f4:	4770      	bx	lr
   831f6:	bf00      	nop

000831f8 <__retarget_lock_close_recursive>:
   831f8:	4770      	bx	lr
   831fa:	bf00      	nop

000831fc <__retarget_lock_acquire_recursive>:
   831fc:	4770      	bx	lr
   831fe:	bf00      	nop

00083200 <__retarget_lock_release_recursive>:
   83200:	4770      	bx	lr
   83202:	bf00      	nop

00083204 <__swhatbuf_r>:
   83204:	b570      	push	{r4, r5, r6, lr}
   83206:	460c      	mov	r4, r1
   83208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8320c:	b090      	sub	sp, #64	; 0x40
   8320e:	2900      	cmp	r1, #0
   83210:	4615      	mov	r5, r2
   83212:	461e      	mov	r6, r3
   83214:	db14      	blt.n	83240 <__swhatbuf_r+0x3c>
   83216:	aa01      	add	r2, sp, #4
   83218:	f000 fc1a 	bl	83a50 <_fstat_r>
   8321c:	2800      	cmp	r0, #0
   8321e:	db0f      	blt.n	83240 <__swhatbuf_r+0x3c>
   83220:	9a02      	ldr	r2, [sp, #8]
   83222:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8322a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8322e:	fab2 f282 	clz	r2, r2
   83232:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83236:	0952      	lsrs	r2, r2, #5
   83238:	6032      	str	r2, [r6, #0]
   8323a:	602b      	str	r3, [r5, #0]
   8323c:	b010      	add	sp, #64	; 0x40
   8323e:	bd70      	pop	{r4, r5, r6, pc}
   83240:	2300      	movs	r3, #0
   83242:	89a2      	ldrh	r2, [r4, #12]
   83244:	6033      	str	r3, [r6, #0]
   83246:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8324a:	d004      	beq.n	83256 <__swhatbuf_r+0x52>
   8324c:	2240      	movs	r2, #64	; 0x40
   8324e:	4618      	mov	r0, r3
   83250:	602a      	str	r2, [r5, #0]
   83252:	b010      	add	sp, #64	; 0x40
   83254:	bd70      	pop	{r4, r5, r6, pc}
   83256:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8325a:	602b      	str	r3, [r5, #0]
   8325c:	b010      	add	sp, #64	; 0x40
   8325e:	bd70      	pop	{r4, r5, r6, pc}

00083260 <malloc>:
   83260:	4b02      	ldr	r3, [pc, #8]	; (8326c <malloc+0xc>)
   83262:	4601      	mov	r1, r0
   83264:	6818      	ldr	r0, [r3, #0]
   83266:	f000 b803 	b.w	83270 <_malloc_r>
   8326a:	bf00      	nop
   8326c:	20070134 	.word	0x20070134

00083270 <_malloc_r>:
   83270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83274:	f101 060b 	add.w	r6, r1, #11
   83278:	2e16      	cmp	r6, #22
   8327a:	b083      	sub	sp, #12
   8327c:	4605      	mov	r5, r0
   8327e:	f240 809e 	bls.w	833be <_malloc_r+0x14e>
   83282:	f036 0607 	bics.w	r6, r6, #7
   83286:	f100 80bd 	bmi.w	83404 <_malloc_r+0x194>
   8328a:	42b1      	cmp	r1, r6
   8328c:	f200 80ba 	bhi.w	83404 <_malloc_r+0x194>
   83290:	f000 fa90 	bl	837b4 <__malloc_lock>
   83294:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83298:	f0c0 8285 	bcc.w	837a6 <_malloc_r+0x536>
   8329c:	0a73      	lsrs	r3, r6, #9
   8329e:	f000 80b8 	beq.w	83412 <_malloc_r+0x1a2>
   832a2:	2b04      	cmp	r3, #4
   832a4:	f200 816c 	bhi.w	83580 <_malloc_r+0x310>
   832a8:	09b3      	lsrs	r3, r6, #6
   832aa:	f103 0039 	add.w	r0, r3, #57	; 0x39
   832ae:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   832b2:	00c1      	lsls	r1, r0, #3
   832b4:	4fb8      	ldr	r7, [pc, #736]	; (83598 <_malloc_r+0x328>)
   832b6:	4439      	add	r1, r7
   832b8:	684c      	ldr	r4, [r1, #4]
   832ba:	3908      	subs	r1, #8
   832bc:	42a1      	cmp	r1, r4
   832be:	d106      	bne.n	832ce <_malloc_r+0x5e>
   832c0:	e00c      	b.n	832dc <_malloc_r+0x6c>
   832c2:	2a00      	cmp	r2, #0
   832c4:	f280 80ab 	bge.w	8341e <_malloc_r+0x1ae>
   832c8:	68e4      	ldr	r4, [r4, #12]
   832ca:	42a1      	cmp	r1, r4
   832cc:	d006      	beq.n	832dc <_malloc_r+0x6c>
   832ce:	6863      	ldr	r3, [r4, #4]
   832d0:	f023 0303 	bic.w	r3, r3, #3
   832d4:	1b9a      	subs	r2, r3, r6
   832d6:	2a0f      	cmp	r2, #15
   832d8:	ddf3      	ble.n	832c2 <_malloc_r+0x52>
   832da:	4670      	mov	r0, lr
   832dc:	693c      	ldr	r4, [r7, #16]
   832de:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 835ac <_malloc_r+0x33c>
   832e2:	4574      	cmp	r4, lr
   832e4:	f000 819e 	beq.w	83624 <_malloc_r+0x3b4>
   832e8:	6863      	ldr	r3, [r4, #4]
   832ea:	f023 0303 	bic.w	r3, r3, #3
   832ee:	1b9a      	subs	r2, r3, r6
   832f0:	2a0f      	cmp	r2, #15
   832f2:	f300 8183 	bgt.w	835fc <_malloc_r+0x38c>
   832f6:	2a00      	cmp	r2, #0
   832f8:	f8c7 e014 	str.w	lr, [r7, #20]
   832fc:	f8c7 e010 	str.w	lr, [r7, #16]
   83300:	f280 8091 	bge.w	83426 <_malloc_r+0x1b6>
   83304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83308:	f080 8154 	bcs.w	835b4 <_malloc_r+0x344>
   8330c:	2201      	movs	r2, #1
   8330e:	08db      	lsrs	r3, r3, #3
   83310:	6879      	ldr	r1, [r7, #4]
   83312:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83316:	4413      	add	r3, r2
   83318:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8331c:	fa02 f20c 	lsl.w	r2, r2, ip
   83320:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83324:	430a      	orrs	r2, r1
   83326:	f1ac 0108 	sub.w	r1, ip, #8
   8332a:	60e1      	str	r1, [r4, #12]
   8332c:	f8c4 8008 	str.w	r8, [r4, #8]
   83330:	607a      	str	r2, [r7, #4]
   83332:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83336:	f8c8 400c 	str.w	r4, [r8, #12]
   8333a:	2401      	movs	r4, #1
   8333c:	1083      	asrs	r3, r0, #2
   8333e:	409c      	lsls	r4, r3
   83340:	4294      	cmp	r4, r2
   83342:	d87d      	bhi.n	83440 <_malloc_r+0x1d0>
   83344:	4214      	tst	r4, r2
   83346:	d106      	bne.n	83356 <_malloc_r+0xe6>
   83348:	f020 0003 	bic.w	r0, r0, #3
   8334c:	0064      	lsls	r4, r4, #1
   8334e:	4214      	tst	r4, r2
   83350:	f100 0004 	add.w	r0, r0, #4
   83354:	d0fa      	beq.n	8334c <_malloc_r+0xdc>
   83356:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8335a:	46cc      	mov	ip, r9
   8335c:	4680      	mov	r8, r0
   8335e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83362:	459c      	cmp	ip, r3
   83364:	d107      	bne.n	83376 <_malloc_r+0x106>
   83366:	e15f      	b.n	83628 <_malloc_r+0x3b8>
   83368:	2a00      	cmp	r2, #0
   8336a:	f280 816d 	bge.w	83648 <_malloc_r+0x3d8>
   8336e:	68db      	ldr	r3, [r3, #12]
   83370:	459c      	cmp	ip, r3
   83372:	f000 8159 	beq.w	83628 <_malloc_r+0x3b8>
   83376:	6859      	ldr	r1, [r3, #4]
   83378:	f021 0103 	bic.w	r1, r1, #3
   8337c:	1b8a      	subs	r2, r1, r6
   8337e:	2a0f      	cmp	r2, #15
   83380:	ddf2      	ble.n	83368 <_malloc_r+0xf8>
   83382:	68dc      	ldr	r4, [r3, #12]
   83384:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83388:	f046 0801 	orr.w	r8, r6, #1
   8338c:	4628      	mov	r0, r5
   8338e:	441e      	add	r6, r3
   83390:	f042 0501 	orr.w	r5, r2, #1
   83394:	f8c3 8004 	str.w	r8, [r3, #4]
   83398:	f8cc 400c 	str.w	r4, [ip, #12]
   8339c:	f8c4 c008 	str.w	ip, [r4, #8]
   833a0:	617e      	str	r6, [r7, #20]
   833a2:	613e      	str	r6, [r7, #16]
   833a4:	f8c6 e00c 	str.w	lr, [r6, #12]
   833a8:	f8c6 e008 	str.w	lr, [r6, #8]
   833ac:	6075      	str	r5, [r6, #4]
   833ae:	505a      	str	r2, [r3, r1]
   833b0:	9300      	str	r3, [sp, #0]
   833b2:	f000 fa05 	bl	837c0 <__malloc_unlock>
   833b6:	9b00      	ldr	r3, [sp, #0]
   833b8:	f103 0408 	add.w	r4, r3, #8
   833bc:	e01e      	b.n	833fc <_malloc_r+0x18c>
   833be:	2910      	cmp	r1, #16
   833c0:	d820      	bhi.n	83404 <_malloc_r+0x194>
   833c2:	f000 f9f7 	bl	837b4 <__malloc_lock>
   833c6:	2610      	movs	r6, #16
   833c8:	2318      	movs	r3, #24
   833ca:	2002      	movs	r0, #2
   833cc:	4f72      	ldr	r7, [pc, #456]	; (83598 <_malloc_r+0x328>)
   833ce:	443b      	add	r3, r7
   833d0:	685c      	ldr	r4, [r3, #4]
   833d2:	f1a3 0208 	sub.w	r2, r3, #8
   833d6:	4294      	cmp	r4, r2
   833d8:	f000 812f 	beq.w	8363a <_malloc_r+0x3ca>
   833dc:	6863      	ldr	r3, [r4, #4]
   833de:	68e1      	ldr	r1, [r4, #12]
   833e0:	f023 0303 	bic.w	r3, r3, #3
   833e4:	4423      	add	r3, r4
   833e6:	685a      	ldr	r2, [r3, #4]
   833e8:	68a6      	ldr	r6, [r4, #8]
   833ea:	f042 0201 	orr.w	r2, r2, #1
   833ee:	60f1      	str	r1, [r6, #12]
   833f0:	4628      	mov	r0, r5
   833f2:	608e      	str	r6, [r1, #8]
   833f4:	605a      	str	r2, [r3, #4]
   833f6:	f000 f9e3 	bl	837c0 <__malloc_unlock>
   833fa:	3408      	adds	r4, #8
   833fc:	4620      	mov	r0, r4
   833fe:	b003      	add	sp, #12
   83400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83404:	2400      	movs	r4, #0
   83406:	230c      	movs	r3, #12
   83408:	4620      	mov	r0, r4
   8340a:	602b      	str	r3, [r5, #0]
   8340c:	b003      	add	sp, #12
   8340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83412:	2040      	movs	r0, #64	; 0x40
   83414:	f44f 7100 	mov.w	r1, #512	; 0x200
   83418:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8341c:	e74a      	b.n	832b4 <_malloc_r+0x44>
   8341e:	4423      	add	r3, r4
   83420:	685a      	ldr	r2, [r3, #4]
   83422:	68e1      	ldr	r1, [r4, #12]
   83424:	e7e0      	b.n	833e8 <_malloc_r+0x178>
   83426:	4423      	add	r3, r4
   83428:	685a      	ldr	r2, [r3, #4]
   8342a:	4628      	mov	r0, r5
   8342c:	f042 0201 	orr.w	r2, r2, #1
   83430:	605a      	str	r2, [r3, #4]
   83432:	3408      	adds	r4, #8
   83434:	f000 f9c4 	bl	837c0 <__malloc_unlock>
   83438:	4620      	mov	r0, r4
   8343a:	b003      	add	sp, #12
   8343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83440:	68bc      	ldr	r4, [r7, #8]
   83442:	6863      	ldr	r3, [r4, #4]
   83444:	f023 0803 	bic.w	r8, r3, #3
   83448:	45b0      	cmp	r8, r6
   8344a:	d304      	bcc.n	83456 <_malloc_r+0x1e6>
   8344c:	eba8 0306 	sub.w	r3, r8, r6
   83450:	2b0f      	cmp	r3, #15
   83452:	f300 8085 	bgt.w	83560 <_malloc_r+0x2f0>
   83456:	f8df 9158 	ldr.w	r9, [pc, #344]	; 835b0 <_malloc_r+0x340>
   8345a:	4b50      	ldr	r3, [pc, #320]	; (8359c <_malloc_r+0x32c>)
   8345c:	f8d9 2000 	ldr.w	r2, [r9]
   83460:	681b      	ldr	r3, [r3, #0]
   83462:	3201      	adds	r2, #1
   83464:	4433      	add	r3, r6
   83466:	eb04 0a08 	add.w	sl, r4, r8
   8346a:	f000 8154 	beq.w	83716 <_malloc_r+0x4a6>
   8346e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83472:	330f      	adds	r3, #15
   83474:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83478:	f02b 0b0f 	bic.w	fp, fp, #15
   8347c:	4659      	mov	r1, fp
   8347e:	4628      	mov	r0, r5
   83480:	f000 f9a4 	bl	837cc <_sbrk_r>
   83484:	1c41      	adds	r1, r0, #1
   83486:	4602      	mov	r2, r0
   83488:	f000 80fb 	beq.w	83682 <_malloc_r+0x412>
   8348c:	4582      	cmp	sl, r0
   8348e:	f200 80f6 	bhi.w	8367e <_malloc_r+0x40e>
   83492:	4b43      	ldr	r3, [pc, #268]	; (835a0 <_malloc_r+0x330>)
   83494:	6819      	ldr	r1, [r3, #0]
   83496:	4459      	add	r1, fp
   83498:	6019      	str	r1, [r3, #0]
   8349a:	f000 814c 	beq.w	83736 <_malloc_r+0x4c6>
   8349e:	f8d9 0000 	ldr.w	r0, [r9]
   834a2:	3001      	adds	r0, #1
   834a4:	bf1b      	ittet	ne
   834a6:	eba2 0a0a 	subne.w	sl, r2, sl
   834aa:	4451      	addne	r1, sl
   834ac:	f8c9 2000 	streq.w	r2, [r9]
   834b0:	6019      	strne	r1, [r3, #0]
   834b2:	f012 0107 	ands.w	r1, r2, #7
   834b6:	f000 8114 	beq.w	836e2 <_malloc_r+0x472>
   834ba:	f1c1 0008 	rsb	r0, r1, #8
   834be:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   834c2:	4402      	add	r2, r0
   834c4:	3108      	adds	r1, #8
   834c6:	eb02 090b 	add.w	r9, r2, fp
   834ca:	f3c9 090b 	ubfx	r9, r9, #0, #12
   834ce:	eba1 0909 	sub.w	r9, r1, r9
   834d2:	4649      	mov	r1, r9
   834d4:	4628      	mov	r0, r5
   834d6:	9301      	str	r3, [sp, #4]
   834d8:	9200      	str	r2, [sp, #0]
   834da:	f000 f977 	bl	837cc <_sbrk_r>
   834de:	1c43      	adds	r3, r0, #1
   834e0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   834e4:	f000 8142 	beq.w	8376c <_malloc_r+0x4fc>
   834e8:	1a80      	subs	r0, r0, r2
   834ea:	4448      	add	r0, r9
   834ec:	f040 0001 	orr.w	r0, r0, #1
   834f0:	6819      	ldr	r1, [r3, #0]
   834f2:	42bc      	cmp	r4, r7
   834f4:	4449      	add	r1, r9
   834f6:	60ba      	str	r2, [r7, #8]
   834f8:	6019      	str	r1, [r3, #0]
   834fa:	6050      	str	r0, [r2, #4]
   834fc:	d017      	beq.n	8352e <_malloc_r+0x2be>
   834fe:	f1b8 0f0f 	cmp.w	r8, #15
   83502:	f240 80fa 	bls.w	836fa <_malloc_r+0x48a>
   83506:	f04f 0c05 	mov.w	ip, #5
   8350a:	6862      	ldr	r2, [r4, #4]
   8350c:	f1a8 000c 	sub.w	r0, r8, #12
   83510:	f020 0007 	bic.w	r0, r0, #7
   83514:	f002 0201 	and.w	r2, r2, #1
   83518:	eb04 0e00 	add.w	lr, r4, r0
   8351c:	4302      	orrs	r2, r0
   8351e:	280f      	cmp	r0, #15
   83520:	6062      	str	r2, [r4, #4]
   83522:	f8ce c004 	str.w	ip, [lr, #4]
   83526:	f8ce c008 	str.w	ip, [lr, #8]
   8352a:	f200 8116 	bhi.w	8375a <_malloc_r+0x4ea>
   8352e:	4b1d      	ldr	r3, [pc, #116]	; (835a4 <_malloc_r+0x334>)
   83530:	68bc      	ldr	r4, [r7, #8]
   83532:	681a      	ldr	r2, [r3, #0]
   83534:	4291      	cmp	r1, r2
   83536:	bf88      	it	hi
   83538:	6019      	strhi	r1, [r3, #0]
   8353a:	4b1b      	ldr	r3, [pc, #108]	; (835a8 <_malloc_r+0x338>)
   8353c:	681a      	ldr	r2, [r3, #0]
   8353e:	4291      	cmp	r1, r2
   83540:	6862      	ldr	r2, [r4, #4]
   83542:	bf88      	it	hi
   83544:	6019      	strhi	r1, [r3, #0]
   83546:	f022 0203 	bic.w	r2, r2, #3
   8354a:	4296      	cmp	r6, r2
   8354c:	eba2 0306 	sub.w	r3, r2, r6
   83550:	d801      	bhi.n	83556 <_malloc_r+0x2e6>
   83552:	2b0f      	cmp	r3, #15
   83554:	dc04      	bgt.n	83560 <_malloc_r+0x2f0>
   83556:	4628      	mov	r0, r5
   83558:	f000 f932 	bl	837c0 <__malloc_unlock>
   8355c:	2400      	movs	r4, #0
   8355e:	e74d      	b.n	833fc <_malloc_r+0x18c>
   83560:	f046 0201 	orr.w	r2, r6, #1
   83564:	f043 0301 	orr.w	r3, r3, #1
   83568:	4426      	add	r6, r4
   8356a:	6062      	str	r2, [r4, #4]
   8356c:	4628      	mov	r0, r5
   8356e:	60be      	str	r6, [r7, #8]
   83570:	3408      	adds	r4, #8
   83572:	6073      	str	r3, [r6, #4]
   83574:	f000 f924 	bl	837c0 <__malloc_unlock>
   83578:	4620      	mov	r0, r4
   8357a:	b003      	add	sp, #12
   8357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83580:	2b14      	cmp	r3, #20
   83582:	d970      	bls.n	83666 <_malloc_r+0x3f6>
   83584:	2b54      	cmp	r3, #84	; 0x54
   83586:	f200 80a2 	bhi.w	836ce <_malloc_r+0x45e>
   8358a:	0b33      	lsrs	r3, r6, #12
   8358c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83590:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83594:	00c1      	lsls	r1, r0, #3
   83596:	e68d      	b.n	832b4 <_malloc_r+0x44>
   83598:	20070564 	.word	0x20070564
   8359c:	2007c384 	.word	0x2007c384
   835a0:	2007c354 	.word	0x2007c354
   835a4:	2007c37c 	.word	0x2007c37c
   835a8:	2007c380 	.word	0x2007c380
   835ac:	2007056c 	.word	0x2007056c
   835b0:	2007096c 	.word	0x2007096c
   835b4:	0a5a      	lsrs	r2, r3, #9
   835b6:	2a04      	cmp	r2, #4
   835b8:	d95b      	bls.n	83672 <_malloc_r+0x402>
   835ba:	2a14      	cmp	r2, #20
   835bc:	f200 80ae 	bhi.w	8371c <_malloc_r+0x4ac>
   835c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   835c4:	00c9      	lsls	r1, r1, #3
   835c6:	325b      	adds	r2, #91	; 0x5b
   835c8:	eb07 0c01 	add.w	ip, r7, r1
   835cc:	5879      	ldr	r1, [r7, r1]
   835ce:	f1ac 0c08 	sub.w	ip, ip, #8
   835d2:	458c      	cmp	ip, r1
   835d4:	f000 8088 	beq.w	836e8 <_malloc_r+0x478>
   835d8:	684a      	ldr	r2, [r1, #4]
   835da:	f022 0203 	bic.w	r2, r2, #3
   835de:	4293      	cmp	r3, r2
   835e0:	d273      	bcs.n	836ca <_malloc_r+0x45a>
   835e2:	6889      	ldr	r1, [r1, #8]
   835e4:	458c      	cmp	ip, r1
   835e6:	d1f7      	bne.n	835d8 <_malloc_r+0x368>
   835e8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   835ec:	687a      	ldr	r2, [r7, #4]
   835ee:	60e3      	str	r3, [r4, #12]
   835f0:	f8c4 c008 	str.w	ip, [r4, #8]
   835f4:	609c      	str	r4, [r3, #8]
   835f6:	f8cc 400c 	str.w	r4, [ip, #12]
   835fa:	e69e      	b.n	8333a <_malloc_r+0xca>
   835fc:	f046 0c01 	orr.w	ip, r6, #1
   83600:	f042 0101 	orr.w	r1, r2, #1
   83604:	4426      	add	r6, r4
   83606:	f8c4 c004 	str.w	ip, [r4, #4]
   8360a:	4628      	mov	r0, r5
   8360c:	617e      	str	r6, [r7, #20]
   8360e:	613e      	str	r6, [r7, #16]
   83610:	f8c6 e00c 	str.w	lr, [r6, #12]
   83614:	f8c6 e008 	str.w	lr, [r6, #8]
   83618:	6071      	str	r1, [r6, #4]
   8361a:	50e2      	str	r2, [r4, r3]
   8361c:	f000 f8d0 	bl	837c0 <__malloc_unlock>
   83620:	3408      	adds	r4, #8
   83622:	e6eb      	b.n	833fc <_malloc_r+0x18c>
   83624:	687a      	ldr	r2, [r7, #4]
   83626:	e688      	b.n	8333a <_malloc_r+0xca>
   83628:	f108 0801 	add.w	r8, r8, #1
   8362c:	f018 0f03 	tst.w	r8, #3
   83630:	f10c 0c08 	add.w	ip, ip, #8
   83634:	f47f ae93 	bne.w	8335e <_malloc_r+0xee>
   83638:	e02d      	b.n	83696 <_malloc_r+0x426>
   8363a:	68dc      	ldr	r4, [r3, #12]
   8363c:	42a3      	cmp	r3, r4
   8363e:	bf08      	it	eq
   83640:	3002      	addeq	r0, #2
   83642:	f43f ae4b 	beq.w	832dc <_malloc_r+0x6c>
   83646:	e6c9      	b.n	833dc <_malloc_r+0x16c>
   83648:	461c      	mov	r4, r3
   8364a:	4419      	add	r1, r3
   8364c:	684a      	ldr	r2, [r1, #4]
   8364e:	68db      	ldr	r3, [r3, #12]
   83650:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83654:	f042 0201 	orr.w	r2, r2, #1
   83658:	604a      	str	r2, [r1, #4]
   8365a:	4628      	mov	r0, r5
   8365c:	60f3      	str	r3, [r6, #12]
   8365e:	609e      	str	r6, [r3, #8]
   83660:	f000 f8ae 	bl	837c0 <__malloc_unlock>
   83664:	e6ca      	b.n	833fc <_malloc_r+0x18c>
   83666:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8366a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8366e:	00c1      	lsls	r1, r0, #3
   83670:	e620      	b.n	832b4 <_malloc_r+0x44>
   83672:	099a      	lsrs	r2, r3, #6
   83674:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83678:	00c9      	lsls	r1, r1, #3
   8367a:	3238      	adds	r2, #56	; 0x38
   8367c:	e7a4      	b.n	835c8 <_malloc_r+0x358>
   8367e:	42bc      	cmp	r4, r7
   83680:	d054      	beq.n	8372c <_malloc_r+0x4bc>
   83682:	68bc      	ldr	r4, [r7, #8]
   83684:	6862      	ldr	r2, [r4, #4]
   83686:	f022 0203 	bic.w	r2, r2, #3
   8368a:	e75e      	b.n	8354a <_malloc_r+0x2da>
   8368c:	f859 3908 	ldr.w	r3, [r9], #-8
   83690:	4599      	cmp	r9, r3
   83692:	f040 8086 	bne.w	837a2 <_malloc_r+0x532>
   83696:	f010 0f03 	tst.w	r0, #3
   8369a:	f100 30ff 	add.w	r0, r0, #4294967295
   8369e:	d1f5      	bne.n	8368c <_malloc_r+0x41c>
   836a0:	687b      	ldr	r3, [r7, #4]
   836a2:	ea23 0304 	bic.w	r3, r3, r4
   836a6:	607b      	str	r3, [r7, #4]
   836a8:	0064      	lsls	r4, r4, #1
   836aa:	429c      	cmp	r4, r3
   836ac:	f63f aec8 	bhi.w	83440 <_malloc_r+0x1d0>
   836b0:	2c00      	cmp	r4, #0
   836b2:	f43f aec5 	beq.w	83440 <_malloc_r+0x1d0>
   836b6:	421c      	tst	r4, r3
   836b8:	4640      	mov	r0, r8
   836ba:	f47f ae4c 	bne.w	83356 <_malloc_r+0xe6>
   836be:	0064      	lsls	r4, r4, #1
   836c0:	421c      	tst	r4, r3
   836c2:	f100 0004 	add.w	r0, r0, #4
   836c6:	d0fa      	beq.n	836be <_malloc_r+0x44e>
   836c8:	e645      	b.n	83356 <_malloc_r+0xe6>
   836ca:	468c      	mov	ip, r1
   836cc:	e78c      	b.n	835e8 <_malloc_r+0x378>
   836ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   836d2:	d815      	bhi.n	83700 <_malloc_r+0x490>
   836d4:	0bf3      	lsrs	r3, r6, #15
   836d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   836da:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   836de:	00c1      	lsls	r1, r0, #3
   836e0:	e5e8      	b.n	832b4 <_malloc_r+0x44>
   836e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   836e6:	e6ee      	b.n	834c6 <_malloc_r+0x256>
   836e8:	2101      	movs	r1, #1
   836ea:	687b      	ldr	r3, [r7, #4]
   836ec:	1092      	asrs	r2, r2, #2
   836ee:	fa01 f202 	lsl.w	r2, r1, r2
   836f2:	431a      	orrs	r2, r3
   836f4:	607a      	str	r2, [r7, #4]
   836f6:	4663      	mov	r3, ip
   836f8:	e779      	b.n	835ee <_malloc_r+0x37e>
   836fa:	2301      	movs	r3, #1
   836fc:	6053      	str	r3, [r2, #4]
   836fe:	e72a      	b.n	83556 <_malloc_r+0x2e6>
   83700:	f240 5254 	movw	r2, #1364	; 0x554
   83704:	4293      	cmp	r3, r2
   83706:	d822      	bhi.n	8374e <_malloc_r+0x4de>
   83708:	0cb3      	lsrs	r3, r6, #18
   8370a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8370e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   83712:	00c1      	lsls	r1, r0, #3
   83714:	e5ce      	b.n	832b4 <_malloc_r+0x44>
   83716:	f103 0b10 	add.w	fp, r3, #16
   8371a:	e6af      	b.n	8347c <_malloc_r+0x20c>
   8371c:	2a54      	cmp	r2, #84	; 0x54
   8371e:	d829      	bhi.n	83774 <_malloc_r+0x504>
   83720:	0b1a      	lsrs	r2, r3, #12
   83722:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83726:	00c9      	lsls	r1, r1, #3
   83728:	326e      	adds	r2, #110	; 0x6e
   8372a:	e74d      	b.n	835c8 <_malloc_r+0x358>
   8372c:	4b20      	ldr	r3, [pc, #128]	; (837b0 <_malloc_r+0x540>)
   8372e:	6819      	ldr	r1, [r3, #0]
   83730:	4459      	add	r1, fp
   83732:	6019      	str	r1, [r3, #0]
   83734:	e6b3      	b.n	8349e <_malloc_r+0x22e>
   83736:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8373a:	2800      	cmp	r0, #0
   8373c:	f47f aeaf 	bne.w	8349e <_malloc_r+0x22e>
   83740:	eb08 030b 	add.w	r3, r8, fp
   83744:	68ba      	ldr	r2, [r7, #8]
   83746:	f043 0301 	orr.w	r3, r3, #1
   8374a:	6053      	str	r3, [r2, #4]
   8374c:	e6ef      	b.n	8352e <_malloc_r+0x2be>
   8374e:	207f      	movs	r0, #127	; 0x7f
   83750:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83754:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83758:	e5ac      	b.n	832b4 <_malloc_r+0x44>
   8375a:	f104 0108 	add.w	r1, r4, #8
   8375e:	4628      	mov	r0, r5
   83760:	9300      	str	r3, [sp, #0]
   83762:	f7ff fc39 	bl	82fd8 <_free_r>
   83766:	9b00      	ldr	r3, [sp, #0]
   83768:	6819      	ldr	r1, [r3, #0]
   8376a:	e6e0      	b.n	8352e <_malloc_r+0x2be>
   8376c:	2001      	movs	r0, #1
   8376e:	f04f 0900 	mov.w	r9, #0
   83772:	e6bd      	b.n	834f0 <_malloc_r+0x280>
   83774:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83778:	d805      	bhi.n	83786 <_malloc_r+0x516>
   8377a:	0bda      	lsrs	r2, r3, #15
   8377c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83780:	00c9      	lsls	r1, r1, #3
   83782:	3277      	adds	r2, #119	; 0x77
   83784:	e720      	b.n	835c8 <_malloc_r+0x358>
   83786:	f240 5154 	movw	r1, #1364	; 0x554
   8378a:	428a      	cmp	r2, r1
   8378c:	d805      	bhi.n	8379a <_malloc_r+0x52a>
   8378e:	0c9a      	lsrs	r2, r3, #18
   83790:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83794:	00c9      	lsls	r1, r1, #3
   83796:	327c      	adds	r2, #124	; 0x7c
   83798:	e716      	b.n	835c8 <_malloc_r+0x358>
   8379a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8379e:	227e      	movs	r2, #126	; 0x7e
   837a0:	e712      	b.n	835c8 <_malloc_r+0x358>
   837a2:	687b      	ldr	r3, [r7, #4]
   837a4:	e780      	b.n	836a8 <_malloc_r+0x438>
   837a6:	08f0      	lsrs	r0, r6, #3
   837a8:	f106 0308 	add.w	r3, r6, #8
   837ac:	e60e      	b.n	833cc <_malloc_r+0x15c>
   837ae:	bf00      	nop
   837b0:	2007c354 	.word	0x2007c354

000837b4 <__malloc_lock>:
   837b4:	4801      	ldr	r0, [pc, #4]	; (837bc <__malloc_lock+0x8>)
   837b6:	f7ff bd21 	b.w	831fc <__retarget_lock_acquire_recursive>
   837ba:	bf00      	nop
   837bc:	2007c3e8 	.word	0x2007c3e8

000837c0 <__malloc_unlock>:
   837c0:	4801      	ldr	r0, [pc, #4]	; (837c8 <__malloc_unlock+0x8>)
   837c2:	f7ff bd1d 	b.w	83200 <__retarget_lock_release_recursive>
   837c6:	bf00      	nop
   837c8:	2007c3e8 	.word	0x2007c3e8

000837cc <_sbrk_r>:
   837cc:	b538      	push	{r3, r4, r5, lr}
   837ce:	2300      	movs	r3, #0
   837d0:	4c06      	ldr	r4, [pc, #24]	; (837ec <_sbrk_r+0x20>)
   837d2:	4605      	mov	r5, r0
   837d4:	4608      	mov	r0, r1
   837d6:	6023      	str	r3, [r4, #0]
   837d8:	f7fe fff4 	bl	827c4 <_sbrk>
   837dc:	1c43      	adds	r3, r0, #1
   837de:	d000      	beq.n	837e2 <_sbrk_r+0x16>
   837e0:	bd38      	pop	{r3, r4, r5, pc}
   837e2:	6823      	ldr	r3, [r4, #0]
   837e4:	2b00      	cmp	r3, #0
   837e6:	d0fb      	beq.n	837e0 <_sbrk_r+0x14>
   837e8:	602b      	str	r3, [r5, #0]
   837ea:	bd38      	pop	{r3, r4, r5, pc}
   837ec:	2007c3fc 	.word	0x2007c3fc

000837f0 <__sread>:
   837f0:	b510      	push	{r4, lr}
   837f2:	460c      	mov	r4, r1
   837f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   837f8:	f000 f954 	bl	83aa4 <_read_r>
   837fc:	2800      	cmp	r0, #0
   837fe:	db03      	blt.n	83808 <__sread+0x18>
   83800:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83802:	4403      	add	r3, r0
   83804:	6523      	str	r3, [r4, #80]	; 0x50
   83806:	bd10      	pop	{r4, pc}
   83808:	89a3      	ldrh	r3, [r4, #12]
   8380a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8380e:	81a3      	strh	r3, [r4, #12]
   83810:	bd10      	pop	{r4, pc}
   83812:	bf00      	nop

00083814 <__swrite>:
   83814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83818:	460c      	mov	r4, r1
   8381a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8381e:	461f      	mov	r7, r3
   83820:	05cb      	lsls	r3, r1, #23
   83822:	4616      	mov	r6, r2
   83824:	4605      	mov	r5, r0
   83826:	d507      	bpl.n	83838 <__swrite+0x24>
   83828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8382c:	2302      	movs	r3, #2
   8382e:	2200      	movs	r2, #0
   83830:	f000 f922 	bl	83a78 <_lseek_r>
   83834:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83838:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8383c:	81a1      	strh	r1, [r4, #12]
   8383e:	463b      	mov	r3, r7
   83840:	4632      	mov	r2, r6
   83842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83846:	4628      	mov	r0, r5
   83848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8384c:	f000 b814 	b.w	83878 <_write_r>

00083850 <__sseek>:
   83850:	b510      	push	{r4, lr}
   83852:	460c      	mov	r4, r1
   83854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83858:	f000 f90e 	bl	83a78 <_lseek_r>
   8385c:	89a3      	ldrh	r3, [r4, #12]
   8385e:	1c42      	adds	r2, r0, #1
   83860:	bf0e      	itee	eq
   83862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8386a:	6520      	strne	r0, [r4, #80]	; 0x50
   8386c:	81a3      	strh	r3, [r4, #12]
   8386e:	bd10      	pop	{r4, pc}

00083870 <__sclose>:
   83870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83874:	f000 b878 	b.w	83968 <_close_r>

00083878 <_write_r>:
   83878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8387a:	460e      	mov	r6, r1
   8387c:	2500      	movs	r5, #0
   8387e:	4c08      	ldr	r4, [pc, #32]	; (838a0 <_write_r+0x28>)
   83880:	4611      	mov	r1, r2
   83882:	4607      	mov	r7, r0
   83884:	461a      	mov	r2, r3
   83886:	4630      	mov	r0, r6
   83888:	6025      	str	r5, [r4, #0]
   8388a:	f7fc fc87 	bl	8019c <_write>
   8388e:	1c43      	adds	r3, r0, #1
   83890:	d000      	beq.n	83894 <_write_r+0x1c>
   83892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83894:	6823      	ldr	r3, [r4, #0]
   83896:	2b00      	cmp	r3, #0
   83898:	d0fb      	beq.n	83892 <_write_r+0x1a>
   8389a:	603b      	str	r3, [r7, #0]
   8389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8389e:	bf00      	nop
   838a0:	2007c3fc 	.word	0x2007c3fc

000838a4 <__register_exitproc>:
   838a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   838a8:	4d2c      	ldr	r5, [pc, #176]	; (8395c <__register_exitproc+0xb8>)
   838aa:	4606      	mov	r6, r0
   838ac:	6828      	ldr	r0, [r5, #0]
   838ae:	4698      	mov	r8, r3
   838b0:	460f      	mov	r7, r1
   838b2:	4691      	mov	r9, r2
   838b4:	f7ff fca2 	bl	831fc <__retarget_lock_acquire_recursive>
   838b8:	4b29      	ldr	r3, [pc, #164]	; (83960 <__register_exitproc+0xbc>)
   838ba:	681c      	ldr	r4, [r3, #0]
   838bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   838c0:	2b00      	cmp	r3, #0
   838c2:	d03e      	beq.n	83942 <__register_exitproc+0x9e>
   838c4:	685a      	ldr	r2, [r3, #4]
   838c6:	2a1f      	cmp	r2, #31
   838c8:	dc1c      	bgt.n	83904 <__register_exitproc+0x60>
   838ca:	f102 0e01 	add.w	lr, r2, #1
   838ce:	b176      	cbz	r6, 838ee <__register_exitproc+0x4a>
   838d0:	2101      	movs	r1, #1
   838d2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   838d6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   838da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   838de:	4091      	lsls	r1, r2
   838e0:	4308      	orrs	r0, r1
   838e2:	2e02      	cmp	r6, #2
   838e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   838e8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   838ec:	d023      	beq.n	83936 <__register_exitproc+0x92>
   838ee:	3202      	adds	r2, #2
   838f0:	f8c3 e004 	str.w	lr, [r3, #4]
   838f4:	6828      	ldr	r0, [r5, #0]
   838f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   838fa:	f7ff fc81 	bl	83200 <__retarget_lock_release_recursive>
   838fe:	2000      	movs	r0, #0
   83900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83904:	4b17      	ldr	r3, [pc, #92]	; (83964 <__register_exitproc+0xc0>)
   83906:	b30b      	cbz	r3, 8394c <__register_exitproc+0xa8>
   83908:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8390c:	f7ff fca8 	bl	83260 <malloc>
   83910:	4603      	mov	r3, r0
   83912:	b1d8      	cbz	r0, 8394c <__register_exitproc+0xa8>
   83914:	2000      	movs	r0, #0
   83916:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8391a:	f04f 0e01 	mov.w	lr, #1
   8391e:	6058      	str	r0, [r3, #4]
   83920:	6019      	str	r1, [r3, #0]
   83922:	4602      	mov	r2, r0
   83924:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83928:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8392c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83930:	2e00      	cmp	r6, #0
   83932:	d0dc      	beq.n	838ee <__register_exitproc+0x4a>
   83934:	e7cc      	b.n	838d0 <__register_exitproc+0x2c>
   83936:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8393a:	4301      	orrs	r1, r0
   8393c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83940:	e7d5      	b.n	838ee <__register_exitproc+0x4a>
   83942:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83946:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8394a:	e7bb      	b.n	838c4 <__register_exitproc+0x20>
   8394c:	6828      	ldr	r0, [r5, #0]
   8394e:	f7ff fc57 	bl	83200 <__retarget_lock_release_recursive>
   83952:	f04f 30ff 	mov.w	r0, #4294967295
   83956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8395a:	bf00      	nop
   8395c:	20070560 	.word	0x20070560
   83960:	00083b28 	.word	0x00083b28
   83964:	00083261 	.word	0x00083261

00083968 <_close_r>:
   83968:	b538      	push	{r3, r4, r5, lr}
   8396a:	2300      	movs	r3, #0
   8396c:	4c06      	ldr	r4, [pc, #24]	; (83988 <_close_r+0x20>)
   8396e:	4605      	mov	r5, r0
   83970:	4608      	mov	r0, r1
   83972:	6023      	str	r3, [r4, #0]
   83974:	f7fe ff42 	bl	827fc <_close>
   83978:	1c43      	adds	r3, r0, #1
   8397a:	d000      	beq.n	8397e <_close_r+0x16>
   8397c:	bd38      	pop	{r3, r4, r5, pc}
   8397e:	6823      	ldr	r3, [r4, #0]
   83980:	2b00      	cmp	r3, #0
   83982:	d0fb      	beq.n	8397c <_close_r+0x14>
   83984:	602b      	str	r3, [r5, #0]
   83986:	bd38      	pop	{r3, r4, r5, pc}
   83988:	2007c3fc 	.word	0x2007c3fc

0008398c <_fclose_r>:
   8398c:	b570      	push	{r4, r5, r6, lr}
   8398e:	b159      	cbz	r1, 839a8 <_fclose_r+0x1c>
   83990:	4605      	mov	r5, r0
   83992:	460c      	mov	r4, r1
   83994:	b110      	cbz	r0, 8399c <_fclose_r+0x10>
   83996:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83998:	2b00      	cmp	r3, #0
   8399a:	d03c      	beq.n	83a16 <_fclose_r+0x8a>
   8399c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8399e:	07d8      	lsls	r0, r3, #31
   839a0:	d505      	bpl.n	839ae <_fclose_r+0x22>
   839a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839a6:	b92b      	cbnz	r3, 839b4 <_fclose_r+0x28>
   839a8:	2600      	movs	r6, #0
   839aa:	4630      	mov	r0, r6
   839ac:	bd70      	pop	{r4, r5, r6, pc}
   839ae:	89a3      	ldrh	r3, [r4, #12]
   839b0:	0599      	lsls	r1, r3, #22
   839b2:	d53c      	bpl.n	83a2e <_fclose_r+0xa2>
   839b4:	4621      	mov	r1, r4
   839b6:	4628      	mov	r0, r5
   839b8:	f7ff f974 	bl	82ca4 <__sflush_r>
   839bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   839be:	4606      	mov	r6, r0
   839c0:	b133      	cbz	r3, 839d0 <_fclose_r+0x44>
   839c2:	69e1      	ldr	r1, [r4, #28]
   839c4:	4628      	mov	r0, r5
   839c6:	4798      	blx	r3
   839c8:	2800      	cmp	r0, #0
   839ca:	bfb8      	it	lt
   839cc:	f04f 36ff 	movlt.w	r6, #4294967295
   839d0:	89a3      	ldrh	r3, [r4, #12]
   839d2:	061a      	lsls	r2, r3, #24
   839d4:	d422      	bmi.n	83a1c <_fclose_r+0x90>
   839d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   839d8:	b141      	cbz	r1, 839ec <_fclose_r+0x60>
   839da:	f104 0340 	add.w	r3, r4, #64	; 0x40
   839de:	4299      	cmp	r1, r3
   839e0:	d002      	beq.n	839e8 <_fclose_r+0x5c>
   839e2:	4628      	mov	r0, r5
   839e4:	f7ff faf8 	bl	82fd8 <_free_r>
   839e8:	2300      	movs	r3, #0
   839ea:	6323      	str	r3, [r4, #48]	; 0x30
   839ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
   839ee:	b121      	cbz	r1, 839fa <_fclose_r+0x6e>
   839f0:	4628      	mov	r0, r5
   839f2:	f7ff faf1 	bl	82fd8 <_free_r>
   839f6:	2300      	movs	r3, #0
   839f8:	6463      	str	r3, [r4, #68]	; 0x44
   839fa:	f7ff fa77 	bl	82eec <__sfp_lock_acquire>
   839fe:	2200      	movs	r2, #0
   83a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83a02:	81a2      	strh	r2, [r4, #12]
   83a04:	07db      	lsls	r3, r3, #31
   83a06:	d50e      	bpl.n	83a26 <_fclose_r+0x9a>
   83a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a0a:	f7ff fbf5 	bl	831f8 <__retarget_lock_close_recursive>
   83a0e:	f7ff fa73 	bl	82ef8 <__sfp_lock_release>
   83a12:	4630      	mov	r0, r6
   83a14:	bd70      	pop	{r4, r5, r6, pc}
   83a16:	f7ff fa39 	bl	82e8c <__sinit>
   83a1a:	e7bf      	b.n	8399c <_fclose_r+0x10>
   83a1c:	6921      	ldr	r1, [r4, #16]
   83a1e:	4628      	mov	r0, r5
   83a20:	f7ff fada 	bl	82fd8 <_free_r>
   83a24:	e7d7      	b.n	839d6 <_fclose_r+0x4a>
   83a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a28:	f7ff fbea 	bl	83200 <__retarget_lock_release_recursive>
   83a2c:	e7ec      	b.n	83a08 <_fclose_r+0x7c>
   83a2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a30:	f7ff fbe4 	bl	831fc <__retarget_lock_acquire_recursive>
   83a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a38:	2b00      	cmp	r3, #0
   83a3a:	d1bb      	bne.n	839b4 <_fclose_r+0x28>
   83a3c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83a3e:	f016 0601 	ands.w	r6, r6, #1
   83a42:	d1b1      	bne.n	839a8 <_fclose_r+0x1c>
   83a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a46:	f7ff fbdb 	bl	83200 <__retarget_lock_release_recursive>
   83a4a:	4630      	mov	r0, r6
   83a4c:	bd70      	pop	{r4, r5, r6, pc}
   83a4e:	bf00      	nop

00083a50 <_fstat_r>:
   83a50:	b570      	push	{r4, r5, r6, lr}
   83a52:	460d      	mov	r5, r1
   83a54:	2300      	movs	r3, #0
   83a56:	4c07      	ldr	r4, [pc, #28]	; (83a74 <_fstat_r+0x24>)
   83a58:	4606      	mov	r6, r0
   83a5a:	4611      	mov	r1, r2
   83a5c:	4628      	mov	r0, r5
   83a5e:	6023      	str	r3, [r4, #0]
   83a60:	f7fe fecf 	bl	82802 <_fstat>
   83a64:	1c43      	adds	r3, r0, #1
   83a66:	d000      	beq.n	83a6a <_fstat_r+0x1a>
   83a68:	bd70      	pop	{r4, r5, r6, pc}
   83a6a:	6823      	ldr	r3, [r4, #0]
   83a6c:	2b00      	cmp	r3, #0
   83a6e:	d0fb      	beq.n	83a68 <_fstat_r+0x18>
   83a70:	6033      	str	r3, [r6, #0]
   83a72:	bd70      	pop	{r4, r5, r6, pc}
   83a74:	2007c3fc 	.word	0x2007c3fc

00083a78 <_lseek_r>:
   83a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a7a:	460e      	mov	r6, r1
   83a7c:	2500      	movs	r5, #0
   83a7e:	4c08      	ldr	r4, [pc, #32]	; (83aa0 <_lseek_r+0x28>)
   83a80:	4611      	mov	r1, r2
   83a82:	4607      	mov	r7, r0
   83a84:	461a      	mov	r2, r3
   83a86:	4630      	mov	r0, r6
   83a88:	6025      	str	r5, [r4, #0]
   83a8a:	f7fe febf 	bl	8280c <_lseek>
   83a8e:	1c43      	adds	r3, r0, #1
   83a90:	d000      	beq.n	83a94 <_lseek_r+0x1c>
   83a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a94:	6823      	ldr	r3, [r4, #0]
   83a96:	2b00      	cmp	r3, #0
   83a98:	d0fb      	beq.n	83a92 <_lseek_r+0x1a>
   83a9a:	603b      	str	r3, [r7, #0]
   83a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a9e:	bf00      	nop
   83aa0:	2007c3fc 	.word	0x2007c3fc

00083aa4 <_read_r>:
   83aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83aa6:	460e      	mov	r6, r1
   83aa8:	2500      	movs	r5, #0
   83aaa:	4c08      	ldr	r4, [pc, #32]	; (83acc <_read_r+0x28>)
   83aac:	4611      	mov	r1, r2
   83aae:	4607      	mov	r7, r0
   83ab0:	461a      	mov	r2, r3
   83ab2:	4630      	mov	r0, r6
   83ab4:	6025      	str	r5, [r4, #0]
   83ab6:	f7fc fb53 	bl	80160 <_read>
   83aba:	1c43      	adds	r3, r0, #1
   83abc:	d000      	beq.n	83ac0 <_read_r+0x1c>
   83abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ac0:	6823      	ldr	r3, [r4, #0]
   83ac2:	2b00      	cmp	r3, #0
   83ac4:	d0fb      	beq.n	83abe <_read_r+0x1a>
   83ac6:	603b      	str	r3, [r7, #0]
   83ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83aca:	bf00      	nop
   83acc:	2007c3fc 	.word	0x2007c3fc
   83ad0:	454c4449 	.word	0x454c4449
   83ad4:	00000000 	.word	0x00000000
   83ad8:	51726d54 	.word	0x51726d54
   83adc:	00000000 	.word	0x00000000
   83ae0:	20726d54 	.word	0x20726d54
   83ae4:	00637653 	.word	0x00637653
   83ae8:	7373654d 	.word	0x7373654d
   83aec:	20656761 	.word	0x20656761
   83af0:	72702031 	.word	0x72702031
   83af4:	20746e69 	.word	0x20746e69
   83af8:	6b736174 	.word	0x6b736174
   83afc:	00000000 	.word	0x00000000
   83b00:	20646156 	.word	0x20646156
   83b04:	00000000 	.word	0x00000000
   83b08:	7373654d 	.word	0x7373654d
   83b0c:	20656761 	.word	0x20656761
   83b10:	72702032 	.word	0x72702032
   83b14:	20746e69 	.word	0x20746e69
   83b18:	6b736174 	.word	0x6b736174
   83b1c:	00000000 	.word	0x00000000
   83b20:	21617242 	.word	0x21617242
   83b24:	00000a20 	.word	0x00000a20

00083b28 <_global_impure_ptr>:
   83b28:	20070138                                8.. 

00083b2c <_init>:
   83b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b2e:	bf00      	nop
   83b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83b32:	bc08      	pop	{r3}
   83b34:	469e      	mov	lr, r3
   83b36:	4770      	bx	lr

00083b38 <__init_array_start>:
   83b38:	00082c85 	.word	0x00082c85

00083b3c <__frame_dummy_init_array_entry>:
   83b3c:	00080119                                ....

00083b40 <_fini>:
   83b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b42:	bf00      	nop
   83b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83b46:	bc08      	pop	{r3}
   83b48:	469e      	mov	lr, r3
   83b4a:	4770      	bx	lr

00083b4c <__fini_array_start>:
   83b4c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	2007c3d8                                ... 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_sbrk_base>:
2007096c:	ffffffff                                ....

20070970 <__malloc_trim_threshold>:
20070970:	00020000                                ....
