
RTOS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000510c  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008510c  0008510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00085114  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000ba88  20070ae0  00085bf4  00020ae0  2**2
                  ALLOC
  4 .stack        00002000  2007c568  0009167c  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018a60  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003891  00000000  00000000  000395c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006d1f  00000000  00000000  0003ce53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a00  00000000  00000000  00043b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b90  00000000  00000000  00044572  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000091a8  00000000  00000000  00045102  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012b93  00000000  00000000  0004e2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006c25c  00000000  00000000  00060e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000024b0  00000000  00000000  000cd09c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	68 e5 07 20 69 1f 08 00 65 1f 08 00 65 1f 08 00     h.. i...e...e...
   80010:	65 1f 08 00 65 1f 08 00 65 1f 08 00 00 00 00 00     e...e...e.......
	...
   8002c:	61 03 08 00 65 1f 08 00 00 00 00 00 01 04 08 00     a...e...........
   8003c:	49 04 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     I...e...e...e...
   8004c:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...
   8005c:	65 1f 08 00 65 1f 08 00 65 1f 08 00 00 00 00 00     e...e...e.......
   8006c:	0d 1e 08 00 21 1e 08 00 35 1e 08 00 49 1e 08 00     ....!...5...I...
	...
   80084:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...
   80094:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...
   800a4:	00 00 00 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     ....e...e...e...
   800b4:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...
   800c4:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...
   800d4:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...
   800e4:	65 1f 08 00 65 1f 08 00 65 1f 08 00 65 1f 08 00     e...e...e...e...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00085114 	.word	0x00085114

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00085114 	.word	0x00085114
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00085114 	.word	0x00085114
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	2007c4fc 	.word	0x2007c4fc
   80198:	2007c4f4 	.word	0x2007c4f4

0008019c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8019c:	3801      	subs	r0, #1
   8019e:	2802      	cmp	r0, #2
   801a0:	d815      	bhi.n	801ce <_write+0x32>
{
   801a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801a6:	460e      	mov	r6, r1
   801a8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   801aa:	b19a      	cbz	r2, 801d4 <_write+0x38>
   801ac:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 801e8 <_write+0x4c>
   801b2:	4f0c      	ldr	r7, [pc, #48]	; (801e4 <_write+0x48>)
   801b4:	f8d8 0000 	ldr.w	r0, [r8]
   801b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   801bc:	683b      	ldr	r3, [r7, #0]
   801be:	4798      	blx	r3
   801c0:	2800      	cmp	r0, #0
   801c2:	db0a      	blt.n	801da <_write+0x3e>
   801c4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   801c6:	3c01      	subs	r4, #1
   801c8:	d1f4      	bne.n	801b4 <_write+0x18>
   801ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   801ce:	f04f 30ff 	mov.w	r0, #4294967295
   801d2:	4770      	bx	lr
	for (; len != 0; --len) {
   801d4:	4610      	mov	r0, r2
   801d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   801da:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e2:	bf00      	nop
   801e4:	2007c4f8 	.word	0x2007c4f8
   801e8:	2007c4fc 	.word	0x2007c4fc

000801ec <printfConsole>:
#include <writer2.h>




void printfConsole(const char * str) {
   801ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	str = "jllkdsflkjfds";
	for(;;) {
		for( int i = 0; i < 5; i++) {
			CONF_UART->UART_THR = "j";
   801f0:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80218 <printfConsole+0x2c>
   801f4:	4f05      	ldr	r7, [pc, #20]	; (8020c <printfConsole+0x20>)
			printf("k");
   801f6:	4e06      	ldr	r6, [pc, #24]	; (80210 <printfConsole+0x24>)
void printfConsole(const char * str) {
   801f8:	2405      	movs	r4, #5
			printf("k");
   801fa:	4d06      	ldr	r5, [pc, #24]	; (80214 <printfConsole+0x28>)
			CONF_UART->UART_THR = "j";
   801fc:	f8c8 701c 	str.w	r7, [r8, #28]
			printf("k");
   80200:	4630      	mov	r0, r6
   80202:	47a8      	blx	r5
		for( int i = 0; i < 5; i++) {
   80204:	3c01      	subs	r4, #1
   80206:	d1f9      	bne.n	801fc <printfConsole+0x10>
   80208:	e7f6      	b.n	801f8 <printfConsole+0xc>
   8020a:	bf00      	nop
   8020c:	00084f10 	.word	0x00084f10
   80210:	00084f14 	.word	0x00084f14
   80214:	0008227d 	.word	0x0008227d
   80218:	400e0800 	.word	0x400e0800

0008021c <console_init>:
		}
	}
}

void console_init(void) {
   8021c:	b510      	push	{r4, lr}
   8021e:	b082      	sub	sp, #8
	xTaskCreate(
   80220:	2300      	movs	r3, #0
   80222:	9301      	str	r3, [sp, #4]
   80224:	2201      	movs	r2, #1
   80226:	9200      	str	r2, [sp, #0]
   80228:	22fa      	movs	r2, #250	; 0xfa
   8022a:	4903      	ldr	r1, [pc, #12]	; (80238 <console_init+0x1c>)
   8022c:	4803      	ldr	r0, [pc, #12]	; (8023c <console_init+0x20>)
   8022e:	4c04      	ldr	r4, [pc, #16]	; (80240 <console_init+0x24>)
   80230:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */								// What's this?
	NULL,						/* Parameter passed into the task. */
	1,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   80232:	b002      	add	sp, #8
   80234:	bd10      	pop	{r4, pc}
   80236:	bf00      	nop
   80238:	00084efc 	.word	0x00084efc
   8023c:	000801ed 	.word	0x000801ed
   80240:	00080e91 	.word	0x00080e91

00080244 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80244:	f100 0308 	add.w	r3, r0, #8
   80248:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8024a:	f04f 32ff 	mov.w	r2, #4294967295
   8024e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80250:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80252:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   80254:	2300      	movs	r3, #0
   80256:	6003      	str	r3, [r0, #0]
   80258:	4770      	bx	lr

0008025a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8025a:	2300      	movs	r3, #0
   8025c:	6103      	str	r3, [r0, #16]
   8025e:	4770      	bx	lr

00080260 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   80260:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   80262:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   80264:	689a      	ldr	r2, [r3, #8]
   80266:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   80268:	689a      	ldr	r2, [r3, #8]
   8026a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8026c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8026e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80270:	6803      	ldr	r3, [r0, #0]
   80272:	3301      	adds	r3, #1
   80274:	6003      	str	r3, [r0, #0]
   80276:	4770      	bx	lr

00080278 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   80278:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   8027a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8027c:	f1b5 3fff 	cmp.w	r5, #4294967295
   80280:	d002      	beq.n	80288 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80282:	f100 0208 	add.w	r2, r0, #8
   80286:	e002      	b.n	8028e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   80288:	6902      	ldr	r2, [r0, #16]
   8028a:	e004      	b.n	80296 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8028c:	461a      	mov	r2, r3
   8028e:	6853      	ldr	r3, [r2, #4]
   80290:	681c      	ldr	r4, [r3, #0]
   80292:	42a5      	cmp	r5, r4
   80294:	d2fa      	bcs.n	8028c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80296:	6853      	ldr	r3, [r2, #4]
   80298:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   8029a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8029c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   8029e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   802a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   802a2:	6803      	ldr	r3, [r0, #0]
   802a4:	3301      	adds	r3, #1
   802a6:	6003      	str	r3, [r0, #0]
}
   802a8:	bc30      	pop	{r4, r5}
   802aa:	4770      	bx	lr

000802ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   802ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   802ae:	6842      	ldr	r2, [r0, #4]
   802b0:	6881      	ldr	r1, [r0, #8]
   802b2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   802b4:	6882      	ldr	r2, [r0, #8]
   802b6:	6841      	ldr	r1, [r0, #4]
   802b8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   802ba:	685a      	ldr	r2, [r3, #4]
   802bc:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   802be:	bf04      	itt	eq
   802c0:	6882      	ldreq	r2, [r0, #8]
   802c2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   802c4:	2200      	movs	r2, #0
   802c6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   802c8:	681a      	ldr	r2, [r3, #0]
   802ca:	3a01      	subs	r2, #1
   802cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   802ce:	6818      	ldr	r0, [r3, #0]
}
   802d0:	4770      	bx	lr
	...

000802d4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   802d4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   802d6:	2300      	movs	r3, #0
   802d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   802da:	4b0d      	ldr	r3, [pc, #52]	; (80310 <prvTaskExitError+0x3c>)
   802dc:	681b      	ldr	r3, [r3, #0]
   802de:	f1b3 3fff 	cmp.w	r3, #4294967295
   802e2:	d008      	beq.n	802f6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   802e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   802e8:	f383 8811 	msr	BASEPRI, r3
   802ec:	f3bf 8f6f 	isb	sy
   802f0:	f3bf 8f4f 	dsb	sy
   802f4:	e7fe      	b.n	802f4 <prvTaskExitError+0x20>
   802f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   802fa:	f383 8811 	msr	BASEPRI, r3
   802fe:	f3bf 8f6f 	isb	sy
   80302:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   80306:	9b01      	ldr	r3, [sp, #4]
   80308:	2b00      	cmp	r3, #0
   8030a:	d0fc      	beq.n	80306 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   8030c:	b002      	add	sp, #8
   8030e:	4770      	bx	lr
   80310:	2007012c 	.word	0x2007012c

00080314 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80314:	4806      	ldr	r0, [pc, #24]	; (80330 <prvPortStartFirstTask+0x1c>)
   80316:	6800      	ldr	r0, [r0, #0]
   80318:	6800      	ldr	r0, [r0, #0]
   8031a:	f380 8808 	msr	MSP, r0
   8031e:	b662      	cpsie	i
   80320:	b661      	cpsie	f
   80322:	f3bf 8f4f 	dsb	sy
   80326:	f3bf 8f6f 	isb	sy
   8032a:	df00      	svc	0
   8032c:	bf00      	nop
   8032e:	0000      	.short	0x0000
   80330:	e000ed08 	.word	0xe000ed08

00080334 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80338:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   8033c:	f021 0101 	bic.w	r1, r1, #1
   80340:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   80344:	4b03      	ldr	r3, [pc, #12]	; (80354 <pxPortInitialiseStack+0x20>)
   80346:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   8034a:	f840 2c20 	str.w	r2, [r0, #-32]
}
   8034e:	3840      	subs	r0, #64	; 0x40
   80350:	4770      	bx	lr
   80352:	bf00      	nop
   80354:	000802d5 	.word	0x000802d5
	...

00080360 <SVC_Handler>:
	__asm volatile (
   80360:	4b07      	ldr	r3, [pc, #28]	; (80380 <pxCurrentTCBConst2>)
   80362:	6819      	ldr	r1, [r3, #0]
   80364:	6808      	ldr	r0, [r1, #0]
   80366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8036a:	f380 8809 	msr	PSP, r0
   8036e:	f3bf 8f6f 	isb	sy
   80372:	f04f 0000 	mov.w	r0, #0
   80376:	f380 8811 	msr	BASEPRI, r0
   8037a:	f04e 0e0d 	orr.w	lr, lr, #13
   8037e:	4770      	bx	lr

00080380 <pxCurrentTCBConst2>:
   80380:	2007c30c 	.word	0x2007c30c
   80384:	4770      	bx	lr
   80386:	bf00      	nop

00080388 <vPortEnterCritical>:
   80388:	f04f 0340 	mov.w	r3, #64	; 0x40
   8038c:	f383 8811 	msr	BASEPRI, r3
   80390:	f3bf 8f6f 	isb	sy
   80394:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   80398:	4a0a      	ldr	r2, [pc, #40]	; (803c4 <vPortEnterCritical+0x3c>)
   8039a:	6813      	ldr	r3, [r2, #0]
   8039c:	3301      	adds	r3, #1
   8039e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   803a0:	2b01      	cmp	r3, #1
   803a2:	d10d      	bne.n	803c0 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   803a4:	4b08      	ldr	r3, [pc, #32]	; (803c8 <vPortEnterCritical+0x40>)
   803a6:	681b      	ldr	r3, [r3, #0]
   803a8:	f013 0fff 	tst.w	r3, #255	; 0xff
   803ac:	d008      	beq.n	803c0 <vPortEnterCritical+0x38>
   803ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   803b2:	f383 8811 	msr	BASEPRI, r3
   803b6:	f3bf 8f6f 	isb	sy
   803ba:	f3bf 8f4f 	dsb	sy
   803be:	e7fe      	b.n	803be <vPortEnterCritical+0x36>
   803c0:	4770      	bx	lr
   803c2:	bf00      	nop
   803c4:	2007012c 	.word	0x2007012c
   803c8:	e000ed04 	.word	0xe000ed04

000803cc <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   803cc:	4b09      	ldr	r3, [pc, #36]	; (803f4 <vPortExitCritical+0x28>)
   803ce:	681b      	ldr	r3, [r3, #0]
   803d0:	b943      	cbnz	r3, 803e4 <vPortExitCritical+0x18>
   803d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   803d6:	f383 8811 	msr	BASEPRI, r3
   803da:	f3bf 8f6f 	isb	sy
   803de:	f3bf 8f4f 	dsb	sy
   803e2:	e7fe      	b.n	803e2 <vPortExitCritical+0x16>
	uxCriticalNesting--;
   803e4:	3b01      	subs	r3, #1
   803e6:	4a03      	ldr	r2, [pc, #12]	; (803f4 <vPortExitCritical+0x28>)
   803e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   803ea:	b90b      	cbnz	r3, 803f0 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   803ec:	f383 8811 	msr	BASEPRI, r3
   803f0:	4770      	bx	lr
   803f2:	bf00      	nop
   803f4:	2007012c 	.word	0x2007012c
	...

00080400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   80400:	f3ef 8009 	mrs	r0, PSP
   80404:	f3bf 8f6f 	isb	sy
   80408:	4b0d      	ldr	r3, [pc, #52]	; (80440 <pxCurrentTCBConst>)
   8040a:	681a      	ldr	r2, [r3, #0]
   8040c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80410:	6010      	str	r0, [r2, #0]
   80412:	e92d 4008 	stmdb	sp!, {r3, lr}
   80416:	f04f 0040 	mov.w	r0, #64	; 0x40
   8041a:	f380 8811 	msr	BASEPRI, r0
   8041e:	f000 ffa9 	bl	81374 <vTaskSwitchContext>
   80422:	f04f 0000 	mov.w	r0, #0
   80426:	f380 8811 	msr	BASEPRI, r0
   8042a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8042e:	6819      	ldr	r1, [r3, #0]
   80430:	6808      	ldr	r0, [r1, #0]
   80432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80436:	f380 8809 	msr	PSP, r0
   8043a:	f3bf 8f6f 	isb	sy
   8043e:	4770      	bx	lr

00080440 <pxCurrentTCBConst>:
   80440:	2007c30c 	.word	0x2007c30c
   80444:	4770      	bx	lr
   80446:	bf00      	nop

00080448 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   80448:	b508      	push	{r3, lr}
	__asm volatile
   8044a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8044e:	f383 8811 	msr	BASEPRI, r3
   80452:	f3bf 8f6f 	isb	sy
   80456:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   8045a:	4b05      	ldr	r3, [pc, #20]	; (80470 <SysTick_Handler+0x28>)
   8045c:	4798      	blx	r3
   8045e:	b118      	cbz	r0, 80468 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80464:	4b03      	ldr	r3, [pc, #12]	; (80474 <SysTick_Handler+0x2c>)
   80466:	601a      	str	r2, [r3, #0]
	__asm volatile
   80468:	2300      	movs	r3, #0
   8046a:	f383 8811 	msr	BASEPRI, r3
   8046e:	bd08      	pop	{r3, pc}
   80470:	0008112d 	.word	0x0008112d
   80474:	e000ed04 	.word	0xe000ed04

00080478 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   80478:	4b05      	ldr	r3, [pc, #20]	; (80490 <vPortSetupTimerInterrupt+0x18>)
   8047a:	2200      	movs	r2, #0
   8047c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   8047e:	4905      	ldr	r1, [pc, #20]	; (80494 <vPortSetupTimerInterrupt+0x1c>)
   80480:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   80482:	4905      	ldr	r1, [pc, #20]	; (80498 <vPortSetupTimerInterrupt+0x20>)
   80484:	4a05      	ldr	r2, [pc, #20]	; (8049c <vPortSetupTimerInterrupt+0x24>)
   80486:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   80488:	2207      	movs	r2, #7
   8048a:	601a      	str	r2, [r3, #0]
   8048c:	4770      	bx	lr
   8048e:	bf00      	nop
   80490:	e000e010 	.word	0xe000e010
   80494:	e000e018 	.word	0xe000e018
   80498:	0001481f 	.word	0x0001481f
   8049c:	e000e014 	.word	0xe000e014

000804a0 <xPortStartScheduler>:
{
   804a0:	b510      	push	{r4, lr}
   804a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   804a4:	4b29      	ldr	r3, [pc, #164]	; (8054c <xPortStartScheduler+0xac>)
   804a6:	781a      	ldrb	r2, [r3, #0]
   804a8:	b2d2      	uxtb	r2, r2
   804aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   804ac:	22ff      	movs	r2, #255	; 0xff
   804ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   804b0:	781b      	ldrb	r3, [r3, #0]
   804b2:	b2db      	uxtb	r3, r3
   804b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   804b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   804bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   804c0:	4a23      	ldr	r2, [pc, #140]	; (80550 <xPortStartScheduler+0xb0>)
   804c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   804c4:	2207      	movs	r2, #7
   804c6:	4b23      	ldr	r3, [pc, #140]	; (80554 <xPortStartScheduler+0xb4>)
   804c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   804ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
   804ce:	f013 0f80 	tst.w	r3, #128	; 0x80
   804d2:	d012      	beq.n	804fa <xPortStartScheduler+0x5a>
   804d4:	2306      	movs	r3, #6
   804d6:	e000      	b.n	804da <xPortStartScheduler+0x3a>
   804d8:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   804da:	f89d 2003 	ldrb.w	r2, [sp, #3]
   804de:	0052      	lsls	r2, r2, #1
   804e0:	b2d2      	uxtb	r2, r2
   804e2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   804e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   804ea:	1e59      	subs	r1, r3, #1
   804ec:	f012 0f80 	tst.w	r2, #128	; 0x80
   804f0:	d1f2      	bne.n	804d8 <xPortStartScheduler+0x38>
   804f2:	4a18      	ldr	r2, [pc, #96]	; (80554 <xPortStartScheduler+0xb4>)
   804f4:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   804f6:	2b03      	cmp	r3, #3
   804f8:	d008      	beq.n	8050c <xPortStartScheduler+0x6c>
	__asm volatile
   804fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   804fe:	f383 8811 	msr	BASEPRI, r3
   80502:	f3bf 8f6f 	isb	sy
   80506:	f3bf 8f4f 	dsb	sy
   8050a:	e7fe      	b.n	8050a <xPortStartScheduler+0x6a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8050c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   8050e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80512:	4a10      	ldr	r2, [pc, #64]	; (80554 <xPortStartScheduler+0xb4>)
   80514:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   80516:	9b01      	ldr	r3, [sp, #4]
   80518:	b2db      	uxtb	r3, r3
   8051a:	4a0c      	ldr	r2, [pc, #48]	; (8054c <xPortStartScheduler+0xac>)
   8051c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8051e:	4b0e      	ldr	r3, [pc, #56]	; (80558 <xPortStartScheduler+0xb8>)
   80520:	681a      	ldr	r2, [r3, #0]
   80522:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   80526:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80528:	681a      	ldr	r2, [r3, #0]
   8052a:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
   8052e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80530:	4b0a      	ldr	r3, [pc, #40]	; (8055c <xPortStartScheduler+0xbc>)
   80532:	4798      	blx	r3
	uxCriticalNesting = 0;
   80534:	2400      	movs	r4, #0
   80536:	4b0a      	ldr	r3, [pc, #40]	; (80560 <xPortStartScheduler+0xc0>)
   80538:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   8053a:	4b0a      	ldr	r3, [pc, #40]	; (80564 <xPortStartScheduler+0xc4>)
   8053c:	4798      	blx	r3
	vTaskSwitchContext();
   8053e:	4b0a      	ldr	r3, [pc, #40]	; (80568 <xPortStartScheduler+0xc8>)
   80540:	4798      	blx	r3
	prvTaskExitError();
   80542:	4b0a      	ldr	r3, [pc, #40]	; (8056c <xPortStartScheduler+0xcc>)
   80544:	4798      	blx	r3
}
   80546:	4620      	mov	r0, r4
   80548:	b002      	add	sp, #8
   8054a:	bd10      	pop	{r4, pc}
   8054c:	e000e400 	.word	0xe000e400
   80550:	20070afc 	.word	0x20070afc
   80554:	20070b00 	.word	0x20070b00
   80558:	e000ed20 	.word	0xe000ed20
   8055c:	00080479 	.word	0x00080479
   80560:	2007012c 	.word	0x2007012c
   80564:	00080315 	.word	0x00080315
   80568:	00081375 	.word	0x00081375
   8056c:	000802d5 	.word	0x000802d5

00080570 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   80570:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   80574:	2b0f      	cmp	r3, #15
   80576:	d90f      	bls.n	80598 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   80578:	4a10      	ldr	r2, [pc, #64]	; (805bc <vPortValidateInterruptPriority+0x4c>)
   8057a:	5c9b      	ldrb	r3, [r3, r2]
   8057c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   8057e:	4a10      	ldr	r2, [pc, #64]	; (805c0 <vPortValidateInterruptPriority+0x50>)
   80580:	7812      	ldrb	r2, [r2, #0]
   80582:	429a      	cmp	r2, r3
   80584:	d908      	bls.n	80598 <vPortValidateInterruptPriority+0x28>
   80586:	f04f 0340 	mov.w	r3, #64	; 0x40
   8058a:	f383 8811 	msr	BASEPRI, r3
   8058e:	f3bf 8f6f 	isb	sy
   80592:	f3bf 8f4f 	dsb	sy
   80596:	e7fe      	b.n	80596 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   80598:	4b0a      	ldr	r3, [pc, #40]	; (805c4 <vPortValidateInterruptPriority+0x54>)
   8059a:	681b      	ldr	r3, [r3, #0]
   8059c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   805a0:	4a09      	ldr	r2, [pc, #36]	; (805c8 <vPortValidateInterruptPriority+0x58>)
   805a2:	6812      	ldr	r2, [r2, #0]
   805a4:	4293      	cmp	r3, r2
   805a6:	d908      	bls.n	805ba <vPortValidateInterruptPriority+0x4a>
   805a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   805ac:	f383 8811 	msr	BASEPRI, r3
   805b0:	f3bf 8f6f 	isb	sy
   805b4:	f3bf 8f4f 	dsb	sy
   805b8:	e7fe      	b.n	805b8 <vPortValidateInterruptPriority+0x48>
   805ba:	4770      	bx	lr
   805bc:	e000e3f0 	.word	0xe000e3f0
   805c0:	20070afc 	.word	0x20070afc
   805c4:	e000ed0c 	.word	0xe000ed0c
   805c8:	20070b00 	.word	0x20070b00

000805cc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   805cc:	b538      	push	{r3, r4, r5, lr}
   805ce:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   805d0:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   805d4:	bf1c      	itt	ne
   805d6:	f020 0407 	bicne.w	r4, r0, #7
   805da:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   805dc:	4b10      	ldr	r3, [pc, #64]	; (80620 <pvPortMalloc+0x54>)
   805de:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   805e0:	4b10      	ldr	r3, [pc, #64]	; (80624 <pvPortMalloc+0x58>)
   805e2:	681b      	ldr	r3, [r3, #0]
   805e4:	b18b      	cbz	r3, 8060a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   805e6:	4b10      	ldr	r3, [pc, #64]	; (80628 <pvPortMalloc+0x5c>)
   805e8:	681b      	ldr	r3, [r3, #0]
   805ea:	441c      	add	r4, r3
   805ec:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
   805f0:	4294      	cmp	r4, r2
   805f2:	d810      	bhi.n	80616 <pvPortMalloc+0x4a>
   805f4:	42a3      	cmp	r3, r4
   805f6:	d210      	bcs.n	8061a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   805f8:	4a0a      	ldr	r2, [pc, #40]	; (80624 <pvPortMalloc+0x58>)
   805fa:	6815      	ldr	r5, [r2, #0]
   805fc:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   805fe:	4b0a      	ldr	r3, [pc, #40]	; (80628 <pvPortMalloc+0x5c>)
   80600:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   80602:	4b0a      	ldr	r3, [pc, #40]	; (8062c <pvPortMalloc+0x60>)
   80604:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80606:	4628      	mov	r0, r5
   80608:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   8060a:	4b09      	ldr	r3, [pc, #36]	; (80630 <pvPortMalloc+0x64>)
   8060c:	f023 0307 	bic.w	r3, r3, #7
   80610:	4a04      	ldr	r2, [pc, #16]	; (80624 <pvPortMalloc+0x58>)
   80612:	6013      	str	r3, [r2, #0]
   80614:	e7e7      	b.n	805e6 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
   80616:	2500      	movs	r5, #0
   80618:	e7f3      	b.n	80602 <pvPortMalloc+0x36>
   8061a:	2500      	movs	r5, #0
   8061c:	e7f1      	b.n	80602 <pvPortMalloc+0x36>
   8061e:	bf00      	nop
   80620:	00081111 	.word	0x00081111
   80624:	20070b04 	.word	0x20070b04
   80628:	2007c308 	.word	0x2007c308
   8062c:	00081261 	.word	0x00081261
   80630:	20070b10 	.word	0x20070b10

00080634 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   80634:	b140      	cbz	r0, 80648 <vPortFree+0x14>
   80636:	f04f 0340 	mov.w	r3, #64	; 0x40
   8063a:	f383 8811 	msr	BASEPRI, r3
   8063e:	f3bf 8f6f 	isb	sy
   80642:	f3bf 8f4f 	dsb	sy
   80646:	e7fe      	b.n	80646 <vPortFree+0x12>
   80648:	4770      	bx	lr
	...

0008064c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   8064c:	b510      	push	{r4, lr}
   8064e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80650:	4b04      	ldr	r3, [pc, #16]	; (80664 <prvIsQueueEmpty+0x18>)
   80652:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   80654:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80656:	4b04      	ldr	r3, [pc, #16]	; (80668 <prvIsQueueEmpty+0x1c>)
   80658:	4798      	blx	r3

	return xReturn;
}
   8065a:	fab4 f084 	clz	r0, r4
   8065e:	0940      	lsrs	r0, r0, #5
   80660:	bd10      	pop	{r4, pc}
   80662:	bf00      	nop
   80664:	00080389 	.word	0x00080389
   80668:	000803cd 	.word	0x000803cd

0008066c <prvCopyDataToQueue>:
{
   8066c:	b570      	push	{r4, r5, r6, lr}
   8066e:	4604      	mov	r4, r0
   80670:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80672:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   80674:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80676:	b952      	cbnz	r2, 8068e <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80678:	6803      	ldr	r3, [r0, #0]
   8067a:	2b00      	cmp	r3, #0
   8067c:	d12a      	bne.n	806d4 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   8067e:	6840      	ldr	r0, [r0, #4]
   80680:	4b18      	ldr	r3, [pc, #96]	; (806e4 <prvCopyDataToQueue+0x78>)
   80682:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80684:	2300      	movs	r3, #0
   80686:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   80688:	3501      	adds	r5, #1
   8068a:	63a5      	str	r5, [r4, #56]	; 0x38
}
   8068c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   8068e:	b96e      	cbnz	r6, 806ac <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   80690:	6880      	ldr	r0, [r0, #8]
   80692:	4b15      	ldr	r3, [pc, #84]	; (806e8 <prvCopyDataToQueue+0x7c>)
   80694:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80696:	68a3      	ldr	r3, [r4, #8]
   80698:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8069a:	4413      	add	r3, r2
   8069c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8069e:	6862      	ldr	r2, [r4, #4]
   806a0:	4293      	cmp	r3, r2
   806a2:	d319      	bcc.n	806d8 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   806a4:	6823      	ldr	r3, [r4, #0]
   806a6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   806a8:	2000      	movs	r0, #0
   806aa:	e7ed      	b.n	80688 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   806ac:	68c0      	ldr	r0, [r0, #12]
   806ae:	4b0e      	ldr	r3, [pc, #56]	; (806e8 <prvCopyDataToQueue+0x7c>)
   806b0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   806b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   806b4:	425b      	negs	r3, r3
   806b6:	68e2      	ldr	r2, [r4, #12]
   806b8:	441a      	add	r2, r3
   806ba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   806bc:	6821      	ldr	r1, [r4, #0]
   806be:	428a      	cmp	r2, r1
   806c0:	d202      	bcs.n	806c8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   806c2:	6862      	ldr	r2, [r4, #4]
   806c4:	4413      	add	r3, r2
   806c6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   806c8:	2e02      	cmp	r6, #2
   806ca:	d107      	bne.n	806dc <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   806cc:	b145      	cbz	r5, 806e0 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
   806ce:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   806d0:	2000      	movs	r0, #0
   806d2:	e7d9      	b.n	80688 <prvCopyDataToQueue+0x1c>
   806d4:	2000      	movs	r0, #0
   806d6:	e7d7      	b.n	80688 <prvCopyDataToQueue+0x1c>
   806d8:	2000      	movs	r0, #0
   806da:	e7d5      	b.n	80688 <prvCopyDataToQueue+0x1c>
   806dc:	2000      	movs	r0, #0
   806de:	e7d3      	b.n	80688 <prvCopyDataToQueue+0x1c>
   806e0:	2000      	movs	r0, #0
   806e2:	e7d1      	b.n	80688 <prvCopyDataToQueue+0x1c>
   806e4:	000815e5 	.word	0x000815e5
   806e8:	000822a5 	.word	0x000822a5

000806ec <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   806ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
   806ee:	b172      	cbz	r2, 8070e <prvCopyDataFromQueue+0x22>
{
   806f0:	b510      	push	{r4, lr}
   806f2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   806f4:	68c4      	ldr	r4, [r0, #12]
   806f6:	4414      	add	r4, r2
   806f8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   806fa:	6840      	ldr	r0, [r0, #4]
   806fc:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   806fe:	bf24      	itt	cs
   80700:	6818      	ldrcs	r0, [r3, #0]
   80702:	60d8      	strcs	r0, [r3, #12]
   80704:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   80706:	68d9      	ldr	r1, [r3, #12]
   80708:	4b01      	ldr	r3, [pc, #4]	; (80710 <prvCopyDataFromQueue+0x24>)
   8070a:	4798      	blx	r3
   8070c:	bd10      	pop	{r4, pc}
   8070e:	4770      	bx	lr
   80710:	000822a5 	.word	0x000822a5

00080714 <prvUnlockQueue>:
{
   80714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80718:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   8071a:	4b20      	ldr	r3, [pc, #128]	; (8079c <prvUnlockQueue+0x88>)
   8071c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   8071e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   80722:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80724:	2c00      	cmp	r4, #0
   80726:	dd12      	ble.n	8074e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80728:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   8072a:	b183      	cbz	r3, 8074e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8072c:	f105 0724 	add.w	r7, r5, #36	; 0x24
   80730:	4e1b      	ldr	r6, [pc, #108]	; (807a0 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   80732:	f8df 8074 	ldr.w	r8, [pc, #116]	; 807a8 <prvUnlockQueue+0x94>
   80736:	e004      	b.n	80742 <prvUnlockQueue+0x2e>
   80738:	3c01      	subs	r4, #1
   8073a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   8073c:	b13c      	cbz	r4, 8074e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8073e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80740:	b12b      	cbz	r3, 8074e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80742:	4638      	mov	r0, r7
   80744:	47b0      	blx	r6
   80746:	2800      	cmp	r0, #0
   80748:	d0f6      	beq.n	80738 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   8074a:	47c0      	blx	r8
   8074c:	e7f4      	b.n	80738 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   8074e:	23ff      	movs	r3, #255	; 0xff
   80750:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   80754:	4b13      	ldr	r3, [pc, #76]	; (807a4 <prvUnlockQueue+0x90>)
   80756:	4798      	blx	r3
	taskENTER_CRITICAL();
   80758:	4b10      	ldr	r3, [pc, #64]	; (8079c <prvUnlockQueue+0x88>)
   8075a:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   8075c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   80760:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   80762:	2c00      	cmp	r4, #0
   80764:	dd12      	ble.n	8078c <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80766:	692b      	ldr	r3, [r5, #16]
   80768:	b183      	cbz	r3, 8078c <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8076a:	f105 0710 	add.w	r7, r5, #16
   8076e:	4e0c      	ldr	r6, [pc, #48]	; (807a0 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   80770:	f8df 8034 	ldr.w	r8, [pc, #52]	; 807a8 <prvUnlockQueue+0x94>
   80774:	e004      	b.n	80780 <prvUnlockQueue+0x6c>
   80776:	3c01      	subs	r4, #1
   80778:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   8077a:	b13c      	cbz	r4, 8078c <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8077c:	692b      	ldr	r3, [r5, #16]
   8077e:	b12b      	cbz	r3, 8078c <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80780:	4638      	mov	r0, r7
   80782:	47b0      	blx	r6
   80784:	2800      	cmp	r0, #0
   80786:	d0f6      	beq.n	80776 <prvUnlockQueue+0x62>
					vTaskMissedYield();
   80788:	47c0      	blx	r8
   8078a:	e7f4      	b.n	80776 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   8078c:	23ff      	movs	r3, #255	; 0xff
   8078e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   80792:	4b04      	ldr	r3, [pc, #16]	; (807a4 <prvUnlockQueue+0x90>)
   80794:	4798      	blx	r3
   80796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8079a:	bf00      	nop
   8079c:	00080389 	.word	0x00080389
   807a0:	00081485 	.word	0x00081485
   807a4:	000803cd 	.word	0x000803cd
   807a8:	000815b9 	.word	0x000815b9

000807ac <xQueueGenericReset>:
{
   807ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   807ae:	b330      	cbz	r0, 807fe <xQueueGenericReset+0x52>
   807b0:	4604      	mov	r4, r0
   807b2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
   807b4:	4b1c      	ldr	r3, [pc, #112]	; (80828 <xQueueGenericReset+0x7c>)
   807b6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   807b8:	6822      	ldr	r2, [r4, #0]
   807ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
   807bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   807be:	fb03 f301 	mul.w	r3, r3, r1
   807c2:	18d0      	adds	r0, r2, r3
   807c4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   807c6:	2000      	movs	r0, #0
   807c8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   807ca:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   807cc:	1a5b      	subs	r3, r3, r1
   807ce:	4413      	add	r3, r2
   807d0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   807d2:	23ff      	movs	r3, #255	; 0xff
   807d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   807d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   807dc:	b9c5      	cbnz	r5, 80810 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   807de:	6923      	ldr	r3, [r4, #16]
   807e0:	b1eb      	cbz	r3, 8081e <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   807e2:	f104 0010 	add.w	r0, r4, #16
   807e6:	4b11      	ldr	r3, [pc, #68]	; (8082c <xQueueGenericReset+0x80>)
   807e8:	4798      	blx	r3
   807ea:	b1c0      	cbz	r0, 8081e <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
   807ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   807f0:	4b0f      	ldr	r3, [pc, #60]	; (80830 <xQueueGenericReset+0x84>)
   807f2:	601a      	str	r2, [r3, #0]
   807f4:	f3bf 8f4f 	dsb	sy
   807f8:	f3bf 8f6f 	isb	sy
   807fc:	e00f      	b.n	8081e <xQueueGenericReset+0x72>
   807fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   80802:	f383 8811 	msr	BASEPRI, r3
   80806:	f3bf 8f6f 	isb	sy
   8080a:	f3bf 8f4f 	dsb	sy
   8080e:	e7fe      	b.n	8080e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80810:	f104 0010 	add.w	r0, r4, #16
   80814:	4d07      	ldr	r5, [pc, #28]	; (80834 <xQueueGenericReset+0x88>)
   80816:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80818:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8081c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
   8081e:	4b06      	ldr	r3, [pc, #24]	; (80838 <xQueueGenericReset+0x8c>)
   80820:	4798      	blx	r3
}
   80822:	2001      	movs	r0, #1
   80824:	bd38      	pop	{r3, r4, r5, pc}
   80826:	bf00      	nop
   80828:	00080389 	.word	0x00080389
   8082c:	00081485 	.word	0x00081485
   80830:	e000ed04 	.word	0xe000ed04
   80834:	00080245 	.word	0x00080245
   80838:	000803cd 	.word	0x000803cd

0008083c <xQueueGenericCreate>:
	{
   8083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   8083e:	b940      	cbnz	r0, 80852 <xQueueGenericCreate+0x16>
   80840:	f04f 0340 	mov.w	r3, #64	; 0x40
   80844:	f383 8811 	msr	BASEPRI, r3
   80848:	f3bf 8f6f 	isb	sy
   8084c:	f3bf 8f4f 	dsb	sy
   80850:	e7fe      	b.n	80850 <xQueueGenericCreate+0x14>
   80852:	4606      	mov	r6, r0
   80854:	4617      	mov	r7, r2
   80856:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80858:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   8085c:	3050      	adds	r0, #80	; 0x50
   8085e:	4b0a      	ldr	r3, [pc, #40]	; (80888 <xQueueGenericCreate+0x4c>)
   80860:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80862:	4604      	mov	r4, r0
   80864:	b168      	cbz	r0, 80882 <xQueueGenericCreate+0x46>
	if( uxItemSize == ( UBaseType_t ) 0 )
   80866:	b11d      	cbz	r5, 80870 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   80868:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   8086c:	6003      	str	r3, [r0, #0]
   8086e:	e000      	b.n	80872 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   80870:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   80872:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   80874:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   80876:	2101      	movs	r1, #1
   80878:	4620      	mov	r0, r4
   8087a:	4b04      	ldr	r3, [pc, #16]	; (8088c <xQueueGenericCreate+0x50>)
   8087c:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   8087e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   80882:	4620      	mov	r0, r4
   80884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80886:	bf00      	nop
   80888:	000805cd 	.word	0x000805cd
   8088c:	000807ad 	.word	0x000807ad

00080890 <xQueueGenericSend>:
{
   80890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80894:	b085      	sub	sp, #20
   80896:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80898:	b198      	cbz	r0, 808c2 <xQueueGenericSend+0x32>
   8089a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8089c:	b1d1      	cbz	r1, 808d4 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8089e:	2b02      	cmp	r3, #2
   808a0:	d024      	beq.n	808ec <xQueueGenericSend+0x5c>
   808a2:	461e      	mov	r6, r3
   808a4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   808a6:	4b5b      	ldr	r3, [pc, #364]	; (80a14 <xQueueGenericSend+0x184>)
   808a8:	4798      	blx	r3
   808aa:	bb58      	cbnz	r0, 80904 <xQueueGenericSend+0x74>
   808ac:	9b01      	ldr	r3, [sp, #4]
   808ae:	b38b      	cbz	r3, 80914 <xQueueGenericSend+0x84>
   808b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   808b4:	f383 8811 	msr	BASEPRI, r3
   808b8:	f3bf 8f6f 	isb	sy
   808bc:	f3bf 8f4f 	dsb	sy
   808c0:	e7fe      	b.n	808c0 <xQueueGenericSend+0x30>
   808c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   808c6:	f383 8811 	msr	BASEPRI, r3
   808ca:	f3bf 8f6f 	isb	sy
   808ce:	f3bf 8f4f 	dsb	sy
   808d2:	e7fe      	b.n	808d2 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   808d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   808d6:	2a00      	cmp	r2, #0
   808d8:	d0e1      	beq.n	8089e <xQueueGenericSend+0xe>
   808da:	f04f 0340 	mov.w	r3, #64	; 0x40
   808de:	f383 8811 	msr	BASEPRI, r3
   808e2:	f3bf 8f6f 	isb	sy
   808e6:	f3bf 8f4f 	dsb	sy
   808ea:	e7fe      	b.n	808ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   808ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   808ee:	2a01      	cmp	r2, #1
   808f0:	d0d7      	beq.n	808a2 <xQueueGenericSend+0x12>
   808f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   808f6:	f383 8811 	msr	BASEPRI, r3
   808fa:	f3bf 8f6f 	isb	sy
   808fe:	f3bf 8f4f 	dsb	sy
   80902:	e7fe      	b.n	80902 <xQueueGenericSend+0x72>
   80904:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   80906:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80a3c <xQueueGenericSend+0x1ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
   8090a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80a40 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   8090e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80a20 <xQueueGenericSend+0x190>
   80912:	e030      	b.n	80976 <xQueueGenericSend+0xe6>
   80914:	2500      	movs	r5, #0
   80916:	e7f6      	b.n	80906 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80918:	4632      	mov	r2, r6
   8091a:	4639      	mov	r1, r7
   8091c:	4620      	mov	r0, r4
   8091e:	4b3e      	ldr	r3, [pc, #248]	; (80a18 <xQueueGenericSend+0x188>)
   80920:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80922:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80924:	b193      	cbz	r3, 8094c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80926:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8092a:	4b3c      	ldr	r3, [pc, #240]	; (80a1c <xQueueGenericSend+0x18c>)
   8092c:	4798      	blx	r3
   8092e:	b138      	cbz	r0, 80940 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
   80930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80934:	4b3a      	ldr	r3, [pc, #232]	; (80a20 <xQueueGenericSend+0x190>)
   80936:	601a      	str	r2, [r3, #0]
   80938:	f3bf 8f4f 	dsb	sy
   8093c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80940:	4b38      	ldr	r3, [pc, #224]	; (80a24 <xQueueGenericSend+0x194>)
   80942:	4798      	blx	r3
				return pdPASS;
   80944:	2001      	movs	r0, #1
}
   80946:	b005      	add	sp, #20
   80948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if( xYieldRequired != pdFALSE )
   8094c:	2800      	cmp	r0, #0
   8094e:	d0f7      	beq.n	80940 <xQueueGenericSend+0xb0>
						queueYIELD_IF_USING_PREEMPTION();
   80950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80954:	4b32      	ldr	r3, [pc, #200]	; (80a20 <xQueueGenericSend+0x190>)
   80956:	601a      	str	r2, [r3, #0]
   80958:	f3bf 8f4f 	dsb	sy
   8095c:	f3bf 8f6f 	isb	sy
   80960:	e7ee      	b.n	80940 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
   80962:	4b30      	ldr	r3, [pc, #192]	; (80a24 <xQueueGenericSend+0x194>)
   80964:	4798      	blx	r3
					return errQUEUE_FULL;
   80966:	2000      	movs	r0, #0
   80968:	e7ed      	b.n	80946 <xQueueGenericSend+0xb6>
				prvUnlockQueue( pxQueue );
   8096a:	4620      	mov	r0, r4
   8096c:	4b2e      	ldr	r3, [pc, #184]	; (80a28 <xQueueGenericSend+0x198>)
   8096e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80970:	4b2e      	ldr	r3, [pc, #184]	; (80a2c <xQueueGenericSend+0x19c>)
   80972:	4798      	blx	r3
   80974:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   80976:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8097a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8097c:	429a      	cmp	r2, r3
   8097e:	d3cb      	bcc.n	80918 <xQueueGenericSend+0x88>
   80980:	2e02      	cmp	r6, #2
   80982:	d0c9      	beq.n	80918 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
   80984:	9b01      	ldr	r3, [sp, #4]
   80986:	2b00      	cmp	r3, #0
   80988:	d0eb      	beq.n	80962 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   8098a:	b90d      	cbnz	r5, 80990 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
   8098c:	a802      	add	r0, sp, #8
   8098e:	47d0      	blx	sl
		taskEXIT_CRITICAL();
   80990:	4b24      	ldr	r3, [pc, #144]	; (80a24 <xQueueGenericSend+0x194>)
   80992:	4798      	blx	r3
		vTaskSuspendAll();
   80994:	4b26      	ldr	r3, [pc, #152]	; (80a30 <xQueueGenericSend+0x1a0>)
   80996:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80998:	47c0      	blx	r8
   8099a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8099e:	b25b      	sxtb	r3, r3
   809a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   809a4:	bf04      	itt	eq
   809a6:	2300      	moveq	r3, #0
   809a8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   809ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   809b0:	b25b      	sxtb	r3, r3
   809b2:	f1b3 3fff 	cmp.w	r3, #4294967295
   809b6:	bf04      	itt	eq
   809b8:	2300      	moveq	r3, #0
   809ba:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   809be:	4b19      	ldr	r3, [pc, #100]	; (80a24 <xQueueGenericSend+0x194>)
   809c0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   809c2:	a901      	add	r1, sp, #4
   809c4:	a802      	add	r0, sp, #8
   809c6:	4b1b      	ldr	r3, [pc, #108]	; (80a34 <xQueueGenericSend+0x1a4>)
   809c8:	4798      	blx	r3
   809ca:	b9e0      	cbnz	r0, 80a06 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   809cc:	47c0      	blx	r8
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   809ce:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   809d2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   809d4:	4b13      	ldr	r3, [pc, #76]	; (80a24 <xQueueGenericSend+0x194>)
   809d6:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   809d8:	45ab      	cmp	fp, r5
   809da:	d1c6      	bne.n	8096a <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   809dc:	9901      	ldr	r1, [sp, #4]
   809de:	f104 0010 	add.w	r0, r4, #16
   809e2:	4b15      	ldr	r3, [pc, #84]	; (80a38 <xQueueGenericSend+0x1a8>)
   809e4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   809e6:	4620      	mov	r0, r4
   809e8:	4b0f      	ldr	r3, [pc, #60]	; (80a28 <xQueueGenericSend+0x198>)
   809ea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   809ec:	4b0f      	ldr	r3, [pc, #60]	; (80a2c <xQueueGenericSend+0x19c>)
   809ee:	4798      	blx	r3
   809f0:	2800      	cmp	r0, #0
   809f2:	d1bf      	bne.n	80974 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
   809f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   809f8:	f8c9 3000 	str.w	r3, [r9]
   809fc:	f3bf 8f4f 	dsb	sy
   80a00:	f3bf 8f6f 	isb	sy
   80a04:	e7b6      	b.n	80974 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
   80a06:	4620      	mov	r0, r4
   80a08:	4b07      	ldr	r3, [pc, #28]	; (80a28 <xQueueGenericSend+0x198>)
   80a0a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80a0c:	4b07      	ldr	r3, [pc, #28]	; (80a2c <xQueueGenericSend+0x19c>)
   80a0e:	4798      	blx	r3
			return errQUEUE_FULL;
   80a10:	2000      	movs	r0, #0
   80a12:	e798      	b.n	80946 <xQueueGenericSend+0xb6>
   80a14:	000815c5 	.word	0x000815c5
   80a18:	0008066d 	.word	0x0008066d
   80a1c:	00081485 	.word	0x00081485
   80a20:	e000ed04 	.word	0xe000ed04
   80a24:	000803cd 	.word	0x000803cd
   80a28:	00080715 	.word	0x00080715
   80a2c:	00081261 	.word	0x00081261
   80a30:	00081111 	.word	0x00081111
   80a34:	0008152d 	.word	0x0008152d
   80a38:	00081409 	.word	0x00081409
   80a3c:	00080389 	.word	0x00080389
   80a40:	00081515 	.word	0x00081515

00080a44 <xQueueGenericSendFromISR>:
{
   80a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
   80a48:	2800      	cmp	r0, #0
   80a4a:	d037      	beq.n	80abc <xQueueGenericSendFromISR+0x78>
   80a4c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80a4e:	2900      	cmp	r1, #0
   80a50:	d03d      	beq.n	80ace <xQueueGenericSendFromISR+0x8a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80a52:	2b02      	cmp	r3, #2
   80a54:	d047      	beq.n	80ae6 <xQueueGenericSendFromISR+0xa2>
   80a56:	461f      	mov	r7, r3
   80a58:	4690      	mov	r8, r2
   80a5a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   80a5c:	4b2f      	ldr	r3, [pc, #188]	; (80b1c <xQueueGenericSendFromISR+0xd8>)
   80a5e:	4798      	blx	r3
	__asm volatile
   80a60:	f3ef 8611 	mrs	r6, BASEPRI
   80a64:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a68:	f383 8811 	msr	BASEPRI, r3
   80a6c:	f3bf 8f6f 	isb	sy
   80a70:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80a74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a78:	429a      	cmp	r2, r3
   80a7a:	d301      	bcc.n	80a80 <xQueueGenericSendFromISR+0x3c>
   80a7c:	2f02      	cmp	r7, #2
   80a7e:	d144      	bne.n	80b0a <xQueueGenericSendFromISR+0xc6>
			const int8_t cTxLock = pxQueue->cTxLock;
   80a80:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   80a84:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a86:	463a      	mov	r2, r7
   80a88:	4649      	mov	r1, r9
   80a8a:	4620      	mov	r0, r4
   80a8c:	4b24      	ldr	r3, [pc, #144]	; (80b20 <xQueueGenericSendFromISR+0xdc>)
   80a8e:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   80a90:	f1b5 3fff 	cmp.w	r5, #4294967295
   80a94:	d133      	bne.n	80afe <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a98:	2b00      	cmp	r3, #0
   80a9a:	d038      	beq.n	80b0e <xQueueGenericSendFromISR+0xca>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80a9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80aa0:	4b20      	ldr	r3, [pc, #128]	; (80b24 <xQueueGenericSendFromISR+0xe0>)
   80aa2:	4798      	blx	r3
   80aa4:	2800      	cmp	r0, #0
   80aa6:	d034      	beq.n	80b12 <xQueueGenericSendFromISR+0xce>
							if( pxHigherPriorityTaskWoken != NULL )
   80aa8:	f1b8 0f00 	cmp.w	r8, #0
   80aac:	d033      	beq.n	80b16 <xQueueGenericSendFromISR+0xd2>
								*pxHigherPriorityTaskWoken = pdTRUE;
   80aae:	2001      	movs	r0, #1
   80ab0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
   80ab4:	f386 8811 	msr	BASEPRI, r6
}
   80ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
   80abc:	f04f 0340 	mov.w	r3, #64	; 0x40
   80ac0:	f383 8811 	msr	BASEPRI, r3
   80ac4:	f3bf 8f6f 	isb	sy
   80ac8:	f3bf 8f4f 	dsb	sy
   80acc:	e7fe      	b.n	80acc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80ace:	6c00      	ldr	r0, [r0, #64]	; 0x40
   80ad0:	2800      	cmp	r0, #0
   80ad2:	d0be      	beq.n	80a52 <xQueueGenericSendFromISR+0xe>
   80ad4:	f04f 0340 	mov.w	r3, #64	; 0x40
   80ad8:	f383 8811 	msr	BASEPRI, r3
   80adc:	f3bf 8f6f 	isb	sy
   80ae0:	f3bf 8f4f 	dsb	sy
   80ae4:	e7fe      	b.n	80ae4 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80ae6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80ae8:	2801      	cmp	r0, #1
   80aea:	d0b4      	beq.n	80a56 <xQueueGenericSendFromISR+0x12>
   80aec:	f04f 0340 	mov.w	r3, #64	; 0x40
   80af0:	f383 8811 	msr	BASEPRI, r3
   80af4:	f3bf 8f6f 	isb	sy
   80af8:	f3bf 8f4f 	dsb	sy
   80afc:	e7fe      	b.n	80afc <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   80afe:	1c6b      	adds	r3, r5, #1
   80b00:	b25b      	sxtb	r3, r3
   80b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   80b06:	2001      	movs	r0, #1
   80b08:	e7d4      	b.n	80ab4 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
   80b0a:	2000      	movs	r0, #0
   80b0c:	e7d2      	b.n	80ab4 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
   80b0e:	2001      	movs	r0, #1
   80b10:	e7d0      	b.n	80ab4 <xQueueGenericSendFromISR+0x70>
   80b12:	2001      	movs	r0, #1
   80b14:	e7ce      	b.n	80ab4 <xQueueGenericSendFromISR+0x70>
   80b16:	2001      	movs	r0, #1
   80b18:	e7cc      	b.n	80ab4 <xQueueGenericSendFromISR+0x70>
   80b1a:	bf00      	nop
   80b1c:	00080571 	.word	0x00080571
   80b20:	0008066d 	.word	0x0008066d
   80b24:	00081485 	.word	0x00081485

00080b28 <xQueueReceive>:
{
   80b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80b2c:	b084      	sub	sp, #16
   80b2e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   80b30:	b180      	cbz	r0, 80b54 <xQueueReceive+0x2c>
   80b32:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80b34:	b1b9      	cbz	r1, 80b66 <xQueueReceive+0x3e>
   80b36:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80b38:	4b50      	ldr	r3, [pc, #320]	; (80c7c <xQueueReceive+0x154>)
   80b3a:	4798      	blx	r3
   80b3c:	b9f8      	cbnz	r0, 80b7e <xQueueReceive+0x56>
   80b3e:	9b01      	ldr	r3, [sp, #4]
   80b40:	b32b      	cbz	r3, 80b8e <xQueueReceive+0x66>
   80b42:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b46:	f383 8811 	msr	BASEPRI, r3
   80b4a:	f3bf 8f6f 	isb	sy
   80b4e:	f3bf 8f4f 	dsb	sy
   80b52:	e7fe      	b.n	80b52 <xQueueReceive+0x2a>
   80b54:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b58:	f383 8811 	msr	BASEPRI, r3
   80b5c:	f3bf 8f6f 	isb	sy
   80b60:	f3bf 8f4f 	dsb	sy
   80b64:	e7fe      	b.n	80b64 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80b66:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b68:	2b00      	cmp	r3, #0
   80b6a:	d0e4      	beq.n	80b36 <xQueueReceive+0xe>
   80b6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b70:	f383 8811 	msr	BASEPRI, r3
   80b74:	f3bf 8f6f 	isb	sy
   80b78:	f3bf 8f4f 	dsb	sy
   80b7c:	e7fe      	b.n	80b7c <xQueueReceive+0x54>
   80b7e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80b80:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80ca8 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80b84:	f8df a124 	ldr.w	sl, [pc, #292]	; 80cac <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
   80b88:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80c88 <xQueueReceive+0x160>
   80b8c:	e029      	b.n	80be2 <xQueueReceive+0xba>
   80b8e:	2700      	movs	r7, #0
   80b90:	e7f6      	b.n	80b80 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80b92:	4631      	mov	r1, r6
   80b94:	4620      	mov	r0, r4
   80b96:	4b3a      	ldr	r3, [pc, #232]	; (80c80 <xQueueReceive+0x158>)
   80b98:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   80b9a:	3d01      	subs	r5, #1
   80b9c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b9e:	6923      	ldr	r3, [r4, #16]
   80ba0:	b163      	cbz	r3, 80bbc <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80ba2:	f104 0010 	add.w	r0, r4, #16
   80ba6:	4b37      	ldr	r3, [pc, #220]	; (80c84 <xQueueReceive+0x15c>)
   80ba8:	4798      	blx	r3
   80baa:	b138      	cbz	r0, 80bbc <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
   80bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80bb0:	4b35      	ldr	r3, [pc, #212]	; (80c88 <xQueueReceive+0x160>)
   80bb2:	601a      	str	r2, [r3, #0]
   80bb4:	f3bf 8f4f 	dsb	sy
   80bb8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80bbc:	4b33      	ldr	r3, [pc, #204]	; (80c8c <xQueueReceive+0x164>)
   80bbe:	4798      	blx	r3
				return pdPASS;
   80bc0:	2001      	movs	r0, #1
}
   80bc2:	b004      	add	sp, #16
   80bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
   80bc8:	4b30      	ldr	r3, [pc, #192]	; (80c8c <xQueueReceive+0x164>)
   80bca:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80bcc:	2000      	movs	r0, #0
   80bce:	e7f8      	b.n	80bc2 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80bd0:	a802      	add	r0, sp, #8
   80bd2:	47d0      	blx	sl
   80bd4:	e00e      	b.n	80bf4 <xQueueReceive+0xcc>
				prvUnlockQueue( pxQueue );
   80bd6:	4620      	mov	r0, r4
   80bd8:	4b2d      	ldr	r3, [pc, #180]	; (80c90 <xQueueReceive+0x168>)
   80bda:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80bdc:	4b2d      	ldr	r3, [pc, #180]	; (80c94 <xQueueReceive+0x16c>)
   80bde:	4798      	blx	r3
   80be0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80be2:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80be4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   80be6:	2d00      	cmp	r5, #0
   80be8:	d1d3      	bne.n	80b92 <xQueueReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
   80bea:	9b01      	ldr	r3, [sp, #4]
   80bec:	2b00      	cmp	r3, #0
   80bee:	d0eb      	beq.n	80bc8 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   80bf0:	2f00      	cmp	r7, #0
   80bf2:	d0ed      	beq.n	80bd0 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
   80bf4:	4b25      	ldr	r3, [pc, #148]	; (80c8c <xQueueReceive+0x164>)
   80bf6:	4798      	blx	r3
		vTaskSuspendAll();
   80bf8:	4b27      	ldr	r3, [pc, #156]	; (80c98 <xQueueReceive+0x170>)
   80bfa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80bfc:	47c0      	blx	r8
   80bfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80c02:	b25b      	sxtb	r3, r3
   80c04:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c08:	bf04      	itt	eq
   80c0a:	2300      	moveq	r3, #0
   80c0c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80c10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80c14:	b25b      	sxtb	r3, r3
   80c16:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c1a:	bf04      	itt	eq
   80c1c:	2300      	moveq	r3, #0
   80c1e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80c22:	4b1a      	ldr	r3, [pc, #104]	; (80c8c <xQueueReceive+0x164>)
   80c24:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c26:	a901      	add	r1, sp, #4
   80c28:	a802      	add	r0, sp, #8
   80c2a:	4b1c      	ldr	r3, [pc, #112]	; (80c9c <xQueueReceive+0x174>)
   80c2c:	4798      	blx	r3
   80c2e:	b9c8      	cbnz	r0, 80c64 <xQueueReceive+0x13c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80c30:	4620      	mov	r0, r4
   80c32:	4b1b      	ldr	r3, [pc, #108]	; (80ca0 <xQueueReceive+0x178>)
   80c34:	4798      	blx	r3
   80c36:	2800      	cmp	r0, #0
   80c38:	d0cd      	beq.n	80bd6 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80c3a:	9901      	ldr	r1, [sp, #4]
   80c3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c40:	4b18      	ldr	r3, [pc, #96]	; (80ca4 <xQueueReceive+0x17c>)
   80c42:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80c44:	4620      	mov	r0, r4
   80c46:	4b12      	ldr	r3, [pc, #72]	; (80c90 <xQueueReceive+0x168>)
   80c48:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80c4a:	4b12      	ldr	r3, [pc, #72]	; (80c94 <xQueueReceive+0x16c>)
   80c4c:	4798      	blx	r3
   80c4e:	2800      	cmp	r0, #0
   80c50:	d1c6      	bne.n	80be0 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
   80c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80c56:	f8c9 3000 	str.w	r3, [r9]
   80c5a:	f3bf 8f4f 	dsb	sy
   80c5e:	f3bf 8f6f 	isb	sy
   80c62:	e7bd      	b.n	80be0 <xQueueReceive+0xb8>
			prvUnlockQueue( pxQueue );
   80c64:	4620      	mov	r0, r4
   80c66:	4b0a      	ldr	r3, [pc, #40]	; (80c90 <xQueueReceive+0x168>)
   80c68:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80c6a:	4b0a      	ldr	r3, [pc, #40]	; (80c94 <xQueueReceive+0x16c>)
   80c6c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80c6e:	4620      	mov	r0, r4
   80c70:	4b0b      	ldr	r3, [pc, #44]	; (80ca0 <xQueueReceive+0x178>)
   80c72:	4798      	blx	r3
   80c74:	2800      	cmp	r0, #0
   80c76:	d0b3      	beq.n	80be0 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
   80c78:	2000      	movs	r0, #0
   80c7a:	e7a2      	b.n	80bc2 <xQueueReceive+0x9a>
   80c7c:	000815c5 	.word	0x000815c5
   80c80:	000806ed 	.word	0x000806ed
   80c84:	00081485 	.word	0x00081485
   80c88:	e000ed04 	.word	0xe000ed04
   80c8c:	000803cd 	.word	0x000803cd
   80c90:	00080715 	.word	0x00080715
   80c94:	00081261 	.word	0x00081261
   80c98:	00081111 	.word	0x00081111
   80c9c:	0008152d 	.word	0x0008152d
   80ca0:	0008064d 	.word	0x0008064d
   80ca4:	00081409 	.word	0x00081409
   80ca8:	00080389 	.word	0x00080389
   80cac:	00081515 	.word	0x00081515

00080cb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   80cb0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   80cb2:	4b0a      	ldr	r3, [pc, #40]	; (80cdc <vQueueAddToRegistry+0x2c>)
   80cb4:	681b      	ldr	r3, [r3, #0]
   80cb6:	b14b      	cbz	r3, 80ccc <vQueueAddToRegistry+0x1c>
   80cb8:	2301      	movs	r3, #1
   80cba:	4c08      	ldr	r4, [pc, #32]	; (80cdc <vQueueAddToRegistry+0x2c>)
   80cbc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   80cc0:	b12a      	cbz	r2, 80cce <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   80cc2:	3301      	adds	r3, #1
   80cc4:	2b08      	cmp	r3, #8
   80cc6:	d1f9      	bne.n	80cbc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   80cc8:	bc10      	pop	{r4}
   80cca:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   80ccc:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   80cce:	4a03      	ldr	r2, [pc, #12]	; (80cdc <vQueueAddToRegistry+0x2c>)
   80cd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   80cd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   80cd8:	6058      	str	r0, [r3, #4]
				break;
   80cda:	e7f5      	b.n	80cc8 <vQueueAddToRegistry+0x18>
   80cdc:	2007c500 	.word	0x2007c500

00080ce0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   80ce0:	b570      	push	{r4, r5, r6, lr}
   80ce2:	4604      	mov	r4, r0
   80ce4:	460d      	mov	r5, r1
   80ce6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80ce8:	4b11      	ldr	r3, [pc, #68]	; (80d30 <vQueueWaitForMessageRestricted+0x50>)
   80cea:	4798      	blx	r3
   80cec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80cf0:	b25b      	sxtb	r3, r3
   80cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cf6:	bf04      	itt	eq
   80cf8:	2300      	moveq	r3, #0
   80cfa:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80cfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80d02:	b25b      	sxtb	r3, r3
   80d04:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d08:	bf04      	itt	eq
   80d0a:	2300      	moveq	r3, #0
   80d0c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80d10:	4b08      	ldr	r3, [pc, #32]	; (80d34 <vQueueWaitForMessageRestricted+0x54>)
   80d12:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   80d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d16:	b11b      	cbz	r3, 80d20 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   80d18:	4620      	mov	r0, r4
   80d1a:	4b07      	ldr	r3, [pc, #28]	; (80d38 <vQueueWaitForMessageRestricted+0x58>)
   80d1c:	4798      	blx	r3
   80d1e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   80d20:	4632      	mov	r2, r6
   80d22:	4629      	mov	r1, r5
   80d24:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d28:	4b04      	ldr	r3, [pc, #16]	; (80d3c <vQueueWaitForMessageRestricted+0x5c>)
   80d2a:	4798      	blx	r3
   80d2c:	e7f4      	b.n	80d18 <vQueueWaitForMessageRestricted+0x38>
   80d2e:	bf00      	nop
   80d30:	00080389 	.word	0x00080389
   80d34:	000803cd 	.word	0x000803cd
   80d38:	00080715 	.word	0x00080715
   80d3c:	00081441 	.word	0x00081441

00080d40 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80d40:	4b08      	ldr	r3, [pc, #32]	; (80d64 <prvResetNextTaskUnblockTime+0x24>)
   80d42:	681b      	ldr	r3, [r3, #0]
   80d44:	681b      	ldr	r3, [r3, #0]
   80d46:	b13b      	cbz	r3, 80d58 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80d48:	4b06      	ldr	r3, [pc, #24]	; (80d64 <prvResetNextTaskUnblockTime+0x24>)
   80d4a:	681b      	ldr	r3, [r3, #0]
   80d4c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   80d4e:	68db      	ldr	r3, [r3, #12]
   80d50:	685a      	ldr	r2, [r3, #4]
   80d52:	4b05      	ldr	r3, [pc, #20]	; (80d68 <prvResetNextTaskUnblockTime+0x28>)
   80d54:	601a      	str	r2, [r3, #0]
   80d56:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   80d58:	f04f 32ff 	mov.w	r2, #4294967295
   80d5c:	4b02      	ldr	r3, [pc, #8]	; (80d68 <prvResetNextTaskUnblockTime+0x28>)
   80d5e:	601a      	str	r2, [r3, #0]
   80d60:	4770      	bx	lr
   80d62:	bf00      	nop
   80d64:	2007c310 	.word	0x2007c310
   80d68:	2007c3c0 	.word	0x2007c3c0

00080d6c <prvIdleTask>:
{
   80d6c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   80d6e:	4d16      	ldr	r5, [pc, #88]	; (80dc8 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   80d70:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80de0 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   80d74:	4f15      	ldr	r7, [pc, #84]	; (80dcc <prvIdleTask+0x60>)
				taskYIELD();
   80d76:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80de4 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   80d7a:	682b      	ldr	r3, [r5, #0]
   80d7c:	b1bb      	cbz	r3, 80dae <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   80d7e:	4e14      	ldr	r6, [pc, #80]	; (80dd0 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   80d80:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   80d82:	68fb      	ldr	r3, [r7, #12]
   80d84:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   80d86:	1d20      	adds	r0, r4, #4
   80d88:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   80d8a:	4a12      	ldr	r2, [pc, #72]	; (80dd4 <prvIdleTask+0x68>)
   80d8c:	6813      	ldr	r3, [r2, #0]
   80d8e:	3b01      	subs	r3, #1
   80d90:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   80d92:	682b      	ldr	r3, [r5, #0]
   80d94:	3b01      	subs	r3, #1
   80d96:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   80d98:	4b0f      	ldr	r3, [pc, #60]	; (80dd8 <prvIdleTask+0x6c>)
   80d9a:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   80d9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   80d9e:	f8df a048 	ldr.w	sl, [pc, #72]	; 80de8 <prvIdleTask+0x7c>
   80da2:	47d0      	blx	sl
			vPortFree( pxTCB );
   80da4:	4620      	mov	r0, r4
   80da6:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   80da8:	682b      	ldr	r3, [r5, #0]
   80daa:	2b00      	cmp	r3, #0
   80dac:	d1e8      	bne.n	80d80 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   80dae:	4b0b      	ldr	r3, [pc, #44]	; (80ddc <prvIdleTask+0x70>)
   80db0:	681b      	ldr	r3, [r3, #0]
   80db2:	2b01      	cmp	r3, #1
   80db4:	d9e1      	bls.n	80d7a <prvIdleTask+0xe>
				taskYIELD();
   80db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80dba:	f8c9 3000 	str.w	r3, [r9]
   80dbe:	f3bf 8f4f 	dsb	sy
   80dc2:	f3bf 8f6f 	isb	sy
   80dc6:	e7d8      	b.n	80d7a <prvIdleTask+0xe>
   80dc8:	2007c380 	.word	0x2007c380
   80dcc:	2007c3f4 	.word	0x2007c3f4
   80dd0:	000802ad 	.word	0x000802ad
   80dd4:	2007c37c 	.word	0x2007c37c
   80dd8:	000803cd 	.word	0x000803cd
   80ddc:	2007c318 	.word	0x2007c318
   80de0:	00080389 	.word	0x00080389
   80de4:	e000ed04 	.word	0xe000ed04
   80de8:	00080635 	.word	0x00080635

00080dec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   80dec:	b570      	push	{r4, r5, r6, lr}
   80dee:	4604      	mov	r4, r0
   80df0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   80df2:	4b1d      	ldr	r3, [pc, #116]	; (80e68 <prvAddCurrentTaskToDelayedList+0x7c>)
   80df4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   80df6:	4b1d      	ldr	r3, [pc, #116]	; (80e6c <prvAddCurrentTaskToDelayedList+0x80>)
   80df8:	6818      	ldr	r0, [r3, #0]
   80dfa:	3004      	adds	r0, #4
   80dfc:	4b1c      	ldr	r3, [pc, #112]	; (80e70 <prvAddCurrentTaskToDelayedList+0x84>)
   80dfe:	4798      	blx	r3
   80e00:	b948      	cbnz	r0, 80e16 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   80e02:	4b1a      	ldr	r3, [pc, #104]	; (80e6c <prvAddCurrentTaskToDelayedList+0x80>)
   80e04:	681a      	ldr	r2, [r3, #0]
   80e06:	491b      	ldr	r1, [pc, #108]	; (80e74 <prvAddCurrentTaskToDelayedList+0x88>)
   80e08:	680b      	ldr	r3, [r1, #0]
   80e0a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   80e0c:	2201      	movs	r2, #1
   80e0e:	4082      	lsls	r2, r0
   80e10:	ea23 0302 	bic.w	r3, r3, r2
   80e14:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   80e16:	f1b4 3fff 	cmp.w	r4, #4294967295
   80e1a:	d013      	beq.n	80e44 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   80e1c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   80e1e:	4b13      	ldr	r3, [pc, #76]	; (80e6c <prvAddCurrentTaskToDelayedList+0x80>)
   80e20:	681b      	ldr	r3, [r3, #0]
   80e22:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   80e24:	42a5      	cmp	r5, r4
   80e26:	d816      	bhi.n	80e56 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   80e28:	4b13      	ldr	r3, [pc, #76]	; (80e78 <prvAddCurrentTaskToDelayedList+0x8c>)
   80e2a:	6818      	ldr	r0, [r3, #0]
   80e2c:	4b0f      	ldr	r3, [pc, #60]	; (80e6c <prvAddCurrentTaskToDelayedList+0x80>)
   80e2e:	6819      	ldr	r1, [r3, #0]
   80e30:	3104      	adds	r1, #4
   80e32:	4b12      	ldr	r3, [pc, #72]	; (80e7c <prvAddCurrentTaskToDelayedList+0x90>)
   80e34:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   80e36:	4b12      	ldr	r3, [pc, #72]	; (80e80 <prvAddCurrentTaskToDelayedList+0x94>)
   80e38:	681b      	ldr	r3, [r3, #0]
   80e3a:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   80e3c:	bf3c      	itt	cc
   80e3e:	4b10      	ldrcc	r3, [pc, #64]	; (80e80 <prvAddCurrentTaskToDelayedList+0x94>)
   80e40:	601c      	strcc	r4, [r3, #0]
   80e42:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   80e44:	2e00      	cmp	r6, #0
   80e46:	d0e9      	beq.n	80e1c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   80e48:	4b08      	ldr	r3, [pc, #32]	; (80e6c <prvAddCurrentTaskToDelayedList+0x80>)
   80e4a:	6819      	ldr	r1, [r3, #0]
   80e4c:	3104      	adds	r1, #4
   80e4e:	480d      	ldr	r0, [pc, #52]	; (80e84 <prvAddCurrentTaskToDelayedList+0x98>)
   80e50:	4b0d      	ldr	r3, [pc, #52]	; (80e88 <prvAddCurrentTaskToDelayedList+0x9c>)
   80e52:	4798      	blx	r3
   80e54:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   80e56:	4b0d      	ldr	r3, [pc, #52]	; (80e8c <prvAddCurrentTaskToDelayedList+0xa0>)
   80e58:	6818      	ldr	r0, [r3, #0]
   80e5a:	4b04      	ldr	r3, [pc, #16]	; (80e6c <prvAddCurrentTaskToDelayedList+0x80>)
   80e5c:	6819      	ldr	r1, [r3, #0]
   80e5e:	3104      	adds	r1, #4
   80e60:	4b06      	ldr	r3, [pc, #24]	; (80e7c <prvAddCurrentTaskToDelayedList+0x90>)
   80e62:	4798      	blx	r3
   80e64:	bd70      	pop	{r4, r5, r6, pc}
   80e66:	bf00      	nop
   80e68:	2007c408 	.word	0x2007c408
   80e6c:	2007c30c 	.word	0x2007c30c
   80e70:	000802ad 	.word	0x000802ad
   80e74:	2007c390 	.word	0x2007c390
   80e78:	2007c310 	.word	0x2007c310
   80e7c:	00080279 	.word	0x00080279
   80e80:	2007c3c0 	.word	0x2007c3c0
   80e84:	2007c3e0 	.word	0x2007c3e0
   80e88:	00080261 	.word	0x00080261
   80e8c:	2007c314 	.word	0x2007c314

00080e90 <xTaskCreate>:
	{
   80e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e94:	b083      	sub	sp, #12
   80e96:	4683      	mov	fp, r0
   80e98:	460d      	mov	r5, r1
   80e9a:	9301      	str	r3, [sp, #4]
   80e9c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80ea0:	0096      	lsls	r6, r2, #2
   80ea2:	4630      	mov	r0, r6
   80ea4:	4b60      	ldr	r3, [pc, #384]	; (81028 <xTaskCreate+0x198>)
   80ea6:	4798      	blx	r3
			if( pxStack != NULL )
   80ea8:	2800      	cmp	r0, #0
   80eaa:	f000 808d 	beq.w	80fc8 <xTaskCreate+0x138>
   80eae:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   80eb0:	2060      	movs	r0, #96	; 0x60
   80eb2:	4b5d      	ldr	r3, [pc, #372]	; (81028 <xTaskCreate+0x198>)
   80eb4:	4798      	blx	r3
				if( pxNewTCB != NULL )
   80eb6:	4604      	mov	r4, r0
   80eb8:	2800      	cmp	r0, #0
   80eba:	f000 8082 	beq.w	80fc2 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
   80ebe:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   80ec0:	4632      	mov	r2, r6
   80ec2:	21a5      	movs	r1, #165	; 0xa5
   80ec4:	4638      	mov	r0, r7
   80ec6:	4b59      	ldr	r3, [pc, #356]	; (8102c <xTaskCreate+0x19c>)
   80ec8:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   80eca:	3e04      	subs	r6, #4
   80ecc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80ece:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   80ed0:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   80ed4:	782b      	ldrb	r3, [r5, #0]
   80ed6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   80eda:	782b      	ldrb	r3, [r5, #0]
   80edc:	b163      	cbz	r3, 80ef8 <xTaskCreate+0x68>
   80ede:	462b      	mov	r3, r5
   80ee0:	f104 0234 	add.w	r2, r4, #52	; 0x34
   80ee4:	f105 0113 	add.w	r1, r5, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   80ee8:	7858      	ldrb	r0, [r3, #1]
   80eea:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   80eee:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   80ef2:	b108      	cbz	r0, 80ef8 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   80ef4:	428b      	cmp	r3, r1
   80ef6:	d1f7      	bne.n	80ee8 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   80ef8:	2700      	movs	r7, #0
   80efa:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
   80efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   80f00:	2d04      	cmp	r5, #4
   80f02:	bf28      	it	cs
   80f04:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   80f06:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   80f08:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
   80f0a:	6567      	str	r7, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   80f0c:	f104 0804 	add.w	r8, r4, #4
   80f10:	4640      	mov	r0, r8
   80f12:	f8df 916c 	ldr.w	r9, [pc, #364]	; 81080 <xTaskCreate+0x1f0>
   80f16:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   80f18:	f104 0018 	add.w	r0, r4, #24
   80f1c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   80f1e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80f20:	f1c5 0505 	rsb	r5, r5, #5
   80f24:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   80f26:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   80f28:	65a7      	str	r7, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   80f2a:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80f2e:	9a01      	ldr	r2, [sp, #4]
   80f30:	4659      	mov	r1, fp
   80f32:	4630      	mov	r0, r6
   80f34:	4b3e      	ldr	r3, [pc, #248]	; (81030 <xTaskCreate+0x1a0>)
   80f36:	4798      	blx	r3
   80f38:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   80f3a:	f1ba 0f00 	cmp.w	sl, #0
   80f3e:	d001      	beq.n	80f44 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   80f40:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   80f44:	4b3b      	ldr	r3, [pc, #236]	; (81034 <xTaskCreate+0x1a4>)
   80f46:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   80f48:	4a3b      	ldr	r2, [pc, #236]	; (81038 <xTaskCreate+0x1a8>)
   80f4a:	6813      	ldr	r3, [r2, #0]
   80f4c:	3301      	adds	r3, #1
   80f4e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   80f50:	4b3a      	ldr	r3, [pc, #232]	; (8103c <xTaskCreate+0x1ac>)
   80f52:	681b      	ldr	r3, [r3, #0]
   80f54:	2b00      	cmp	r3, #0
   80f56:	d03a      	beq.n	80fce <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
   80f58:	4b39      	ldr	r3, [pc, #228]	; (81040 <xTaskCreate+0x1b0>)
   80f5a:	681b      	ldr	r3, [r3, #0]
   80f5c:	b93b      	cbnz	r3, 80f6e <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   80f5e:	4b37      	ldr	r3, [pc, #220]	; (8103c <xTaskCreate+0x1ac>)
   80f60:	681b      	ldr	r3, [r3, #0]
   80f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   80f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80f66:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   80f68:	bf9c      	itt	ls
   80f6a:	4b34      	ldrls	r3, [pc, #208]	; (8103c <xTaskCreate+0x1ac>)
   80f6c:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   80f6e:	4a35      	ldr	r2, [pc, #212]	; (81044 <xTaskCreate+0x1b4>)
   80f70:	6813      	ldr	r3, [r2, #0]
   80f72:	3301      	adds	r3, #1
   80f74:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   80f76:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
   80f78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80f7a:	4a33      	ldr	r2, [pc, #204]	; (81048 <xTaskCreate+0x1b8>)
   80f7c:	6811      	ldr	r1, [r2, #0]
   80f7e:	2301      	movs	r3, #1
   80f80:	4083      	lsls	r3, r0
   80f82:	430b      	orrs	r3, r1
   80f84:	6013      	str	r3, [r2, #0]
   80f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f8a:	4641      	mov	r1, r8
   80f8c:	4b2f      	ldr	r3, [pc, #188]	; (8104c <xTaskCreate+0x1bc>)
   80f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f92:	4b2f      	ldr	r3, [pc, #188]	; (81050 <xTaskCreate+0x1c0>)
   80f94:	4798      	blx	r3
	taskEXIT_CRITICAL();
   80f96:	4b2f      	ldr	r3, [pc, #188]	; (81054 <xTaskCreate+0x1c4>)
   80f98:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   80f9a:	4b29      	ldr	r3, [pc, #164]	; (81040 <xTaskCreate+0x1b0>)
   80f9c:	681b      	ldr	r3, [r3, #0]
   80f9e:	2b00      	cmp	r3, #0
   80fa0:	d03b      	beq.n	8101a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   80fa2:	4b26      	ldr	r3, [pc, #152]	; (8103c <xTaskCreate+0x1ac>)
   80fa4:	681b      	ldr	r3, [r3, #0]
   80fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   80fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80faa:	429a      	cmp	r2, r3
   80fac:	d239      	bcs.n	81022 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
   80fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fb2:	4b29      	ldr	r3, [pc, #164]	; (81058 <xTaskCreate+0x1c8>)
   80fb4:	601a      	str	r2, [r3, #0]
   80fb6:	f3bf 8f4f 	dsb	sy
   80fba:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   80fbe:	2001      	movs	r0, #1
   80fc0:	e02c      	b.n	8101c <xTaskCreate+0x18c>
					vPortFree( pxStack );
   80fc2:	4638      	mov	r0, r7
   80fc4:	4b25      	ldr	r3, [pc, #148]	; (8105c <xTaskCreate+0x1cc>)
   80fc6:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80fc8:	f04f 30ff 	mov.w	r0, #4294967295
   80fcc:	e026      	b.n	8101c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
   80fce:	4b1b      	ldr	r3, [pc, #108]	; (8103c <xTaskCreate+0x1ac>)
   80fd0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   80fd2:	6813      	ldr	r3, [r2, #0]
   80fd4:	2b01      	cmp	r3, #1
   80fd6:	d1ca      	bne.n	80f6e <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   80fd8:	4e1c      	ldr	r6, [pc, #112]	; (8104c <xTaskCreate+0x1bc>)
   80fda:	4630      	mov	r0, r6
   80fdc:	4d20      	ldr	r5, [pc, #128]	; (81060 <xTaskCreate+0x1d0>)
   80fde:	47a8      	blx	r5
   80fe0:	f106 0014 	add.w	r0, r6, #20
   80fe4:	47a8      	blx	r5
   80fe6:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80fea:	47a8      	blx	r5
   80fec:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80ff0:	47a8      	blx	r5
   80ff2:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80ff6:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   80ff8:	4f1a      	ldr	r7, [pc, #104]	; (81064 <xTaskCreate+0x1d4>)
   80ffa:	4638      	mov	r0, r7
   80ffc:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   80ffe:	4e1a      	ldr	r6, [pc, #104]	; (81068 <xTaskCreate+0x1d8>)
   81000:	4630      	mov	r0, r6
   81002:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   81004:	4819      	ldr	r0, [pc, #100]	; (8106c <xTaskCreate+0x1dc>)
   81006:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   81008:	4819      	ldr	r0, [pc, #100]	; (81070 <xTaskCreate+0x1e0>)
   8100a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   8100c:	4819      	ldr	r0, [pc, #100]	; (81074 <xTaskCreate+0x1e4>)
   8100e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   81010:	4b19      	ldr	r3, [pc, #100]	; (81078 <xTaskCreate+0x1e8>)
   81012:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81014:	4b19      	ldr	r3, [pc, #100]	; (8107c <xTaskCreate+0x1ec>)
   81016:	601e      	str	r6, [r3, #0]
   81018:	e7a9      	b.n	80f6e <xTaskCreate+0xde>
			xReturn = pdPASS;
   8101a:	2001      	movs	r0, #1
	}
   8101c:	b003      	add	sp, #12
   8101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   81022:	2001      	movs	r0, #1
		return xReturn;
   81024:	e7fa      	b.n	8101c <xTaskCreate+0x18c>
   81026:	bf00      	nop
   81028:	000805cd 	.word	0x000805cd
   8102c:	00082391 	.word	0x00082391
   81030:	00080335 	.word	0x00080335
   81034:	00080389 	.word	0x00080389
   81038:	2007c37c 	.word	0x2007c37c
   8103c:	2007c30c 	.word	0x2007c30c
   81040:	2007c3dc 	.word	0x2007c3dc
   81044:	2007c38c 	.word	0x2007c38c
   81048:	2007c390 	.word	0x2007c390
   8104c:	2007c318 	.word	0x2007c318
   81050:	00080261 	.word	0x00080261
   81054:	000803cd 	.word	0x000803cd
   81058:	e000ed04 	.word	0xe000ed04
   8105c:	00080635 	.word	0x00080635
   81060:	00080245 	.word	0x00080245
   81064:	2007c394 	.word	0x2007c394
   81068:	2007c3a8 	.word	0x2007c3a8
   8106c:	2007c3c8 	.word	0x2007c3c8
   81070:	2007c3f4 	.word	0x2007c3f4
   81074:	2007c3e0 	.word	0x2007c3e0
   81078:	2007c310 	.word	0x2007c310
   8107c:	2007c314 	.word	0x2007c314
   81080:	0008025b 	.word	0x0008025b

00081084 <vTaskStartScheduler>:
{
   81084:	b510      	push	{r4, lr}
   81086:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   81088:	4b18      	ldr	r3, [pc, #96]	; (810ec <vTaskStartScheduler+0x68>)
   8108a:	9301      	str	r3, [sp, #4]
   8108c:	2300      	movs	r3, #0
   8108e:	9300      	str	r3, [sp, #0]
   81090:	2282      	movs	r2, #130	; 0x82
   81092:	4917      	ldr	r1, [pc, #92]	; (810f0 <vTaskStartScheduler+0x6c>)
   81094:	4817      	ldr	r0, [pc, #92]	; (810f4 <vTaskStartScheduler+0x70>)
   81096:	4c18      	ldr	r4, [pc, #96]	; (810f8 <vTaskStartScheduler+0x74>)
   81098:	47a0      	blx	r4
		if( xReturn == pdPASS )
   8109a:	2801      	cmp	r0, #1
   8109c:	d004      	beq.n	810a8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   8109e:	f1b0 3fff 	cmp.w	r0, #4294967295
   810a2:	d01a      	beq.n	810da <vTaskStartScheduler+0x56>
}
   810a4:	b002      	add	sp, #8
   810a6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   810a8:	4b14      	ldr	r3, [pc, #80]	; (810fc <vTaskStartScheduler+0x78>)
   810aa:	4798      	blx	r3
	if( xReturn == pdPASS )
   810ac:	2801      	cmp	r0, #1
   810ae:	d1f6      	bne.n	8109e <vTaskStartScheduler+0x1a>
   810b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   810b4:	f383 8811 	msr	BASEPRI, r3
   810b8:	f3bf 8f6f 	isb	sy
   810bc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   810c0:	f04f 32ff 	mov.w	r2, #4294967295
   810c4:	4b0e      	ldr	r3, [pc, #56]	; (81100 <vTaskStartScheduler+0x7c>)
   810c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   810c8:	2201      	movs	r2, #1
   810ca:	4b0e      	ldr	r3, [pc, #56]	; (81104 <vTaskStartScheduler+0x80>)
   810cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   810ce:	2200      	movs	r2, #0
   810d0:	4b0d      	ldr	r3, [pc, #52]	; (81108 <vTaskStartScheduler+0x84>)
   810d2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   810d4:	4b0d      	ldr	r3, [pc, #52]	; (8110c <vTaskStartScheduler+0x88>)
   810d6:	4798      	blx	r3
   810d8:	e7e4      	b.n	810a4 <vTaskStartScheduler+0x20>
   810da:	f04f 0340 	mov.w	r3, #64	; 0x40
   810de:	f383 8811 	msr	BASEPRI, r3
   810e2:	f3bf 8f6f 	isb	sy
   810e6:	f3bf 8f4f 	dsb	sy
   810ea:	e7fe      	b.n	810ea <vTaskStartScheduler+0x66>
   810ec:	2007c3bc 	.word	0x2007c3bc
   810f0:	00084f18 	.word	0x00084f18
   810f4:	00080d6d 	.word	0x00080d6d
   810f8:	00080e91 	.word	0x00080e91
   810fc:	0008175d 	.word	0x0008175d
   81100:	2007c3c0 	.word	0x2007c3c0
   81104:	2007c3dc 	.word	0x2007c3dc
   81108:	2007c408 	.word	0x2007c408
   8110c:	000804a1 	.word	0x000804a1

00081110 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   81110:	4a02      	ldr	r2, [pc, #8]	; (8111c <vTaskSuspendAll+0xc>)
   81112:	6813      	ldr	r3, [r2, #0]
   81114:	3301      	adds	r3, #1
   81116:	6013      	str	r3, [r2, #0]
   81118:	4770      	bx	lr
   8111a:	bf00      	nop
   8111c:	2007c388 	.word	0x2007c388

00081120 <xTaskGetTickCount>:
		xTicks = xTickCount;
   81120:	4b01      	ldr	r3, [pc, #4]	; (81128 <xTaskGetTickCount+0x8>)
   81122:	6818      	ldr	r0, [r3, #0]
}
   81124:	4770      	bx	lr
   81126:	bf00      	nop
   81128:	2007c408 	.word	0x2007c408

0008112c <xTaskIncrementTick>:
{
   8112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81130:	4b3d      	ldr	r3, [pc, #244]	; (81228 <xTaskIncrementTick+0xfc>)
   81132:	681b      	ldr	r3, [r3, #0]
   81134:	2b00      	cmp	r3, #0
   81136:	d169      	bne.n	8120c <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   81138:	4b3c      	ldr	r3, [pc, #240]	; (8122c <xTaskIncrementTick+0x100>)
   8113a:	681d      	ldr	r5, [r3, #0]
   8113c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   8113e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   81140:	b9c5      	cbnz	r5, 81174 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
   81142:	4b3b      	ldr	r3, [pc, #236]	; (81230 <xTaskIncrementTick+0x104>)
   81144:	681b      	ldr	r3, [r3, #0]
   81146:	681b      	ldr	r3, [r3, #0]
   81148:	b143      	cbz	r3, 8115c <xTaskIncrementTick+0x30>
   8114a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8114e:	f383 8811 	msr	BASEPRI, r3
   81152:	f3bf 8f6f 	isb	sy
   81156:	f3bf 8f4f 	dsb	sy
   8115a:	e7fe      	b.n	8115a <xTaskIncrementTick+0x2e>
   8115c:	4a34      	ldr	r2, [pc, #208]	; (81230 <xTaskIncrementTick+0x104>)
   8115e:	6811      	ldr	r1, [r2, #0]
   81160:	4b34      	ldr	r3, [pc, #208]	; (81234 <xTaskIncrementTick+0x108>)
   81162:	6818      	ldr	r0, [r3, #0]
   81164:	6010      	str	r0, [r2, #0]
   81166:	6019      	str	r1, [r3, #0]
   81168:	4a33      	ldr	r2, [pc, #204]	; (81238 <xTaskIncrementTick+0x10c>)
   8116a:	6813      	ldr	r3, [r2, #0]
   8116c:	3301      	adds	r3, #1
   8116e:	6013      	str	r3, [r2, #0]
   81170:	4b32      	ldr	r3, [pc, #200]	; (8123c <xTaskIncrementTick+0x110>)
   81172:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   81174:	4b32      	ldr	r3, [pc, #200]	; (81240 <xTaskIncrementTick+0x114>)
   81176:	681b      	ldr	r3, [r3, #0]
   81178:	429d      	cmp	r5, r3
   8117a:	d20c      	bcs.n	81196 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
   8117c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8117e:	4b31      	ldr	r3, [pc, #196]	; (81244 <xTaskIncrementTick+0x118>)
   81180:	681b      	ldr	r3, [r3, #0]
   81182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81184:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81188:	009b      	lsls	r3, r3, #2
   8118a:	4a2f      	ldr	r2, [pc, #188]	; (81248 <xTaskIncrementTick+0x11c>)
   8118c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   8118e:	2b02      	cmp	r3, #2
   81190:	bf28      	it	cs
   81192:	2401      	movcs	r4, #1
   81194:	e03f      	b.n	81216 <xTaskIncrementTick+0xea>
   81196:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81198:	f8df 9094 	ldr.w	r9, [pc, #148]	; 81230 <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   8119c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8125c <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
   811a0:	4f2a      	ldr	r7, [pc, #168]	; (8124c <xTaskIncrementTick+0x120>)
   811a2:	e01f      	b.n	811e4 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   811a4:	f04f 32ff 	mov.w	r2, #4294967295
   811a8:	4b25      	ldr	r3, [pc, #148]	; (81240 <xTaskIncrementTick+0x114>)
   811aa:	601a      	str	r2, [r3, #0]
					break;
   811ac:	e7e7      	b.n	8117e <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
   811ae:	4a24      	ldr	r2, [pc, #144]	; (81240 <xTaskIncrementTick+0x114>)
   811b0:	6013      	str	r3, [r2, #0]
						break;
   811b2:	e7e4      	b.n	8117e <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   811b4:	f106 0018 	add.w	r0, r6, #24
   811b8:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   811ba:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   811bc:	683a      	ldr	r2, [r7, #0]
   811be:	2301      	movs	r3, #1
   811c0:	4083      	lsls	r3, r0
   811c2:	4313      	orrs	r3, r2
   811c4:	603b      	str	r3, [r7, #0]
   811c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811ca:	4651      	mov	r1, sl
   811cc:	4b1e      	ldr	r3, [pc, #120]	; (81248 <xTaskIncrementTick+0x11c>)
   811ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811d2:	4b1f      	ldr	r3, [pc, #124]	; (81250 <xTaskIncrementTick+0x124>)
   811d4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   811d6:	4b1b      	ldr	r3, [pc, #108]	; (81244 <xTaskIncrementTick+0x118>)
   811d8:	681b      	ldr	r3, [r3, #0]
   811da:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   811dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   811de:	429a      	cmp	r2, r3
   811e0:	bf28      	it	cs
   811e2:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   811e4:	f8d9 3000 	ldr.w	r3, [r9]
   811e8:	681b      	ldr	r3, [r3, #0]
   811ea:	2b00      	cmp	r3, #0
   811ec:	d0da      	beq.n	811a4 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   811ee:	f8d9 3000 	ldr.w	r3, [r9]
   811f2:	68db      	ldr	r3, [r3, #12]
   811f4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   811f6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   811f8:	429d      	cmp	r5, r3
   811fa:	d3d8      	bcc.n	811ae <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   811fc:	f106 0a04 	add.w	sl, r6, #4
   81200:	4650      	mov	r0, sl
   81202:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81204:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   81206:	2b00      	cmp	r3, #0
   81208:	d1d4      	bne.n	811b4 <xTaskIncrementTick+0x88>
   8120a:	e7d6      	b.n	811ba <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
   8120c:	4a11      	ldr	r2, [pc, #68]	; (81254 <xTaskIncrementTick+0x128>)
   8120e:	6813      	ldr	r3, [r2, #0]
   81210:	3301      	adds	r3, #1
   81212:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   81214:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   81216:	4b10      	ldr	r3, [pc, #64]	; (81258 <xTaskIncrementTick+0x12c>)
   81218:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   8121a:	2b00      	cmp	r3, #0
}
   8121c:	bf0c      	ite	eq
   8121e:	4620      	moveq	r0, r4
   81220:	2001      	movne	r0, #1
   81222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81226:	bf00      	nop
   81228:	2007c388 	.word	0x2007c388
   8122c:	2007c408 	.word	0x2007c408
   81230:	2007c310 	.word	0x2007c310
   81234:	2007c314 	.word	0x2007c314
   81238:	2007c3c4 	.word	0x2007c3c4
   8123c:	00080d41 	.word	0x00080d41
   81240:	2007c3c0 	.word	0x2007c3c0
   81244:	2007c30c 	.word	0x2007c30c
   81248:	2007c318 	.word	0x2007c318
   8124c:	2007c390 	.word	0x2007c390
   81250:	00080261 	.word	0x00080261
   81254:	2007c384 	.word	0x2007c384
   81258:	2007c40c 	.word	0x2007c40c
   8125c:	000802ad 	.word	0x000802ad

00081260 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   81260:	4b35      	ldr	r3, [pc, #212]	; (81338 <xTaskResumeAll+0xd8>)
   81262:	681b      	ldr	r3, [r3, #0]
   81264:	b943      	cbnz	r3, 81278 <xTaskResumeAll+0x18>
   81266:	f04f 0340 	mov.w	r3, #64	; 0x40
   8126a:	f383 8811 	msr	BASEPRI, r3
   8126e:	f3bf 8f6f 	isb	sy
   81272:	f3bf 8f4f 	dsb	sy
   81276:	e7fe      	b.n	81276 <xTaskResumeAll+0x16>
{
   81278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
   8127c:	4b2f      	ldr	r3, [pc, #188]	; (8133c <xTaskResumeAll+0xdc>)
   8127e:	4798      	blx	r3
		--uxSchedulerSuspended;
   81280:	4b2d      	ldr	r3, [pc, #180]	; (81338 <xTaskResumeAll+0xd8>)
   81282:	681a      	ldr	r2, [r3, #0]
   81284:	3a01      	subs	r2, #1
   81286:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81288:	681b      	ldr	r3, [r3, #0]
   8128a:	2b00      	cmp	r3, #0
   8128c:	d150      	bne.n	81330 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   8128e:	4b2c      	ldr	r3, [pc, #176]	; (81340 <xTaskResumeAll+0xe0>)
   81290:	681b      	ldr	r3, [r3, #0]
   81292:	b92b      	cbnz	r3, 812a0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
   81294:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   81296:	4b2b      	ldr	r3, [pc, #172]	; (81344 <xTaskResumeAll+0xe4>)
   81298:	4798      	blx	r3
}
   8129a:	4620      	mov	r0, r4
   8129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812a0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   812a2:	4f29      	ldr	r7, [pc, #164]	; (81348 <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   812a4:	4e29      	ldr	r6, [pc, #164]	; (8134c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
   812a6:	4d2a      	ldr	r5, [pc, #168]	; (81350 <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   812a8:	683b      	ldr	r3, [r7, #0]
   812aa:	b303      	cbz	r3, 812ee <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   812ac:	68fb      	ldr	r3, [r7, #12]
   812ae:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   812b0:	f104 0018 	add.w	r0, r4, #24
   812b4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   812b6:	f104 0804 	add.w	r8, r4, #4
   812ba:	4640      	mov	r0, r8
   812bc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   812be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   812c0:	682a      	ldr	r2, [r5, #0]
   812c2:	2301      	movs	r3, #1
   812c4:	4083      	lsls	r3, r0
   812c6:	4313      	orrs	r3, r2
   812c8:	602b      	str	r3, [r5, #0]
   812ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   812ce:	4641      	mov	r1, r8
   812d0:	4b20      	ldr	r3, [pc, #128]	; (81354 <xTaskResumeAll+0xf4>)
   812d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   812d6:	4b20      	ldr	r3, [pc, #128]	; (81358 <xTaskResumeAll+0xf8>)
   812d8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   812da:	4b20      	ldr	r3, [pc, #128]	; (8135c <xTaskResumeAll+0xfc>)
   812dc:	681b      	ldr	r3, [r3, #0]
   812de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   812e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   812e2:	429a      	cmp	r2, r3
   812e4:	d3e0      	bcc.n	812a8 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
   812e6:	2201      	movs	r2, #1
   812e8:	4b1d      	ldr	r3, [pc, #116]	; (81360 <xTaskResumeAll+0x100>)
   812ea:	601a      	str	r2, [r3, #0]
   812ec:	e7dc      	b.n	812a8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
   812ee:	b10c      	cbz	r4, 812f4 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
   812f0:	4b1c      	ldr	r3, [pc, #112]	; (81364 <xTaskResumeAll+0x104>)
   812f2:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   812f4:	4b1c      	ldr	r3, [pc, #112]	; (81368 <xTaskResumeAll+0x108>)
   812f6:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   812f8:	b16c      	cbz	r4, 81316 <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
   812fa:	4f1c      	ldr	r7, [pc, #112]	; (8136c <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   812fc:	4e18      	ldr	r6, [pc, #96]	; (81360 <xTaskResumeAll+0x100>)
   812fe:	2501      	movs	r5, #1
   81300:	e001      	b.n	81306 <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   81302:	3c01      	subs	r4, #1
   81304:	d004      	beq.n	81310 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   81306:	47b8      	blx	r7
   81308:	2800      	cmp	r0, #0
   8130a:	d0fa      	beq.n	81302 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
   8130c:	6035      	str	r5, [r6, #0]
   8130e:	e7f8      	b.n	81302 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
   81310:	2200      	movs	r2, #0
   81312:	4b15      	ldr	r3, [pc, #84]	; (81368 <xTaskResumeAll+0x108>)
   81314:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   81316:	4b12      	ldr	r3, [pc, #72]	; (81360 <xTaskResumeAll+0x100>)
   81318:	681b      	ldr	r3, [r3, #0]
   8131a:	b15b      	cbz	r3, 81334 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
   8131c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81320:	4b13      	ldr	r3, [pc, #76]	; (81370 <xTaskResumeAll+0x110>)
   81322:	601a      	str	r2, [r3, #0]
   81324:	f3bf 8f4f 	dsb	sy
   81328:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   8132c:	2401      	movs	r4, #1
   8132e:	e7b2      	b.n	81296 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
   81330:	2400      	movs	r4, #0
   81332:	e7b0      	b.n	81296 <xTaskResumeAll+0x36>
   81334:	2400      	movs	r4, #0
   81336:	e7ae      	b.n	81296 <xTaskResumeAll+0x36>
   81338:	2007c388 	.word	0x2007c388
   8133c:	00080389 	.word	0x00080389
   81340:	2007c37c 	.word	0x2007c37c
   81344:	000803cd 	.word	0x000803cd
   81348:	2007c3c8 	.word	0x2007c3c8
   8134c:	000802ad 	.word	0x000802ad
   81350:	2007c390 	.word	0x2007c390
   81354:	2007c318 	.word	0x2007c318
   81358:	00080261 	.word	0x00080261
   8135c:	2007c30c 	.word	0x2007c30c
   81360:	2007c40c 	.word	0x2007c40c
   81364:	00080d41 	.word	0x00080d41
   81368:	2007c384 	.word	0x2007c384
   8136c:	0008112d 	.word	0x0008112d
   81370:	e000ed04 	.word	0xe000ed04

00081374 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   81374:	4b1f      	ldr	r3, [pc, #124]	; (813f4 <vTaskSwitchContext+0x80>)
   81376:	681b      	ldr	r3, [r3, #0]
   81378:	b9c3      	cbnz	r3, 813ac <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
   8137a:	2200      	movs	r2, #0
   8137c:	4b1e      	ldr	r3, [pc, #120]	; (813f8 <vTaskSwitchContext+0x84>)
   8137e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81380:	4b1e      	ldr	r3, [pc, #120]	; (813fc <vTaskSwitchContext+0x88>)
   81382:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   81384:	fab3 f383 	clz	r3, r3
   81388:	b2db      	uxtb	r3, r3
   8138a:	f1c3 031f 	rsb	r3, r3, #31
   8138e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   81392:	0092      	lsls	r2, r2, #2
   81394:	491a      	ldr	r1, [pc, #104]	; (81400 <vTaskSwitchContext+0x8c>)
   81396:	588a      	ldr	r2, [r1, r2]
   81398:	b962      	cbnz	r2, 813b4 <vTaskSwitchContext+0x40>
	__asm volatile
   8139a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8139e:	f383 8811 	msr	BASEPRI, r3
   813a2:	f3bf 8f6f 	isb	sy
   813a6:	f3bf 8f4f 	dsb	sy
   813aa:	e7fe      	b.n	813aa <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
   813ac:	2201      	movs	r2, #1
   813ae:	4b12      	ldr	r3, [pc, #72]	; (813f8 <vTaskSwitchContext+0x84>)
   813b0:	601a      	str	r2, [r3, #0]
   813b2:	4770      	bx	lr
{
   813b4:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   813b6:	4a12      	ldr	r2, [pc, #72]	; (81400 <vTaskSwitchContext+0x8c>)
   813b8:	0099      	lsls	r1, r3, #2
   813ba:	18c8      	adds	r0, r1, r3
   813bc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   813c0:	6844      	ldr	r4, [r0, #4]
   813c2:	6864      	ldr	r4, [r4, #4]
   813c4:	6044      	str	r4, [r0, #4]
   813c6:	4419      	add	r1, r3
   813c8:	4602      	mov	r2, r0
   813ca:	3208      	adds	r2, #8
   813cc:	4294      	cmp	r4, r2
   813ce:	d00a      	beq.n	813e6 <vTaskSwitchContext+0x72>
   813d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813d4:	4a0a      	ldr	r2, [pc, #40]	; (81400 <vTaskSwitchContext+0x8c>)
   813d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   813da:	685b      	ldr	r3, [r3, #4]
   813dc:	68da      	ldr	r2, [r3, #12]
   813de:	4b09      	ldr	r3, [pc, #36]	; (81404 <vTaskSwitchContext+0x90>)
   813e0:	601a      	str	r2, [r3, #0]
}
   813e2:	bc10      	pop	{r4}
   813e4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   813e6:	6860      	ldr	r0, [r4, #4]
   813e8:	4a05      	ldr	r2, [pc, #20]	; (81400 <vTaskSwitchContext+0x8c>)
   813ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   813ee:	6050      	str	r0, [r2, #4]
   813f0:	e7ee      	b.n	813d0 <vTaskSwitchContext+0x5c>
   813f2:	bf00      	nop
   813f4:	2007c388 	.word	0x2007c388
   813f8:	2007c40c 	.word	0x2007c40c
   813fc:	2007c390 	.word	0x2007c390
   81400:	2007c318 	.word	0x2007c318
   81404:	2007c30c 	.word	0x2007c30c

00081408 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   81408:	b940      	cbnz	r0, 8141c <vTaskPlaceOnEventList+0x14>
   8140a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8140e:	f383 8811 	msr	BASEPRI, r3
   81412:	f3bf 8f6f 	isb	sy
   81416:	f3bf 8f4f 	dsb	sy
   8141a:	e7fe      	b.n	8141a <vTaskPlaceOnEventList+0x12>
{
   8141c:	b510      	push	{r4, lr}
   8141e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81420:	4b04      	ldr	r3, [pc, #16]	; (81434 <vTaskPlaceOnEventList+0x2c>)
   81422:	6819      	ldr	r1, [r3, #0]
   81424:	3118      	adds	r1, #24
   81426:	4b04      	ldr	r3, [pc, #16]	; (81438 <vTaskPlaceOnEventList+0x30>)
   81428:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   8142a:	2101      	movs	r1, #1
   8142c:	4620      	mov	r0, r4
   8142e:	4b03      	ldr	r3, [pc, #12]	; (8143c <vTaskPlaceOnEventList+0x34>)
   81430:	4798      	blx	r3
   81432:	bd10      	pop	{r4, pc}
   81434:	2007c30c 	.word	0x2007c30c
   81438:	00080279 	.word	0x00080279
   8143c:	00080ded 	.word	0x00080ded

00081440 <vTaskPlaceOnEventListRestricted>:
	{
   81440:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   81442:	b178      	cbz	r0, 81464 <vTaskPlaceOnEventListRestricted+0x24>
   81444:	4614      	mov	r4, r2
   81446:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81448:	4b0b      	ldr	r3, [pc, #44]	; (81478 <vTaskPlaceOnEventListRestricted+0x38>)
   8144a:	6819      	ldr	r1, [r3, #0]
   8144c:	3118      	adds	r1, #24
   8144e:	4b0b      	ldr	r3, [pc, #44]	; (8147c <vTaskPlaceOnEventListRestricted+0x3c>)
   81450:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   81452:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   81454:	4621      	mov	r1, r4
   81456:	bf0c      	ite	eq
   81458:	4628      	moveq	r0, r5
   8145a:	f04f 30ff 	movne.w	r0, #4294967295
   8145e:	4b08      	ldr	r3, [pc, #32]	; (81480 <vTaskPlaceOnEventListRestricted+0x40>)
   81460:	4798      	blx	r3
   81462:	bd38      	pop	{r3, r4, r5, pc}
   81464:	f04f 0340 	mov.w	r3, #64	; 0x40
   81468:	f383 8811 	msr	BASEPRI, r3
   8146c:	f3bf 8f6f 	isb	sy
   81470:	f3bf 8f4f 	dsb	sy
   81474:	e7fe      	b.n	81474 <vTaskPlaceOnEventListRestricted+0x34>
   81476:	bf00      	nop
   81478:	2007c30c 	.word	0x2007c30c
   8147c:	00080261 	.word	0x00080261
   81480:	00080ded 	.word	0x00080ded

00081484 <xTaskRemoveFromEventList>:
{
   81484:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81486:	68c3      	ldr	r3, [r0, #12]
   81488:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8148a:	b32c      	cbz	r4, 814d8 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8148c:	f104 0518 	add.w	r5, r4, #24
   81490:	4628      	mov	r0, r5
   81492:	4b18      	ldr	r3, [pc, #96]	; (814f4 <xTaskRemoveFromEventList+0x70>)
   81494:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81496:	4b18      	ldr	r3, [pc, #96]	; (814f8 <xTaskRemoveFromEventList+0x74>)
   81498:	681b      	ldr	r3, [r3, #0]
   8149a:	bb33      	cbnz	r3, 814ea <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   8149c:	1d25      	adds	r5, r4, #4
   8149e:	4628      	mov	r0, r5
   814a0:	4b14      	ldr	r3, [pc, #80]	; (814f4 <xTaskRemoveFromEventList+0x70>)
   814a2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   814a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   814a6:	4a15      	ldr	r2, [pc, #84]	; (814fc <xTaskRemoveFromEventList+0x78>)
   814a8:	6811      	ldr	r1, [r2, #0]
   814aa:	2301      	movs	r3, #1
   814ac:	4083      	lsls	r3, r0
   814ae:	430b      	orrs	r3, r1
   814b0:	6013      	str	r3, [r2, #0]
   814b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814b6:	4629      	mov	r1, r5
   814b8:	4b11      	ldr	r3, [pc, #68]	; (81500 <xTaskRemoveFromEventList+0x7c>)
   814ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   814be:	4b11      	ldr	r3, [pc, #68]	; (81504 <xTaskRemoveFromEventList+0x80>)
   814c0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   814c2:	4b11      	ldr	r3, [pc, #68]	; (81508 <xTaskRemoveFromEventList+0x84>)
   814c4:	681b      	ldr	r3, [r3, #0]
   814c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   814c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   814ca:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   814cc:	bf83      	ittte	hi
   814ce:	2001      	movhi	r0, #1
   814d0:	4b0e      	ldrhi	r3, [pc, #56]	; (8150c <xTaskRemoveFromEventList+0x88>)
   814d2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   814d4:	2000      	movls	r0, #0
}
   814d6:	bd38      	pop	{r3, r4, r5, pc}
   814d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   814dc:	f383 8811 	msr	BASEPRI, r3
   814e0:	f3bf 8f6f 	isb	sy
   814e4:	f3bf 8f4f 	dsb	sy
   814e8:	e7fe      	b.n	814e8 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   814ea:	4629      	mov	r1, r5
   814ec:	4808      	ldr	r0, [pc, #32]	; (81510 <xTaskRemoveFromEventList+0x8c>)
   814ee:	4b05      	ldr	r3, [pc, #20]	; (81504 <xTaskRemoveFromEventList+0x80>)
   814f0:	4798      	blx	r3
   814f2:	e7e6      	b.n	814c2 <xTaskRemoveFromEventList+0x3e>
   814f4:	000802ad 	.word	0x000802ad
   814f8:	2007c388 	.word	0x2007c388
   814fc:	2007c390 	.word	0x2007c390
   81500:	2007c318 	.word	0x2007c318
   81504:	00080261 	.word	0x00080261
   81508:	2007c30c 	.word	0x2007c30c
   8150c:	2007c40c 	.word	0x2007c40c
   81510:	2007c3c8 	.word	0x2007c3c8

00081514 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81514:	4b03      	ldr	r3, [pc, #12]	; (81524 <vTaskInternalSetTimeOutState+0x10>)
   81516:	681b      	ldr	r3, [r3, #0]
   81518:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8151a:	4b03      	ldr	r3, [pc, #12]	; (81528 <vTaskInternalSetTimeOutState+0x14>)
   8151c:	681b      	ldr	r3, [r3, #0]
   8151e:	6043      	str	r3, [r0, #4]
   81520:	4770      	bx	lr
   81522:	bf00      	nop
   81524:	2007c3c4 	.word	0x2007c3c4
   81528:	2007c408 	.word	0x2007c408

0008152c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   8152c:	b1e8      	cbz	r0, 8156a <xTaskCheckForTimeOut+0x3e>
{
   8152e:	b570      	push	{r4, r5, r6, lr}
   81530:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
   81532:	b319      	cbz	r1, 8157c <xTaskCheckForTimeOut+0x50>
   81534:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
   81536:	4b1b      	ldr	r3, [pc, #108]	; (815a4 <xTaskCheckForTimeOut+0x78>)
   81538:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   8153a:	4b1b      	ldr	r3, [pc, #108]	; (815a8 <xTaskCheckForTimeOut+0x7c>)
   8153c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   8153e:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   81540:	6823      	ldr	r3, [r4, #0]
   81542:	f1b3 3fff 	cmp.w	r3, #4294967295
   81546:	d029      	beq.n	8159c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   81548:	4818      	ldr	r0, [pc, #96]	; (815ac <xTaskCheckForTimeOut+0x80>)
   8154a:	6800      	ldr	r0, [r0, #0]
   8154c:	682e      	ldr	r6, [r5, #0]
   8154e:	4286      	cmp	r6, r0
   81550:	d001      	beq.n	81556 <xTaskCheckForTimeOut+0x2a>
   81552:	428a      	cmp	r2, r1
   81554:	d224      	bcs.n	815a0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81556:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   81558:	429a      	cmp	r2, r3
   8155a:	d318      	bcc.n	8158e <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
   8155c:	2300      	movs	r3, #0
   8155e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   81560:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81562:	4b13      	ldr	r3, [pc, #76]	; (815b0 <xTaskCheckForTimeOut+0x84>)
   81564:	4798      	blx	r3
}
   81566:	4620      	mov	r0, r4
   81568:	bd70      	pop	{r4, r5, r6, pc}
   8156a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8156e:	f383 8811 	msr	BASEPRI, r3
   81572:	f3bf 8f6f 	isb	sy
   81576:	f3bf 8f4f 	dsb	sy
   8157a:	e7fe      	b.n	8157a <xTaskCheckForTimeOut+0x4e>
   8157c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81580:	f383 8811 	msr	BASEPRI, r3
   81584:	f3bf 8f6f 	isb	sy
   81588:	f3bf 8f4f 	dsb	sy
   8158c:	e7fe      	b.n	8158c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   8158e:	1a9b      	subs	r3, r3, r2
   81590:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   81592:	4628      	mov	r0, r5
   81594:	4b07      	ldr	r3, [pc, #28]	; (815b4 <xTaskCheckForTimeOut+0x88>)
   81596:	4798      	blx	r3
			xReturn = pdFALSE;
   81598:	2400      	movs	r4, #0
   8159a:	e7e2      	b.n	81562 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   8159c:	2400      	movs	r4, #0
   8159e:	e7e0      	b.n	81562 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   815a0:	2401      	movs	r4, #1
   815a2:	e7de      	b.n	81562 <xTaskCheckForTimeOut+0x36>
   815a4:	00080389 	.word	0x00080389
   815a8:	2007c408 	.word	0x2007c408
   815ac:	2007c3c4 	.word	0x2007c3c4
   815b0:	000803cd 	.word	0x000803cd
   815b4:	00081515 	.word	0x00081515

000815b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   815b8:	2201      	movs	r2, #1
   815ba:	4b01      	ldr	r3, [pc, #4]	; (815c0 <vTaskMissedYield+0x8>)
   815bc:	601a      	str	r2, [r3, #0]
   815be:	4770      	bx	lr
   815c0:	2007c40c 	.word	0x2007c40c

000815c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   815c4:	4b05      	ldr	r3, [pc, #20]	; (815dc <xTaskGetSchedulerState+0x18>)
   815c6:	681b      	ldr	r3, [r3, #0]
   815c8:	b133      	cbz	r3, 815d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   815ca:	4b05      	ldr	r3, [pc, #20]	; (815e0 <xTaskGetSchedulerState+0x1c>)
   815cc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   815ce:	2b00      	cmp	r3, #0
   815d0:	bf0c      	ite	eq
   815d2:	2002      	moveq	r0, #2
   815d4:	2000      	movne	r0, #0
   815d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   815d8:	2001      	movs	r0, #1
	}
   815da:	4770      	bx	lr
   815dc:	2007c3dc 	.word	0x2007c3dc
   815e0:	2007c388 	.word	0x2007c388

000815e4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   815e4:	2800      	cmp	r0, #0
   815e6:	d04a      	beq.n	8167e <xTaskPriorityDisinherit+0x9a>
	{
   815e8:	b538      	push	{r3, r4, r5, lr}
   815ea:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   815ec:	4a27      	ldr	r2, [pc, #156]	; (8168c <xTaskPriorityDisinherit+0xa8>)
   815ee:	6812      	ldr	r2, [r2, #0]
   815f0:	4290      	cmp	r0, r2
   815f2:	d008      	beq.n	81606 <xTaskPriorityDisinherit+0x22>
   815f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   815f8:	f383 8811 	msr	BASEPRI, r3
   815fc:	f3bf 8f6f 	isb	sy
   81600:	f3bf 8f4f 	dsb	sy
   81604:	e7fe      	b.n	81604 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
   81606:	6d42      	ldr	r2, [r0, #84]	; 0x54
   81608:	b942      	cbnz	r2, 8161c <xTaskPriorityDisinherit+0x38>
   8160a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8160e:	f383 8811 	msr	BASEPRI, r3
   81612:	f3bf 8f6f 	isb	sy
   81616:	f3bf 8f4f 	dsb	sy
   8161a:	e7fe      	b.n	8161a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
   8161c:	3a01      	subs	r2, #1
   8161e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81620:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81622:	6d21      	ldr	r1, [r4, #80]	; 0x50
   81624:	4288      	cmp	r0, r1
   81626:	d02c      	beq.n	81682 <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   81628:	2a00      	cmp	r2, #0
   8162a:	d12c      	bne.n	81686 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   8162c:	1d25      	adds	r5, r4, #4
   8162e:	4628      	mov	r0, r5
   81630:	4b17      	ldr	r3, [pc, #92]	; (81690 <xTaskPriorityDisinherit+0xac>)
   81632:	4798      	blx	r3
   81634:	b968      	cbnz	r0, 81652 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81636:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81638:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   8163c:	009b      	lsls	r3, r3, #2
   8163e:	4a15      	ldr	r2, [pc, #84]	; (81694 <xTaskPriorityDisinherit+0xb0>)
   81640:	58d3      	ldr	r3, [r2, r3]
   81642:	b933      	cbnz	r3, 81652 <xTaskPriorityDisinherit+0x6e>
   81644:	4814      	ldr	r0, [pc, #80]	; (81698 <xTaskPriorityDisinherit+0xb4>)
   81646:	6803      	ldr	r3, [r0, #0]
   81648:	2201      	movs	r2, #1
   8164a:	408a      	lsls	r2, r1
   8164c:	ea23 0302 	bic.w	r3, r3, r2
   81650:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   81652:	6d20      	ldr	r0, [r4, #80]	; 0x50
   81654:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81656:	f1c0 0305 	rsb	r3, r0, #5
   8165a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   8165c:	4a0e      	ldr	r2, [pc, #56]	; (81698 <xTaskPriorityDisinherit+0xb4>)
   8165e:	6811      	ldr	r1, [r2, #0]
   81660:	2401      	movs	r4, #1
   81662:	fa04 f300 	lsl.w	r3, r4, r0
   81666:	430b      	orrs	r3, r1
   81668:	6013      	str	r3, [r2, #0]
   8166a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8166e:	4629      	mov	r1, r5
   81670:	4b08      	ldr	r3, [pc, #32]	; (81694 <xTaskPriorityDisinherit+0xb0>)
   81672:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81676:	4b09      	ldr	r3, [pc, #36]	; (8169c <xTaskPriorityDisinherit+0xb8>)
   81678:	4798      	blx	r3
					xReturn = pdTRUE;
   8167a:	4620      	mov	r0, r4
   8167c:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   8167e:	2000      	movs	r0, #0
   81680:	4770      	bx	lr
   81682:	2000      	movs	r0, #0
   81684:	bd38      	pop	{r3, r4, r5, pc}
   81686:	2000      	movs	r0, #0
	}
   81688:	bd38      	pop	{r3, r4, r5, pc}
   8168a:	bf00      	nop
   8168c:	2007c30c 	.word	0x2007c30c
   81690:	000802ad 	.word	0x000802ad
   81694:	2007c318 	.word	0x2007c318
   81698:	2007c390 	.word	0x2007c390
   8169c:	00080261 	.word	0x00080261

000816a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   816a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   816a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   816a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   816a6:	4291      	cmp	r1, r2
   816a8:	d80c      	bhi.n	816c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   816aa:	1ad2      	subs	r2, r2, r3
   816ac:	6983      	ldr	r3, [r0, #24]
   816ae:	429a      	cmp	r2, r3
   816b0:	d301      	bcc.n	816b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   816b2:	2001      	movs	r0, #1
   816b4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   816b6:	1d01      	adds	r1, r0, #4
   816b8:	4b09      	ldr	r3, [pc, #36]	; (816e0 <prvInsertTimerInActiveList+0x40>)
   816ba:	6818      	ldr	r0, [r3, #0]
   816bc:	4b09      	ldr	r3, [pc, #36]	; (816e4 <prvInsertTimerInActiveList+0x44>)
   816be:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   816c0:	2000      	movs	r0, #0
   816c2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   816c4:	429a      	cmp	r2, r3
   816c6:	d201      	bcs.n	816cc <prvInsertTimerInActiveList+0x2c>
   816c8:	4299      	cmp	r1, r3
   816ca:	d206      	bcs.n	816da <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   816cc:	1d01      	adds	r1, r0, #4
   816ce:	4b06      	ldr	r3, [pc, #24]	; (816e8 <prvInsertTimerInActiveList+0x48>)
   816d0:	6818      	ldr	r0, [r3, #0]
   816d2:	4b04      	ldr	r3, [pc, #16]	; (816e4 <prvInsertTimerInActiveList+0x44>)
   816d4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   816d6:	2000      	movs	r0, #0
   816d8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   816da:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   816dc:	bd08      	pop	{r3, pc}
   816de:	bf00      	nop
   816e0:	2007c414 	.word	0x2007c414
   816e4:	00080279 	.word	0x00080279
   816e8:	2007c410 	.word	0x2007c410

000816ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   816ec:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   816ee:	4b10      	ldr	r3, [pc, #64]	; (81730 <prvCheckForValidListAndQueue+0x44>)
   816f0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   816f2:	4b10      	ldr	r3, [pc, #64]	; (81734 <prvCheckForValidListAndQueue+0x48>)
   816f4:	681b      	ldr	r3, [r3, #0]
   816f6:	b113      	cbz	r3, 816fe <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   816f8:	4b0f      	ldr	r3, [pc, #60]	; (81738 <prvCheckForValidListAndQueue+0x4c>)
   816fa:	4798      	blx	r3
   816fc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   816fe:	4d0f      	ldr	r5, [pc, #60]	; (8173c <prvCheckForValidListAndQueue+0x50>)
   81700:	4628      	mov	r0, r5
   81702:	4e0f      	ldr	r6, [pc, #60]	; (81740 <prvCheckForValidListAndQueue+0x54>)
   81704:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81706:	4c0f      	ldr	r4, [pc, #60]	; (81744 <prvCheckForValidListAndQueue+0x58>)
   81708:	4620      	mov	r0, r4
   8170a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8170c:	4b0e      	ldr	r3, [pc, #56]	; (81748 <prvCheckForValidListAndQueue+0x5c>)
   8170e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81710:	4b0e      	ldr	r3, [pc, #56]	; (8174c <prvCheckForValidListAndQueue+0x60>)
   81712:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   81714:	2200      	movs	r2, #0
   81716:	2110      	movs	r1, #16
   81718:	2005      	movs	r0, #5
   8171a:	4b0d      	ldr	r3, [pc, #52]	; (81750 <prvCheckForValidListAndQueue+0x64>)
   8171c:	4798      	blx	r3
   8171e:	4b05      	ldr	r3, [pc, #20]	; (81734 <prvCheckForValidListAndQueue+0x48>)
   81720:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   81722:	2800      	cmp	r0, #0
   81724:	d0e8      	beq.n	816f8 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   81726:	490b      	ldr	r1, [pc, #44]	; (81754 <prvCheckForValidListAndQueue+0x68>)
   81728:	4b0b      	ldr	r3, [pc, #44]	; (81758 <prvCheckForValidListAndQueue+0x6c>)
   8172a:	4798      	blx	r3
   8172c:	e7e4      	b.n	816f8 <prvCheckForValidListAndQueue+0xc>
   8172e:	bf00      	nop
   81730:	00080389 	.word	0x00080389
   81734:	2007c444 	.word	0x2007c444
   81738:	000803cd 	.word	0x000803cd
   8173c:	2007c418 	.word	0x2007c418
   81740:	00080245 	.word	0x00080245
   81744:	2007c42c 	.word	0x2007c42c
   81748:	2007c410 	.word	0x2007c410
   8174c:	2007c414 	.word	0x2007c414
   81750:	0008083d 	.word	0x0008083d
   81754:	00084f20 	.word	0x00084f20
   81758:	00080cb1 	.word	0x00080cb1

0008175c <xTimerCreateTimerTask>:
{
   8175c:	b510      	push	{r4, lr}
   8175e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   81760:	4b0d      	ldr	r3, [pc, #52]	; (81798 <xTimerCreateTimerTask+0x3c>)
   81762:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81764:	4b0d      	ldr	r3, [pc, #52]	; (8179c <xTimerCreateTimerTask+0x40>)
   81766:	681b      	ldr	r3, [r3, #0]
   81768:	b16b      	cbz	r3, 81786 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
   8176a:	4b0d      	ldr	r3, [pc, #52]	; (817a0 <xTimerCreateTimerTask+0x44>)
   8176c:	9301      	str	r3, [sp, #4]
   8176e:	2304      	movs	r3, #4
   81770:	9300      	str	r3, [sp, #0]
   81772:	2300      	movs	r3, #0
   81774:	f44f 7282 	mov.w	r2, #260	; 0x104
   81778:	490a      	ldr	r1, [pc, #40]	; (817a4 <xTimerCreateTimerTask+0x48>)
   8177a:	480b      	ldr	r0, [pc, #44]	; (817a8 <xTimerCreateTimerTask+0x4c>)
   8177c:	4c0b      	ldr	r4, [pc, #44]	; (817ac <xTimerCreateTimerTask+0x50>)
   8177e:	47a0      	blx	r4
	configASSERT( xReturn );
   81780:	b108      	cbz	r0, 81786 <xTimerCreateTimerTask+0x2a>
}
   81782:	b002      	add	sp, #8
   81784:	bd10      	pop	{r4, pc}
   81786:	f04f 0340 	mov.w	r3, #64	; 0x40
   8178a:	f383 8811 	msr	BASEPRI, r3
   8178e:	f3bf 8f6f 	isb	sy
   81792:	f3bf 8f4f 	dsb	sy
   81796:	e7fe      	b.n	81796 <xTimerCreateTimerTask+0x3a>
   81798:	000816ed 	.word	0x000816ed
   8179c:	2007c444 	.word	0x2007c444
   817a0:	2007c448 	.word	0x2007c448
   817a4:	00084f28 	.word	0x00084f28
   817a8:	000818d1 	.word	0x000818d1
   817ac:	00080e91 	.word	0x00080e91

000817b0 <xTimerGenericCommand>:
	configASSERT( xTimer );
   817b0:	b1d8      	cbz	r0, 817ea <xTimerGenericCommand+0x3a>
{
   817b2:	b530      	push	{r4, r5, lr}
   817b4:	b085      	sub	sp, #20
   817b6:	4615      	mov	r5, r2
   817b8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
   817ba:	4a14      	ldr	r2, [pc, #80]	; (8180c <xTimerGenericCommand+0x5c>)
   817bc:	6810      	ldr	r0, [r2, #0]
   817be:	b310      	cbz	r0, 81806 <xTimerGenericCommand+0x56>
   817c0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
   817c2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   817c4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   817c6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   817c8:	2905      	cmp	r1, #5
   817ca:	dc17      	bgt.n	817fc <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   817cc:	4b10      	ldr	r3, [pc, #64]	; (81810 <xTimerGenericCommand+0x60>)
   817ce:	4798      	blx	r3
   817d0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   817d2:	f04f 0300 	mov.w	r3, #0
   817d6:	bf0c      	ite	eq
   817d8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   817da:	461a      	movne	r2, r3
   817dc:	4669      	mov	r1, sp
   817de:	480b      	ldr	r0, [pc, #44]	; (8180c <xTimerGenericCommand+0x5c>)
   817e0:	6800      	ldr	r0, [r0, #0]
   817e2:	4c0c      	ldr	r4, [pc, #48]	; (81814 <xTimerGenericCommand+0x64>)
   817e4:	47a0      	blx	r4
}
   817e6:	b005      	add	sp, #20
   817e8:	bd30      	pop	{r4, r5, pc}
   817ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   817ee:	f383 8811 	msr	BASEPRI, r3
   817f2:	f3bf 8f6f 	isb	sy
   817f6:	f3bf 8f4f 	dsb	sy
   817fa:	e7fe      	b.n	817fa <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   817fc:	2300      	movs	r3, #0
   817fe:	4669      	mov	r1, sp
   81800:	4c05      	ldr	r4, [pc, #20]	; (81818 <xTimerGenericCommand+0x68>)
   81802:	47a0      	blx	r4
   81804:	e7ef      	b.n	817e6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
   81806:	2000      	movs	r0, #0
	return xReturn;
   81808:	e7ed      	b.n	817e6 <xTimerGenericCommand+0x36>
   8180a:	bf00      	nop
   8180c:	2007c444 	.word	0x2007c444
   81810:	000815c5 	.word	0x000815c5
   81814:	00080891 	.word	0x00080891
   81818:	00080a45 	.word	0x00080a45

0008181c <prvSampleTimeNow>:
{
   8181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81820:	b082      	sub	sp, #8
   81822:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   81824:	4b23      	ldr	r3, [pc, #140]	; (818b4 <prvSampleTimeNow+0x98>)
   81826:	4798      	blx	r3
   81828:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   8182a:	4b23      	ldr	r3, [pc, #140]	; (818b8 <prvSampleTimeNow+0x9c>)
   8182c:	681b      	ldr	r3, [r3, #0]
   8182e:	4298      	cmp	r0, r3
   81830:	d319      	bcc.n	81866 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
   81832:	2300      	movs	r3, #0
   81834:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   81838:	4b1f      	ldr	r3, [pc, #124]	; (818b8 <prvSampleTimeNow+0x9c>)
   8183a:	601f      	str	r7, [r3, #0]
}
   8183c:	4638      	mov	r0, r7
   8183e:	b002      	add	sp, #8
   81840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81844:	2100      	movs	r1, #0
   81846:	9100      	str	r1, [sp, #0]
   81848:	460b      	mov	r3, r1
   8184a:	4652      	mov	r2, sl
   8184c:	4620      	mov	r0, r4
   8184e:	4c1b      	ldr	r4, [pc, #108]	; (818bc <prvSampleTimeNow+0xa0>)
   81850:	47a0      	blx	r4
				configASSERT( xResult );
   81852:	b950      	cbnz	r0, 8186a <prvSampleTimeNow+0x4e>
   81854:	f04f 0340 	mov.w	r3, #64	; 0x40
   81858:	f383 8811 	msr	BASEPRI, r3
   8185c:	f3bf 8f6f 	isb	sy
   81860:	f3bf 8f4f 	dsb	sy
   81864:	e7fe      	b.n	81864 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81866:	4d16      	ldr	r5, [pc, #88]	; (818c0 <prvSampleTimeNow+0xa4>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81868:	4e16      	ldr	r6, [pc, #88]	; (818c4 <prvSampleTimeNow+0xa8>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8186a:	682b      	ldr	r3, [r5, #0]
   8186c:	681a      	ldr	r2, [r3, #0]
   8186e:	b1c2      	cbz	r2, 818a2 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81870:	68db      	ldr	r3, [r3, #12]
   81872:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81876:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81878:	f104 0904 	add.w	r9, r4, #4
   8187c:	4648      	mov	r0, r9
   8187e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81880:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81882:	4620      	mov	r0, r4
   81884:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81886:	69e3      	ldr	r3, [r4, #28]
   81888:	2b01      	cmp	r3, #1
   8188a:	d1ee      	bne.n	8186a <prvSampleTimeNow+0x4e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   8188c:	69a3      	ldr	r3, [r4, #24]
   8188e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81890:	459a      	cmp	sl, r3
   81892:	d2d7      	bcs.n	81844 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81894:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81896:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81898:	4649      	mov	r1, r9
   8189a:	6828      	ldr	r0, [r5, #0]
   8189c:	4b0a      	ldr	r3, [pc, #40]	; (818c8 <prvSampleTimeNow+0xac>)
   8189e:	4798      	blx	r3
   818a0:	e7e3      	b.n	8186a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList = pxOverflowTimerList;
   818a2:	4a0a      	ldr	r2, [pc, #40]	; (818cc <prvSampleTimeNow+0xb0>)
   818a4:	6810      	ldr	r0, [r2, #0]
   818a6:	4906      	ldr	r1, [pc, #24]	; (818c0 <prvSampleTimeNow+0xa4>)
   818a8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   818aa:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   818ac:	2301      	movs	r3, #1
   818ae:	f8c8 3000 	str.w	r3, [r8]
   818b2:	e7c1      	b.n	81838 <prvSampleTimeNow+0x1c>
   818b4:	00081121 	.word	0x00081121
   818b8:	2007c440 	.word	0x2007c440
   818bc:	000817b1 	.word	0x000817b1
   818c0:	2007c410 	.word	0x2007c410
   818c4:	000802ad 	.word	0x000802ad
   818c8:	00080279 	.word	0x00080279
   818cc:	2007c414 	.word	0x2007c414

000818d0 <prvTimerTask>:
{
   818d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   818d4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   818d6:	4e70      	ldr	r6, [pc, #448]	; (81a98 <prvTimerTask+0x1c8>)
			( void ) xTaskResumeAll();
   818d8:	4f70      	ldr	r7, [pc, #448]	; (81a9c <prvTimerTask+0x1cc>)
					portYIELD_WITHIN_API();
   818da:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 81ac4 <prvTimerTask+0x1f4>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   818de:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 81ac8 <prvTimerTask+0x1f8>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   818e2:	6833      	ldr	r3, [r6, #0]
   818e4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   818e6:	b172      	cbz	r2, 81906 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   818e8:	68db      	ldr	r3, [r3, #12]
   818ea:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   818ec:	4b6c      	ldr	r3, [pc, #432]	; (81aa0 <prvTimerTask+0x1d0>)
   818ee:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   818f0:	a804      	add	r0, sp, #16
   818f2:	4b6c      	ldr	r3, [pc, #432]	; (81aa4 <prvTimerTask+0x1d4>)
   818f4:	4798      	blx	r3
   818f6:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   818f8:	9b04      	ldr	r3, [sp, #16]
   818fa:	2b00      	cmp	r3, #0
   818fc:	d152      	bne.n	819a4 <prvTimerTask+0xd4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   818fe:	42a0      	cmp	r0, r4
   81900:	d223      	bcs.n	8194a <prvTimerTask+0x7a>
   81902:	2200      	movs	r2, #0
   81904:	e00f      	b.n	81926 <prvTimerTask+0x56>
	vTaskSuspendAll();
   81906:	4b66      	ldr	r3, [pc, #408]	; (81aa0 <prvTimerTask+0x1d0>)
   81908:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8190a:	a804      	add	r0, sp, #16
   8190c:	4b65      	ldr	r3, [pc, #404]	; (81aa4 <prvTimerTask+0x1d4>)
   8190e:	4798      	blx	r3
   81910:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81912:	9b04      	ldr	r3, [sp, #16]
   81914:	2b00      	cmp	r3, #0
   81916:	d145      	bne.n	819a4 <prvTimerTask+0xd4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   81918:	4b63      	ldr	r3, [pc, #396]	; (81aa8 <prvTimerTask+0x1d8>)
   8191a:	681b      	ldr	r3, [r3, #0]
   8191c:	681a      	ldr	r2, [r3, #0]
   8191e:	fab2 f282 	clz	r2, r2
   81922:	0952      	lsrs	r2, r2, #5
   81924:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   81926:	1b61      	subs	r1, r4, r5
   81928:	4b60      	ldr	r3, [pc, #384]	; (81aac <prvTimerTask+0x1dc>)
   8192a:	6818      	ldr	r0, [r3, #0]
   8192c:	4b60      	ldr	r3, [pc, #384]	; (81ab0 <prvTimerTask+0x1e0>)
   8192e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81930:	47b8      	blx	r7
   81932:	b938      	cbnz	r0, 81944 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
   81934:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81938:	f8c9 3000 	str.w	r3, [r9]
   8193c:	f3bf 8f4f 	dsb	sy
   81940:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81944:	4d59      	ldr	r5, [pc, #356]	; (81aac <prvTimerTask+0x1dc>)
   81946:	4c5b      	ldr	r4, [pc, #364]	; (81ab4 <prvTimerTask+0x1e4>)
   81948:	e035      	b.n	819b6 <prvTimerTask+0xe6>
				( void ) xTaskResumeAll();
   8194a:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8194c:	6833      	ldr	r3, [r6, #0]
   8194e:	68db      	ldr	r3, [r3, #12]
   81950:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81954:	f10a 0004 	add.w	r0, sl, #4
   81958:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8195a:	f8da 301c 	ldr.w	r3, [sl, #28]
   8195e:	2b01      	cmp	r3, #1
   81960:	d004      	beq.n	8196c <prvTimerTask+0x9c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81962:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   81966:	4650      	mov	r0, sl
   81968:	4798      	blx	r3
   8196a:	e7eb      	b.n	81944 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   8196c:	f8da 1018 	ldr.w	r1, [sl, #24]
   81970:	4623      	mov	r3, r4
   81972:	462a      	mov	r2, r5
   81974:	4421      	add	r1, r4
   81976:	4650      	mov	r0, sl
   81978:	4d4f      	ldr	r5, [pc, #316]	; (81ab8 <prvTimerTask+0x1e8>)
   8197a:	47a8      	blx	r5
   8197c:	2800      	cmp	r0, #0
   8197e:	d0f0      	beq.n	81962 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81980:	2100      	movs	r1, #0
   81982:	9100      	str	r1, [sp, #0]
   81984:	460b      	mov	r3, r1
   81986:	4622      	mov	r2, r4
   81988:	4650      	mov	r0, sl
   8198a:	4c4c      	ldr	r4, [pc, #304]	; (81abc <prvTimerTask+0x1ec>)
   8198c:	47a0      	blx	r4
			configASSERT( xResult );
   8198e:	2800      	cmp	r0, #0
   81990:	d1e7      	bne.n	81962 <prvTimerTask+0x92>
   81992:	f04f 0340 	mov.w	r3, #64	; 0x40
   81996:	f383 8811 	msr	BASEPRI, r3
   8199a:	f3bf 8f6f 	isb	sy
   8199e:	f3bf 8f4f 	dsb	sy
   819a2:	e7fe      	b.n	819a2 <prvTimerTask+0xd2>
			( void ) xTaskResumeAll();
   819a4:	47b8      	blx	r7
   819a6:	e7cd      	b.n	81944 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   819a8:	9907      	ldr	r1, [sp, #28]
   819aa:	9806      	ldr	r0, [sp, #24]
   819ac:	9b05      	ldr	r3, [sp, #20]
   819ae:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   819b0:	9b04      	ldr	r3, [sp, #16]
   819b2:	2b00      	cmp	r3, #0
   819b4:	da08      	bge.n	819c8 <prvTimerTask+0xf8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   819b6:	2200      	movs	r2, #0
   819b8:	a904      	add	r1, sp, #16
   819ba:	6828      	ldr	r0, [r5, #0]
   819bc:	47a0      	blx	r4
   819be:	2800      	cmp	r0, #0
   819c0:	d08f      	beq.n	818e2 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   819c2:	9b04      	ldr	r3, [sp, #16]
   819c4:	2b00      	cmp	r3, #0
   819c6:	dbef      	blt.n	819a8 <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   819c8:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   819cc:	f8da 3014 	ldr.w	r3, [sl, #20]
   819d0:	b113      	cbz	r3, 819d8 <prvTimerTask+0x108>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   819d2:	f10a 0004 	add.w	r0, sl, #4
   819d6:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   819d8:	a803      	add	r0, sp, #12
   819da:	4b32      	ldr	r3, [pc, #200]	; (81aa4 <prvTimerTask+0x1d4>)
   819dc:	4798      	blx	r3
			switch( xMessage.xMessageID )
   819de:	9b04      	ldr	r3, [sp, #16]
   819e0:	2b09      	cmp	r3, #9
   819e2:	d8e8      	bhi.n	819b6 <prvTimerTask+0xe6>
   819e4:	a201      	add	r2, pc, #4	; (adr r2, 819ec <prvTimerTask+0x11c>)
   819e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819ea:	bf00      	nop
   819ec:	00081a15 	.word	0x00081a15
   819f0:	00081a15 	.word	0x00081a15
   819f4:	00081a15 	.word	0x00081a15
   819f8:	000819b7 	.word	0x000819b7
   819fc:	00081a67 	.word	0x00081a67
   81a00:	00081a8f 	.word	0x00081a8f
   81a04:	00081a15 	.word	0x00081a15
   81a08:	00081a15 	.word	0x00081a15
   81a0c:	000819b7 	.word	0x000819b7
   81a10:	00081a67 	.word	0x00081a67
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   81a14:	9c05      	ldr	r4, [sp, #20]
   81a16:	f8da 1018 	ldr.w	r1, [sl, #24]
   81a1a:	4623      	mov	r3, r4
   81a1c:	4602      	mov	r2, r0
   81a1e:	4421      	add	r1, r4
   81a20:	4650      	mov	r0, sl
   81a22:	4c25      	ldr	r4, [pc, #148]	; (81ab8 <prvTimerTask+0x1e8>)
   81a24:	47a0      	blx	r4
   81a26:	2800      	cmp	r0, #0
   81a28:	d08d      	beq.n	81946 <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81a2a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   81a2e:	4650      	mov	r0, sl
   81a30:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81a32:	f8da 301c 	ldr.w	r3, [sl, #28]
   81a36:	2b01      	cmp	r3, #1
   81a38:	d185      	bne.n	81946 <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81a3a:	f8da 2018 	ldr.w	r2, [sl, #24]
   81a3e:	2100      	movs	r1, #0
   81a40:	9100      	str	r1, [sp, #0]
   81a42:	460b      	mov	r3, r1
   81a44:	9805      	ldr	r0, [sp, #20]
   81a46:	4402      	add	r2, r0
   81a48:	4650      	mov	r0, sl
   81a4a:	4c1c      	ldr	r4, [pc, #112]	; (81abc <prvTimerTask+0x1ec>)
   81a4c:	47a0      	blx	r4
							configASSERT( xResult );
   81a4e:	2800      	cmp	r0, #0
   81a50:	f47f af79 	bne.w	81946 <prvTimerTask+0x76>
   81a54:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a58:	f383 8811 	msr	BASEPRI, r3
   81a5c:	f3bf 8f6f 	isb	sy
   81a60:	f3bf 8f4f 	dsb	sy
   81a64:	e7fe      	b.n	81a64 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   81a66:	9905      	ldr	r1, [sp, #20]
   81a68:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81a6c:	b131      	cbz	r1, 81a7c <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81a6e:	4603      	mov	r3, r0
   81a70:	4602      	mov	r2, r0
   81a72:	4401      	add	r1, r0
   81a74:	4650      	mov	r0, sl
   81a76:	4c10      	ldr	r4, [pc, #64]	; (81ab8 <prvTimerTask+0x1e8>)
   81a78:	47a0      	blx	r4
   81a7a:	e764      	b.n	81946 <prvTimerTask+0x76>
   81a7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a80:	f383 8811 	msr	BASEPRI, r3
   81a84:	f3bf 8f6f 	isb	sy
   81a88:	f3bf 8f4f 	dsb	sy
   81a8c:	e7fe      	b.n	81a8c <prvTimerTask+0x1bc>
						vPortFree( pxTimer );
   81a8e:	4650      	mov	r0, sl
   81a90:	4b0b      	ldr	r3, [pc, #44]	; (81ac0 <prvTimerTask+0x1f0>)
   81a92:	4798      	blx	r3
   81a94:	e757      	b.n	81946 <prvTimerTask+0x76>
   81a96:	bf00      	nop
   81a98:	2007c410 	.word	0x2007c410
   81a9c:	00081261 	.word	0x00081261
   81aa0:	00081111 	.word	0x00081111
   81aa4:	0008181d 	.word	0x0008181d
   81aa8:	2007c414 	.word	0x2007c414
   81aac:	2007c444 	.word	0x2007c444
   81ab0:	00080ce1 	.word	0x00080ce1
   81ab4:	00080b29 	.word	0x00080b29
   81ab8:	000816a1 	.word	0x000816a1
   81abc:	000817b1 	.word	0x000817b1
   81ac0:	00080635 	.word	0x00080635
   81ac4:	e000ed04 	.word	0xe000ed04
   81ac8:	000802ad 	.word	0x000802ad

00081acc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81acc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81ace:	480e      	ldr	r0, [pc, #56]	; (81b08 <sysclk_init+0x3c>)
   81ad0:	4b0e      	ldr	r3, [pc, #56]	; (81b0c <sysclk_init+0x40>)
   81ad2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81ad4:	213e      	movs	r1, #62	; 0x3e
   81ad6:	2000      	movs	r0, #0
   81ad8:	4b0d      	ldr	r3, [pc, #52]	; (81b10 <sysclk_init+0x44>)
   81ada:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81adc:	4c0d      	ldr	r4, [pc, #52]	; (81b14 <sysclk_init+0x48>)
   81ade:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81ae0:	2800      	cmp	r0, #0
   81ae2:	d0fc      	beq.n	81ade <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81ae4:	4b0c      	ldr	r3, [pc, #48]	; (81b18 <sysclk_init+0x4c>)
   81ae6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81ae8:	4a0c      	ldr	r2, [pc, #48]	; (81b1c <sysclk_init+0x50>)
   81aea:	4b0d      	ldr	r3, [pc, #52]	; (81b20 <sysclk_init+0x54>)
   81aec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81aee:	4c0d      	ldr	r4, [pc, #52]	; (81b24 <sysclk_init+0x58>)
   81af0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81af2:	2800      	cmp	r0, #0
   81af4:	d0fc      	beq.n	81af0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81af6:	2010      	movs	r0, #16
   81af8:	4b0b      	ldr	r3, [pc, #44]	; (81b28 <sysclk_init+0x5c>)
   81afa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81afc:	4b0b      	ldr	r3, [pc, #44]	; (81b2c <sysclk_init+0x60>)
   81afe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81b00:	4801      	ldr	r0, [pc, #4]	; (81b08 <sysclk_init+0x3c>)
   81b02:	4b02      	ldr	r3, [pc, #8]	; (81b0c <sysclk_init+0x40>)
   81b04:	4798      	blx	r3
   81b06:	bd10      	pop	{r4, pc}
   81b08:	0501bd00 	.word	0x0501bd00
   81b0c:	200700a5 	.word	0x200700a5
   81b10:	00081ec1 	.word	0x00081ec1
   81b14:	00081f15 	.word	0x00081f15
   81b18:	00081f25 	.word	0x00081f25
   81b1c:	200d3f01 	.word	0x200d3f01
   81b20:	400e0600 	.word	0x400e0600
   81b24:	00081f35 	.word	0x00081f35
   81b28:	00081e5d 	.word	0x00081e5d
   81b2c:	00082001 	.word	0x00082001

00081b30 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81b30:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81b32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81b36:	4b16      	ldr	r3, [pc, #88]	; (81b90 <board_init+0x60>)
   81b38:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81b3a:	200b      	movs	r0, #11
   81b3c:	4c15      	ldr	r4, [pc, #84]	; (81b94 <board_init+0x64>)
   81b3e:	47a0      	blx	r4
   81b40:	200c      	movs	r0, #12
   81b42:	47a0      	blx	r4
   81b44:	200d      	movs	r0, #13
   81b46:	47a0      	blx	r4
   81b48:	200e      	movs	r0, #14
   81b4a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81b4c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81b50:	203b      	movs	r0, #59	; 0x3b
   81b52:	4c11      	ldr	r4, [pc, #68]	; (81b98 <board_init+0x68>)
   81b54:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81b56:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81b5a:	2055      	movs	r0, #85	; 0x55
   81b5c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81b5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81b62:	2056      	movs	r0, #86	; 0x56
   81b64:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81b66:	490d      	ldr	r1, [pc, #52]	; (81b9c <board_init+0x6c>)
   81b68:	2068      	movs	r0, #104	; 0x68
   81b6a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81b6c:	490c      	ldr	r1, [pc, #48]	; (81ba0 <board_init+0x70>)
   81b6e:	205c      	movs	r0, #92	; 0x5c
   81b70:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81b72:	4a0c      	ldr	r2, [pc, #48]	; (81ba4 <board_init+0x74>)
   81b74:	f44f 7140 	mov.w	r1, #768	; 0x300
   81b78:	480b      	ldr	r0, [pc, #44]	; (81ba8 <board_init+0x78>)
   81b7a:	4b0c      	ldr	r3, [pc, #48]	; (81bac <board_init+0x7c>)
   81b7c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81b7e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b82:	202b      	movs	r0, #43	; 0x2b
   81b84:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81b86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b8a:	202a      	movs	r0, #42	; 0x2a
   81b8c:	47a0      	blx	r4
   81b8e:	bd10      	pop	{r4, pc}
   81b90:	400e1a50 	.word	0x400e1a50
   81b94:	00081f45 	.word	0x00081f45
   81b98:	00081c51 	.word	0x00081c51
   81b9c:	28000079 	.word	0x28000079
   81ba0:	28000001 	.word	0x28000001
   81ba4:	08000001 	.word	0x08000001
   81ba8:	400e0e00 	.word	0x400e0e00
   81bac:	00081d21 	.word	0x00081d21

00081bb0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81bb0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81bb2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81bb6:	d016      	beq.n	81be6 <pio_set_peripheral+0x36>
   81bb8:	d80b      	bhi.n	81bd2 <pio_set_peripheral+0x22>
   81bba:	b149      	cbz	r1, 81bd0 <pio_set_peripheral+0x20>
   81bbc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81bc0:	d105      	bne.n	81bce <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81bc2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81bc4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81bc6:	400b      	ands	r3, r1
   81bc8:	ea23 0302 	bic.w	r3, r3, r2
   81bcc:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81bce:	6042      	str	r2, [r0, #4]
   81bd0:	4770      	bx	lr
	switch (ul_type) {
   81bd2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81bd6:	d0fb      	beq.n	81bd0 <pio_set_peripheral+0x20>
   81bd8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81bdc:	d0f8      	beq.n	81bd0 <pio_set_peripheral+0x20>
   81bde:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81be2:	d1f4      	bne.n	81bce <pio_set_peripheral+0x1e>
   81be4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81be6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81be8:	4313      	orrs	r3, r2
   81bea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81bec:	e7ef      	b.n	81bce <pio_set_peripheral+0x1e>

00081bee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81bee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81bf0:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81bf4:	bf14      	ite	ne
   81bf6:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81bf8:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81bfa:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81bfe:	bf14      	ite	ne
   81c00:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81c02:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81c04:	f012 0f02 	tst.w	r2, #2
   81c08:	d107      	bne.n	81c1a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81c0a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81c0e:	bf18      	it	ne
   81c10:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81c14:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81c16:	6001      	str	r1, [r0, #0]
   81c18:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81c1a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81c1e:	e7f9      	b.n	81c14 <pio_set_input+0x26>

00081c20 <pio_set_output>:
{
   81c20:	b410      	push	{r4}
   81c22:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81c24:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81c26:	b944      	cbnz	r4, 81c3a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81c28:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81c2a:	b143      	cbz	r3, 81c3e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81c2c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81c2e:	b942      	cbnz	r2, 81c42 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81c30:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81c32:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81c34:	6001      	str	r1, [r0, #0]
}
   81c36:	bc10      	pop	{r4}
   81c38:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81c3a:	6641      	str	r1, [r0, #100]	; 0x64
   81c3c:	e7f5      	b.n	81c2a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81c3e:	6541      	str	r1, [r0, #84]	; 0x54
   81c40:	e7f5      	b.n	81c2e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81c42:	6301      	str	r1, [r0, #48]	; 0x30
   81c44:	e7f5      	b.n	81c32 <pio_set_output+0x12>

00081c46 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81c46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81c48:	4770      	bx	lr

00081c4a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81c4a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81c4c:	4770      	bx	lr
	...

00081c50 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81c50:	b570      	push	{r4, r5, r6, lr}
   81c52:	b082      	sub	sp, #8
   81c54:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81c56:	0943      	lsrs	r3, r0, #5
   81c58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81c5c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81c60:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81c62:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81c66:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81c6a:	d031      	beq.n	81cd0 <pio_configure_pin+0x80>
   81c6c:	d816      	bhi.n	81c9c <pio_configure_pin+0x4c>
   81c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81c72:	d01b      	beq.n	81cac <pio_configure_pin+0x5c>
   81c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c78:	d116      	bne.n	81ca8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81c7a:	f000 001f 	and.w	r0, r0, #31
   81c7e:	2601      	movs	r6, #1
   81c80:	4086      	lsls	r6, r0
   81c82:	4632      	mov	r2, r6
   81c84:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81c88:	4620      	mov	r0, r4
   81c8a:	4b22      	ldr	r3, [pc, #136]	; (81d14 <pio_configure_pin+0xc4>)
   81c8c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81c8e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81c92:	bf14      	ite	ne
   81c94:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81c96:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81c98:	2001      	movs	r0, #1
   81c9a:	e017      	b.n	81ccc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81ca0:	d021      	beq.n	81ce6 <pio_configure_pin+0x96>
   81ca2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81ca6:	d01e      	beq.n	81ce6 <pio_configure_pin+0x96>
		return 0;
   81ca8:	2000      	movs	r0, #0
   81caa:	e00f      	b.n	81ccc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81cac:	f000 001f 	and.w	r0, r0, #31
   81cb0:	2601      	movs	r6, #1
   81cb2:	4086      	lsls	r6, r0
   81cb4:	4632      	mov	r2, r6
   81cb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cba:	4620      	mov	r0, r4
   81cbc:	4b15      	ldr	r3, [pc, #84]	; (81d14 <pio_configure_pin+0xc4>)
   81cbe:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81cc0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81cc4:	bf14      	ite	ne
   81cc6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81cc8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81cca:	2001      	movs	r0, #1
}
   81ccc:	b002      	add	sp, #8
   81cce:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81cd0:	f000 011f 	and.w	r1, r0, #31
   81cd4:	2601      	movs	r6, #1
   81cd6:	462a      	mov	r2, r5
   81cd8:	fa06 f101 	lsl.w	r1, r6, r1
   81cdc:	4620      	mov	r0, r4
   81cde:	4b0e      	ldr	r3, [pc, #56]	; (81d18 <pio_configure_pin+0xc8>)
   81ce0:	4798      	blx	r3
	return 1;
   81ce2:	4630      	mov	r0, r6
		break;
   81ce4:	e7f2      	b.n	81ccc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81ce6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81cea:	f000 011f 	and.w	r1, r0, #31
   81cee:	2601      	movs	r6, #1
   81cf0:	ea05 0306 	and.w	r3, r5, r6
   81cf4:	9300      	str	r3, [sp, #0]
   81cf6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81cfa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81cfe:	bf14      	ite	ne
   81d00:	2200      	movne	r2, #0
   81d02:	2201      	moveq	r2, #1
   81d04:	fa06 f101 	lsl.w	r1, r6, r1
   81d08:	4620      	mov	r0, r4
   81d0a:	4c04      	ldr	r4, [pc, #16]	; (81d1c <pio_configure_pin+0xcc>)
   81d0c:	47a0      	blx	r4
	return 1;
   81d0e:	4630      	mov	r0, r6
		break;
   81d10:	e7dc      	b.n	81ccc <pio_configure_pin+0x7c>
   81d12:	bf00      	nop
   81d14:	00081bb1 	.word	0x00081bb1
   81d18:	00081bef 	.word	0x00081bef
   81d1c:	00081c21 	.word	0x00081c21

00081d20 <pio_configure_pin_group>:
{
   81d20:	b570      	push	{r4, r5, r6, lr}
   81d22:	b082      	sub	sp, #8
   81d24:	4605      	mov	r5, r0
   81d26:	460e      	mov	r6, r1
   81d28:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81d2a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81d2e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81d32:	d027      	beq.n	81d84 <pio_configure_pin_group+0x64>
   81d34:	d811      	bhi.n	81d5a <pio_configure_pin_group+0x3a>
   81d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81d3a:	d016      	beq.n	81d6a <pio_configure_pin_group+0x4a>
   81d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81d40:	d111      	bne.n	81d66 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81d42:	460a      	mov	r2, r1
   81d44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81d48:	4b19      	ldr	r3, [pc, #100]	; (81db0 <pio_configure_pin_group+0x90>)
   81d4a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81d4c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81d50:	bf14      	ite	ne
   81d52:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81d54:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81d56:	2001      	movs	r0, #1
   81d58:	e012      	b.n	81d80 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81d5e:	d015      	beq.n	81d8c <pio_configure_pin_group+0x6c>
   81d60:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81d64:	d012      	beq.n	81d8c <pio_configure_pin_group+0x6c>
		return 0;
   81d66:	2000      	movs	r0, #0
   81d68:	e00a      	b.n	81d80 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81d6a:	460a      	mov	r2, r1
   81d6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d70:	4b0f      	ldr	r3, [pc, #60]	; (81db0 <pio_configure_pin_group+0x90>)
   81d72:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81d74:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81d78:	bf14      	ite	ne
   81d7a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81d7c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81d7e:	2001      	movs	r0, #1
}
   81d80:	b002      	add	sp, #8
   81d82:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81d84:	4b0b      	ldr	r3, [pc, #44]	; (81db4 <pio_configure_pin_group+0x94>)
   81d86:	4798      	blx	r3
	return 1;
   81d88:	2001      	movs	r0, #1
		break;
   81d8a:	e7f9      	b.n	81d80 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81d8c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81d90:	f004 0301 	and.w	r3, r4, #1
   81d94:	9300      	str	r3, [sp, #0]
   81d96:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81d9a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81d9e:	bf14      	ite	ne
   81da0:	2200      	movne	r2, #0
   81da2:	2201      	moveq	r2, #1
   81da4:	4631      	mov	r1, r6
   81da6:	4628      	mov	r0, r5
   81da8:	4c03      	ldr	r4, [pc, #12]	; (81db8 <pio_configure_pin_group+0x98>)
   81daa:	47a0      	blx	r4
	return 1;
   81dac:	2001      	movs	r0, #1
		break;
   81dae:	e7e7      	b.n	81d80 <pio_configure_pin_group+0x60>
   81db0:	00081bb1 	.word	0x00081bb1
   81db4:	00081bef 	.word	0x00081bef
   81db8:	00081c21 	.word	0x00081c21

00081dbc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81dc0:	4604      	mov	r4, r0
   81dc2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81dc4:	4b0e      	ldr	r3, [pc, #56]	; (81e00 <pio_handler_process+0x44>)
   81dc6:	4798      	blx	r3
   81dc8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81dca:	4620      	mov	r0, r4
   81dcc:	4b0d      	ldr	r3, [pc, #52]	; (81e04 <pio_handler_process+0x48>)
   81dce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81dd0:	4005      	ands	r5, r0
   81dd2:	d013      	beq.n	81dfc <pio_handler_process+0x40>
   81dd4:	4c0c      	ldr	r4, [pc, #48]	; (81e08 <pio_handler_process+0x4c>)
   81dd6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81dda:	e003      	b.n	81de4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81ddc:	42b4      	cmp	r4, r6
   81dde:	d00d      	beq.n	81dfc <pio_handler_process+0x40>
   81de0:	3410      	adds	r4, #16
		while (status != 0) {
   81de2:	b15d      	cbz	r5, 81dfc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81de4:	6820      	ldr	r0, [r4, #0]
   81de6:	4540      	cmp	r0, r8
   81de8:	d1f8      	bne.n	81ddc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81dea:	6861      	ldr	r1, [r4, #4]
   81dec:	4229      	tst	r1, r5
   81dee:	d0f5      	beq.n	81ddc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81df0:	68e3      	ldr	r3, [r4, #12]
   81df2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81df4:	6863      	ldr	r3, [r4, #4]
   81df6:	ea25 0503 	bic.w	r5, r5, r3
   81dfa:	e7ef      	b.n	81ddc <pio_handler_process+0x20>
   81dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e00:	00081c47 	.word	0x00081c47
   81e04:	00081c4b 	.word	0x00081c4b
   81e08:	2007c44c 	.word	0x2007c44c

00081e0c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81e0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81e0e:	210b      	movs	r1, #11
   81e10:	4801      	ldr	r0, [pc, #4]	; (81e18 <PIOA_Handler+0xc>)
   81e12:	4b02      	ldr	r3, [pc, #8]	; (81e1c <PIOA_Handler+0x10>)
   81e14:	4798      	blx	r3
   81e16:	bd08      	pop	{r3, pc}
   81e18:	400e0e00 	.word	0x400e0e00
   81e1c:	00081dbd 	.word	0x00081dbd

00081e20 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81e20:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81e22:	210c      	movs	r1, #12
   81e24:	4801      	ldr	r0, [pc, #4]	; (81e2c <PIOB_Handler+0xc>)
   81e26:	4b02      	ldr	r3, [pc, #8]	; (81e30 <PIOB_Handler+0x10>)
   81e28:	4798      	blx	r3
   81e2a:	bd08      	pop	{r3, pc}
   81e2c:	400e1000 	.word	0x400e1000
   81e30:	00081dbd 	.word	0x00081dbd

00081e34 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81e34:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81e36:	210d      	movs	r1, #13
   81e38:	4801      	ldr	r0, [pc, #4]	; (81e40 <PIOC_Handler+0xc>)
   81e3a:	4b02      	ldr	r3, [pc, #8]	; (81e44 <PIOC_Handler+0x10>)
   81e3c:	4798      	blx	r3
   81e3e:	bd08      	pop	{r3, pc}
   81e40:	400e1200 	.word	0x400e1200
   81e44:	00081dbd 	.word	0x00081dbd

00081e48 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81e48:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81e4a:	210e      	movs	r1, #14
   81e4c:	4801      	ldr	r0, [pc, #4]	; (81e54 <PIOD_Handler+0xc>)
   81e4e:	4b02      	ldr	r3, [pc, #8]	; (81e58 <PIOD_Handler+0x10>)
   81e50:	4798      	blx	r3
   81e52:	bd08      	pop	{r3, pc}
   81e54:	400e1400 	.word	0x400e1400
   81e58:	00081dbd 	.word	0x00081dbd

00081e5c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81e5c:	4a17      	ldr	r2, [pc, #92]	; (81ebc <pmc_switch_mck_to_pllack+0x60>)
   81e5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81e64:	4318      	orrs	r0, r3
   81e66:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e68:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e6a:	f013 0f08 	tst.w	r3, #8
   81e6e:	d10a      	bne.n	81e86 <pmc_switch_mck_to_pllack+0x2a>
   81e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e74:	4911      	ldr	r1, [pc, #68]	; (81ebc <pmc_switch_mck_to_pllack+0x60>)
   81e76:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81e78:	f012 0f08 	tst.w	r2, #8
   81e7c:	d103      	bne.n	81e86 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e7e:	3b01      	subs	r3, #1
   81e80:	d1f9      	bne.n	81e76 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81e82:	2001      	movs	r0, #1
   81e84:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81e86:	4a0d      	ldr	r2, [pc, #52]	; (81ebc <pmc_switch_mck_to_pllack+0x60>)
   81e88:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81e8a:	f023 0303 	bic.w	r3, r3, #3
   81e8e:	f043 0302 	orr.w	r3, r3, #2
   81e92:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e94:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e96:	f013 0f08 	tst.w	r3, #8
   81e9a:	d10a      	bne.n	81eb2 <pmc_switch_mck_to_pllack+0x56>
   81e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81ea0:	4906      	ldr	r1, [pc, #24]	; (81ebc <pmc_switch_mck_to_pllack+0x60>)
   81ea2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81ea4:	f012 0f08 	tst.w	r2, #8
   81ea8:	d105      	bne.n	81eb6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81eaa:	3b01      	subs	r3, #1
   81eac:	d1f9      	bne.n	81ea2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81eae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81eb0:	4770      	bx	lr
	return 0;
   81eb2:	2000      	movs	r0, #0
   81eb4:	4770      	bx	lr
   81eb6:	2000      	movs	r0, #0
   81eb8:	4770      	bx	lr
   81eba:	bf00      	nop
   81ebc:	400e0600 	.word	0x400e0600

00081ec0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81ec0:	b9c8      	cbnz	r0, 81ef6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81ec2:	4a11      	ldr	r2, [pc, #68]	; (81f08 <pmc_switch_mainck_to_xtal+0x48>)
   81ec4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81ec6:	0209      	lsls	r1, r1, #8
   81ec8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81eca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81ece:	f023 0303 	bic.w	r3, r3, #3
   81ed2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81ed6:	f043 0301 	orr.w	r3, r3, #1
   81eda:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81edc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81ede:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81ee0:	f013 0f01 	tst.w	r3, #1
   81ee4:	d0fb      	beq.n	81ede <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81ee6:	4a08      	ldr	r2, [pc, #32]	; (81f08 <pmc_switch_mainck_to_xtal+0x48>)
   81ee8:	6a13      	ldr	r3, [r2, #32]
   81eea:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81ef2:	6213      	str	r3, [r2, #32]
   81ef4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81ef6:	4904      	ldr	r1, [pc, #16]	; (81f08 <pmc_switch_mainck_to_xtal+0x48>)
   81ef8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81efa:	4a04      	ldr	r2, [pc, #16]	; (81f0c <pmc_switch_mainck_to_xtal+0x4c>)
   81efc:	401a      	ands	r2, r3
   81efe:	4b04      	ldr	r3, [pc, #16]	; (81f10 <pmc_switch_mainck_to_xtal+0x50>)
   81f00:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81f02:	620b      	str	r3, [r1, #32]
   81f04:	4770      	bx	lr
   81f06:	bf00      	nop
   81f08:	400e0600 	.word	0x400e0600
   81f0c:	fec8fffc 	.word	0xfec8fffc
   81f10:	01370002 	.word	0x01370002

00081f14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81f14:	4b02      	ldr	r3, [pc, #8]	; (81f20 <pmc_osc_is_ready_mainck+0xc>)
   81f16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81f18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81f1c:	4770      	bx	lr
   81f1e:	bf00      	nop
   81f20:	400e0600 	.word	0x400e0600

00081f24 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81f24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81f28:	4b01      	ldr	r3, [pc, #4]	; (81f30 <pmc_disable_pllack+0xc>)
   81f2a:	629a      	str	r2, [r3, #40]	; 0x28
   81f2c:	4770      	bx	lr
   81f2e:	bf00      	nop
   81f30:	400e0600 	.word	0x400e0600

00081f34 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81f34:	4b02      	ldr	r3, [pc, #8]	; (81f40 <pmc_is_locked_pllack+0xc>)
   81f36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81f38:	f000 0002 	and.w	r0, r0, #2
   81f3c:	4770      	bx	lr
   81f3e:	bf00      	nop
   81f40:	400e0600 	.word	0x400e0600

00081f44 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   81f44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81f48:	4b05      	ldr	r3, [pc, #20]	; (81f60 <pmc_enable_periph_clk+0x1c>)
   81f4a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   81f4e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   81f52:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   81f56:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   81f5a:	2000      	movs	r0, #0
   81f5c:	4770      	bx	lr
   81f5e:	bf00      	nop
   81f60:	400e0600 	.word	0x400e0600

00081f64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81f64:	e7fe      	b.n	81f64 <Dummy_Handler>
	...

00081f68 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81f68:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81f6a:	4b1c      	ldr	r3, [pc, #112]	; (81fdc <Reset_Handler+0x74>)
   81f6c:	4a1c      	ldr	r2, [pc, #112]	; (81fe0 <Reset_Handler+0x78>)
   81f6e:	429a      	cmp	r2, r3
   81f70:	d010      	beq.n	81f94 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81f72:	4b1c      	ldr	r3, [pc, #112]	; (81fe4 <Reset_Handler+0x7c>)
   81f74:	4a19      	ldr	r2, [pc, #100]	; (81fdc <Reset_Handler+0x74>)
   81f76:	429a      	cmp	r2, r3
   81f78:	d20c      	bcs.n	81f94 <Reset_Handler+0x2c>
   81f7a:	3b01      	subs	r3, #1
   81f7c:	1a9b      	subs	r3, r3, r2
   81f7e:	f023 0303 	bic.w	r3, r3, #3
   81f82:	3304      	adds	r3, #4
   81f84:	4413      	add	r3, r2
   81f86:	4916      	ldr	r1, [pc, #88]	; (81fe0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81f88:	f851 0b04 	ldr.w	r0, [r1], #4
   81f8c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81f90:	429a      	cmp	r2, r3
   81f92:	d1f9      	bne.n	81f88 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81f94:	4b14      	ldr	r3, [pc, #80]	; (81fe8 <Reset_Handler+0x80>)
   81f96:	4a15      	ldr	r2, [pc, #84]	; (81fec <Reset_Handler+0x84>)
   81f98:	429a      	cmp	r2, r3
   81f9a:	d20a      	bcs.n	81fb2 <Reset_Handler+0x4a>
   81f9c:	3b01      	subs	r3, #1
   81f9e:	1a9b      	subs	r3, r3, r2
   81fa0:	f023 0303 	bic.w	r3, r3, #3
   81fa4:	3304      	adds	r3, #4
   81fa6:	4413      	add	r3, r2
		*pDest++ = 0;
   81fa8:	2100      	movs	r1, #0
   81faa:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81fae:	4293      	cmp	r3, r2
   81fb0:	d1fb      	bne.n	81faa <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81fb2:	4b0f      	ldr	r3, [pc, #60]	; (81ff0 <Reset_Handler+0x88>)
   81fb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81fb8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81fbc:	490d      	ldr	r1, [pc, #52]	; (81ff4 <Reset_Handler+0x8c>)
   81fbe:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81fc0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81fc8:	d203      	bcs.n	81fd2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81fca:	688b      	ldr	r3, [r1, #8]
   81fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81fd0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81fd2:	4b09      	ldr	r3, [pc, #36]	; (81ff8 <Reset_Handler+0x90>)
   81fd4:	4798      	blx	r3

	/* Branch to main function */
	main();
   81fd6:	4b09      	ldr	r3, [pc, #36]	; (81ffc <Reset_Handler+0x94>)
   81fd8:	4798      	blx	r3
   81fda:	e7fe      	b.n	81fda <Reset_Handler+0x72>
   81fdc:	20070000 	.word	0x20070000
   81fe0:	00085114 	.word	0x00085114
   81fe4:	20070ae0 	.word	0x20070ae0
   81fe8:	2007c568 	.word	0x2007c568
   81fec:	20070ae0 	.word	0x20070ae0
   81ff0:	00080000 	.word	0x00080000
   81ff4:	e000ed00 	.word	0xe000ed00
   81ff8:	0008222d 	.word	0x0008222d
   81ffc:	000821f5 	.word	0x000821f5

00082000 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82000:	4b3d      	ldr	r3, [pc, #244]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   82002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82004:	f003 0303 	and.w	r3, r3, #3
   82008:	2b03      	cmp	r3, #3
   8200a:	d80e      	bhi.n	8202a <SystemCoreClockUpdate+0x2a>
   8200c:	e8df f003 	tbb	[pc, r3]
   82010:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82014:	4b39      	ldr	r3, [pc, #228]	; (820fc <SystemCoreClockUpdate+0xfc>)
   82016:	695b      	ldr	r3, [r3, #20]
   82018:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8201c:	bf14      	ite	ne
   8201e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82022:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82026:	4b36      	ldr	r3, [pc, #216]	; (82100 <SystemCoreClockUpdate+0x100>)
   82028:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8202a:	4b33      	ldr	r3, [pc, #204]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   8202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8202e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82032:	2b70      	cmp	r3, #112	; 0x70
   82034:	d057      	beq.n	820e6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82036:	4b30      	ldr	r3, [pc, #192]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   82038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8203a:	4931      	ldr	r1, [pc, #196]	; (82100 <SystemCoreClockUpdate+0x100>)
   8203c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82040:	680b      	ldr	r3, [r1, #0]
   82042:	40d3      	lsrs	r3, r2
   82044:	600b      	str	r3, [r1, #0]
   82046:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82048:	4b2b      	ldr	r3, [pc, #172]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   8204a:	6a1b      	ldr	r3, [r3, #32]
   8204c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82050:	d003      	beq.n	8205a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82052:	4a2c      	ldr	r2, [pc, #176]	; (82104 <SystemCoreClockUpdate+0x104>)
   82054:	4b2a      	ldr	r3, [pc, #168]	; (82100 <SystemCoreClockUpdate+0x100>)
   82056:	601a      	str	r2, [r3, #0]
   82058:	e7e7      	b.n	8202a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8205a:	4a2b      	ldr	r2, [pc, #172]	; (82108 <SystemCoreClockUpdate+0x108>)
   8205c:	4b28      	ldr	r3, [pc, #160]	; (82100 <SystemCoreClockUpdate+0x100>)
   8205e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82060:	4b25      	ldr	r3, [pc, #148]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   82062:	6a1b      	ldr	r3, [r3, #32]
   82064:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82068:	2b10      	cmp	r3, #16
   8206a:	d005      	beq.n	82078 <SystemCoreClockUpdate+0x78>
   8206c:	2b20      	cmp	r3, #32
   8206e:	d1dc      	bne.n	8202a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82070:	4a24      	ldr	r2, [pc, #144]	; (82104 <SystemCoreClockUpdate+0x104>)
   82072:	4b23      	ldr	r3, [pc, #140]	; (82100 <SystemCoreClockUpdate+0x100>)
   82074:	601a      	str	r2, [r3, #0]
				break;
   82076:	e7d8      	b.n	8202a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82078:	4a24      	ldr	r2, [pc, #144]	; (8210c <SystemCoreClockUpdate+0x10c>)
   8207a:	4b21      	ldr	r3, [pc, #132]	; (82100 <SystemCoreClockUpdate+0x100>)
   8207c:	601a      	str	r2, [r3, #0]
				break;
   8207e:	e7d4      	b.n	8202a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82080:	4b1d      	ldr	r3, [pc, #116]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   82082:	6a1b      	ldr	r3, [r3, #32]
   82084:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82088:	d00c      	beq.n	820a4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8208a:	4a1e      	ldr	r2, [pc, #120]	; (82104 <SystemCoreClockUpdate+0x104>)
   8208c:	4b1c      	ldr	r3, [pc, #112]	; (82100 <SystemCoreClockUpdate+0x100>)
   8208e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82090:	4b19      	ldr	r3, [pc, #100]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   82092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82094:	f003 0303 	and.w	r3, r3, #3
   82098:	2b02      	cmp	r3, #2
   8209a:	d016      	beq.n	820ca <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8209c:	4a1c      	ldr	r2, [pc, #112]	; (82110 <SystemCoreClockUpdate+0x110>)
   8209e:	4b18      	ldr	r3, [pc, #96]	; (82100 <SystemCoreClockUpdate+0x100>)
   820a0:	601a      	str	r2, [r3, #0]
   820a2:	e7c2      	b.n	8202a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   820a4:	4a18      	ldr	r2, [pc, #96]	; (82108 <SystemCoreClockUpdate+0x108>)
   820a6:	4b16      	ldr	r3, [pc, #88]	; (82100 <SystemCoreClockUpdate+0x100>)
   820a8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   820aa:	4b13      	ldr	r3, [pc, #76]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   820ac:	6a1b      	ldr	r3, [r3, #32]
   820ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   820b2:	2b10      	cmp	r3, #16
   820b4:	d005      	beq.n	820c2 <SystemCoreClockUpdate+0xc2>
   820b6:	2b20      	cmp	r3, #32
   820b8:	d1ea      	bne.n	82090 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   820ba:	4a12      	ldr	r2, [pc, #72]	; (82104 <SystemCoreClockUpdate+0x104>)
   820bc:	4b10      	ldr	r3, [pc, #64]	; (82100 <SystemCoreClockUpdate+0x100>)
   820be:	601a      	str	r2, [r3, #0]
				break;
   820c0:	e7e6      	b.n	82090 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   820c2:	4a12      	ldr	r2, [pc, #72]	; (8210c <SystemCoreClockUpdate+0x10c>)
   820c4:	4b0e      	ldr	r3, [pc, #56]	; (82100 <SystemCoreClockUpdate+0x100>)
   820c6:	601a      	str	r2, [r3, #0]
				break;
   820c8:	e7e2      	b.n	82090 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   820ca:	4a0b      	ldr	r2, [pc, #44]	; (820f8 <SystemCoreClockUpdate+0xf8>)
   820cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   820ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
   820d0:	480b      	ldr	r0, [pc, #44]	; (82100 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   820d2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   820d6:	6803      	ldr	r3, [r0, #0]
   820d8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   820dc:	b2d2      	uxtb	r2, r2
   820de:	fbb3 f3f2 	udiv	r3, r3, r2
   820e2:	6003      	str	r3, [r0, #0]
   820e4:	e7a1      	b.n	8202a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   820e6:	4a06      	ldr	r2, [pc, #24]	; (82100 <SystemCoreClockUpdate+0x100>)
   820e8:	6813      	ldr	r3, [r2, #0]
   820ea:	490a      	ldr	r1, [pc, #40]	; (82114 <SystemCoreClockUpdate+0x114>)
   820ec:	fba1 1303 	umull	r1, r3, r1, r3
   820f0:	085b      	lsrs	r3, r3, #1
   820f2:	6013      	str	r3, [r2, #0]
   820f4:	4770      	bx	lr
   820f6:	bf00      	nop
   820f8:	400e0600 	.word	0x400e0600
   820fc:	400e1a10 	.word	0x400e1a10
   82100:	20070130 	.word	0x20070130
   82104:	00b71b00 	.word	0x00b71b00
   82108:	003d0900 	.word	0x003d0900
   8210c:	007a1200 	.word	0x007a1200
   82110:	0e4e1c00 	.word	0x0e4e1c00
   82114:	aaaaaaab 	.word	0xaaaaaaab

00082118 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82118:	4b0a      	ldr	r3, [pc, #40]	; (82144 <_sbrk+0x2c>)
   8211a:	681b      	ldr	r3, [r3, #0]
   8211c:	b153      	cbz	r3, 82134 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8211e:	4b09      	ldr	r3, [pc, #36]	; (82144 <_sbrk+0x2c>)
   82120:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82122:	181a      	adds	r2, r3, r0
   82124:	4908      	ldr	r1, [pc, #32]	; (82148 <_sbrk+0x30>)
   82126:	4291      	cmp	r1, r2
   82128:	db08      	blt.n	8213c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8212a:	4610      	mov	r0, r2
   8212c:	4a05      	ldr	r2, [pc, #20]	; (82144 <_sbrk+0x2c>)
   8212e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82130:	4618      	mov	r0, r3
   82132:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82134:	4a05      	ldr	r2, [pc, #20]	; (8214c <_sbrk+0x34>)
   82136:	4b03      	ldr	r3, [pc, #12]	; (82144 <_sbrk+0x2c>)
   82138:	601a      	str	r2, [r3, #0]
   8213a:	e7f0      	b.n	8211e <_sbrk+0x6>
		return (caddr_t) -1;	
   8213c:	f04f 30ff 	mov.w	r0, #4294967295
}
   82140:	4770      	bx	lr
   82142:	bf00      	nop
   82144:	2007c4bc 	.word	0x2007c4bc
   82148:	20087ffc 	.word	0x20087ffc
   8214c:	2007e568 	.word	0x2007e568

00082150 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82150:	f04f 30ff 	mov.w	r0, #4294967295
   82154:	4770      	bx	lr

00082156 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8215a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8215c:	2000      	movs	r0, #0
   8215e:	4770      	bx	lr

00082160 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82160:	2001      	movs	r0, #1
   82162:	4770      	bx	lr

00082164 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82164:	2000      	movs	r0, #0
   82166:	4770      	bx	lr

00082168 <writer1>:
#include <console_po.h>

#include <writer1.h>
#include <writer2.h>

void writer1 (){
   82168:	b570      	push	{r4, r5, r6, lr}
	for(;;) {
		printf("a"); // test
   8216a:	4d05      	ldr	r5, [pc, #20]	; (82180 <writer1+0x18>)
   8216c:	4c05      	ldr	r4, [pc, #20]	; (82184 <writer1+0x1c>)
		const char * str = "Vad bra! ";
		printfConsole(str);
   8216e:	4e06      	ldr	r6, [pc, #24]	; (82188 <writer1+0x20>)
		printf("a"); // test
   82170:	4628      	mov	r0, r5
   82172:	47a0      	blx	r4
		printfConsole(str);
   82174:	4630      	mov	r0, r6
   82176:	4b05      	ldr	r3, [pc, #20]	; (8218c <writer1+0x24>)
   82178:	4798      	blx	r3
		printf("a"); // test
   8217a:	4628      	mov	r0, r5
   8217c:	47a0      	blx	r4
   8217e:	e7f7      	b.n	82170 <writer1+0x8>
   82180:	00084f48 	.word	0x00084f48
   82184:	0008227d 	.word	0x0008227d
   82188:	00084f4c 	.word	0x00084f4c
   8218c:	000801ed 	.word	0x000801ed

00082190 <init_writer1>:
	}

}
	
void init_writer1() {
   82190:	b510      	push	{r4, lr}
   82192:	b082      	sub	sp, #8
	/* Create task */
	xTaskCreate(
   82194:	2300      	movs	r3, #0
   82196:	9301      	str	r3, [sp, #4]
   82198:	2202      	movs	r2, #2
   8219a:	9200      	str	r2, [sp, #0]
   8219c:	22fa      	movs	r2, #250	; 0xfa
   8219e:	4903      	ldr	r1, [pc, #12]	; (821ac <init_writer1+0x1c>)
   821a0:	4803      	ldr	r0, [pc, #12]	; (821b0 <init_writer1+0x20>)
   821a2:	4c04      	ldr	r4, [pc, #16]	; (821b4 <init_writer1+0x24>)
   821a4:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */								// What's this?
	NULL,						/* Parameter passed into the task. */
	2,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   821a6:	b002      	add	sp, #8
   821a8:	bd10      	pop	{r4, pc}
   821aa:	bf00      	nop
   821ac:	00084f30 	.word	0x00084f30
   821b0:	00082169 	.word	0x00082169
   821b4:	00080e91 	.word	0x00080e91

000821b8 <writer2>:

#include <writer1.h>
#include <writer2.h>


void writer2(){
   821b8:	b538      	push	{r3, r4, r5, lr}
	for(;;) {
		const char * str = "Mycket kaffe! ";
		printfConsole(str);
   821ba:	4d02      	ldr	r5, [pc, #8]	; (821c4 <writer2+0xc>)
   821bc:	4c02      	ldr	r4, [pc, #8]	; (821c8 <writer2+0x10>)
   821be:	4628      	mov	r0, r5
   821c0:	47a0      	blx	r4
   821c2:	e7fc      	b.n	821be <writer2+0x6>
   821c4:	00084f70 	.word	0x00084f70
   821c8:	000801ed 	.word	0x000801ed

000821cc <init_writer2>:
	}
}


void init_writer2() {
   821cc:	b510      	push	{r4, lr}
   821ce:	b082      	sub	sp, #8
	/* Create task */
	xTaskCreate(
   821d0:	2300      	movs	r3, #0
   821d2:	9301      	str	r3, [sp, #4]
   821d4:	2201      	movs	r2, #1
   821d6:	9200      	str	r2, [sp, #0]
   821d8:	22fa      	movs	r2, #250	; 0xfa
   821da:	4903      	ldr	r1, [pc, #12]	; (821e8 <init_writer2+0x1c>)
   821dc:	4803      	ldr	r0, [pc, #12]	; (821ec <init_writer2+0x20>)
   821de:	4c04      	ldr	r4, [pc, #16]	; (821f0 <init_writer2+0x24>)
   821e0:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */								// What's this?
	NULL,						/* Parameter passed into the task. */
	1,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   821e2:	b002      	add	sp, #8
   821e4:	bd10      	pop	{r4, pc}
   821e6:	bf00      	nop
   821e8:	00084f58 	.word	0x00084f58
   821ec:	000821b9 	.word	0x000821b9
   821f0:	00080e91 	.word	0x00080e91

000821f4 <main>:

#include <writer1.h>
#include <writer2.h>

int main (void)
{
   821f4:	b508      	push	{r3, lr}
	/* System clock initialization */
	sysclk_init();
   821f6:	4b07      	ldr	r3, [pc, #28]	; (82214 <main+0x20>)
   821f8:	4798      	blx	r3
	
	/* Board peripherals initialization */
	board_init();
   821fa:	4b07      	ldr	r3, [pc, #28]	; (82218 <main+0x24>)
   821fc:	4798      	blx	r3
	
	/* Init UART console */
	console_init();
   821fe:	4b07      	ldr	r3, [pc, #28]	; (8221c <main+0x28>)
   82200:	4798      	blx	r3
	
	/* Init tasks */
	init_writer1();
   82202:	4b07      	ldr	r3, [pc, #28]	; (82220 <main+0x2c>)
   82204:	4798      	blx	r3
	init_writer2();
   82206:	4b07      	ldr	r3, [pc, #28]	; (82224 <main+0x30>)
   82208:	4798      	blx	r3
	
	/* Start scheduler */
	vTaskStartScheduler();
   8220a:	4b07      	ldr	r3, [pc, #28]	; (82228 <main+0x34>)
   8220c:	4798      	blx	r3
	
	/* Should never reach here ... */
	return 1;
}
   8220e:	2001      	movs	r0, #1
   82210:	bd08      	pop	{r3, pc}
   82212:	bf00      	nop
   82214:	00081acd 	.word	0x00081acd
   82218:	00081b31 	.word	0x00081b31
   8221c:	0008021d 	.word	0x0008021d
   82220:	00082191 	.word	0x00082191
   82224:	000821cd 	.word	0x000821cd
   82228:	00081085 	.word	0x00081085

0008222c <__libc_init_array>:
   8222c:	b570      	push	{r4, r5, r6, lr}
   8222e:	4e0f      	ldr	r6, [pc, #60]	; (8226c <__libc_init_array+0x40>)
   82230:	4d0f      	ldr	r5, [pc, #60]	; (82270 <__libc_init_array+0x44>)
   82232:	1b76      	subs	r6, r6, r5
   82234:	10b6      	asrs	r6, r6, #2
   82236:	bf18      	it	ne
   82238:	2400      	movne	r4, #0
   8223a:	d005      	beq.n	82248 <__libc_init_array+0x1c>
   8223c:	3401      	adds	r4, #1
   8223e:	f855 3b04 	ldr.w	r3, [r5], #4
   82242:	4798      	blx	r3
   82244:	42a6      	cmp	r6, r4
   82246:	d1f9      	bne.n	8223c <__libc_init_array+0x10>
   82248:	4e0a      	ldr	r6, [pc, #40]	; (82274 <__libc_init_array+0x48>)
   8224a:	4d0b      	ldr	r5, [pc, #44]	; (82278 <__libc_init_array+0x4c>)
   8224c:	f002 ff4c 	bl	850e8 <_init>
   82250:	1b76      	subs	r6, r6, r5
   82252:	10b6      	asrs	r6, r6, #2
   82254:	bf18      	it	ne
   82256:	2400      	movne	r4, #0
   82258:	d006      	beq.n	82268 <__libc_init_array+0x3c>
   8225a:	3401      	adds	r4, #1
   8225c:	f855 3b04 	ldr.w	r3, [r5], #4
   82260:	4798      	blx	r3
   82262:	42a6      	cmp	r6, r4
   82264:	d1f9      	bne.n	8225a <__libc_init_array+0x2e>
   82266:	bd70      	pop	{r4, r5, r6, pc}
   82268:	bd70      	pop	{r4, r5, r6, pc}
   8226a:	bf00      	nop
   8226c:	000850f4 	.word	0x000850f4
   82270:	000850f4 	.word	0x000850f4
   82274:	000850fc 	.word	0x000850fc
   82278:	000850f4 	.word	0x000850f4

0008227c <iprintf>:
   8227c:	b40f      	push	{r0, r1, r2, r3}
   8227e:	b510      	push	{r4, lr}
   82280:	4b07      	ldr	r3, [pc, #28]	; (822a0 <iprintf+0x24>)
   82282:	b082      	sub	sp, #8
   82284:	ac04      	add	r4, sp, #16
   82286:	f854 2b04 	ldr.w	r2, [r4], #4
   8228a:	6818      	ldr	r0, [r3, #0]
   8228c:	4623      	mov	r3, r4
   8228e:	6881      	ldr	r1, [r0, #8]
   82290:	9401      	str	r4, [sp, #4]
   82292:	f000 f939 	bl	82508 <_vfiprintf_r>
   82296:	b002      	add	sp, #8
   82298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8229c:	b004      	add	sp, #16
   8229e:	4770      	bx	lr
   822a0:	20070134 	.word	0x20070134

000822a4 <memcpy>:
   822a4:	4684      	mov	ip, r0
   822a6:	ea41 0300 	orr.w	r3, r1, r0
   822aa:	f013 0303 	ands.w	r3, r3, #3
   822ae:	d149      	bne.n	82344 <memcpy+0xa0>
   822b0:	3a40      	subs	r2, #64	; 0x40
   822b2:	d323      	bcc.n	822fc <memcpy+0x58>
   822b4:	680b      	ldr	r3, [r1, #0]
   822b6:	6003      	str	r3, [r0, #0]
   822b8:	684b      	ldr	r3, [r1, #4]
   822ba:	6043      	str	r3, [r0, #4]
   822bc:	688b      	ldr	r3, [r1, #8]
   822be:	6083      	str	r3, [r0, #8]
   822c0:	68cb      	ldr	r3, [r1, #12]
   822c2:	60c3      	str	r3, [r0, #12]
   822c4:	690b      	ldr	r3, [r1, #16]
   822c6:	6103      	str	r3, [r0, #16]
   822c8:	694b      	ldr	r3, [r1, #20]
   822ca:	6143      	str	r3, [r0, #20]
   822cc:	698b      	ldr	r3, [r1, #24]
   822ce:	6183      	str	r3, [r0, #24]
   822d0:	69cb      	ldr	r3, [r1, #28]
   822d2:	61c3      	str	r3, [r0, #28]
   822d4:	6a0b      	ldr	r3, [r1, #32]
   822d6:	6203      	str	r3, [r0, #32]
   822d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   822da:	6243      	str	r3, [r0, #36]	; 0x24
   822dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   822de:	6283      	str	r3, [r0, #40]	; 0x28
   822e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   822e2:	62c3      	str	r3, [r0, #44]	; 0x2c
   822e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   822e6:	6303      	str	r3, [r0, #48]	; 0x30
   822e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   822ea:	6343      	str	r3, [r0, #52]	; 0x34
   822ec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   822ee:	6383      	str	r3, [r0, #56]	; 0x38
   822f0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   822f2:	63c3      	str	r3, [r0, #60]	; 0x3c
   822f4:	3040      	adds	r0, #64	; 0x40
   822f6:	3140      	adds	r1, #64	; 0x40
   822f8:	3a40      	subs	r2, #64	; 0x40
   822fa:	d2db      	bcs.n	822b4 <memcpy+0x10>
   822fc:	3230      	adds	r2, #48	; 0x30
   822fe:	d30b      	bcc.n	82318 <memcpy+0x74>
   82300:	680b      	ldr	r3, [r1, #0]
   82302:	6003      	str	r3, [r0, #0]
   82304:	684b      	ldr	r3, [r1, #4]
   82306:	6043      	str	r3, [r0, #4]
   82308:	688b      	ldr	r3, [r1, #8]
   8230a:	6083      	str	r3, [r0, #8]
   8230c:	68cb      	ldr	r3, [r1, #12]
   8230e:	60c3      	str	r3, [r0, #12]
   82310:	3010      	adds	r0, #16
   82312:	3110      	adds	r1, #16
   82314:	3a10      	subs	r2, #16
   82316:	d2f3      	bcs.n	82300 <memcpy+0x5c>
   82318:	320c      	adds	r2, #12
   8231a:	d305      	bcc.n	82328 <memcpy+0x84>
   8231c:	f851 3b04 	ldr.w	r3, [r1], #4
   82320:	f840 3b04 	str.w	r3, [r0], #4
   82324:	3a04      	subs	r2, #4
   82326:	d2f9      	bcs.n	8231c <memcpy+0x78>
   82328:	3204      	adds	r2, #4
   8232a:	d008      	beq.n	8233e <memcpy+0x9a>
   8232c:	07d2      	lsls	r2, r2, #31
   8232e:	bf1c      	itt	ne
   82330:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82334:	f800 3b01 	strbne.w	r3, [r0], #1
   82338:	d301      	bcc.n	8233e <memcpy+0x9a>
   8233a:	880b      	ldrh	r3, [r1, #0]
   8233c:	8003      	strh	r3, [r0, #0]
   8233e:	4660      	mov	r0, ip
   82340:	4770      	bx	lr
   82342:	bf00      	nop
   82344:	2a08      	cmp	r2, #8
   82346:	d313      	bcc.n	82370 <memcpy+0xcc>
   82348:	078b      	lsls	r3, r1, #30
   8234a:	d0b1      	beq.n	822b0 <memcpy+0xc>
   8234c:	f010 0303 	ands.w	r3, r0, #3
   82350:	d0ae      	beq.n	822b0 <memcpy+0xc>
   82352:	f1c3 0304 	rsb	r3, r3, #4
   82356:	1ad2      	subs	r2, r2, r3
   82358:	07db      	lsls	r3, r3, #31
   8235a:	bf1c      	itt	ne
   8235c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82360:	f800 3b01 	strbne.w	r3, [r0], #1
   82364:	d3a4      	bcc.n	822b0 <memcpy+0xc>
   82366:	f831 3b02 	ldrh.w	r3, [r1], #2
   8236a:	f820 3b02 	strh.w	r3, [r0], #2
   8236e:	e79f      	b.n	822b0 <memcpy+0xc>
   82370:	3a04      	subs	r2, #4
   82372:	d3d9      	bcc.n	82328 <memcpy+0x84>
   82374:	3a01      	subs	r2, #1
   82376:	f811 3b01 	ldrb.w	r3, [r1], #1
   8237a:	f800 3b01 	strb.w	r3, [r0], #1
   8237e:	d2f9      	bcs.n	82374 <memcpy+0xd0>
   82380:	780b      	ldrb	r3, [r1, #0]
   82382:	7003      	strb	r3, [r0, #0]
   82384:	784b      	ldrb	r3, [r1, #1]
   82386:	7043      	strb	r3, [r0, #1]
   82388:	788b      	ldrb	r3, [r1, #2]
   8238a:	7083      	strb	r3, [r0, #2]
   8238c:	4660      	mov	r0, ip
   8238e:	4770      	bx	lr

00082390 <memset>:
   82390:	b470      	push	{r4, r5, r6}
   82392:	0786      	lsls	r6, r0, #30
   82394:	d046      	beq.n	82424 <memset+0x94>
   82396:	1e54      	subs	r4, r2, #1
   82398:	2a00      	cmp	r2, #0
   8239a:	d041      	beq.n	82420 <memset+0x90>
   8239c:	b2ca      	uxtb	r2, r1
   8239e:	4603      	mov	r3, r0
   823a0:	e002      	b.n	823a8 <memset+0x18>
   823a2:	f114 34ff 	adds.w	r4, r4, #4294967295
   823a6:	d33b      	bcc.n	82420 <memset+0x90>
   823a8:	f803 2b01 	strb.w	r2, [r3], #1
   823ac:	079d      	lsls	r5, r3, #30
   823ae:	d1f8      	bne.n	823a2 <memset+0x12>
   823b0:	2c03      	cmp	r4, #3
   823b2:	d92e      	bls.n	82412 <memset+0x82>
   823b4:	b2cd      	uxtb	r5, r1
   823b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   823ba:	2c0f      	cmp	r4, #15
   823bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   823c0:	d919      	bls.n	823f6 <memset+0x66>
   823c2:	4626      	mov	r6, r4
   823c4:	f103 0210 	add.w	r2, r3, #16
   823c8:	3e10      	subs	r6, #16
   823ca:	2e0f      	cmp	r6, #15
   823cc:	f842 5c10 	str.w	r5, [r2, #-16]
   823d0:	f842 5c0c 	str.w	r5, [r2, #-12]
   823d4:	f842 5c08 	str.w	r5, [r2, #-8]
   823d8:	f842 5c04 	str.w	r5, [r2, #-4]
   823dc:	f102 0210 	add.w	r2, r2, #16
   823e0:	d8f2      	bhi.n	823c8 <memset+0x38>
   823e2:	f1a4 0210 	sub.w	r2, r4, #16
   823e6:	f022 020f 	bic.w	r2, r2, #15
   823ea:	f004 040f 	and.w	r4, r4, #15
   823ee:	3210      	adds	r2, #16
   823f0:	2c03      	cmp	r4, #3
   823f2:	4413      	add	r3, r2
   823f4:	d90d      	bls.n	82412 <memset+0x82>
   823f6:	461e      	mov	r6, r3
   823f8:	4622      	mov	r2, r4
   823fa:	3a04      	subs	r2, #4
   823fc:	2a03      	cmp	r2, #3
   823fe:	f846 5b04 	str.w	r5, [r6], #4
   82402:	d8fa      	bhi.n	823fa <memset+0x6a>
   82404:	1f22      	subs	r2, r4, #4
   82406:	f022 0203 	bic.w	r2, r2, #3
   8240a:	3204      	adds	r2, #4
   8240c:	4413      	add	r3, r2
   8240e:	f004 0403 	and.w	r4, r4, #3
   82412:	b12c      	cbz	r4, 82420 <memset+0x90>
   82414:	b2c9      	uxtb	r1, r1
   82416:	441c      	add	r4, r3
   82418:	f803 1b01 	strb.w	r1, [r3], #1
   8241c:	429c      	cmp	r4, r3
   8241e:	d1fb      	bne.n	82418 <memset+0x88>
   82420:	bc70      	pop	{r4, r5, r6}
   82422:	4770      	bx	lr
   82424:	4614      	mov	r4, r2
   82426:	4603      	mov	r3, r0
   82428:	e7c2      	b.n	823b0 <memset+0x20>
   8242a:	bf00      	nop

0008242c <strlen>:
   8242c:	f020 0103 	bic.w	r1, r0, #3
   82430:	f010 0003 	ands.w	r0, r0, #3
   82434:	f1c0 0000 	rsb	r0, r0, #0
   82438:	f851 3b04 	ldr.w	r3, [r1], #4
   8243c:	f100 0c04 	add.w	ip, r0, #4
   82440:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82444:	f06f 0200 	mvn.w	r2, #0
   82448:	bf1c      	itt	ne
   8244a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8244e:	4313      	orrne	r3, r2
   82450:	f04f 0c01 	mov.w	ip, #1
   82454:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82458:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8245c:	eba3 020c 	sub.w	r2, r3, ip
   82460:	ea22 0203 	bic.w	r2, r2, r3
   82464:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82468:	bf04      	itt	eq
   8246a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8246e:	3004      	addeq	r0, #4
   82470:	d0f4      	beq.n	8245c <strlen+0x30>
   82472:	f1c2 0100 	rsb	r1, r2, #0
   82476:	ea02 0201 	and.w	r2, r2, r1
   8247a:	fab2 f282 	clz	r2, r2
   8247e:	f1c2 021f 	rsb	r2, r2, #31
   82482:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82486:	4770      	bx	lr

00082488 <__sprint_r.part.0>:
   82488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8248c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8248e:	4693      	mov	fp, r2
   82490:	049c      	lsls	r4, r3, #18
   82492:	d52f      	bpl.n	824f4 <__sprint_r.part.0+0x6c>
   82494:	6893      	ldr	r3, [r2, #8]
   82496:	6812      	ldr	r2, [r2, #0]
   82498:	b353      	cbz	r3, 824f0 <__sprint_r.part.0+0x68>
   8249a:	460e      	mov	r6, r1
   8249c:	4607      	mov	r7, r0
   8249e:	f102 0908 	add.w	r9, r2, #8
   824a2:	e919 0420 	ldmdb	r9, {r5, sl}
   824a6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   824aa:	d017      	beq.n	824dc <__sprint_r.part.0+0x54>
   824ac:	2400      	movs	r4, #0
   824ae:	3d04      	subs	r5, #4
   824b0:	e001      	b.n	824b6 <__sprint_r.part.0+0x2e>
   824b2:	45a0      	cmp	r8, r4
   824b4:	d010      	beq.n	824d8 <__sprint_r.part.0+0x50>
   824b6:	4632      	mov	r2, r6
   824b8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   824bc:	4638      	mov	r0, r7
   824be:	f001 f8b5 	bl	8362c <_fputwc_r>
   824c2:	1c43      	adds	r3, r0, #1
   824c4:	f104 0401 	add.w	r4, r4, #1
   824c8:	d1f3      	bne.n	824b2 <__sprint_r.part.0+0x2a>
   824ca:	2300      	movs	r3, #0
   824cc:	f8cb 3008 	str.w	r3, [fp, #8]
   824d0:	f8cb 3004 	str.w	r3, [fp, #4]
   824d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824d8:	f8db 3008 	ldr.w	r3, [fp, #8]
   824dc:	f02a 0a03 	bic.w	sl, sl, #3
   824e0:	eba3 030a 	sub.w	r3, r3, sl
   824e4:	f8cb 3008 	str.w	r3, [fp, #8]
   824e8:	f109 0908 	add.w	r9, r9, #8
   824ec:	2b00      	cmp	r3, #0
   824ee:	d1d8      	bne.n	824a2 <__sprint_r.part.0+0x1a>
   824f0:	2000      	movs	r0, #0
   824f2:	e7ea      	b.n	824ca <__sprint_r.part.0+0x42>
   824f4:	f001 fa04 	bl	83900 <__sfvwrite_r>
   824f8:	2300      	movs	r3, #0
   824fa:	f8cb 3008 	str.w	r3, [fp, #8]
   824fe:	f8cb 3004 	str.w	r3, [fp, #4]
   82502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82506:	bf00      	nop

00082508 <_vfiprintf_r>:
   82508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8250c:	b0ad      	sub	sp, #180	; 0xb4
   8250e:	461d      	mov	r5, r3
   82510:	468b      	mov	fp, r1
   82512:	4690      	mov	r8, r2
   82514:	9307      	str	r3, [sp, #28]
   82516:	9006      	str	r0, [sp, #24]
   82518:	b118      	cbz	r0, 82522 <_vfiprintf_r+0x1a>
   8251a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8251c:	2b00      	cmp	r3, #0
   8251e:	f000 80f3 	beq.w	82708 <_vfiprintf_r+0x200>
   82522:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82526:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8252a:	07df      	lsls	r7, r3, #31
   8252c:	b281      	uxth	r1, r0
   8252e:	d402      	bmi.n	82536 <_vfiprintf_r+0x2e>
   82530:	058e      	lsls	r6, r1, #22
   82532:	f140 80fc 	bpl.w	8272e <_vfiprintf_r+0x226>
   82536:	048c      	lsls	r4, r1, #18
   82538:	d40a      	bmi.n	82550 <_vfiprintf_r+0x48>
   8253a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8253e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82546:	f8ab 100c 	strh.w	r1, [fp, #12]
   8254a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8254e:	b289      	uxth	r1, r1
   82550:	0708      	lsls	r0, r1, #28
   82552:	f140 80b3 	bpl.w	826bc <_vfiprintf_r+0x1b4>
   82556:	f8db 3010 	ldr.w	r3, [fp, #16]
   8255a:	2b00      	cmp	r3, #0
   8255c:	f000 80ae 	beq.w	826bc <_vfiprintf_r+0x1b4>
   82560:	f001 031a 	and.w	r3, r1, #26
   82564:	2b0a      	cmp	r3, #10
   82566:	f000 80b5 	beq.w	826d4 <_vfiprintf_r+0x1cc>
   8256a:	2300      	movs	r3, #0
   8256c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82570:	46d1      	mov	r9, sl
   82572:	930b      	str	r3, [sp, #44]	; 0x2c
   82574:	9303      	str	r3, [sp, #12]
   82576:	9311      	str	r3, [sp, #68]	; 0x44
   82578:	9310      	str	r3, [sp, #64]	; 0x40
   8257a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8257e:	f8cd b010 	str.w	fp, [sp, #16]
   82582:	f898 3000 	ldrb.w	r3, [r8]
   82586:	4644      	mov	r4, r8
   82588:	b1fb      	cbz	r3, 825ca <_vfiprintf_r+0xc2>
   8258a:	2b25      	cmp	r3, #37	; 0x25
   8258c:	d102      	bne.n	82594 <_vfiprintf_r+0x8c>
   8258e:	e01c      	b.n	825ca <_vfiprintf_r+0xc2>
   82590:	2b25      	cmp	r3, #37	; 0x25
   82592:	d003      	beq.n	8259c <_vfiprintf_r+0x94>
   82594:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82598:	2b00      	cmp	r3, #0
   8259a:	d1f9      	bne.n	82590 <_vfiprintf_r+0x88>
   8259c:	eba4 0508 	sub.w	r5, r4, r8
   825a0:	b19d      	cbz	r5, 825ca <_vfiprintf_r+0xc2>
   825a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   825a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   825a6:	3301      	adds	r3, #1
   825a8:	442a      	add	r2, r5
   825aa:	2b07      	cmp	r3, #7
   825ac:	f8c9 8000 	str.w	r8, [r9]
   825b0:	f8c9 5004 	str.w	r5, [r9, #4]
   825b4:	9211      	str	r2, [sp, #68]	; 0x44
   825b6:	9310      	str	r3, [sp, #64]	; 0x40
   825b8:	dd7a      	ble.n	826b0 <_vfiprintf_r+0x1a8>
   825ba:	2a00      	cmp	r2, #0
   825bc:	f040 84b5 	bne.w	82f2a <_vfiprintf_r+0xa22>
   825c0:	46d1      	mov	r9, sl
   825c2:	9b03      	ldr	r3, [sp, #12]
   825c4:	9210      	str	r2, [sp, #64]	; 0x40
   825c6:	442b      	add	r3, r5
   825c8:	9303      	str	r3, [sp, #12]
   825ca:	7823      	ldrb	r3, [r4, #0]
   825cc:	2b00      	cmp	r3, #0
   825ce:	f000 83e5 	beq.w	82d9c <_vfiprintf_r+0x894>
   825d2:	2000      	movs	r0, #0
   825d4:	f04f 0300 	mov.w	r3, #0
   825d8:	f104 0801 	add.w	r8, r4, #1
   825dc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   825e0:	7862      	ldrb	r2, [r4, #1]
   825e2:	4606      	mov	r6, r0
   825e4:	4605      	mov	r5, r0
   825e6:	4603      	mov	r3, r0
   825e8:	f04f 34ff 	mov.w	r4, #4294967295
   825ec:	f108 0801 	add.w	r8, r8, #1
   825f0:	f1a2 0120 	sub.w	r1, r2, #32
   825f4:	2958      	cmp	r1, #88	; 0x58
   825f6:	f200 82d9 	bhi.w	82bac <_vfiprintf_r+0x6a4>
   825fa:	e8df f011 	tbh	[pc, r1, lsl #1]
   825fe:	0228      	.short	0x0228
   82600:	02d702d7 	.word	0x02d702d7
   82604:	02d70230 	.word	0x02d70230
   82608:	02d702d7 	.word	0x02d702d7
   8260c:	02d702d7 	.word	0x02d702d7
   82610:	00a002d7 	.word	0x00a002d7
   82614:	02d70288 	.word	0x02d70288
   82618:	02b800a8 	.word	0x02b800a8
   8261c:	01a602d7 	.word	0x01a602d7
   82620:	01ab01ab 	.word	0x01ab01ab
   82624:	01ab01ab 	.word	0x01ab01ab
   82628:	01ab01ab 	.word	0x01ab01ab
   8262c:	01ab01ab 	.word	0x01ab01ab
   82630:	02d701ab 	.word	0x02d701ab
   82634:	02d702d7 	.word	0x02d702d7
   82638:	02d702d7 	.word	0x02d702d7
   8263c:	02d702d7 	.word	0x02d702d7
   82640:	02d702d7 	.word	0x02d702d7
   82644:	01b902d7 	.word	0x01b902d7
   82648:	02d702d7 	.word	0x02d702d7
   8264c:	02d702d7 	.word	0x02d702d7
   82650:	02d702d7 	.word	0x02d702d7
   82654:	02d702d7 	.word	0x02d702d7
   82658:	02d702d7 	.word	0x02d702d7
   8265c:	02d7019e 	.word	0x02d7019e
   82660:	02d702d7 	.word	0x02d702d7
   82664:	02d702d7 	.word	0x02d702d7
   82668:	02d701a2 	.word	0x02d701a2
   8266c:	025a02d7 	.word	0x025a02d7
   82670:	02d702d7 	.word	0x02d702d7
   82674:	02d702d7 	.word	0x02d702d7
   82678:	02d702d7 	.word	0x02d702d7
   8267c:	02d702d7 	.word	0x02d702d7
   82680:	02d702d7 	.word	0x02d702d7
   82684:	02220261 	.word	0x02220261
   82688:	02d702d7 	.word	0x02d702d7
   8268c:	027602d7 	.word	0x027602d7
   82690:	02d70222 	.word	0x02d70222
   82694:	027b02d7 	.word	0x027b02d7
   82698:	01fc02d7 	.word	0x01fc02d7
   8269c:	02100189 	.word	0x02100189
   826a0:	02d702d2 	.word	0x02d702d2
   826a4:	02d70295 	.word	0x02d70295
   826a8:	02d700ad 	.word	0x02d700ad
   826ac:	023502d7 	.word	0x023502d7
   826b0:	f109 0908 	add.w	r9, r9, #8
   826b4:	9b03      	ldr	r3, [sp, #12]
   826b6:	442b      	add	r3, r5
   826b8:	9303      	str	r3, [sp, #12]
   826ba:	e786      	b.n	825ca <_vfiprintf_r+0xc2>
   826bc:	4659      	mov	r1, fp
   826be:	9806      	ldr	r0, [sp, #24]
   826c0:	f000 fdaa 	bl	83218 <__swsetup_r>
   826c4:	bb18      	cbnz	r0, 8270e <_vfiprintf_r+0x206>
   826c6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   826ca:	f001 031a 	and.w	r3, r1, #26
   826ce:	2b0a      	cmp	r3, #10
   826d0:	f47f af4b 	bne.w	8256a <_vfiprintf_r+0x62>
   826d4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   826d8:	2b00      	cmp	r3, #0
   826da:	f6ff af46 	blt.w	8256a <_vfiprintf_r+0x62>
   826de:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   826e2:	07db      	lsls	r3, r3, #31
   826e4:	d405      	bmi.n	826f2 <_vfiprintf_r+0x1ea>
   826e6:	058f      	lsls	r7, r1, #22
   826e8:	d403      	bmi.n	826f2 <_vfiprintf_r+0x1ea>
   826ea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   826ee:	f001 fabd 	bl	83c6c <__retarget_lock_release_recursive>
   826f2:	462b      	mov	r3, r5
   826f4:	4642      	mov	r2, r8
   826f6:	4659      	mov	r1, fp
   826f8:	9806      	ldr	r0, [sp, #24]
   826fa:	f000 fd49 	bl	83190 <__sbprintf>
   826fe:	9003      	str	r0, [sp, #12]
   82700:	9803      	ldr	r0, [sp, #12]
   82702:	b02d      	add	sp, #180	; 0xb4
   82704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82708:	f000 feee 	bl	834e8 <__sinit>
   8270c:	e709      	b.n	82522 <_vfiprintf_r+0x1a>
   8270e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82712:	07d9      	lsls	r1, r3, #31
   82714:	d404      	bmi.n	82720 <_vfiprintf_r+0x218>
   82716:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8271a:	059a      	lsls	r2, r3, #22
   8271c:	f140 84ae 	bpl.w	8307c <_vfiprintf_r+0xb74>
   82720:	f04f 33ff 	mov.w	r3, #4294967295
   82724:	9303      	str	r3, [sp, #12]
   82726:	9803      	ldr	r0, [sp, #12]
   82728:	b02d      	add	sp, #180	; 0xb4
   8272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8272e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82732:	f001 fa99 	bl	83c68 <__retarget_lock_acquire_recursive>
   82736:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8273a:	b281      	uxth	r1, r0
   8273c:	e6fb      	b.n	82536 <_vfiprintf_r+0x2e>
   8273e:	9907      	ldr	r1, [sp, #28]
   82740:	460a      	mov	r2, r1
   82742:	680d      	ldr	r5, [r1, #0]
   82744:	3204      	adds	r2, #4
   82746:	2d00      	cmp	r5, #0
   82748:	9207      	str	r2, [sp, #28]
   8274a:	da02      	bge.n	82752 <_vfiprintf_r+0x24a>
   8274c:	426d      	negs	r5, r5
   8274e:	f043 0304 	orr.w	r3, r3, #4
   82752:	f898 2000 	ldrb.w	r2, [r8]
   82756:	e749      	b.n	825ec <_vfiprintf_r+0xe4>
   82758:	9508      	str	r5, [sp, #32]
   8275a:	069e      	lsls	r6, r3, #26
   8275c:	f100 845a 	bmi.w	83014 <_vfiprintf_r+0xb0c>
   82760:	9907      	ldr	r1, [sp, #28]
   82762:	06dd      	lsls	r5, r3, #27
   82764:	460a      	mov	r2, r1
   82766:	f100 83ef 	bmi.w	82f48 <_vfiprintf_r+0xa40>
   8276a:	0658      	lsls	r0, r3, #25
   8276c:	f140 83ec 	bpl.w	82f48 <_vfiprintf_r+0xa40>
   82770:	2700      	movs	r7, #0
   82772:	2201      	movs	r2, #1
   82774:	880e      	ldrh	r6, [r1, #0]
   82776:	3104      	adds	r1, #4
   82778:	9107      	str	r1, [sp, #28]
   8277a:	f04f 0100 	mov.w	r1, #0
   8277e:	2500      	movs	r5, #0
   82780:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82784:	1c61      	adds	r1, r4, #1
   82786:	f000 8117 	beq.w	829b8 <_vfiprintf_r+0x4b0>
   8278a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8278e:	9102      	str	r1, [sp, #8]
   82790:	ea56 0107 	orrs.w	r1, r6, r7
   82794:	f040 8115 	bne.w	829c2 <_vfiprintf_r+0x4ba>
   82798:	2c00      	cmp	r4, #0
   8279a:	f040 835b 	bne.w	82e54 <_vfiprintf_r+0x94c>
   8279e:	2a00      	cmp	r2, #0
   827a0:	f040 83b6 	bne.w	82f10 <_vfiprintf_r+0xa08>
   827a4:	f013 0301 	ands.w	r3, r3, #1
   827a8:	9305      	str	r3, [sp, #20]
   827aa:	f000 8455 	beq.w	83058 <_vfiprintf_r+0xb50>
   827ae:	2330      	movs	r3, #48	; 0x30
   827b0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   827b4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   827b8:	9b05      	ldr	r3, [sp, #20]
   827ba:	42a3      	cmp	r3, r4
   827bc:	bfb8      	it	lt
   827be:	4623      	movlt	r3, r4
   827c0:	9301      	str	r3, [sp, #4]
   827c2:	b10d      	cbz	r5, 827c8 <_vfiprintf_r+0x2c0>
   827c4:	3301      	adds	r3, #1
   827c6:	9301      	str	r3, [sp, #4]
   827c8:	9b02      	ldr	r3, [sp, #8]
   827ca:	f013 0302 	ands.w	r3, r3, #2
   827ce:	9309      	str	r3, [sp, #36]	; 0x24
   827d0:	d002      	beq.n	827d8 <_vfiprintf_r+0x2d0>
   827d2:	9b01      	ldr	r3, [sp, #4]
   827d4:	3302      	adds	r3, #2
   827d6:	9301      	str	r3, [sp, #4]
   827d8:	9b02      	ldr	r3, [sp, #8]
   827da:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   827de:	930a      	str	r3, [sp, #40]	; 0x28
   827e0:	f040 8215 	bne.w	82c0e <_vfiprintf_r+0x706>
   827e4:	9b08      	ldr	r3, [sp, #32]
   827e6:	9a01      	ldr	r2, [sp, #4]
   827e8:	1a9d      	subs	r5, r3, r2
   827ea:	2d00      	cmp	r5, #0
   827ec:	f340 820f 	ble.w	82c0e <_vfiprintf_r+0x706>
   827f0:	2d10      	cmp	r5, #16
   827f2:	f340 8484 	ble.w	830fe <_vfiprintf_r+0xbf6>
   827f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   827f8:	46ce      	mov	lr, r9
   827fa:	2710      	movs	r7, #16
   827fc:	46a1      	mov	r9, r4
   827fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82800:	4ec5      	ldr	r6, [pc, #788]	; (82b18 <_vfiprintf_r+0x610>)
   82802:	4619      	mov	r1, r3
   82804:	9c06      	ldr	r4, [sp, #24]
   82806:	e007      	b.n	82818 <_vfiprintf_r+0x310>
   82808:	f101 0c02 	add.w	ip, r1, #2
   8280c:	4601      	mov	r1, r0
   8280e:	f10e 0e08 	add.w	lr, lr, #8
   82812:	3d10      	subs	r5, #16
   82814:	2d10      	cmp	r5, #16
   82816:	dd11      	ble.n	8283c <_vfiprintf_r+0x334>
   82818:	1c48      	adds	r0, r1, #1
   8281a:	3210      	adds	r2, #16
   8281c:	2807      	cmp	r0, #7
   8281e:	9211      	str	r2, [sp, #68]	; 0x44
   82820:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82824:	9010      	str	r0, [sp, #64]	; 0x40
   82826:	ddef      	ble.n	82808 <_vfiprintf_r+0x300>
   82828:	2a00      	cmp	r2, #0
   8282a:	f040 81d9 	bne.w	82be0 <_vfiprintf_r+0x6d8>
   8282e:	3d10      	subs	r5, #16
   82830:	2d10      	cmp	r5, #16
   82832:	4611      	mov	r1, r2
   82834:	f04f 0c01 	mov.w	ip, #1
   82838:	46d6      	mov	lr, sl
   8283a:	dced      	bgt.n	82818 <_vfiprintf_r+0x310>
   8283c:	464c      	mov	r4, r9
   8283e:	4661      	mov	r1, ip
   82840:	46f1      	mov	r9, lr
   82842:	442a      	add	r2, r5
   82844:	2907      	cmp	r1, #7
   82846:	9211      	str	r2, [sp, #68]	; 0x44
   82848:	f8c9 6000 	str.w	r6, [r9]
   8284c:	f8c9 5004 	str.w	r5, [r9, #4]
   82850:	9110      	str	r1, [sp, #64]	; 0x40
   82852:	f300 82eb 	bgt.w	82e2c <_vfiprintf_r+0x924>
   82856:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8285a:	f109 0908 	add.w	r9, r9, #8
   8285e:	1c48      	adds	r0, r1, #1
   82860:	2d00      	cmp	r5, #0
   82862:	f040 81dc 	bne.w	82c1e <_vfiprintf_r+0x716>
   82866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82868:	2b00      	cmp	r3, #0
   8286a:	f000 81f6 	beq.w	82c5a <_vfiprintf_r+0x752>
   8286e:	2102      	movs	r1, #2
   82870:	ab0e      	add	r3, sp, #56	; 0x38
   82872:	440a      	add	r2, r1
   82874:	2807      	cmp	r0, #7
   82876:	9211      	str	r2, [sp, #68]	; 0x44
   82878:	9010      	str	r0, [sp, #64]	; 0x40
   8287a:	f8c9 1004 	str.w	r1, [r9, #4]
   8287e:	f8c9 3000 	str.w	r3, [r9]
   82882:	f340 81e6 	ble.w	82c52 <_vfiprintf_r+0x74a>
   82886:	2a00      	cmp	r2, #0
   82888:	f040 8395 	bne.w	82fb6 <_vfiprintf_r+0xaae>
   8288c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8288e:	2001      	movs	r0, #1
   82890:	2b80      	cmp	r3, #128	; 0x80
   82892:	4611      	mov	r1, r2
   82894:	46d1      	mov	r9, sl
   82896:	f040 81e4 	bne.w	82c62 <_vfiprintf_r+0x75a>
   8289a:	9b08      	ldr	r3, [sp, #32]
   8289c:	9d01      	ldr	r5, [sp, #4]
   8289e:	1b5e      	subs	r6, r3, r5
   828a0:	2e00      	cmp	r6, #0
   828a2:	f340 81de 	ble.w	82c62 <_vfiprintf_r+0x75a>
   828a6:	2e10      	cmp	r6, #16
   828a8:	f340 843c 	ble.w	83124 <_vfiprintf_r+0xc1c>
   828ac:	46cc      	mov	ip, r9
   828ae:	2710      	movs	r7, #16
   828b0:	46a1      	mov	r9, r4
   828b2:	4d9a      	ldr	r5, [pc, #616]	; (82b1c <_vfiprintf_r+0x614>)
   828b4:	9c06      	ldr	r4, [sp, #24]
   828b6:	e007      	b.n	828c8 <_vfiprintf_r+0x3c0>
   828b8:	f101 0e02 	add.w	lr, r1, #2
   828bc:	4601      	mov	r1, r0
   828be:	f10c 0c08 	add.w	ip, ip, #8
   828c2:	3e10      	subs	r6, #16
   828c4:	2e10      	cmp	r6, #16
   828c6:	dd11      	ble.n	828ec <_vfiprintf_r+0x3e4>
   828c8:	1c48      	adds	r0, r1, #1
   828ca:	3210      	adds	r2, #16
   828cc:	2807      	cmp	r0, #7
   828ce:	9211      	str	r2, [sp, #68]	; 0x44
   828d0:	e88c 00a0 	stmia.w	ip, {r5, r7}
   828d4:	9010      	str	r0, [sp, #64]	; 0x40
   828d6:	ddef      	ble.n	828b8 <_vfiprintf_r+0x3b0>
   828d8:	2a00      	cmp	r2, #0
   828da:	f040 829b 	bne.w	82e14 <_vfiprintf_r+0x90c>
   828de:	3e10      	subs	r6, #16
   828e0:	2e10      	cmp	r6, #16
   828e2:	f04f 0e01 	mov.w	lr, #1
   828e6:	4611      	mov	r1, r2
   828e8:	46d4      	mov	ip, sl
   828ea:	dced      	bgt.n	828c8 <_vfiprintf_r+0x3c0>
   828ec:	464c      	mov	r4, r9
   828ee:	46e1      	mov	r9, ip
   828f0:	4432      	add	r2, r6
   828f2:	f1be 0f07 	cmp.w	lr, #7
   828f6:	9211      	str	r2, [sp, #68]	; 0x44
   828f8:	e889 0060 	stmia.w	r9, {r5, r6}
   828fc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82900:	f300 8366 	bgt.w	82fd0 <_vfiprintf_r+0xac8>
   82904:	f109 0908 	add.w	r9, r9, #8
   82908:	f10e 0001 	add.w	r0, lr, #1
   8290c:	4671      	mov	r1, lr
   8290e:	e1a8      	b.n	82c62 <_vfiprintf_r+0x75a>
   82910:	9508      	str	r5, [sp, #32]
   82912:	f013 0220 	ands.w	r2, r3, #32
   82916:	f040 8389 	bne.w	8302c <_vfiprintf_r+0xb24>
   8291a:	f013 0110 	ands.w	r1, r3, #16
   8291e:	f040 8319 	bne.w	82f54 <_vfiprintf_r+0xa4c>
   82922:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82926:	f000 8315 	beq.w	82f54 <_vfiprintf_r+0xa4c>
   8292a:	9807      	ldr	r0, [sp, #28]
   8292c:	460a      	mov	r2, r1
   8292e:	4601      	mov	r1, r0
   82930:	3104      	adds	r1, #4
   82932:	8806      	ldrh	r6, [r0, #0]
   82934:	2700      	movs	r7, #0
   82936:	9107      	str	r1, [sp, #28]
   82938:	e71f      	b.n	8277a <_vfiprintf_r+0x272>
   8293a:	9508      	str	r5, [sp, #32]
   8293c:	f043 0310 	orr.w	r3, r3, #16
   82940:	e7e7      	b.n	82912 <_vfiprintf_r+0x40a>
   82942:	9508      	str	r5, [sp, #32]
   82944:	f043 0310 	orr.w	r3, r3, #16
   82948:	e707      	b.n	8275a <_vfiprintf_r+0x252>
   8294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8294e:	f898 2000 	ldrb.w	r2, [r8]
   82952:	e64b      	b.n	825ec <_vfiprintf_r+0xe4>
   82954:	2500      	movs	r5, #0
   82956:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8295a:	f818 2b01 	ldrb.w	r2, [r8], #1
   8295e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82962:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82966:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8296a:	2909      	cmp	r1, #9
   8296c:	d9f5      	bls.n	8295a <_vfiprintf_r+0x452>
   8296e:	e63f      	b.n	825f0 <_vfiprintf_r+0xe8>
   82970:	9508      	str	r5, [sp, #32]
   82972:	2800      	cmp	r0, #0
   82974:	f040 8402 	bne.w	8317c <_vfiprintf_r+0xc74>
   82978:	f043 0310 	orr.w	r3, r3, #16
   8297c:	069e      	lsls	r6, r3, #26
   8297e:	f100 833d 	bmi.w	82ffc <_vfiprintf_r+0xaf4>
   82982:	9907      	ldr	r1, [sp, #28]
   82984:	06dd      	lsls	r5, r3, #27
   82986:	460a      	mov	r2, r1
   82988:	f100 82f0 	bmi.w	82f6c <_vfiprintf_r+0xa64>
   8298c:	0658      	lsls	r0, r3, #25
   8298e:	f140 82ed 	bpl.w	82f6c <_vfiprintf_r+0xa64>
   82992:	f9b1 6000 	ldrsh.w	r6, [r1]
   82996:	3204      	adds	r2, #4
   82998:	17f7      	asrs	r7, r6, #31
   8299a:	4630      	mov	r0, r6
   8299c:	4639      	mov	r1, r7
   8299e:	9207      	str	r2, [sp, #28]
   829a0:	2800      	cmp	r0, #0
   829a2:	f171 0200 	sbcs.w	r2, r1, #0
   829a6:	f2c0 835a 	blt.w	8305e <_vfiprintf_r+0xb56>
   829aa:	1c61      	adds	r1, r4, #1
   829ac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   829b0:	f04f 0201 	mov.w	r2, #1
   829b4:	f47f aee9 	bne.w	8278a <_vfiprintf_r+0x282>
   829b8:	ea56 0107 	orrs.w	r1, r6, r7
   829bc:	f000 824b 	beq.w	82e56 <_vfiprintf_r+0x94e>
   829c0:	9302      	str	r3, [sp, #8]
   829c2:	2a01      	cmp	r2, #1
   829c4:	f000 828a 	beq.w	82edc <_vfiprintf_r+0x9d4>
   829c8:	2a02      	cmp	r2, #2
   829ca:	f040 825a 	bne.w	82e82 <_vfiprintf_r+0x97a>
   829ce:	46d3      	mov	fp, sl
   829d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   829d2:	0933      	lsrs	r3, r6, #4
   829d4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   829d8:	0939      	lsrs	r1, r7, #4
   829da:	f006 020f 	and.w	r2, r6, #15
   829de:	460f      	mov	r7, r1
   829e0:	461e      	mov	r6, r3
   829e2:	5c83      	ldrb	r3, [r0, r2]
   829e4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   829e8:	ea56 0307 	orrs.w	r3, r6, r7
   829ec:	d1f1      	bne.n	829d2 <_vfiprintf_r+0x4ca>
   829ee:	ebaa 030b 	sub.w	r3, sl, fp
   829f2:	9305      	str	r3, [sp, #20]
   829f4:	e6e0      	b.n	827b8 <_vfiprintf_r+0x2b0>
   829f6:	2800      	cmp	r0, #0
   829f8:	f040 83bd 	bne.w	83176 <_vfiprintf_r+0xc6e>
   829fc:	0699      	lsls	r1, r3, #26
   829fe:	f100 8359 	bmi.w	830b4 <_vfiprintf_r+0xbac>
   82a02:	06da      	lsls	r2, r3, #27
   82a04:	f100 80e5 	bmi.w	82bd2 <_vfiprintf_r+0x6ca>
   82a08:	065b      	lsls	r3, r3, #25
   82a0a:	f140 80e2 	bpl.w	82bd2 <_vfiprintf_r+0x6ca>
   82a0e:	9a07      	ldr	r2, [sp, #28]
   82a10:	6813      	ldr	r3, [r2, #0]
   82a12:	3204      	adds	r2, #4
   82a14:	9207      	str	r2, [sp, #28]
   82a16:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82a1a:	801a      	strh	r2, [r3, #0]
   82a1c:	e5b1      	b.n	82582 <_vfiprintf_r+0x7a>
   82a1e:	2278      	movs	r2, #120	; 0x78
   82a20:	2130      	movs	r1, #48	; 0x30
   82a22:	9508      	str	r5, [sp, #32]
   82a24:	9d07      	ldr	r5, [sp, #28]
   82a26:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82a2a:	1d2a      	adds	r2, r5, #4
   82a2c:	9207      	str	r2, [sp, #28]
   82a2e:	4a3c      	ldr	r2, [pc, #240]	; (82b20 <_vfiprintf_r+0x618>)
   82a30:	682e      	ldr	r6, [r5, #0]
   82a32:	920b      	str	r2, [sp, #44]	; 0x2c
   82a34:	f043 0302 	orr.w	r3, r3, #2
   82a38:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82a3c:	2700      	movs	r7, #0
   82a3e:	2202      	movs	r2, #2
   82a40:	e69b      	b.n	8277a <_vfiprintf_r+0x272>
   82a42:	9508      	str	r5, [sp, #32]
   82a44:	2800      	cmp	r0, #0
   82a46:	d099      	beq.n	8297c <_vfiprintf_r+0x474>
   82a48:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82a4c:	e796      	b.n	8297c <_vfiprintf_r+0x474>
   82a4e:	f898 2000 	ldrb.w	r2, [r8]
   82a52:	2e00      	cmp	r6, #0
   82a54:	f47f adca 	bne.w	825ec <_vfiprintf_r+0xe4>
   82a58:	2001      	movs	r0, #1
   82a5a:	2620      	movs	r6, #32
   82a5c:	e5c6      	b.n	825ec <_vfiprintf_r+0xe4>
   82a5e:	f043 0301 	orr.w	r3, r3, #1
   82a62:	f898 2000 	ldrb.w	r2, [r8]
   82a66:	e5c1      	b.n	825ec <_vfiprintf_r+0xe4>
   82a68:	9508      	str	r5, [sp, #32]
   82a6a:	2800      	cmp	r0, #0
   82a6c:	f040 8380 	bne.w	83170 <_vfiprintf_r+0xc68>
   82a70:	492b      	ldr	r1, [pc, #172]	; (82b20 <_vfiprintf_r+0x618>)
   82a72:	910b      	str	r1, [sp, #44]	; 0x2c
   82a74:	069f      	lsls	r7, r3, #26
   82a76:	f100 82e5 	bmi.w	83044 <_vfiprintf_r+0xb3c>
   82a7a:	9807      	ldr	r0, [sp, #28]
   82a7c:	06de      	lsls	r6, r3, #27
   82a7e:	4601      	mov	r1, r0
   82a80:	f100 826f 	bmi.w	82f62 <_vfiprintf_r+0xa5a>
   82a84:	065d      	lsls	r5, r3, #25
   82a86:	f140 826c 	bpl.w	82f62 <_vfiprintf_r+0xa5a>
   82a8a:	2700      	movs	r7, #0
   82a8c:	3104      	adds	r1, #4
   82a8e:	8806      	ldrh	r6, [r0, #0]
   82a90:	9107      	str	r1, [sp, #28]
   82a92:	07d8      	lsls	r0, r3, #31
   82a94:	f140 8220 	bpl.w	82ed8 <_vfiprintf_r+0x9d0>
   82a98:	ea56 0107 	orrs.w	r1, r6, r7
   82a9c:	f000 821c 	beq.w	82ed8 <_vfiprintf_r+0x9d0>
   82aa0:	2130      	movs	r1, #48	; 0x30
   82aa2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82aa6:	f043 0302 	orr.w	r3, r3, #2
   82aaa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82aae:	2202      	movs	r2, #2
   82ab0:	e663      	b.n	8277a <_vfiprintf_r+0x272>
   82ab2:	9508      	str	r5, [sp, #32]
   82ab4:	2800      	cmp	r0, #0
   82ab6:	f040 8355 	bne.w	83164 <_vfiprintf_r+0xc5c>
   82aba:	491a      	ldr	r1, [pc, #104]	; (82b24 <_vfiprintf_r+0x61c>)
   82abc:	910b      	str	r1, [sp, #44]	; 0x2c
   82abe:	e7d9      	b.n	82a74 <_vfiprintf_r+0x56c>
   82ac0:	2201      	movs	r2, #1
   82ac2:	9807      	ldr	r0, [sp, #28]
   82ac4:	4611      	mov	r1, r2
   82ac6:	9201      	str	r2, [sp, #4]
   82ac8:	6802      	ldr	r2, [r0, #0]
   82aca:	f04f 0400 	mov.w	r4, #0
   82ace:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82ad2:	4602      	mov	r2, r0
   82ad4:	3204      	adds	r2, #4
   82ad6:	9508      	str	r5, [sp, #32]
   82ad8:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82adc:	9105      	str	r1, [sp, #20]
   82ade:	9207      	str	r2, [sp, #28]
   82ae0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82ae4:	9302      	str	r3, [sp, #8]
   82ae6:	2400      	movs	r4, #0
   82ae8:	e66e      	b.n	827c8 <_vfiprintf_r+0x2c0>
   82aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82aee:	f898 2000 	ldrb.w	r2, [r8]
   82af2:	e57b      	b.n	825ec <_vfiprintf_r+0xe4>
   82af4:	f898 2000 	ldrb.w	r2, [r8]
   82af8:	2a6c      	cmp	r2, #108	; 0x6c
   82afa:	bf03      	ittte	eq
   82afc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82b00:	f043 0320 	orreq.w	r3, r3, #32
   82b04:	f108 0801 	addeq.w	r8, r8, #1
   82b08:	f043 0310 	orrne.w	r3, r3, #16
   82b0c:	e56e      	b.n	825ec <_vfiprintf_r+0xe4>
   82b0e:	f898 2000 	ldrb.w	r2, [r8]
   82b12:	2001      	movs	r0, #1
   82b14:	262b      	movs	r6, #43	; 0x2b
   82b16:	e569      	b.n	825ec <_vfiprintf_r+0xe4>
   82b18:	00084fb4 	.word	0x00084fb4
   82b1c:	00084fc4 	.word	0x00084fc4
   82b20:	00084f98 	.word	0x00084f98
   82b24:	00084f84 	.word	0x00084f84
   82b28:	f04f 0200 	mov.w	r2, #0
   82b2c:	9907      	ldr	r1, [sp, #28]
   82b2e:	9508      	str	r5, [sp, #32]
   82b30:	f8d1 b000 	ldr.w	fp, [r1]
   82b34:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82b38:	1d0d      	adds	r5, r1, #4
   82b3a:	f1bb 0f00 	cmp.w	fp, #0
   82b3e:	f000 82e4 	beq.w	8310a <_vfiprintf_r+0xc02>
   82b42:	1c67      	adds	r7, r4, #1
   82b44:	f000 82c3 	beq.w	830ce <_vfiprintf_r+0xbc6>
   82b48:	4622      	mov	r2, r4
   82b4a:	2100      	movs	r1, #0
   82b4c:	4658      	mov	r0, fp
   82b4e:	9301      	str	r3, [sp, #4]
   82b50:	f001 fbbe 	bl	842d0 <memchr>
   82b54:	9b01      	ldr	r3, [sp, #4]
   82b56:	2800      	cmp	r0, #0
   82b58:	f000 82e8 	beq.w	8312c <_vfiprintf_r+0xc24>
   82b5c:	eba0 020b 	sub.w	r2, r0, fp
   82b60:	9507      	str	r5, [sp, #28]
   82b62:	9205      	str	r2, [sp, #20]
   82b64:	9302      	str	r3, [sp, #8]
   82b66:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82b6a:	2400      	movs	r4, #0
   82b6c:	e624      	b.n	827b8 <_vfiprintf_r+0x2b0>
   82b6e:	f898 2000 	ldrb.w	r2, [r8]
   82b72:	f108 0701 	add.w	r7, r8, #1
   82b76:	2a2a      	cmp	r2, #42	; 0x2a
   82b78:	f000 82e9 	beq.w	8314e <_vfiprintf_r+0xc46>
   82b7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82b80:	2909      	cmp	r1, #9
   82b82:	46b8      	mov	r8, r7
   82b84:	f04f 0400 	mov.w	r4, #0
   82b88:	f63f ad32 	bhi.w	825f0 <_vfiprintf_r+0xe8>
   82b8c:	f818 2b01 	ldrb.w	r2, [r8], #1
   82b90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82b94:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82b98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82b9c:	2909      	cmp	r1, #9
   82b9e:	d9f5      	bls.n	82b8c <_vfiprintf_r+0x684>
   82ba0:	e526      	b.n	825f0 <_vfiprintf_r+0xe8>
   82ba2:	f043 0320 	orr.w	r3, r3, #32
   82ba6:	f898 2000 	ldrb.w	r2, [r8]
   82baa:	e51f      	b.n	825ec <_vfiprintf_r+0xe4>
   82bac:	9508      	str	r5, [sp, #32]
   82bae:	2800      	cmp	r0, #0
   82bb0:	f040 82db 	bne.w	8316a <_vfiprintf_r+0xc62>
   82bb4:	2a00      	cmp	r2, #0
   82bb6:	f000 80f1 	beq.w	82d9c <_vfiprintf_r+0x894>
   82bba:	2101      	movs	r1, #1
   82bbc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82bc0:	f04f 0200 	mov.w	r2, #0
   82bc4:	9101      	str	r1, [sp, #4]
   82bc6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82bca:	9105      	str	r1, [sp, #20]
   82bcc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82bd0:	e788      	b.n	82ae4 <_vfiprintf_r+0x5dc>
   82bd2:	9a07      	ldr	r2, [sp, #28]
   82bd4:	6813      	ldr	r3, [r2, #0]
   82bd6:	3204      	adds	r2, #4
   82bd8:	9207      	str	r2, [sp, #28]
   82bda:	9a03      	ldr	r2, [sp, #12]
   82bdc:	601a      	str	r2, [r3, #0]
   82bde:	e4d0      	b.n	82582 <_vfiprintf_r+0x7a>
   82be0:	aa0f      	add	r2, sp, #60	; 0x3c
   82be2:	9904      	ldr	r1, [sp, #16]
   82be4:	4620      	mov	r0, r4
   82be6:	f7ff fc4f 	bl	82488 <__sprint_r.part.0>
   82bea:	2800      	cmp	r0, #0
   82bec:	f040 8143 	bne.w	82e76 <_vfiprintf_r+0x96e>
   82bf0:	9910      	ldr	r1, [sp, #64]	; 0x40
   82bf2:	46d6      	mov	lr, sl
   82bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82bf6:	f101 0c01 	add.w	ip, r1, #1
   82bfa:	e60a      	b.n	82812 <_vfiprintf_r+0x30a>
   82bfc:	aa0f      	add	r2, sp, #60	; 0x3c
   82bfe:	9904      	ldr	r1, [sp, #16]
   82c00:	9806      	ldr	r0, [sp, #24]
   82c02:	f7ff fc41 	bl	82488 <__sprint_r.part.0>
   82c06:	2800      	cmp	r0, #0
   82c08:	f040 8135 	bne.w	82e76 <_vfiprintf_r+0x96e>
   82c0c:	46d1      	mov	r9, sl
   82c0e:	9910      	ldr	r1, [sp, #64]	; 0x40
   82c10:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c16:	1c48      	adds	r0, r1, #1
   82c18:	2d00      	cmp	r5, #0
   82c1a:	f43f ae24 	beq.w	82866 <_vfiprintf_r+0x35e>
   82c1e:	2101      	movs	r1, #1
   82c20:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82c24:	440a      	add	r2, r1
   82c26:	2807      	cmp	r0, #7
   82c28:	9211      	str	r2, [sp, #68]	; 0x44
   82c2a:	9010      	str	r0, [sp, #64]	; 0x40
   82c2c:	f8c9 1004 	str.w	r1, [r9, #4]
   82c30:	f8c9 5000 	str.w	r5, [r9]
   82c34:	f340 8109 	ble.w	82e4a <_vfiprintf_r+0x942>
   82c38:	2a00      	cmp	r2, #0
   82c3a:	f040 81af 	bne.w	82f9c <_vfiprintf_r+0xa94>
   82c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82c40:	2b00      	cmp	r3, #0
   82c42:	f43f ae23 	beq.w	8288c <_vfiprintf_r+0x384>
   82c46:	2202      	movs	r2, #2
   82c48:	4608      	mov	r0, r1
   82c4a:	46d1      	mov	r9, sl
   82c4c:	ab0e      	add	r3, sp, #56	; 0x38
   82c4e:	921d      	str	r2, [sp, #116]	; 0x74
   82c50:	931c      	str	r3, [sp, #112]	; 0x70
   82c52:	4601      	mov	r1, r0
   82c54:	f109 0908 	add.w	r9, r9, #8
   82c58:	3001      	adds	r0, #1
   82c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82c5c:	2b80      	cmp	r3, #128	; 0x80
   82c5e:	f43f ae1c 	beq.w	8289a <_vfiprintf_r+0x392>
   82c62:	9b05      	ldr	r3, [sp, #20]
   82c64:	1ae4      	subs	r4, r4, r3
   82c66:	2c00      	cmp	r4, #0
   82c68:	dd2f      	ble.n	82cca <_vfiprintf_r+0x7c2>
   82c6a:	2c10      	cmp	r4, #16
   82c6c:	f340 8220 	ble.w	830b0 <_vfiprintf_r+0xba8>
   82c70:	46ce      	mov	lr, r9
   82c72:	2610      	movs	r6, #16
   82c74:	4db2      	ldr	r5, [pc, #712]	; (82f40 <_vfiprintf_r+0xa38>)
   82c76:	9f06      	ldr	r7, [sp, #24]
   82c78:	f8dd 9010 	ldr.w	r9, [sp, #16]
   82c7c:	e006      	b.n	82c8c <_vfiprintf_r+0x784>
   82c7e:	1c88      	adds	r0, r1, #2
   82c80:	4619      	mov	r1, r3
   82c82:	f10e 0e08 	add.w	lr, lr, #8
   82c86:	3c10      	subs	r4, #16
   82c88:	2c10      	cmp	r4, #16
   82c8a:	dd10      	ble.n	82cae <_vfiprintf_r+0x7a6>
   82c8c:	1c4b      	adds	r3, r1, #1
   82c8e:	3210      	adds	r2, #16
   82c90:	2b07      	cmp	r3, #7
   82c92:	9211      	str	r2, [sp, #68]	; 0x44
   82c94:	e88e 0060 	stmia.w	lr, {r5, r6}
   82c98:	9310      	str	r3, [sp, #64]	; 0x40
   82c9a:	ddf0      	ble.n	82c7e <_vfiprintf_r+0x776>
   82c9c:	2a00      	cmp	r2, #0
   82c9e:	d165      	bne.n	82d6c <_vfiprintf_r+0x864>
   82ca0:	3c10      	subs	r4, #16
   82ca2:	2c10      	cmp	r4, #16
   82ca4:	f04f 0001 	mov.w	r0, #1
   82ca8:	4611      	mov	r1, r2
   82caa:	46d6      	mov	lr, sl
   82cac:	dcee      	bgt.n	82c8c <_vfiprintf_r+0x784>
   82cae:	46f1      	mov	r9, lr
   82cb0:	4422      	add	r2, r4
   82cb2:	2807      	cmp	r0, #7
   82cb4:	9211      	str	r2, [sp, #68]	; 0x44
   82cb6:	f8c9 5000 	str.w	r5, [r9]
   82cba:	f8c9 4004 	str.w	r4, [r9, #4]
   82cbe:	9010      	str	r0, [sp, #64]	; 0x40
   82cc0:	f300 8085 	bgt.w	82dce <_vfiprintf_r+0x8c6>
   82cc4:	f109 0908 	add.w	r9, r9, #8
   82cc8:	3001      	adds	r0, #1
   82cca:	9905      	ldr	r1, [sp, #20]
   82ccc:	2807      	cmp	r0, #7
   82cce:	440a      	add	r2, r1
   82cd0:	9211      	str	r2, [sp, #68]	; 0x44
   82cd2:	f8c9 b000 	str.w	fp, [r9]
   82cd6:	f8c9 1004 	str.w	r1, [r9, #4]
   82cda:	9010      	str	r0, [sp, #64]	; 0x40
   82cdc:	f340 8082 	ble.w	82de4 <_vfiprintf_r+0x8dc>
   82ce0:	2a00      	cmp	r2, #0
   82ce2:	f040 8118 	bne.w	82f16 <_vfiprintf_r+0xa0e>
   82ce6:	9b02      	ldr	r3, [sp, #8]
   82ce8:	9210      	str	r2, [sp, #64]	; 0x40
   82cea:	0758      	lsls	r0, r3, #29
   82cec:	d535      	bpl.n	82d5a <_vfiprintf_r+0x852>
   82cee:	9b08      	ldr	r3, [sp, #32]
   82cf0:	9901      	ldr	r1, [sp, #4]
   82cf2:	1a5c      	subs	r4, r3, r1
   82cf4:	2c00      	cmp	r4, #0
   82cf6:	f340 80e7 	ble.w	82ec8 <_vfiprintf_r+0x9c0>
   82cfa:	46d1      	mov	r9, sl
   82cfc:	2c10      	cmp	r4, #16
   82cfe:	f340 820d 	ble.w	8311c <_vfiprintf_r+0xc14>
   82d02:	2510      	movs	r5, #16
   82d04:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d06:	4e8f      	ldr	r6, [pc, #572]	; (82f44 <_vfiprintf_r+0xa3c>)
   82d08:	9f06      	ldr	r7, [sp, #24]
   82d0a:	f8dd b010 	ldr.w	fp, [sp, #16]
   82d0e:	e006      	b.n	82d1e <_vfiprintf_r+0x816>
   82d10:	1c88      	adds	r0, r1, #2
   82d12:	4619      	mov	r1, r3
   82d14:	f109 0908 	add.w	r9, r9, #8
   82d18:	3c10      	subs	r4, #16
   82d1a:	2c10      	cmp	r4, #16
   82d1c:	dd11      	ble.n	82d42 <_vfiprintf_r+0x83a>
   82d1e:	1c4b      	adds	r3, r1, #1
   82d20:	3210      	adds	r2, #16
   82d22:	2b07      	cmp	r3, #7
   82d24:	9211      	str	r2, [sp, #68]	; 0x44
   82d26:	f8c9 6000 	str.w	r6, [r9]
   82d2a:	f8c9 5004 	str.w	r5, [r9, #4]
   82d2e:	9310      	str	r3, [sp, #64]	; 0x40
   82d30:	ddee      	ble.n	82d10 <_vfiprintf_r+0x808>
   82d32:	bb42      	cbnz	r2, 82d86 <_vfiprintf_r+0x87e>
   82d34:	3c10      	subs	r4, #16
   82d36:	2c10      	cmp	r4, #16
   82d38:	f04f 0001 	mov.w	r0, #1
   82d3c:	4611      	mov	r1, r2
   82d3e:	46d1      	mov	r9, sl
   82d40:	dced      	bgt.n	82d1e <_vfiprintf_r+0x816>
   82d42:	4422      	add	r2, r4
   82d44:	2807      	cmp	r0, #7
   82d46:	9211      	str	r2, [sp, #68]	; 0x44
   82d48:	f8c9 6000 	str.w	r6, [r9]
   82d4c:	f8c9 4004 	str.w	r4, [r9, #4]
   82d50:	9010      	str	r0, [sp, #64]	; 0x40
   82d52:	dd51      	ble.n	82df8 <_vfiprintf_r+0x8f0>
   82d54:	2a00      	cmp	r2, #0
   82d56:	f040 819a 	bne.w	8308e <_vfiprintf_r+0xb86>
   82d5a:	9b03      	ldr	r3, [sp, #12]
   82d5c:	9a08      	ldr	r2, [sp, #32]
   82d5e:	9901      	ldr	r1, [sp, #4]
   82d60:	428a      	cmp	r2, r1
   82d62:	bfac      	ite	ge
   82d64:	189b      	addge	r3, r3, r2
   82d66:	185b      	addlt	r3, r3, r1
   82d68:	9303      	str	r3, [sp, #12]
   82d6a:	e04e      	b.n	82e0a <_vfiprintf_r+0x902>
   82d6c:	aa0f      	add	r2, sp, #60	; 0x3c
   82d6e:	4649      	mov	r1, r9
   82d70:	4638      	mov	r0, r7
   82d72:	f7ff fb89 	bl	82488 <__sprint_r.part.0>
   82d76:	2800      	cmp	r0, #0
   82d78:	f040 813e 	bne.w	82ff8 <_vfiprintf_r+0xaf0>
   82d7c:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d7e:	46d6      	mov	lr, sl
   82d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d82:	1c48      	adds	r0, r1, #1
   82d84:	e77f      	b.n	82c86 <_vfiprintf_r+0x77e>
   82d86:	aa0f      	add	r2, sp, #60	; 0x3c
   82d88:	4659      	mov	r1, fp
   82d8a:	4638      	mov	r0, r7
   82d8c:	f7ff fb7c 	bl	82488 <__sprint_r.part.0>
   82d90:	b960      	cbnz	r0, 82dac <_vfiprintf_r+0x8a4>
   82d92:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d94:	46d1      	mov	r9, sl
   82d96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d98:	1c48      	adds	r0, r1, #1
   82d9a:	e7bd      	b.n	82d18 <_vfiprintf_r+0x810>
   82d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82d9e:	f8dd b010 	ldr.w	fp, [sp, #16]
   82da2:	2b00      	cmp	r3, #0
   82da4:	f040 81ca 	bne.w	8313c <_vfiprintf_r+0xc34>
   82da8:	2300      	movs	r3, #0
   82daa:	9310      	str	r3, [sp, #64]	; 0x40
   82dac:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82db0:	f013 0f01 	tst.w	r3, #1
   82db4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82db8:	d102      	bne.n	82dc0 <_vfiprintf_r+0x8b8>
   82dba:	059a      	lsls	r2, r3, #22
   82dbc:	f140 80dd 	bpl.w	82f7a <_vfiprintf_r+0xa72>
   82dc0:	065b      	lsls	r3, r3, #25
   82dc2:	f53f acad 	bmi.w	82720 <_vfiprintf_r+0x218>
   82dc6:	9803      	ldr	r0, [sp, #12]
   82dc8:	b02d      	add	sp, #180	; 0xb4
   82dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82dce:	2a00      	cmp	r2, #0
   82dd0:	f040 8105 	bne.w	82fde <_vfiprintf_r+0xad6>
   82dd4:	2301      	movs	r3, #1
   82dd6:	46d1      	mov	r9, sl
   82dd8:	9a05      	ldr	r2, [sp, #20]
   82dda:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   82dde:	921d      	str	r2, [sp, #116]	; 0x74
   82de0:	9211      	str	r2, [sp, #68]	; 0x44
   82de2:	9310      	str	r3, [sp, #64]	; 0x40
   82de4:	f109 0908 	add.w	r9, r9, #8
   82de8:	9b02      	ldr	r3, [sp, #8]
   82dea:	0759      	lsls	r1, r3, #29
   82dec:	d504      	bpl.n	82df8 <_vfiprintf_r+0x8f0>
   82dee:	9b08      	ldr	r3, [sp, #32]
   82df0:	9901      	ldr	r1, [sp, #4]
   82df2:	1a5c      	subs	r4, r3, r1
   82df4:	2c00      	cmp	r4, #0
   82df6:	dc81      	bgt.n	82cfc <_vfiprintf_r+0x7f4>
   82df8:	9b03      	ldr	r3, [sp, #12]
   82dfa:	9908      	ldr	r1, [sp, #32]
   82dfc:	9801      	ldr	r0, [sp, #4]
   82dfe:	4281      	cmp	r1, r0
   82e00:	bfac      	ite	ge
   82e02:	185b      	addge	r3, r3, r1
   82e04:	181b      	addlt	r3, r3, r0
   82e06:	9303      	str	r3, [sp, #12]
   82e08:	bb72      	cbnz	r2, 82e68 <_vfiprintf_r+0x960>
   82e0a:	2300      	movs	r3, #0
   82e0c:	46d1      	mov	r9, sl
   82e0e:	9310      	str	r3, [sp, #64]	; 0x40
   82e10:	f7ff bbb7 	b.w	82582 <_vfiprintf_r+0x7a>
   82e14:	aa0f      	add	r2, sp, #60	; 0x3c
   82e16:	9904      	ldr	r1, [sp, #16]
   82e18:	4620      	mov	r0, r4
   82e1a:	f7ff fb35 	bl	82488 <__sprint_r.part.0>
   82e1e:	bb50      	cbnz	r0, 82e76 <_vfiprintf_r+0x96e>
   82e20:	9910      	ldr	r1, [sp, #64]	; 0x40
   82e22:	46d4      	mov	ip, sl
   82e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82e26:	f101 0e01 	add.w	lr, r1, #1
   82e2a:	e54a      	b.n	828c2 <_vfiprintf_r+0x3ba>
   82e2c:	2a00      	cmp	r2, #0
   82e2e:	f47f aee5 	bne.w	82bfc <_vfiprintf_r+0x6f4>
   82e32:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82e36:	2900      	cmp	r1, #0
   82e38:	f000 811a 	beq.w	83070 <_vfiprintf_r+0xb68>
   82e3c:	2201      	movs	r2, #1
   82e3e:	46d1      	mov	r9, sl
   82e40:	4610      	mov	r0, r2
   82e42:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82e46:	921d      	str	r2, [sp, #116]	; 0x74
   82e48:	911c      	str	r1, [sp, #112]	; 0x70
   82e4a:	4601      	mov	r1, r0
   82e4c:	f109 0908 	add.w	r9, r9, #8
   82e50:	3001      	adds	r0, #1
   82e52:	e508      	b.n	82866 <_vfiprintf_r+0x35e>
   82e54:	9b02      	ldr	r3, [sp, #8]
   82e56:	2a01      	cmp	r2, #1
   82e58:	f000 8097 	beq.w	82f8a <_vfiprintf_r+0xa82>
   82e5c:	2a02      	cmp	r2, #2
   82e5e:	d10d      	bne.n	82e7c <_vfiprintf_r+0x974>
   82e60:	9302      	str	r3, [sp, #8]
   82e62:	2600      	movs	r6, #0
   82e64:	2700      	movs	r7, #0
   82e66:	e5b2      	b.n	829ce <_vfiprintf_r+0x4c6>
   82e68:	aa0f      	add	r2, sp, #60	; 0x3c
   82e6a:	9904      	ldr	r1, [sp, #16]
   82e6c:	9806      	ldr	r0, [sp, #24]
   82e6e:	f7ff fb0b 	bl	82488 <__sprint_r.part.0>
   82e72:	2800      	cmp	r0, #0
   82e74:	d0c9      	beq.n	82e0a <_vfiprintf_r+0x902>
   82e76:	f8dd b010 	ldr.w	fp, [sp, #16]
   82e7a:	e797      	b.n	82dac <_vfiprintf_r+0x8a4>
   82e7c:	2600      	movs	r6, #0
   82e7e:	2700      	movs	r7, #0
   82e80:	9302      	str	r3, [sp, #8]
   82e82:	4651      	mov	r1, sl
   82e84:	e000      	b.n	82e88 <_vfiprintf_r+0x980>
   82e86:	4659      	mov	r1, fp
   82e88:	08f2      	lsrs	r2, r6, #3
   82e8a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82e8e:	08f8      	lsrs	r0, r7, #3
   82e90:	f006 0307 	and.w	r3, r6, #7
   82e94:	4607      	mov	r7, r0
   82e96:	4616      	mov	r6, r2
   82e98:	3330      	adds	r3, #48	; 0x30
   82e9a:	ea56 0207 	orrs.w	r2, r6, r7
   82e9e:	f801 3c01 	strb.w	r3, [r1, #-1]
   82ea2:	f101 3bff 	add.w	fp, r1, #4294967295
   82ea6:	d1ee      	bne.n	82e86 <_vfiprintf_r+0x97e>
   82ea8:	9a02      	ldr	r2, [sp, #8]
   82eaa:	07d6      	lsls	r6, r2, #31
   82eac:	f57f ad9f 	bpl.w	829ee <_vfiprintf_r+0x4e6>
   82eb0:	2b30      	cmp	r3, #48	; 0x30
   82eb2:	f43f ad9c 	beq.w	829ee <_vfiprintf_r+0x4e6>
   82eb6:	2330      	movs	r3, #48	; 0x30
   82eb8:	3902      	subs	r1, #2
   82eba:	f80b 3c01 	strb.w	r3, [fp, #-1]
   82ebe:	ebaa 0301 	sub.w	r3, sl, r1
   82ec2:	9305      	str	r3, [sp, #20]
   82ec4:	468b      	mov	fp, r1
   82ec6:	e477      	b.n	827b8 <_vfiprintf_r+0x2b0>
   82ec8:	9b03      	ldr	r3, [sp, #12]
   82eca:	9a08      	ldr	r2, [sp, #32]
   82ecc:	428a      	cmp	r2, r1
   82ece:	bfac      	ite	ge
   82ed0:	189b      	addge	r3, r3, r2
   82ed2:	185b      	addlt	r3, r3, r1
   82ed4:	9303      	str	r3, [sp, #12]
   82ed6:	e798      	b.n	82e0a <_vfiprintf_r+0x902>
   82ed8:	2202      	movs	r2, #2
   82eda:	e44e      	b.n	8277a <_vfiprintf_r+0x272>
   82edc:	2f00      	cmp	r7, #0
   82ede:	bf08      	it	eq
   82ee0:	2e0a      	cmpeq	r6, #10
   82ee2:	d351      	bcc.n	82f88 <_vfiprintf_r+0xa80>
   82ee4:	46d3      	mov	fp, sl
   82ee6:	4630      	mov	r0, r6
   82ee8:	4639      	mov	r1, r7
   82eea:	220a      	movs	r2, #10
   82eec:	2300      	movs	r3, #0
   82eee:	f001 fe7d 	bl	84bec <__aeabi_uldivmod>
   82ef2:	3230      	adds	r2, #48	; 0x30
   82ef4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82ef8:	4630      	mov	r0, r6
   82efa:	4639      	mov	r1, r7
   82efc:	2300      	movs	r3, #0
   82efe:	220a      	movs	r2, #10
   82f00:	f001 fe74 	bl	84bec <__aeabi_uldivmod>
   82f04:	4606      	mov	r6, r0
   82f06:	460f      	mov	r7, r1
   82f08:	ea56 0307 	orrs.w	r3, r6, r7
   82f0c:	d1eb      	bne.n	82ee6 <_vfiprintf_r+0x9de>
   82f0e:	e56e      	b.n	829ee <_vfiprintf_r+0x4e6>
   82f10:	9405      	str	r4, [sp, #20]
   82f12:	46d3      	mov	fp, sl
   82f14:	e450      	b.n	827b8 <_vfiprintf_r+0x2b0>
   82f16:	aa0f      	add	r2, sp, #60	; 0x3c
   82f18:	9904      	ldr	r1, [sp, #16]
   82f1a:	9806      	ldr	r0, [sp, #24]
   82f1c:	f7ff fab4 	bl	82488 <__sprint_r.part.0>
   82f20:	2800      	cmp	r0, #0
   82f22:	d1a8      	bne.n	82e76 <_vfiprintf_r+0x96e>
   82f24:	46d1      	mov	r9, sl
   82f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82f28:	e75e      	b.n	82de8 <_vfiprintf_r+0x8e0>
   82f2a:	aa0f      	add	r2, sp, #60	; 0x3c
   82f2c:	9904      	ldr	r1, [sp, #16]
   82f2e:	9806      	ldr	r0, [sp, #24]
   82f30:	f7ff faaa 	bl	82488 <__sprint_r.part.0>
   82f34:	2800      	cmp	r0, #0
   82f36:	d19e      	bne.n	82e76 <_vfiprintf_r+0x96e>
   82f38:	46d1      	mov	r9, sl
   82f3a:	f7ff bbbb 	b.w	826b4 <_vfiprintf_r+0x1ac>
   82f3e:	bf00      	nop
   82f40:	00084fc4 	.word	0x00084fc4
   82f44:	00084fb4 	.word	0x00084fb4
   82f48:	3104      	adds	r1, #4
   82f4a:	6816      	ldr	r6, [r2, #0]
   82f4c:	2700      	movs	r7, #0
   82f4e:	2201      	movs	r2, #1
   82f50:	9107      	str	r1, [sp, #28]
   82f52:	e412      	b.n	8277a <_vfiprintf_r+0x272>
   82f54:	9807      	ldr	r0, [sp, #28]
   82f56:	2700      	movs	r7, #0
   82f58:	4601      	mov	r1, r0
   82f5a:	3104      	adds	r1, #4
   82f5c:	6806      	ldr	r6, [r0, #0]
   82f5e:	9107      	str	r1, [sp, #28]
   82f60:	e40b      	b.n	8277a <_vfiprintf_r+0x272>
   82f62:	680e      	ldr	r6, [r1, #0]
   82f64:	3104      	adds	r1, #4
   82f66:	9107      	str	r1, [sp, #28]
   82f68:	2700      	movs	r7, #0
   82f6a:	e592      	b.n	82a92 <_vfiprintf_r+0x58a>
   82f6c:	6816      	ldr	r6, [r2, #0]
   82f6e:	3204      	adds	r2, #4
   82f70:	17f7      	asrs	r7, r6, #31
   82f72:	9207      	str	r2, [sp, #28]
   82f74:	4630      	mov	r0, r6
   82f76:	4639      	mov	r1, r7
   82f78:	e512      	b.n	829a0 <_vfiprintf_r+0x498>
   82f7a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82f7e:	f000 fe75 	bl	83c6c <__retarget_lock_release_recursive>
   82f82:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82f86:	e71b      	b.n	82dc0 <_vfiprintf_r+0x8b8>
   82f88:	9b02      	ldr	r3, [sp, #8]
   82f8a:	9302      	str	r3, [sp, #8]
   82f8c:	2301      	movs	r3, #1
   82f8e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82f92:	3630      	adds	r6, #48	; 0x30
   82f94:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82f98:	9305      	str	r3, [sp, #20]
   82f9a:	e40d      	b.n	827b8 <_vfiprintf_r+0x2b0>
   82f9c:	aa0f      	add	r2, sp, #60	; 0x3c
   82f9e:	9904      	ldr	r1, [sp, #16]
   82fa0:	9806      	ldr	r0, [sp, #24]
   82fa2:	f7ff fa71 	bl	82488 <__sprint_r.part.0>
   82fa6:	2800      	cmp	r0, #0
   82fa8:	f47f af65 	bne.w	82e76 <_vfiprintf_r+0x96e>
   82fac:	9910      	ldr	r1, [sp, #64]	; 0x40
   82fae:	46d1      	mov	r9, sl
   82fb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fb2:	1c48      	adds	r0, r1, #1
   82fb4:	e457      	b.n	82866 <_vfiprintf_r+0x35e>
   82fb6:	aa0f      	add	r2, sp, #60	; 0x3c
   82fb8:	9904      	ldr	r1, [sp, #16]
   82fba:	9806      	ldr	r0, [sp, #24]
   82fbc:	f7ff fa64 	bl	82488 <__sprint_r.part.0>
   82fc0:	2800      	cmp	r0, #0
   82fc2:	f47f af58 	bne.w	82e76 <_vfiprintf_r+0x96e>
   82fc6:	9910      	ldr	r1, [sp, #64]	; 0x40
   82fc8:	46d1      	mov	r9, sl
   82fca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fcc:	1c48      	adds	r0, r1, #1
   82fce:	e644      	b.n	82c5a <_vfiprintf_r+0x752>
   82fd0:	2a00      	cmp	r2, #0
   82fd2:	f040 8087 	bne.w	830e4 <_vfiprintf_r+0xbdc>
   82fd6:	2001      	movs	r0, #1
   82fd8:	4611      	mov	r1, r2
   82fda:	46d1      	mov	r9, sl
   82fdc:	e641      	b.n	82c62 <_vfiprintf_r+0x75a>
   82fde:	aa0f      	add	r2, sp, #60	; 0x3c
   82fe0:	9904      	ldr	r1, [sp, #16]
   82fe2:	9806      	ldr	r0, [sp, #24]
   82fe4:	f7ff fa50 	bl	82488 <__sprint_r.part.0>
   82fe8:	2800      	cmp	r0, #0
   82fea:	f47f af44 	bne.w	82e76 <_vfiprintf_r+0x96e>
   82fee:	9810      	ldr	r0, [sp, #64]	; 0x40
   82ff0:	46d1      	mov	r9, sl
   82ff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ff4:	3001      	adds	r0, #1
   82ff6:	e668      	b.n	82cca <_vfiprintf_r+0x7c2>
   82ff8:	46cb      	mov	fp, r9
   82ffa:	e6d7      	b.n	82dac <_vfiprintf_r+0x8a4>
   82ffc:	9d07      	ldr	r5, [sp, #28]
   82ffe:	3507      	adds	r5, #7
   83000:	f025 0507 	bic.w	r5, r5, #7
   83004:	f105 0208 	add.w	r2, r5, #8
   83008:	e9d5 0100 	ldrd	r0, r1, [r5]
   8300c:	9207      	str	r2, [sp, #28]
   8300e:	4606      	mov	r6, r0
   83010:	460f      	mov	r7, r1
   83012:	e4c5      	b.n	829a0 <_vfiprintf_r+0x498>
   83014:	9d07      	ldr	r5, [sp, #28]
   83016:	3507      	adds	r5, #7
   83018:	f025 0207 	bic.w	r2, r5, #7
   8301c:	f102 0108 	add.w	r1, r2, #8
   83020:	e9d2 6700 	ldrd	r6, r7, [r2]
   83024:	9107      	str	r1, [sp, #28]
   83026:	2201      	movs	r2, #1
   83028:	f7ff bba7 	b.w	8277a <_vfiprintf_r+0x272>
   8302c:	9d07      	ldr	r5, [sp, #28]
   8302e:	3507      	adds	r5, #7
   83030:	f025 0207 	bic.w	r2, r5, #7
   83034:	f102 0108 	add.w	r1, r2, #8
   83038:	e9d2 6700 	ldrd	r6, r7, [r2]
   8303c:	9107      	str	r1, [sp, #28]
   8303e:	2200      	movs	r2, #0
   83040:	f7ff bb9b 	b.w	8277a <_vfiprintf_r+0x272>
   83044:	9d07      	ldr	r5, [sp, #28]
   83046:	3507      	adds	r5, #7
   83048:	f025 0107 	bic.w	r1, r5, #7
   8304c:	f101 0008 	add.w	r0, r1, #8
   83050:	9007      	str	r0, [sp, #28]
   83052:	e9d1 6700 	ldrd	r6, r7, [r1]
   83056:	e51c      	b.n	82a92 <_vfiprintf_r+0x58a>
   83058:	46d3      	mov	fp, sl
   8305a:	f7ff bbad 	b.w	827b8 <_vfiprintf_r+0x2b0>
   8305e:	252d      	movs	r5, #45	; 0x2d
   83060:	4276      	negs	r6, r6
   83062:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83066:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8306a:	2201      	movs	r2, #1
   8306c:	f7ff bb8a 	b.w	82784 <_vfiprintf_r+0x27c>
   83070:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83072:	b9b3      	cbnz	r3, 830a2 <_vfiprintf_r+0xb9a>
   83074:	4611      	mov	r1, r2
   83076:	2001      	movs	r0, #1
   83078:	46d1      	mov	r9, sl
   8307a:	e5f2      	b.n	82c62 <_vfiprintf_r+0x75a>
   8307c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83080:	f000 fdf4 	bl	83c6c <__retarget_lock_release_recursive>
   83084:	f04f 33ff 	mov.w	r3, #4294967295
   83088:	9303      	str	r3, [sp, #12]
   8308a:	f7ff bb4c 	b.w	82726 <_vfiprintf_r+0x21e>
   8308e:	aa0f      	add	r2, sp, #60	; 0x3c
   83090:	9904      	ldr	r1, [sp, #16]
   83092:	9806      	ldr	r0, [sp, #24]
   83094:	f7ff f9f8 	bl	82488 <__sprint_r.part.0>
   83098:	2800      	cmp	r0, #0
   8309a:	f47f aeec 	bne.w	82e76 <_vfiprintf_r+0x96e>
   8309e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   830a0:	e6aa      	b.n	82df8 <_vfiprintf_r+0x8f0>
   830a2:	2202      	movs	r2, #2
   830a4:	ab0e      	add	r3, sp, #56	; 0x38
   830a6:	921d      	str	r2, [sp, #116]	; 0x74
   830a8:	931c      	str	r3, [sp, #112]	; 0x70
   830aa:	2001      	movs	r0, #1
   830ac:	46d1      	mov	r9, sl
   830ae:	e5d0      	b.n	82c52 <_vfiprintf_r+0x74a>
   830b0:	4d34      	ldr	r5, [pc, #208]	; (83184 <_vfiprintf_r+0xc7c>)
   830b2:	e5fd      	b.n	82cb0 <_vfiprintf_r+0x7a8>
   830b4:	9a07      	ldr	r2, [sp, #28]
   830b6:	4613      	mov	r3, r2
   830b8:	3304      	adds	r3, #4
   830ba:	9307      	str	r3, [sp, #28]
   830bc:	9b03      	ldr	r3, [sp, #12]
   830be:	6811      	ldr	r1, [r2, #0]
   830c0:	17dd      	asrs	r5, r3, #31
   830c2:	461a      	mov	r2, r3
   830c4:	462b      	mov	r3, r5
   830c6:	e9c1 2300 	strd	r2, r3, [r1]
   830ca:	f7ff ba5a 	b.w	82582 <_vfiprintf_r+0x7a>
   830ce:	4658      	mov	r0, fp
   830d0:	9507      	str	r5, [sp, #28]
   830d2:	9302      	str	r3, [sp, #8]
   830d4:	f7ff f9aa 	bl	8242c <strlen>
   830d8:	2400      	movs	r4, #0
   830da:	9005      	str	r0, [sp, #20]
   830dc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   830e0:	f7ff bb6a 	b.w	827b8 <_vfiprintf_r+0x2b0>
   830e4:	aa0f      	add	r2, sp, #60	; 0x3c
   830e6:	9904      	ldr	r1, [sp, #16]
   830e8:	9806      	ldr	r0, [sp, #24]
   830ea:	f7ff f9cd 	bl	82488 <__sprint_r.part.0>
   830ee:	2800      	cmp	r0, #0
   830f0:	f47f aec1 	bne.w	82e76 <_vfiprintf_r+0x96e>
   830f4:	9910      	ldr	r1, [sp, #64]	; 0x40
   830f6:	46d1      	mov	r9, sl
   830f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   830fa:	1c48      	adds	r0, r1, #1
   830fc:	e5b1      	b.n	82c62 <_vfiprintf_r+0x75a>
   830fe:	9910      	ldr	r1, [sp, #64]	; 0x40
   83100:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83102:	3101      	adds	r1, #1
   83104:	4e20      	ldr	r6, [pc, #128]	; (83188 <_vfiprintf_r+0xc80>)
   83106:	f7ff bb9c 	b.w	82842 <_vfiprintf_r+0x33a>
   8310a:	2c06      	cmp	r4, #6
   8310c:	bf28      	it	cs
   8310e:	2406      	movcs	r4, #6
   83110:	9507      	str	r5, [sp, #28]
   83112:	9405      	str	r4, [sp, #20]
   83114:	9401      	str	r4, [sp, #4]
   83116:	f8df b074 	ldr.w	fp, [pc, #116]	; 8318c <_vfiprintf_r+0xc84>
   8311a:	e4e3      	b.n	82ae4 <_vfiprintf_r+0x5dc>
   8311c:	9810      	ldr	r0, [sp, #64]	; 0x40
   8311e:	4e1a      	ldr	r6, [pc, #104]	; (83188 <_vfiprintf_r+0xc80>)
   83120:	3001      	adds	r0, #1
   83122:	e60e      	b.n	82d42 <_vfiprintf_r+0x83a>
   83124:	4686      	mov	lr, r0
   83126:	4d17      	ldr	r5, [pc, #92]	; (83184 <_vfiprintf_r+0xc7c>)
   83128:	f7ff bbe2 	b.w	828f0 <_vfiprintf_r+0x3e8>
   8312c:	9405      	str	r4, [sp, #20]
   8312e:	9507      	str	r5, [sp, #28]
   83130:	9302      	str	r3, [sp, #8]
   83132:	4604      	mov	r4, r0
   83134:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83138:	f7ff bb3e 	b.w	827b8 <_vfiprintf_r+0x2b0>
   8313c:	9806      	ldr	r0, [sp, #24]
   8313e:	aa0f      	add	r2, sp, #60	; 0x3c
   83140:	4659      	mov	r1, fp
   83142:	f7ff f9a1 	bl	82488 <__sprint_r.part.0>
   83146:	2800      	cmp	r0, #0
   83148:	f43f ae2e 	beq.w	82da8 <_vfiprintf_r+0x8a0>
   8314c:	e62e      	b.n	82dac <_vfiprintf_r+0x8a4>
   8314e:	9907      	ldr	r1, [sp, #28]
   83150:	f898 2001 	ldrb.w	r2, [r8, #1]
   83154:	680c      	ldr	r4, [r1, #0]
   83156:	3104      	adds	r1, #4
   83158:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8315c:	46b8      	mov	r8, r7
   8315e:	9107      	str	r1, [sp, #28]
   83160:	f7ff ba44 	b.w	825ec <_vfiprintf_r+0xe4>
   83164:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83168:	e4a7      	b.n	82aba <_vfiprintf_r+0x5b2>
   8316a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8316e:	e521      	b.n	82bb4 <_vfiprintf_r+0x6ac>
   83170:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83174:	e47c      	b.n	82a70 <_vfiprintf_r+0x568>
   83176:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8317a:	e43f      	b.n	829fc <_vfiprintf_r+0x4f4>
   8317c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83180:	f7ff bbfa 	b.w	82978 <_vfiprintf_r+0x470>
   83184:	00084fc4 	.word	0x00084fc4
   83188:	00084fb4 	.word	0x00084fb4
   8318c:	00084fac 	.word	0x00084fac

00083190 <__sbprintf>:
   83190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83194:	460c      	mov	r4, r1
   83196:	f04f 0e00 	mov.w	lr, #0
   8319a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8319e:	4606      	mov	r6, r0
   831a0:	4617      	mov	r7, r2
   831a2:	4698      	mov	r8, r3
   831a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   831a6:	89e3      	ldrh	r3, [r4, #14]
   831a8:	8989      	ldrh	r1, [r1, #12]
   831aa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   831ae:	f021 0102 	bic.w	r1, r1, #2
   831b2:	9219      	str	r2, [sp, #100]	; 0x64
   831b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   831b8:	69e2      	ldr	r2, [r4, #28]
   831ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   831bc:	f8ad 100c 	strh.w	r1, [sp, #12]
   831c0:	a816      	add	r0, sp, #88	; 0x58
   831c2:	a91a      	add	r1, sp, #104	; 0x68
   831c4:	f8cd e018 	str.w	lr, [sp, #24]
   831c8:	9207      	str	r2, [sp, #28]
   831ca:	9309      	str	r3, [sp, #36]	; 0x24
   831cc:	9100      	str	r1, [sp, #0]
   831ce:	9104      	str	r1, [sp, #16]
   831d0:	9502      	str	r5, [sp, #8]
   831d2:	9505      	str	r5, [sp, #20]
   831d4:	f000 fd44 	bl	83c60 <__retarget_lock_init_recursive>
   831d8:	4643      	mov	r3, r8
   831da:	463a      	mov	r2, r7
   831dc:	4669      	mov	r1, sp
   831de:	4630      	mov	r0, r6
   831e0:	f7ff f992 	bl	82508 <_vfiprintf_r>
   831e4:	1e05      	subs	r5, r0, #0
   831e6:	db07      	blt.n	831f8 <__sbprintf+0x68>
   831e8:	4630      	mov	r0, r6
   831ea:	4669      	mov	r1, sp
   831ec:	f000 f924 	bl	83438 <_fflush_r>
   831f0:	2800      	cmp	r0, #0
   831f2:	bf18      	it	ne
   831f4:	f04f 35ff 	movne.w	r5, #4294967295
   831f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   831fc:	065b      	lsls	r3, r3, #25
   831fe:	d503      	bpl.n	83208 <__sbprintf+0x78>
   83200:	89a3      	ldrh	r3, [r4, #12]
   83202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83206:	81a3      	strh	r3, [r4, #12]
   83208:	9816      	ldr	r0, [sp, #88]	; 0x58
   8320a:	f000 fd2b 	bl	83c64 <__retarget_lock_close_recursive>
   8320e:	4628      	mov	r0, r5
   83210:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083218 <__swsetup_r>:
   83218:	b538      	push	{r3, r4, r5, lr}
   8321a:	4b30      	ldr	r3, [pc, #192]	; (832dc <__swsetup_r+0xc4>)
   8321c:	4605      	mov	r5, r0
   8321e:	6818      	ldr	r0, [r3, #0]
   83220:	460c      	mov	r4, r1
   83222:	b110      	cbz	r0, 8322a <__swsetup_r+0x12>
   83224:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83226:	2b00      	cmp	r3, #0
   83228:	d038      	beq.n	8329c <__swsetup_r+0x84>
   8322a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8322e:	b293      	uxth	r3, r2
   83230:	0718      	lsls	r0, r3, #28
   83232:	d50c      	bpl.n	8324e <__swsetup_r+0x36>
   83234:	6920      	ldr	r0, [r4, #16]
   83236:	b1a8      	cbz	r0, 83264 <__swsetup_r+0x4c>
   83238:	f013 0201 	ands.w	r2, r3, #1
   8323c:	d01e      	beq.n	8327c <__swsetup_r+0x64>
   8323e:	2200      	movs	r2, #0
   83240:	6963      	ldr	r3, [r4, #20]
   83242:	60a2      	str	r2, [r4, #8]
   83244:	425b      	negs	r3, r3
   83246:	61a3      	str	r3, [r4, #24]
   83248:	b1f0      	cbz	r0, 83288 <__swsetup_r+0x70>
   8324a:	2000      	movs	r0, #0
   8324c:	bd38      	pop	{r3, r4, r5, pc}
   8324e:	06d9      	lsls	r1, r3, #27
   83250:	d53b      	bpl.n	832ca <__swsetup_r+0xb2>
   83252:	0758      	lsls	r0, r3, #29
   83254:	d425      	bmi.n	832a2 <__swsetup_r+0x8a>
   83256:	6920      	ldr	r0, [r4, #16]
   83258:	f042 0308 	orr.w	r3, r2, #8
   8325c:	81a3      	strh	r3, [r4, #12]
   8325e:	b29b      	uxth	r3, r3
   83260:	2800      	cmp	r0, #0
   83262:	d1e9      	bne.n	83238 <__swsetup_r+0x20>
   83264:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83268:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8326c:	d0e4      	beq.n	83238 <__swsetup_r+0x20>
   8326e:	4628      	mov	r0, r5
   83270:	4621      	mov	r1, r4
   83272:	f000 fd2b 	bl	83ccc <__smakebuf_r>
   83276:	89a3      	ldrh	r3, [r4, #12]
   83278:	6920      	ldr	r0, [r4, #16]
   8327a:	e7dd      	b.n	83238 <__swsetup_r+0x20>
   8327c:	0799      	lsls	r1, r3, #30
   8327e:	bf58      	it	pl
   83280:	6962      	ldrpl	r2, [r4, #20]
   83282:	60a2      	str	r2, [r4, #8]
   83284:	2800      	cmp	r0, #0
   83286:	d1e0      	bne.n	8324a <__swsetup_r+0x32>
   83288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8328c:	061a      	lsls	r2, r3, #24
   8328e:	d5dd      	bpl.n	8324c <__swsetup_r+0x34>
   83290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83294:	81a3      	strh	r3, [r4, #12]
   83296:	f04f 30ff 	mov.w	r0, #4294967295
   8329a:	bd38      	pop	{r3, r4, r5, pc}
   8329c:	f000 f924 	bl	834e8 <__sinit>
   832a0:	e7c3      	b.n	8322a <__swsetup_r+0x12>
   832a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   832a4:	b151      	cbz	r1, 832bc <__swsetup_r+0xa4>
   832a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   832aa:	4299      	cmp	r1, r3
   832ac:	d004      	beq.n	832b8 <__swsetup_r+0xa0>
   832ae:	4628      	mov	r0, r5
   832b0:	f000 fa40 	bl	83734 <_free_r>
   832b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   832b8:	2300      	movs	r3, #0
   832ba:	6323      	str	r3, [r4, #48]	; 0x30
   832bc:	2300      	movs	r3, #0
   832be:	6920      	ldr	r0, [r4, #16]
   832c0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   832c4:	e884 0009 	stmia.w	r4, {r0, r3}
   832c8:	e7c6      	b.n	83258 <__swsetup_r+0x40>
   832ca:	2309      	movs	r3, #9
   832cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   832d0:	602b      	str	r3, [r5, #0]
   832d2:	f04f 30ff 	mov.w	r0, #4294967295
   832d6:	81a2      	strh	r2, [r4, #12]
   832d8:	bd38      	pop	{r3, r4, r5, pc}
   832da:	bf00      	nop
   832dc:	20070134 	.word	0x20070134

000832e0 <register_fini>:
   832e0:	4b02      	ldr	r3, [pc, #8]	; (832ec <register_fini+0xc>)
   832e2:	b113      	cbz	r3, 832ea <register_fini+0xa>
   832e4:	4802      	ldr	r0, [pc, #8]	; (832f0 <register_fini+0x10>)
   832e6:	f000 b805 	b.w	832f4 <atexit>
   832ea:	4770      	bx	lr
   832ec:	00000000 	.word	0x00000000
   832f0:	00083561 	.word	0x00083561

000832f4 <atexit>:
   832f4:	2300      	movs	r3, #0
   832f6:	4601      	mov	r1, r0
   832f8:	461a      	mov	r2, r3
   832fa:	4618      	mov	r0, r3
   832fc:	f001 bb4e 	b.w	8499c <__register_exitproc>

00083300 <__sflush_r>:
   83300:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83308:	b29a      	uxth	r2, r3
   8330a:	460d      	mov	r5, r1
   8330c:	0711      	lsls	r1, r2, #28
   8330e:	4680      	mov	r8, r0
   83310:	d43a      	bmi.n	83388 <__sflush_r+0x88>
   83312:	686a      	ldr	r2, [r5, #4]
   83314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83318:	2a00      	cmp	r2, #0
   8331a:	81ab      	strh	r3, [r5, #12]
   8331c:	dd70      	ble.n	83400 <__sflush_r+0x100>
   8331e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83320:	2c00      	cmp	r4, #0
   83322:	d04a      	beq.n	833ba <__sflush_r+0xba>
   83324:	2200      	movs	r2, #0
   83326:	b29b      	uxth	r3, r3
   83328:	f8d8 6000 	ldr.w	r6, [r8]
   8332c:	f8c8 2000 	str.w	r2, [r8]
   83330:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83334:	d068      	beq.n	83408 <__sflush_r+0x108>
   83336:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83338:	075f      	lsls	r7, r3, #29
   8333a:	d505      	bpl.n	83348 <__sflush_r+0x48>
   8333c:	6869      	ldr	r1, [r5, #4]
   8333e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83340:	1a52      	subs	r2, r2, r1
   83342:	b10b      	cbz	r3, 83348 <__sflush_r+0x48>
   83344:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83346:	1ad2      	subs	r2, r2, r3
   83348:	2300      	movs	r3, #0
   8334a:	69e9      	ldr	r1, [r5, #28]
   8334c:	4640      	mov	r0, r8
   8334e:	47a0      	blx	r4
   83350:	1c44      	adds	r4, r0, #1
   83352:	d03d      	beq.n	833d0 <__sflush_r+0xd0>
   83354:	2100      	movs	r1, #0
   83356:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8335a:	692a      	ldr	r2, [r5, #16]
   8335c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83360:	81ab      	strh	r3, [r5, #12]
   83362:	04db      	lsls	r3, r3, #19
   83364:	6069      	str	r1, [r5, #4]
   83366:	602a      	str	r2, [r5, #0]
   83368:	d448      	bmi.n	833fc <__sflush_r+0xfc>
   8336a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8336c:	f8c8 6000 	str.w	r6, [r8]
   83370:	b319      	cbz	r1, 833ba <__sflush_r+0xba>
   83372:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83376:	4299      	cmp	r1, r3
   83378:	d002      	beq.n	83380 <__sflush_r+0x80>
   8337a:	4640      	mov	r0, r8
   8337c:	f000 f9da 	bl	83734 <_free_r>
   83380:	2000      	movs	r0, #0
   83382:	6328      	str	r0, [r5, #48]	; 0x30
   83384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83388:	692e      	ldr	r6, [r5, #16]
   8338a:	b1b6      	cbz	r6, 833ba <__sflush_r+0xba>
   8338c:	0791      	lsls	r1, r2, #30
   8338e:	bf18      	it	ne
   83390:	2300      	movne	r3, #0
   83392:	682c      	ldr	r4, [r5, #0]
   83394:	bf08      	it	eq
   83396:	696b      	ldreq	r3, [r5, #20]
   83398:	602e      	str	r6, [r5, #0]
   8339a:	1ba4      	subs	r4, r4, r6
   8339c:	60ab      	str	r3, [r5, #8]
   8339e:	e00a      	b.n	833b6 <__sflush_r+0xb6>
   833a0:	4623      	mov	r3, r4
   833a2:	4632      	mov	r2, r6
   833a4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   833a6:	69e9      	ldr	r1, [r5, #28]
   833a8:	4640      	mov	r0, r8
   833aa:	47b8      	blx	r7
   833ac:	2800      	cmp	r0, #0
   833ae:	eba4 0400 	sub.w	r4, r4, r0
   833b2:	4406      	add	r6, r0
   833b4:	dd04      	ble.n	833c0 <__sflush_r+0xc0>
   833b6:	2c00      	cmp	r4, #0
   833b8:	dcf2      	bgt.n	833a0 <__sflush_r+0xa0>
   833ba:	2000      	movs	r0, #0
   833bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   833c0:	89ab      	ldrh	r3, [r5, #12]
   833c2:	f04f 30ff 	mov.w	r0, #4294967295
   833c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   833ca:	81ab      	strh	r3, [r5, #12]
   833cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   833d0:	f8d8 4000 	ldr.w	r4, [r8]
   833d4:	2c1d      	cmp	r4, #29
   833d6:	d8f3      	bhi.n	833c0 <__sflush_r+0xc0>
   833d8:	4b16      	ldr	r3, [pc, #88]	; (83434 <__sflush_r+0x134>)
   833da:	40e3      	lsrs	r3, r4
   833dc:	43db      	mvns	r3, r3
   833de:	f013 0301 	ands.w	r3, r3, #1
   833e2:	d1ed      	bne.n	833c0 <__sflush_r+0xc0>
   833e4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   833e8:	6929      	ldr	r1, [r5, #16]
   833ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   833ee:	81aa      	strh	r2, [r5, #12]
   833f0:	04d2      	lsls	r2, r2, #19
   833f2:	606b      	str	r3, [r5, #4]
   833f4:	6029      	str	r1, [r5, #0]
   833f6:	d5b8      	bpl.n	8336a <__sflush_r+0x6a>
   833f8:	2c00      	cmp	r4, #0
   833fa:	d1b6      	bne.n	8336a <__sflush_r+0x6a>
   833fc:	6528      	str	r0, [r5, #80]	; 0x50
   833fe:	e7b4      	b.n	8336a <__sflush_r+0x6a>
   83400:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83402:	2a00      	cmp	r2, #0
   83404:	dc8b      	bgt.n	8331e <__sflush_r+0x1e>
   83406:	e7d8      	b.n	833ba <__sflush_r+0xba>
   83408:	2301      	movs	r3, #1
   8340a:	69e9      	ldr	r1, [r5, #28]
   8340c:	4640      	mov	r0, r8
   8340e:	47a0      	blx	r4
   83410:	1c43      	adds	r3, r0, #1
   83412:	4602      	mov	r2, r0
   83414:	d002      	beq.n	8341c <__sflush_r+0x11c>
   83416:	89ab      	ldrh	r3, [r5, #12]
   83418:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8341a:	e78d      	b.n	83338 <__sflush_r+0x38>
   8341c:	f8d8 3000 	ldr.w	r3, [r8]
   83420:	2b00      	cmp	r3, #0
   83422:	d0f8      	beq.n	83416 <__sflush_r+0x116>
   83424:	2b1d      	cmp	r3, #29
   83426:	d001      	beq.n	8342c <__sflush_r+0x12c>
   83428:	2b16      	cmp	r3, #22
   8342a:	d1c9      	bne.n	833c0 <__sflush_r+0xc0>
   8342c:	f8c8 6000 	str.w	r6, [r8]
   83430:	e7c3      	b.n	833ba <__sflush_r+0xba>
   83432:	bf00      	nop
   83434:	20400001 	.word	0x20400001

00083438 <_fflush_r>:
   83438:	b538      	push	{r3, r4, r5, lr}
   8343a:	460d      	mov	r5, r1
   8343c:	4604      	mov	r4, r0
   8343e:	b108      	cbz	r0, 83444 <_fflush_r+0xc>
   83440:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83442:	b1bb      	cbz	r3, 83474 <_fflush_r+0x3c>
   83444:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83448:	b188      	cbz	r0, 8346e <_fflush_r+0x36>
   8344a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8344c:	07db      	lsls	r3, r3, #31
   8344e:	d401      	bmi.n	83454 <_fflush_r+0x1c>
   83450:	0581      	lsls	r1, r0, #22
   83452:	d517      	bpl.n	83484 <_fflush_r+0x4c>
   83454:	4620      	mov	r0, r4
   83456:	4629      	mov	r1, r5
   83458:	f7ff ff52 	bl	83300 <__sflush_r>
   8345c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8345e:	4604      	mov	r4, r0
   83460:	07da      	lsls	r2, r3, #31
   83462:	d402      	bmi.n	8346a <_fflush_r+0x32>
   83464:	89ab      	ldrh	r3, [r5, #12]
   83466:	059b      	lsls	r3, r3, #22
   83468:	d507      	bpl.n	8347a <_fflush_r+0x42>
   8346a:	4620      	mov	r0, r4
   8346c:	bd38      	pop	{r3, r4, r5, pc}
   8346e:	4604      	mov	r4, r0
   83470:	4620      	mov	r0, r4
   83472:	bd38      	pop	{r3, r4, r5, pc}
   83474:	f000 f838 	bl	834e8 <__sinit>
   83478:	e7e4      	b.n	83444 <_fflush_r+0xc>
   8347a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8347c:	f000 fbf6 	bl	83c6c <__retarget_lock_release_recursive>
   83480:	4620      	mov	r0, r4
   83482:	bd38      	pop	{r3, r4, r5, pc}
   83484:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83486:	f000 fbef 	bl	83c68 <__retarget_lock_acquire_recursive>
   8348a:	e7e3      	b.n	83454 <_fflush_r+0x1c>

0008348c <_cleanup_r>:
   8348c:	4901      	ldr	r1, [pc, #4]	; (83494 <_cleanup_r+0x8>)
   8348e:	f000 bbb1 	b.w	83bf4 <_fwalk_reent>
   83492:	bf00      	nop
   83494:	00084a85 	.word	0x00084a85

00083498 <std.isra.0>:
   83498:	2300      	movs	r3, #0
   8349a:	b510      	push	{r4, lr}
   8349c:	4604      	mov	r4, r0
   8349e:	8181      	strh	r1, [r0, #12]
   834a0:	81c2      	strh	r2, [r0, #14]
   834a2:	6003      	str	r3, [r0, #0]
   834a4:	6043      	str	r3, [r0, #4]
   834a6:	6083      	str	r3, [r0, #8]
   834a8:	6643      	str	r3, [r0, #100]	; 0x64
   834aa:	6103      	str	r3, [r0, #16]
   834ac:	6143      	str	r3, [r0, #20]
   834ae:	6183      	str	r3, [r0, #24]
   834b0:	4619      	mov	r1, r3
   834b2:	2208      	movs	r2, #8
   834b4:	305c      	adds	r0, #92	; 0x5c
   834b6:	f7fe ff6b 	bl	82390 <memset>
   834ba:	4807      	ldr	r0, [pc, #28]	; (834d8 <std.isra.0+0x40>)
   834bc:	4907      	ldr	r1, [pc, #28]	; (834dc <std.isra.0+0x44>)
   834be:	4a08      	ldr	r2, [pc, #32]	; (834e0 <std.isra.0+0x48>)
   834c0:	4b08      	ldr	r3, [pc, #32]	; (834e4 <std.isra.0+0x4c>)
   834c2:	6220      	str	r0, [r4, #32]
   834c4:	61e4      	str	r4, [r4, #28]
   834c6:	6261      	str	r1, [r4, #36]	; 0x24
   834c8:	62a2      	str	r2, [r4, #40]	; 0x28
   834ca:	62e3      	str	r3, [r4, #44]	; 0x2c
   834cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   834d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   834d4:	f000 bbc4 	b.w	83c60 <__retarget_lock_init_recursive>
   834d8:	000847cd 	.word	0x000847cd
   834dc:	000847f1 	.word	0x000847f1
   834e0:	0008482d 	.word	0x0008482d
   834e4:	0008484d 	.word	0x0008484d

000834e8 <__sinit>:
   834e8:	b510      	push	{r4, lr}
   834ea:	4604      	mov	r4, r0
   834ec:	4814      	ldr	r0, [pc, #80]	; (83540 <__sinit+0x58>)
   834ee:	f000 fbbb 	bl	83c68 <__retarget_lock_acquire_recursive>
   834f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   834f4:	b9fa      	cbnz	r2, 83536 <__sinit+0x4e>
   834f6:	2003      	movs	r0, #3
   834f8:	4912      	ldr	r1, [pc, #72]	; (83544 <__sinit+0x5c>)
   834fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   834fe:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83502:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83506:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8350a:	63e1      	str	r1, [r4, #60]	; 0x3c
   8350c:	6860      	ldr	r0, [r4, #4]
   8350e:	2104      	movs	r1, #4
   83510:	f7ff ffc2 	bl	83498 <std.isra.0>
   83514:	68a0      	ldr	r0, [r4, #8]
   83516:	2201      	movs	r2, #1
   83518:	2109      	movs	r1, #9
   8351a:	f7ff ffbd 	bl	83498 <std.isra.0>
   8351e:	68e0      	ldr	r0, [r4, #12]
   83520:	2202      	movs	r2, #2
   83522:	2112      	movs	r1, #18
   83524:	f7ff ffb8 	bl	83498 <std.isra.0>
   83528:	2301      	movs	r3, #1
   8352a:	4805      	ldr	r0, [pc, #20]	; (83540 <__sinit+0x58>)
   8352c:	63a3      	str	r3, [r4, #56]	; 0x38
   8352e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83532:	f000 bb9b 	b.w	83c6c <__retarget_lock_release_recursive>
   83536:	4802      	ldr	r0, [pc, #8]	; (83540 <__sinit+0x58>)
   83538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8353c:	f000 bb96 	b.w	83c6c <__retarget_lock_release_recursive>
   83540:	2007c54c 	.word	0x2007c54c
   83544:	0008348d 	.word	0x0008348d

00083548 <__sfp_lock_acquire>:
   83548:	4801      	ldr	r0, [pc, #4]	; (83550 <__sfp_lock_acquire+0x8>)
   8354a:	f000 bb8d 	b.w	83c68 <__retarget_lock_acquire_recursive>
   8354e:	bf00      	nop
   83550:	2007c560 	.word	0x2007c560

00083554 <__sfp_lock_release>:
   83554:	4801      	ldr	r0, [pc, #4]	; (8355c <__sfp_lock_release+0x8>)
   83556:	f000 bb89 	b.w	83c6c <__retarget_lock_release_recursive>
   8355a:	bf00      	nop
   8355c:	2007c560 	.word	0x2007c560

00083560 <__libc_fini_array>:
   83560:	b538      	push	{r3, r4, r5, lr}
   83562:	4c0a      	ldr	r4, [pc, #40]	; (8358c <__libc_fini_array+0x2c>)
   83564:	4d0a      	ldr	r5, [pc, #40]	; (83590 <__libc_fini_array+0x30>)
   83566:	1b64      	subs	r4, r4, r5
   83568:	10a4      	asrs	r4, r4, #2
   8356a:	d00a      	beq.n	83582 <__libc_fini_array+0x22>
   8356c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83570:	3b01      	subs	r3, #1
   83572:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83576:	3c01      	subs	r4, #1
   83578:	f855 3904 	ldr.w	r3, [r5], #-4
   8357c:	4798      	blx	r3
   8357e:	2c00      	cmp	r4, #0
   83580:	d1f9      	bne.n	83576 <__libc_fini_array+0x16>
   83582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83586:	f001 bdb9 	b.w	850fc <_fini>
   8358a:	bf00      	nop
   8358c:	0008510c 	.word	0x0008510c
   83590:	00085108 	.word	0x00085108

00083594 <__fputwc>:
   83594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83598:	b083      	sub	sp, #12
   8359a:	4607      	mov	r7, r0
   8359c:	4688      	mov	r8, r1
   8359e:	4614      	mov	r4, r2
   835a0:	f000 fb50 	bl	83c44 <__locale_mb_cur_max>
   835a4:	2801      	cmp	r0, #1
   835a6:	d033      	beq.n	83610 <__fputwc+0x7c>
   835a8:	4642      	mov	r2, r8
   835aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   835ae:	a901      	add	r1, sp, #4
   835b0:	4638      	mov	r0, r7
   835b2:	f001 f9a7 	bl	84904 <_wcrtomb_r>
   835b6:	1c42      	adds	r2, r0, #1
   835b8:	4606      	mov	r6, r0
   835ba:	d022      	beq.n	83602 <__fputwc+0x6e>
   835bc:	b390      	cbz	r0, 83624 <__fputwc+0x90>
   835be:	f89d 1004 	ldrb.w	r1, [sp, #4]
   835c2:	2500      	movs	r5, #0
   835c4:	f10d 0904 	add.w	r9, sp, #4
   835c8:	e008      	b.n	835dc <__fputwc+0x48>
   835ca:	6823      	ldr	r3, [r4, #0]
   835cc:	1c5a      	adds	r2, r3, #1
   835ce:	6022      	str	r2, [r4, #0]
   835d0:	7019      	strb	r1, [r3, #0]
   835d2:	3501      	adds	r5, #1
   835d4:	42b5      	cmp	r5, r6
   835d6:	d225      	bcs.n	83624 <__fputwc+0x90>
   835d8:	f815 1009 	ldrb.w	r1, [r5, r9]
   835dc:	68a3      	ldr	r3, [r4, #8]
   835de:	3b01      	subs	r3, #1
   835e0:	2b00      	cmp	r3, #0
   835e2:	60a3      	str	r3, [r4, #8]
   835e4:	daf1      	bge.n	835ca <__fputwc+0x36>
   835e6:	69a2      	ldr	r2, [r4, #24]
   835e8:	4293      	cmp	r3, r2
   835ea:	db01      	blt.n	835f0 <__fputwc+0x5c>
   835ec:	290a      	cmp	r1, #10
   835ee:	d1ec      	bne.n	835ca <__fputwc+0x36>
   835f0:	4622      	mov	r2, r4
   835f2:	4638      	mov	r0, r7
   835f4:	f001 f92e 	bl	84854 <__swbuf_r>
   835f8:	1c43      	adds	r3, r0, #1
   835fa:	d1ea      	bne.n	835d2 <__fputwc+0x3e>
   835fc:	b003      	add	sp, #12
   835fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83602:	89a3      	ldrh	r3, [r4, #12]
   83604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83608:	81a3      	strh	r3, [r4, #12]
   8360a:	b003      	add	sp, #12
   8360c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83610:	f108 33ff 	add.w	r3, r8, #4294967295
   83614:	2bfe      	cmp	r3, #254	; 0xfe
   83616:	d8c7      	bhi.n	835a8 <__fputwc+0x14>
   83618:	fa5f f188 	uxtb.w	r1, r8
   8361c:	4606      	mov	r6, r0
   8361e:	f88d 1004 	strb.w	r1, [sp, #4]
   83622:	e7ce      	b.n	835c2 <__fputwc+0x2e>
   83624:	4640      	mov	r0, r8
   83626:	b003      	add	sp, #12
   83628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008362c <_fputwc_r>:
   8362c:	b530      	push	{r4, r5, lr}
   8362e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83630:	4614      	mov	r4, r2
   83632:	f013 0f01 	tst.w	r3, #1
   83636:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8363a:	b083      	sub	sp, #12
   8363c:	4605      	mov	r5, r0
   8363e:	b29a      	uxth	r2, r3
   83640:	d101      	bne.n	83646 <_fputwc_r+0x1a>
   83642:	0590      	lsls	r0, r2, #22
   83644:	d51c      	bpl.n	83680 <_fputwc_r+0x54>
   83646:	0490      	lsls	r0, r2, #18
   83648:	d406      	bmi.n	83658 <_fputwc_r+0x2c>
   8364a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8364c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83654:	81a3      	strh	r3, [r4, #12]
   83656:	6662      	str	r2, [r4, #100]	; 0x64
   83658:	4628      	mov	r0, r5
   8365a:	4622      	mov	r2, r4
   8365c:	f7ff ff9a 	bl	83594 <__fputwc>
   83660:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83662:	4605      	mov	r5, r0
   83664:	07da      	lsls	r2, r3, #31
   83666:	d402      	bmi.n	8366e <_fputwc_r+0x42>
   83668:	89a3      	ldrh	r3, [r4, #12]
   8366a:	059b      	lsls	r3, r3, #22
   8366c:	d502      	bpl.n	83674 <_fputwc_r+0x48>
   8366e:	4628      	mov	r0, r5
   83670:	b003      	add	sp, #12
   83672:	bd30      	pop	{r4, r5, pc}
   83674:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83676:	f000 faf9 	bl	83c6c <__retarget_lock_release_recursive>
   8367a:	4628      	mov	r0, r5
   8367c:	b003      	add	sp, #12
   8367e:	bd30      	pop	{r4, r5, pc}
   83680:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83682:	9101      	str	r1, [sp, #4]
   83684:	f000 faf0 	bl	83c68 <__retarget_lock_acquire_recursive>
   83688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8368c:	9901      	ldr	r1, [sp, #4]
   8368e:	b29a      	uxth	r2, r3
   83690:	e7d9      	b.n	83646 <_fputwc_r+0x1a>
   83692:	bf00      	nop

00083694 <_malloc_trim_r>:
   83694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83696:	460c      	mov	r4, r1
   83698:	4f23      	ldr	r7, [pc, #140]	; (83728 <_malloc_trim_r+0x94>)
   8369a:	4606      	mov	r6, r0
   8369c:	f000 fec2 	bl	84424 <__malloc_lock>
   836a0:	68bb      	ldr	r3, [r7, #8]
   836a2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   836a6:	685d      	ldr	r5, [r3, #4]
   836a8:	310f      	adds	r1, #15
   836aa:	f025 0503 	bic.w	r5, r5, #3
   836ae:	4429      	add	r1, r5
   836b0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   836b4:	f021 010f 	bic.w	r1, r1, #15
   836b8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   836bc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   836c0:	db07      	blt.n	836d2 <_malloc_trim_r+0x3e>
   836c2:	2100      	movs	r1, #0
   836c4:	4630      	mov	r0, r6
   836c6:	f001 f86f 	bl	847a8 <_sbrk_r>
   836ca:	68bb      	ldr	r3, [r7, #8]
   836cc:	442b      	add	r3, r5
   836ce:	4298      	cmp	r0, r3
   836d0:	d004      	beq.n	836dc <_malloc_trim_r+0x48>
   836d2:	4630      	mov	r0, r6
   836d4:	f000 feac 	bl	84430 <__malloc_unlock>
   836d8:	2000      	movs	r0, #0
   836da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836dc:	4261      	negs	r1, r4
   836de:	4630      	mov	r0, r6
   836e0:	f001 f862 	bl	847a8 <_sbrk_r>
   836e4:	3001      	adds	r0, #1
   836e6:	d00d      	beq.n	83704 <_malloc_trim_r+0x70>
   836e8:	4b10      	ldr	r3, [pc, #64]	; (8372c <_malloc_trim_r+0x98>)
   836ea:	68ba      	ldr	r2, [r7, #8]
   836ec:	6819      	ldr	r1, [r3, #0]
   836ee:	1b2d      	subs	r5, r5, r4
   836f0:	f045 0501 	orr.w	r5, r5, #1
   836f4:	4630      	mov	r0, r6
   836f6:	1b09      	subs	r1, r1, r4
   836f8:	6055      	str	r5, [r2, #4]
   836fa:	6019      	str	r1, [r3, #0]
   836fc:	f000 fe98 	bl	84430 <__malloc_unlock>
   83700:	2001      	movs	r0, #1
   83702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83704:	2100      	movs	r1, #0
   83706:	4630      	mov	r0, r6
   83708:	f001 f84e 	bl	847a8 <_sbrk_r>
   8370c:	68ba      	ldr	r2, [r7, #8]
   8370e:	1a83      	subs	r3, r0, r2
   83710:	2b0f      	cmp	r3, #15
   83712:	ddde      	ble.n	836d2 <_malloc_trim_r+0x3e>
   83714:	4c06      	ldr	r4, [pc, #24]	; (83730 <_malloc_trim_r+0x9c>)
   83716:	4905      	ldr	r1, [pc, #20]	; (8372c <_malloc_trim_r+0x98>)
   83718:	6824      	ldr	r4, [r4, #0]
   8371a:	f043 0301 	orr.w	r3, r3, #1
   8371e:	1b00      	subs	r0, r0, r4
   83720:	6053      	str	r3, [r2, #4]
   83722:	6008      	str	r0, [r1, #0]
   83724:	e7d5      	b.n	836d2 <_malloc_trim_r+0x3e>
   83726:	bf00      	nop
   83728:	200706d0 	.word	0x200706d0
   8372c:	2007c4c0 	.word	0x2007c4c0
   83730:	20070ad8 	.word	0x20070ad8

00083734 <_free_r>:
   83734:	2900      	cmp	r1, #0
   83736:	d044      	beq.n	837c2 <_free_r+0x8e>
   83738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8373c:	460d      	mov	r5, r1
   8373e:	4680      	mov	r8, r0
   83740:	f000 fe70 	bl	84424 <__malloc_lock>
   83744:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83748:	4969      	ldr	r1, [pc, #420]	; (838f0 <_free_r+0x1bc>)
   8374a:	f1a5 0408 	sub.w	r4, r5, #8
   8374e:	f027 0301 	bic.w	r3, r7, #1
   83752:	18e2      	adds	r2, r4, r3
   83754:	688e      	ldr	r6, [r1, #8]
   83756:	6850      	ldr	r0, [r2, #4]
   83758:	42b2      	cmp	r2, r6
   8375a:	f020 0003 	bic.w	r0, r0, #3
   8375e:	d05e      	beq.n	8381e <_free_r+0xea>
   83760:	07fe      	lsls	r6, r7, #31
   83762:	6050      	str	r0, [r2, #4]
   83764:	d40b      	bmi.n	8377e <_free_r+0x4a>
   83766:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8376a:	f101 0e08 	add.w	lr, r1, #8
   8376e:	1be4      	subs	r4, r4, r7
   83770:	68a5      	ldr	r5, [r4, #8]
   83772:	443b      	add	r3, r7
   83774:	4575      	cmp	r5, lr
   83776:	d06d      	beq.n	83854 <_free_r+0x120>
   83778:	68e7      	ldr	r7, [r4, #12]
   8377a:	60ef      	str	r7, [r5, #12]
   8377c:	60bd      	str	r5, [r7, #8]
   8377e:	1815      	adds	r5, r2, r0
   83780:	686d      	ldr	r5, [r5, #4]
   83782:	07ed      	lsls	r5, r5, #31
   83784:	d53e      	bpl.n	83804 <_free_r+0xd0>
   83786:	f043 0201 	orr.w	r2, r3, #1
   8378a:	6062      	str	r2, [r4, #4]
   8378c:	50e3      	str	r3, [r4, r3]
   8378e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83792:	d217      	bcs.n	837c4 <_free_r+0x90>
   83794:	2201      	movs	r2, #1
   83796:	08db      	lsrs	r3, r3, #3
   83798:	1098      	asrs	r0, r3, #2
   8379a:	684d      	ldr	r5, [r1, #4]
   8379c:	4413      	add	r3, r2
   8379e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   837a2:	4082      	lsls	r2, r0
   837a4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   837a8:	432a      	orrs	r2, r5
   837aa:	3808      	subs	r0, #8
   837ac:	60e0      	str	r0, [r4, #12]
   837ae:	60a7      	str	r7, [r4, #8]
   837b0:	604a      	str	r2, [r1, #4]
   837b2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   837b6:	60fc      	str	r4, [r7, #12]
   837b8:	4640      	mov	r0, r8
   837ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   837be:	f000 be37 	b.w	84430 <__malloc_unlock>
   837c2:	4770      	bx	lr
   837c4:	0a5a      	lsrs	r2, r3, #9
   837c6:	2a04      	cmp	r2, #4
   837c8:	d852      	bhi.n	83870 <_free_r+0x13c>
   837ca:	099a      	lsrs	r2, r3, #6
   837cc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   837d0:	00ff      	lsls	r7, r7, #3
   837d2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   837d6:	19c8      	adds	r0, r1, r7
   837d8:	59ca      	ldr	r2, [r1, r7]
   837da:	3808      	subs	r0, #8
   837dc:	4290      	cmp	r0, r2
   837de:	d04f      	beq.n	83880 <_free_r+0x14c>
   837e0:	6851      	ldr	r1, [r2, #4]
   837e2:	f021 0103 	bic.w	r1, r1, #3
   837e6:	428b      	cmp	r3, r1
   837e8:	d232      	bcs.n	83850 <_free_r+0x11c>
   837ea:	6892      	ldr	r2, [r2, #8]
   837ec:	4290      	cmp	r0, r2
   837ee:	d1f7      	bne.n	837e0 <_free_r+0xac>
   837f0:	68c3      	ldr	r3, [r0, #12]
   837f2:	60a0      	str	r0, [r4, #8]
   837f4:	60e3      	str	r3, [r4, #12]
   837f6:	609c      	str	r4, [r3, #8]
   837f8:	60c4      	str	r4, [r0, #12]
   837fa:	4640      	mov	r0, r8
   837fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83800:	f000 be16 	b.w	84430 <__malloc_unlock>
   83804:	6895      	ldr	r5, [r2, #8]
   83806:	4f3b      	ldr	r7, [pc, #236]	; (838f4 <_free_r+0x1c0>)
   83808:	4403      	add	r3, r0
   8380a:	42bd      	cmp	r5, r7
   8380c:	d040      	beq.n	83890 <_free_r+0x15c>
   8380e:	68d0      	ldr	r0, [r2, #12]
   83810:	f043 0201 	orr.w	r2, r3, #1
   83814:	60e8      	str	r0, [r5, #12]
   83816:	6085      	str	r5, [r0, #8]
   83818:	6062      	str	r2, [r4, #4]
   8381a:	50e3      	str	r3, [r4, r3]
   8381c:	e7b7      	b.n	8378e <_free_r+0x5a>
   8381e:	07ff      	lsls	r7, r7, #31
   83820:	4403      	add	r3, r0
   83822:	d407      	bmi.n	83834 <_free_r+0x100>
   83824:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83828:	1b64      	subs	r4, r4, r5
   8382a:	68e2      	ldr	r2, [r4, #12]
   8382c:	68a0      	ldr	r0, [r4, #8]
   8382e:	442b      	add	r3, r5
   83830:	60c2      	str	r2, [r0, #12]
   83832:	6090      	str	r0, [r2, #8]
   83834:	4a30      	ldr	r2, [pc, #192]	; (838f8 <_free_r+0x1c4>)
   83836:	f043 0001 	orr.w	r0, r3, #1
   8383a:	6812      	ldr	r2, [r2, #0]
   8383c:	6060      	str	r0, [r4, #4]
   8383e:	4293      	cmp	r3, r2
   83840:	608c      	str	r4, [r1, #8]
   83842:	d3b9      	bcc.n	837b8 <_free_r+0x84>
   83844:	4b2d      	ldr	r3, [pc, #180]	; (838fc <_free_r+0x1c8>)
   83846:	4640      	mov	r0, r8
   83848:	6819      	ldr	r1, [r3, #0]
   8384a:	f7ff ff23 	bl	83694 <_malloc_trim_r>
   8384e:	e7b3      	b.n	837b8 <_free_r+0x84>
   83850:	4610      	mov	r0, r2
   83852:	e7cd      	b.n	837f0 <_free_r+0xbc>
   83854:	1811      	adds	r1, r2, r0
   83856:	6849      	ldr	r1, [r1, #4]
   83858:	07c9      	lsls	r1, r1, #31
   8385a:	d444      	bmi.n	838e6 <_free_r+0x1b2>
   8385c:	6891      	ldr	r1, [r2, #8]
   8385e:	4403      	add	r3, r0
   83860:	68d2      	ldr	r2, [r2, #12]
   83862:	f043 0001 	orr.w	r0, r3, #1
   83866:	60ca      	str	r2, [r1, #12]
   83868:	6091      	str	r1, [r2, #8]
   8386a:	6060      	str	r0, [r4, #4]
   8386c:	50e3      	str	r3, [r4, r3]
   8386e:	e7a3      	b.n	837b8 <_free_r+0x84>
   83870:	2a14      	cmp	r2, #20
   83872:	d816      	bhi.n	838a2 <_free_r+0x16e>
   83874:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83878:	00ff      	lsls	r7, r7, #3
   8387a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8387e:	e7aa      	b.n	837d6 <_free_r+0xa2>
   83880:	2301      	movs	r3, #1
   83882:	10aa      	asrs	r2, r5, #2
   83884:	684d      	ldr	r5, [r1, #4]
   83886:	4093      	lsls	r3, r2
   83888:	432b      	orrs	r3, r5
   8388a:	604b      	str	r3, [r1, #4]
   8388c:	4603      	mov	r3, r0
   8388e:	e7b0      	b.n	837f2 <_free_r+0xbe>
   83890:	f043 0201 	orr.w	r2, r3, #1
   83894:	614c      	str	r4, [r1, #20]
   83896:	610c      	str	r4, [r1, #16]
   83898:	60e5      	str	r5, [r4, #12]
   8389a:	60a5      	str	r5, [r4, #8]
   8389c:	6062      	str	r2, [r4, #4]
   8389e:	50e3      	str	r3, [r4, r3]
   838a0:	e78a      	b.n	837b8 <_free_r+0x84>
   838a2:	2a54      	cmp	r2, #84	; 0x54
   838a4:	d806      	bhi.n	838b4 <_free_r+0x180>
   838a6:	0b1a      	lsrs	r2, r3, #12
   838a8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   838ac:	00ff      	lsls	r7, r7, #3
   838ae:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   838b2:	e790      	b.n	837d6 <_free_r+0xa2>
   838b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   838b8:	d806      	bhi.n	838c8 <_free_r+0x194>
   838ba:	0bda      	lsrs	r2, r3, #15
   838bc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   838c0:	00ff      	lsls	r7, r7, #3
   838c2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   838c6:	e786      	b.n	837d6 <_free_r+0xa2>
   838c8:	f240 5054 	movw	r0, #1364	; 0x554
   838cc:	4282      	cmp	r2, r0
   838ce:	d806      	bhi.n	838de <_free_r+0x1aa>
   838d0:	0c9a      	lsrs	r2, r3, #18
   838d2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   838d6:	00ff      	lsls	r7, r7, #3
   838d8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   838dc:	e77b      	b.n	837d6 <_free_r+0xa2>
   838de:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   838e2:	257e      	movs	r5, #126	; 0x7e
   838e4:	e777      	b.n	837d6 <_free_r+0xa2>
   838e6:	f043 0101 	orr.w	r1, r3, #1
   838ea:	6061      	str	r1, [r4, #4]
   838ec:	6013      	str	r3, [r2, #0]
   838ee:	e763      	b.n	837b8 <_free_r+0x84>
   838f0:	200706d0 	.word	0x200706d0
   838f4:	200706d8 	.word	0x200706d8
   838f8:	20070adc 	.word	0x20070adc
   838fc:	2007c4f0 	.word	0x2007c4f0

00083900 <__sfvwrite_r>:
   83900:	6893      	ldr	r3, [r2, #8]
   83902:	2b00      	cmp	r3, #0
   83904:	d071      	beq.n	839ea <__sfvwrite_r+0xea>
   83906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8390a:	898b      	ldrh	r3, [r1, #12]
   8390c:	b083      	sub	sp, #12
   8390e:	460c      	mov	r4, r1
   83910:	0719      	lsls	r1, r3, #28
   83912:	9000      	str	r0, [sp, #0]
   83914:	4616      	mov	r6, r2
   83916:	d525      	bpl.n	83964 <__sfvwrite_r+0x64>
   83918:	6922      	ldr	r2, [r4, #16]
   8391a:	b31a      	cbz	r2, 83964 <__sfvwrite_r+0x64>
   8391c:	f013 0002 	ands.w	r0, r3, #2
   83920:	6835      	ldr	r5, [r6, #0]
   83922:	d02b      	beq.n	8397c <__sfvwrite_r+0x7c>
   83924:	f04f 0900 	mov.w	r9, #0
   83928:	46b0      	mov	r8, r6
   8392a:	464f      	mov	r7, r9
   8392c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 83bf0 <__sfvwrite_r+0x2f0>
   83930:	2f00      	cmp	r7, #0
   83932:	d055      	beq.n	839e0 <__sfvwrite_r+0xe0>
   83934:	4557      	cmp	r7, sl
   83936:	463b      	mov	r3, r7
   83938:	464a      	mov	r2, r9
   8393a:	bf28      	it	cs
   8393c:	4653      	movcs	r3, sl
   8393e:	69e1      	ldr	r1, [r4, #28]
   83940:	9800      	ldr	r0, [sp, #0]
   83942:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83944:	47b0      	blx	r6
   83946:	2800      	cmp	r0, #0
   83948:	dd56      	ble.n	839f8 <__sfvwrite_r+0xf8>
   8394a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8394e:	4481      	add	r9, r0
   83950:	1a1b      	subs	r3, r3, r0
   83952:	1a3f      	subs	r7, r7, r0
   83954:	f8c8 3008 	str.w	r3, [r8, #8]
   83958:	2b00      	cmp	r3, #0
   8395a:	d1e9      	bne.n	83930 <__sfvwrite_r+0x30>
   8395c:	2000      	movs	r0, #0
   8395e:	b003      	add	sp, #12
   83960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83964:	4621      	mov	r1, r4
   83966:	9800      	ldr	r0, [sp, #0]
   83968:	f7ff fc56 	bl	83218 <__swsetup_r>
   8396c:	2800      	cmp	r0, #0
   8396e:	f040 8135 	bne.w	83bdc <__sfvwrite_r+0x2dc>
   83972:	89a3      	ldrh	r3, [r4, #12]
   83974:	6835      	ldr	r5, [r6, #0]
   83976:	f013 0002 	ands.w	r0, r3, #2
   8397a:	d1d3      	bne.n	83924 <__sfvwrite_r+0x24>
   8397c:	f013 0901 	ands.w	r9, r3, #1
   83980:	d144      	bne.n	83a0c <__sfvwrite_r+0x10c>
   83982:	464f      	mov	r7, r9
   83984:	9601      	str	r6, [sp, #4]
   83986:	b337      	cbz	r7, 839d6 <__sfvwrite_r+0xd6>
   83988:	059a      	lsls	r2, r3, #22
   8398a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8398e:	f140 8085 	bpl.w	83a9c <__sfvwrite_r+0x19c>
   83992:	4547      	cmp	r7, r8
   83994:	46c3      	mov	fp, r8
   83996:	f0c0 80ad 	bcc.w	83af4 <__sfvwrite_r+0x1f4>
   8399a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8399e:	f040 80ae 	bne.w	83afe <__sfvwrite_r+0x1fe>
   839a2:	46ba      	mov	sl, r7
   839a4:	6820      	ldr	r0, [r4, #0]
   839a6:	465a      	mov	r2, fp
   839a8:	4649      	mov	r1, r9
   839aa:	f000 fcd7 	bl	8435c <memmove>
   839ae:	68a2      	ldr	r2, [r4, #8]
   839b0:	6823      	ldr	r3, [r4, #0]
   839b2:	eba2 0208 	sub.w	r2, r2, r8
   839b6:	445b      	add	r3, fp
   839b8:	60a2      	str	r2, [r4, #8]
   839ba:	6023      	str	r3, [r4, #0]
   839bc:	9a01      	ldr	r2, [sp, #4]
   839be:	44d1      	add	r9, sl
   839c0:	6893      	ldr	r3, [r2, #8]
   839c2:	eba7 070a 	sub.w	r7, r7, sl
   839c6:	eba3 030a 	sub.w	r3, r3, sl
   839ca:	6093      	str	r3, [r2, #8]
   839cc:	2b00      	cmp	r3, #0
   839ce:	d0c5      	beq.n	8395c <__sfvwrite_r+0x5c>
   839d0:	89a3      	ldrh	r3, [r4, #12]
   839d2:	2f00      	cmp	r7, #0
   839d4:	d1d8      	bne.n	83988 <__sfvwrite_r+0x88>
   839d6:	f8d5 9000 	ldr.w	r9, [r5]
   839da:	686f      	ldr	r7, [r5, #4]
   839dc:	3508      	adds	r5, #8
   839de:	e7d2      	b.n	83986 <__sfvwrite_r+0x86>
   839e0:	f8d5 9000 	ldr.w	r9, [r5]
   839e4:	686f      	ldr	r7, [r5, #4]
   839e6:	3508      	adds	r5, #8
   839e8:	e7a2      	b.n	83930 <__sfvwrite_r+0x30>
   839ea:	2000      	movs	r0, #0
   839ec:	4770      	bx	lr
   839ee:	4621      	mov	r1, r4
   839f0:	9800      	ldr	r0, [sp, #0]
   839f2:	f7ff fd21 	bl	83438 <_fflush_r>
   839f6:	b378      	cbz	r0, 83a58 <__sfvwrite_r+0x158>
   839f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839fc:	f04f 30ff 	mov.w	r0, #4294967295
   83a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a04:	81a3      	strh	r3, [r4, #12]
   83a06:	b003      	add	sp, #12
   83a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a0c:	4681      	mov	r9, r0
   83a0e:	4633      	mov	r3, r6
   83a10:	464e      	mov	r6, r9
   83a12:	46a8      	mov	r8, r5
   83a14:	469a      	mov	sl, r3
   83a16:	464d      	mov	r5, r9
   83a18:	b356      	cbz	r6, 83a70 <__sfvwrite_r+0x170>
   83a1a:	2800      	cmp	r0, #0
   83a1c:	d032      	beq.n	83a84 <__sfvwrite_r+0x184>
   83a1e:	45b1      	cmp	r9, r6
   83a20:	46cb      	mov	fp, r9
   83a22:	bf28      	it	cs
   83a24:	46b3      	movcs	fp, r6
   83a26:	6820      	ldr	r0, [r4, #0]
   83a28:	6923      	ldr	r3, [r4, #16]
   83a2a:	465f      	mov	r7, fp
   83a2c:	4298      	cmp	r0, r3
   83a2e:	6962      	ldr	r2, [r4, #20]
   83a30:	d904      	bls.n	83a3c <__sfvwrite_r+0x13c>
   83a32:	68a3      	ldr	r3, [r4, #8]
   83a34:	4413      	add	r3, r2
   83a36:	459b      	cmp	fp, r3
   83a38:	f300 80a8 	bgt.w	83b8c <__sfvwrite_r+0x28c>
   83a3c:	4593      	cmp	fp, r2
   83a3e:	db4d      	blt.n	83adc <__sfvwrite_r+0x1dc>
   83a40:	4613      	mov	r3, r2
   83a42:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83a44:	462a      	mov	r2, r5
   83a46:	69e1      	ldr	r1, [r4, #28]
   83a48:	9800      	ldr	r0, [sp, #0]
   83a4a:	47b8      	blx	r7
   83a4c:	1e07      	subs	r7, r0, #0
   83a4e:	ddd3      	ble.n	839f8 <__sfvwrite_r+0xf8>
   83a50:	ebb9 0907 	subs.w	r9, r9, r7
   83a54:	d0cb      	beq.n	839ee <__sfvwrite_r+0xee>
   83a56:	2001      	movs	r0, #1
   83a58:	f8da 3008 	ldr.w	r3, [sl, #8]
   83a5c:	443d      	add	r5, r7
   83a5e:	1bdb      	subs	r3, r3, r7
   83a60:	1bf6      	subs	r6, r6, r7
   83a62:	f8ca 3008 	str.w	r3, [sl, #8]
   83a66:	2b00      	cmp	r3, #0
   83a68:	f43f af78 	beq.w	8395c <__sfvwrite_r+0x5c>
   83a6c:	2e00      	cmp	r6, #0
   83a6e:	d1d4      	bne.n	83a1a <__sfvwrite_r+0x11a>
   83a70:	f108 0308 	add.w	r3, r8, #8
   83a74:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83a78:	4698      	mov	r8, r3
   83a7a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   83a7e:	3308      	adds	r3, #8
   83a80:	2e00      	cmp	r6, #0
   83a82:	d0f7      	beq.n	83a74 <__sfvwrite_r+0x174>
   83a84:	4632      	mov	r2, r6
   83a86:	210a      	movs	r1, #10
   83a88:	4628      	mov	r0, r5
   83a8a:	f000 fc21 	bl	842d0 <memchr>
   83a8e:	2800      	cmp	r0, #0
   83a90:	f000 80a1 	beq.w	83bd6 <__sfvwrite_r+0x2d6>
   83a94:	3001      	adds	r0, #1
   83a96:	eba0 0905 	sub.w	r9, r0, r5
   83a9a:	e7c0      	b.n	83a1e <__sfvwrite_r+0x11e>
   83a9c:	6820      	ldr	r0, [r4, #0]
   83a9e:	6923      	ldr	r3, [r4, #16]
   83aa0:	4298      	cmp	r0, r3
   83aa2:	d802      	bhi.n	83aaa <__sfvwrite_r+0x1aa>
   83aa4:	6963      	ldr	r3, [r4, #20]
   83aa6:	429f      	cmp	r7, r3
   83aa8:	d25d      	bcs.n	83b66 <__sfvwrite_r+0x266>
   83aaa:	45b8      	cmp	r8, r7
   83aac:	bf28      	it	cs
   83aae:	46b8      	movcs	r8, r7
   83ab0:	4649      	mov	r1, r9
   83ab2:	4642      	mov	r2, r8
   83ab4:	f000 fc52 	bl	8435c <memmove>
   83ab8:	68a3      	ldr	r3, [r4, #8]
   83aba:	6822      	ldr	r2, [r4, #0]
   83abc:	eba3 0308 	sub.w	r3, r3, r8
   83ac0:	4442      	add	r2, r8
   83ac2:	60a3      	str	r3, [r4, #8]
   83ac4:	6022      	str	r2, [r4, #0]
   83ac6:	b10b      	cbz	r3, 83acc <__sfvwrite_r+0x1cc>
   83ac8:	46c2      	mov	sl, r8
   83aca:	e777      	b.n	839bc <__sfvwrite_r+0xbc>
   83acc:	4621      	mov	r1, r4
   83ace:	9800      	ldr	r0, [sp, #0]
   83ad0:	f7ff fcb2 	bl	83438 <_fflush_r>
   83ad4:	2800      	cmp	r0, #0
   83ad6:	d18f      	bne.n	839f8 <__sfvwrite_r+0xf8>
   83ad8:	46c2      	mov	sl, r8
   83ada:	e76f      	b.n	839bc <__sfvwrite_r+0xbc>
   83adc:	465a      	mov	r2, fp
   83ade:	4629      	mov	r1, r5
   83ae0:	f000 fc3c 	bl	8435c <memmove>
   83ae4:	68a2      	ldr	r2, [r4, #8]
   83ae6:	6823      	ldr	r3, [r4, #0]
   83ae8:	eba2 020b 	sub.w	r2, r2, fp
   83aec:	445b      	add	r3, fp
   83aee:	60a2      	str	r2, [r4, #8]
   83af0:	6023      	str	r3, [r4, #0]
   83af2:	e7ad      	b.n	83a50 <__sfvwrite_r+0x150>
   83af4:	46b8      	mov	r8, r7
   83af6:	46ba      	mov	sl, r7
   83af8:	46bb      	mov	fp, r7
   83afa:	6820      	ldr	r0, [r4, #0]
   83afc:	e753      	b.n	839a6 <__sfvwrite_r+0xa6>
   83afe:	6962      	ldr	r2, [r4, #20]
   83b00:	6820      	ldr	r0, [r4, #0]
   83b02:	6921      	ldr	r1, [r4, #16]
   83b04:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83b08:	eba0 0a01 	sub.w	sl, r0, r1
   83b0c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83b10:	f10a 0001 	add.w	r0, sl, #1
   83b14:	ea4f 0868 	mov.w	r8, r8, asr #1
   83b18:	4438      	add	r0, r7
   83b1a:	4540      	cmp	r0, r8
   83b1c:	4642      	mov	r2, r8
   83b1e:	bf84      	itt	hi
   83b20:	4680      	movhi	r8, r0
   83b22:	4642      	movhi	r2, r8
   83b24:	055b      	lsls	r3, r3, #21
   83b26:	d544      	bpl.n	83bb2 <__sfvwrite_r+0x2b2>
   83b28:	4611      	mov	r1, r2
   83b2a:	9800      	ldr	r0, [sp, #0]
   83b2c:	f000 f918 	bl	83d60 <_malloc_r>
   83b30:	4683      	mov	fp, r0
   83b32:	2800      	cmp	r0, #0
   83b34:	d055      	beq.n	83be2 <__sfvwrite_r+0x2e2>
   83b36:	4652      	mov	r2, sl
   83b38:	6921      	ldr	r1, [r4, #16]
   83b3a:	f7fe fbb3 	bl	822a4 <memcpy>
   83b3e:	89a3      	ldrh	r3, [r4, #12]
   83b40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83b48:	81a3      	strh	r3, [r4, #12]
   83b4a:	eb0b 000a 	add.w	r0, fp, sl
   83b4e:	eba8 030a 	sub.w	r3, r8, sl
   83b52:	f8c4 b010 	str.w	fp, [r4, #16]
   83b56:	f8c4 8014 	str.w	r8, [r4, #20]
   83b5a:	6020      	str	r0, [r4, #0]
   83b5c:	60a3      	str	r3, [r4, #8]
   83b5e:	46b8      	mov	r8, r7
   83b60:	46ba      	mov	sl, r7
   83b62:	46bb      	mov	fp, r7
   83b64:	e71f      	b.n	839a6 <__sfvwrite_r+0xa6>
   83b66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83b6a:	42ba      	cmp	r2, r7
   83b6c:	bf28      	it	cs
   83b6e:	463a      	movcs	r2, r7
   83b70:	fb92 f2f3 	sdiv	r2, r2, r3
   83b74:	69e1      	ldr	r1, [r4, #28]
   83b76:	fb03 f302 	mul.w	r3, r3, r2
   83b7a:	9800      	ldr	r0, [sp, #0]
   83b7c:	464a      	mov	r2, r9
   83b7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83b80:	47b0      	blx	r6
   83b82:	f1b0 0a00 	subs.w	sl, r0, #0
   83b86:	f73f af19 	bgt.w	839bc <__sfvwrite_r+0xbc>
   83b8a:	e735      	b.n	839f8 <__sfvwrite_r+0xf8>
   83b8c:	461a      	mov	r2, r3
   83b8e:	4629      	mov	r1, r5
   83b90:	9301      	str	r3, [sp, #4]
   83b92:	f000 fbe3 	bl	8435c <memmove>
   83b96:	6822      	ldr	r2, [r4, #0]
   83b98:	9b01      	ldr	r3, [sp, #4]
   83b9a:	4621      	mov	r1, r4
   83b9c:	441a      	add	r2, r3
   83b9e:	6022      	str	r2, [r4, #0]
   83ba0:	9800      	ldr	r0, [sp, #0]
   83ba2:	f7ff fc49 	bl	83438 <_fflush_r>
   83ba6:	9b01      	ldr	r3, [sp, #4]
   83ba8:	2800      	cmp	r0, #0
   83baa:	f47f af25 	bne.w	839f8 <__sfvwrite_r+0xf8>
   83bae:	461f      	mov	r7, r3
   83bb0:	e74e      	b.n	83a50 <__sfvwrite_r+0x150>
   83bb2:	9800      	ldr	r0, [sp, #0]
   83bb4:	f000 fc42 	bl	8443c <_realloc_r>
   83bb8:	4683      	mov	fp, r0
   83bba:	2800      	cmp	r0, #0
   83bbc:	d1c5      	bne.n	83b4a <__sfvwrite_r+0x24a>
   83bbe:	9d00      	ldr	r5, [sp, #0]
   83bc0:	6921      	ldr	r1, [r4, #16]
   83bc2:	4628      	mov	r0, r5
   83bc4:	f7ff fdb6 	bl	83734 <_free_r>
   83bc8:	220c      	movs	r2, #12
   83bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83bce:	602a      	str	r2, [r5, #0]
   83bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83bd4:	e712      	b.n	839fc <__sfvwrite_r+0xfc>
   83bd6:	f106 0901 	add.w	r9, r6, #1
   83bda:	e720      	b.n	83a1e <__sfvwrite_r+0x11e>
   83bdc:	f04f 30ff 	mov.w	r0, #4294967295
   83be0:	e6bd      	b.n	8395e <__sfvwrite_r+0x5e>
   83be2:	220c      	movs	r2, #12
   83be4:	9900      	ldr	r1, [sp, #0]
   83be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83bea:	600a      	str	r2, [r1, #0]
   83bec:	e706      	b.n	839fc <__sfvwrite_r+0xfc>
   83bee:	bf00      	nop
   83bf0:	7ffffc00 	.word	0x7ffffc00

00083bf4 <_fwalk_reent>:
   83bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83bf8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83bfc:	d01e      	beq.n	83c3c <_fwalk_reent+0x48>
   83bfe:	4688      	mov	r8, r1
   83c00:	4607      	mov	r7, r0
   83c02:	f04f 0900 	mov.w	r9, #0
   83c06:	6875      	ldr	r5, [r6, #4]
   83c08:	68b4      	ldr	r4, [r6, #8]
   83c0a:	3d01      	subs	r5, #1
   83c0c:	d410      	bmi.n	83c30 <_fwalk_reent+0x3c>
   83c0e:	89a3      	ldrh	r3, [r4, #12]
   83c10:	3d01      	subs	r5, #1
   83c12:	2b01      	cmp	r3, #1
   83c14:	d908      	bls.n	83c28 <_fwalk_reent+0x34>
   83c16:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83c1a:	3301      	adds	r3, #1
   83c1c:	d004      	beq.n	83c28 <_fwalk_reent+0x34>
   83c1e:	4621      	mov	r1, r4
   83c20:	4638      	mov	r0, r7
   83c22:	47c0      	blx	r8
   83c24:	ea49 0900 	orr.w	r9, r9, r0
   83c28:	1c6b      	adds	r3, r5, #1
   83c2a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83c2e:	d1ee      	bne.n	83c0e <_fwalk_reent+0x1a>
   83c30:	6836      	ldr	r6, [r6, #0]
   83c32:	2e00      	cmp	r6, #0
   83c34:	d1e7      	bne.n	83c06 <_fwalk_reent+0x12>
   83c36:	4648      	mov	r0, r9
   83c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83c3c:	46b1      	mov	r9, r6
   83c3e:	4648      	mov	r0, r9
   83c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083c44 <__locale_mb_cur_max>:
   83c44:	4b04      	ldr	r3, [pc, #16]	; (83c58 <__locale_mb_cur_max+0x14>)
   83c46:	4a05      	ldr	r2, [pc, #20]	; (83c5c <__locale_mb_cur_max+0x18>)
   83c48:	681b      	ldr	r3, [r3, #0]
   83c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83c4c:	2b00      	cmp	r3, #0
   83c4e:	bf08      	it	eq
   83c50:	4613      	moveq	r3, r2
   83c52:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83c56:	4770      	bx	lr
   83c58:	20070134 	.word	0x20070134
   83c5c:	20070564 	.word	0x20070564

00083c60 <__retarget_lock_init_recursive>:
   83c60:	4770      	bx	lr
   83c62:	bf00      	nop

00083c64 <__retarget_lock_close_recursive>:
   83c64:	4770      	bx	lr
   83c66:	bf00      	nop

00083c68 <__retarget_lock_acquire_recursive>:
   83c68:	4770      	bx	lr
   83c6a:	bf00      	nop

00083c6c <__retarget_lock_release_recursive>:
   83c6c:	4770      	bx	lr
   83c6e:	bf00      	nop

00083c70 <__swhatbuf_r>:
   83c70:	b570      	push	{r4, r5, r6, lr}
   83c72:	460c      	mov	r4, r1
   83c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c78:	b090      	sub	sp, #64	; 0x40
   83c7a:	2900      	cmp	r1, #0
   83c7c:	4615      	mov	r5, r2
   83c7e:	461e      	mov	r6, r3
   83c80:	db14      	blt.n	83cac <__swhatbuf_r+0x3c>
   83c82:	aa01      	add	r2, sp, #4
   83c84:	f000 ff60 	bl	84b48 <_fstat_r>
   83c88:	2800      	cmp	r0, #0
   83c8a:	db0f      	blt.n	83cac <__swhatbuf_r+0x3c>
   83c8c:	9a02      	ldr	r2, [sp, #8]
   83c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83c92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83c96:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83c9a:	fab2 f282 	clz	r2, r2
   83c9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83ca2:	0952      	lsrs	r2, r2, #5
   83ca4:	6032      	str	r2, [r6, #0]
   83ca6:	602b      	str	r3, [r5, #0]
   83ca8:	b010      	add	sp, #64	; 0x40
   83caa:	bd70      	pop	{r4, r5, r6, pc}
   83cac:	2300      	movs	r3, #0
   83cae:	89a2      	ldrh	r2, [r4, #12]
   83cb0:	6033      	str	r3, [r6, #0]
   83cb2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   83cb6:	d004      	beq.n	83cc2 <__swhatbuf_r+0x52>
   83cb8:	2240      	movs	r2, #64	; 0x40
   83cba:	4618      	mov	r0, r3
   83cbc:	602a      	str	r2, [r5, #0]
   83cbe:	b010      	add	sp, #64	; 0x40
   83cc0:	bd70      	pop	{r4, r5, r6, pc}
   83cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83cc6:	602b      	str	r3, [r5, #0]
   83cc8:	b010      	add	sp, #64	; 0x40
   83cca:	bd70      	pop	{r4, r5, r6, pc}

00083ccc <__smakebuf_r>:
   83ccc:	898a      	ldrh	r2, [r1, #12]
   83cce:	460b      	mov	r3, r1
   83cd0:	0792      	lsls	r2, r2, #30
   83cd2:	d506      	bpl.n	83ce2 <__smakebuf_r+0x16>
   83cd4:	2101      	movs	r1, #1
   83cd6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83cda:	6159      	str	r1, [r3, #20]
   83cdc:	601a      	str	r2, [r3, #0]
   83cde:	611a      	str	r2, [r3, #16]
   83ce0:	4770      	bx	lr
   83ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
   83ce4:	b083      	sub	sp, #12
   83ce6:	ab01      	add	r3, sp, #4
   83ce8:	466a      	mov	r2, sp
   83cea:	460c      	mov	r4, r1
   83cec:	4606      	mov	r6, r0
   83cee:	f7ff ffbf 	bl	83c70 <__swhatbuf_r>
   83cf2:	9900      	ldr	r1, [sp, #0]
   83cf4:	4605      	mov	r5, r0
   83cf6:	4630      	mov	r0, r6
   83cf8:	f000 f832 	bl	83d60 <_malloc_r>
   83cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d00:	b1d8      	cbz	r0, 83d3a <__smakebuf_r+0x6e>
   83d02:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83d06:	4f15      	ldr	r7, [pc, #84]	; (83d5c <__smakebuf_r+0x90>)
   83d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83d0c:	63f7      	str	r7, [r6, #60]	; 0x3c
   83d0e:	81a3      	strh	r3, [r4, #12]
   83d10:	6020      	str	r0, [r4, #0]
   83d12:	6120      	str	r0, [r4, #16]
   83d14:	6161      	str	r1, [r4, #20]
   83d16:	b91a      	cbnz	r2, 83d20 <__smakebuf_r+0x54>
   83d18:	432b      	orrs	r3, r5
   83d1a:	81a3      	strh	r3, [r4, #12]
   83d1c:	b003      	add	sp, #12
   83d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83d20:	4630      	mov	r0, r6
   83d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83d26:	f000 ff23 	bl	84b70 <_isatty_r>
   83d2a:	b1a0      	cbz	r0, 83d56 <__smakebuf_r+0x8a>
   83d2c:	89a3      	ldrh	r3, [r4, #12]
   83d2e:	f023 0303 	bic.w	r3, r3, #3
   83d32:	f043 0301 	orr.w	r3, r3, #1
   83d36:	b21b      	sxth	r3, r3
   83d38:	e7ee      	b.n	83d18 <__smakebuf_r+0x4c>
   83d3a:	059a      	lsls	r2, r3, #22
   83d3c:	d4ee      	bmi.n	83d1c <__smakebuf_r+0x50>
   83d3e:	2101      	movs	r1, #1
   83d40:	f023 0303 	bic.w	r3, r3, #3
   83d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83d48:	f043 0302 	orr.w	r3, r3, #2
   83d4c:	81a3      	strh	r3, [r4, #12]
   83d4e:	6161      	str	r1, [r4, #20]
   83d50:	6022      	str	r2, [r4, #0]
   83d52:	6122      	str	r2, [r4, #16]
   83d54:	e7e2      	b.n	83d1c <__smakebuf_r+0x50>
   83d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d5a:	e7dd      	b.n	83d18 <__smakebuf_r+0x4c>
   83d5c:	0008348d 	.word	0x0008348d

00083d60 <_malloc_r>:
   83d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d64:	f101 060b 	add.w	r6, r1, #11
   83d68:	2e16      	cmp	r6, #22
   83d6a:	b083      	sub	sp, #12
   83d6c:	4605      	mov	r5, r0
   83d6e:	f240 809e 	bls.w	83eae <_malloc_r+0x14e>
   83d72:	f036 0607 	bics.w	r6, r6, #7
   83d76:	f100 80bd 	bmi.w	83ef4 <_malloc_r+0x194>
   83d7a:	42b1      	cmp	r1, r6
   83d7c:	f200 80ba 	bhi.w	83ef4 <_malloc_r+0x194>
   83d80:	f000 fb50 	bl	84424 <__malloc_lock>
   83d84:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83d88:	f0c0 8285 	bcc.w	84296 <_malloc_r+0x536>
   83d8c:	0a73      	lsrs	r3, r6, #9
   83d8e:	f000 80b8 	beq.w	83f02 <_malloc_r+0x1a2>
   83d92:	2b04      	cmp	r3, #4
   83d94:	f200 816c 	bhi.w	84070 <_malloc_r+0x310>
   83d98:	09b3      	lsrs	r3, r6, #6
   83d9a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83d9e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83da2:	00c1      	lsls	r1, r0, #3
   83da4:	4fb8      	ldr	r7, [pc, #736]	; (84088 <_malloc_r+0x328>)
   83da6:	4439      	add	r1, r7
   83da8:	684c      	ldr	r4, [r1, #4]
   83daa:	3908      	subs	r1, #8
   83dac:	42a1      	cmp	r1, r4
   83dae:	d106      	bne.n	83dbe <_malloc_r+0x5e>
   83db0:	e00c      	b.n	83dcc <_malloc_r+0x6c>
   83db2:	2a00      	cmp	r2, #0
   83db4:	f280 80ab 	bge.w	83f0e <_malloc_r+0x1ae>
   83db8:	68e4      	ldr	r4, [r4, #12]
   83dba:	42a1      	cmp	r1, r4
   83dbc:	d006      	beq.n	83dcc <_malloc_r+0x6c>
   83dbe:	6863      	ldr	r3, [r4, #4]
   83dc0:	f023 0303 	bic.w	r3, r3, #3
   83dc4:	1b9a      	subs	r2, r3, r6
   83dc6:	2a0f      	cmp	r2, #15
   83dc8:	ddf3      	ble.n	83db2 <_malloc_r+0x52>
   83dca:	4670      	mov	r0, lr
   83dcc:	693c      	ldr	r4, [r7, #16]
   83dce:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8409c <_malloc_r+0x33c>
   83dd2:	4574      	cmp	r4, lr
   83dd4:	f000 819e 	beq.w	84114 <_malloc_r+0x3b4>
   83dd8:	6863      	ldr	r3, [r4, #4]
   83dda:	f023 0303 	bic.w	r3, r3, #3
   83dde:	1b9a      	subs	r2, r3, r6
   83de0:	2a0f      	cmp	r2, #15
   83de2:	f300 8183 	bgt.w	840ec <_malloc_r+0x38c>
   83de6:	2a00      	cmp	r2, #0
   83de8:	f8c7 e014 	str.w	lr, [r7, #20]
   83dec:	f8c7 e010 	str.w	lr, [r7, #16]
   83df0:	f280 8091 	bge.w	83f16 <_malloc_r+0x1b6>
   83df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83df8:	f080 8154 	bcs.w	840a4 <_malloc_r+0x344>
   83dfc:	2201      	movs	r2, #1
   83dfe:	08db      	lsrs	r3, r3, #3
   83e00:	6879      	ldr	r1, [r7, #4]
   83e02:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83e06:	4413      	add	r3, r2
   83e08:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83e0c:	fa02 f20c 	lsl.w	r2, r2, ip
   83e10:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83e14:	430a      	orrs	r2, r1
   83e16:	f1ac 0108 	sub.w	r1, ip, #8
   83e1a:	60e1      	str	r1, [r4, #12]
   83e1c:	f8c4 8008 	str.w	r8, [r4, #8]
   83e20:	607a      	str	r2, [r7, #4]
   83e22:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83e26:	f8c8 400c 	str.w	r4, [r8, #12]
   83e2a:	2401      	movs	r4, #1
   83e2c:	1083      	asrs	r3, r0, #2
   83e2e:	409c      	lsls	r4, r3
   83e30:	4294      	cmp	r4, r2
   83e32:	d87d      	bhi.n	83f30 <_malloc_r+0x1d0>
   83e34:	4214      	tst	r4, r2
   83e36:	d106      	bne.n	83e46 <_malloc_r+0xe6>
   83e38:	f020 0003 	bic.w	r0, r0, #3
   83e3c:	0064      	lsls	r4, r4, #1
   83e3e:	4214      	tst	r4, r2
   83e40:	f100 0004 	add.w	r0, r0, #4
   83e44:	d0fa      	beq.n	83e3c <_malloc_r+0xdc>
   83e46:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83e4a:	46cc      	mov	ip, r9
   83e4c:	4680      	mov	r8, r0
   83e4e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83e52:	459c      	cmp	ip, r3
   83e54:	d107      	bne.n	83e66 <_malloc_r+0x106>
   83e56:	e15f      	b.n	84118 <_malloc_r+0x3b8>
   83e58:	2a00      	cmp	r2, #0
   83e5a:	f280 816d 	bge.w	84138 <_malloc_r+0x3d8>
   83e5e:	68db      	ldr	r3, [r3, #12]
   83e60:	459c      	cmp	ip, r3
   83e62:	f000 8159 	beq.w	84118 <_malloc_r+0x3b8>
   83e66:	6859      	ldr	r1, [r3, #4]
   83e68:	f021 0103 	bic.w	r1, r1, #3
   83e6c:	1b8a      	subs	r2, r1, r6
   83e6e:	2a0f      	cmp	r2, #15
   83e70:	ddf2      	ble.n	83e58 <_malloc_r+0xf8>
   83e72:	68dc      	ldr	r4, [r3, #12]
   83e74:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83e78:	f046 0801 	orr.w	r8, r6, #1
   83e7c:	4628      	mov	r0, r5
   83e7e:	441e      	add	r6, r3
   83e80:	f042 0501 	orr.w	r5, r2, #1
   83e84:	f8c3 8004 	str.w	r8, [r3, #4]
   83e88:	f8cc 400c 	str.w	r4, [ip, #12]
   83e8c:	f8c4 c008 	str.w	ip, [r4, #8]
   83e90:	617e      	str	r6, [r7, #20]
   83e92:	613e      	str	r6, [r7, #16]
   83e94:	f8c6 e00c 	str.w	lr, [r6, #12]
   83e98:	f8c6 e008 	str.w	lr, [r6, #8]
   83e9c:	6075      	str	r5, [r6, #4]
   83e9e:	505a      	str	r2, [r3, r1]
   83ea0:	9300      	str	r3, [sp, #0]
   83ea2:	f000 fac5 	bl	84430 <__malloc_unlock>
   83ea6:	9b00      	ldr	r3, [sp, #0]
   83ea8:	f103 0408 	add.w	r4, r3, #8
   83eac:	e01e      	b.n	83eec <_malloc_r+0x18c>
   83eae:	2910      	cmp	r1, #16
   83eb0:	d820      	bhi.n	83ef4 <_malloc_r+0x194>
   83eb2:	f000 fab7 	bl	84424 <__malloc_lock>
   83eb6:	2610      	movs	r6, #16
   83eb8:	2318      	movs	r3, #24
   83eba:	2002      	movs	r0, #2
   83ebc:	4f72      	ldr	r7, [pc, #456]	; (84088 <_malloc_r+0x328>)
   83ebe:	443b      	add	r3, r7
   83ec0:	685c      	ldr	r4, [r3, #4]
   83ec2:	f1a3 0208 	sub.w	r2, r3, #8
   83ec6:	4294      	cmp	r4, r2
   83ec8:	f000 812f 	beq.w	8412a <_malloc_r+0x3ca>
   83ecc:	6863      	ldr	r3, [r4, #4]
   83ece:	68e1      	ldr	r1, [r4, #12]
   83ed0:	f023 0303 	bic.w	r3, r3, #3
   83ed4:	4423      	add	r3, r4
   83ed6:	685a      	ldr	r2, [r3, #4]
   83ed8:	68a6      	ldr	r6, [r4, #8]
   83eda:	f042 0201 	orr.w	r2, r2, #1
   83ede:	60f1      	str	r1, [r6, #12]
   83ee0:	4628      	mov	r0, r5
   83ee2:	608e      	str	r6, [r1, #8]
   83ee4:	605a      	str	r2, [r3, #4]
   83ee6:	f000 faa3 	bl	84430 <__malloc_unlock>
   83eea:	3408      	adds	r4, #8
   83eec:	4620      	mov	r0, r4
   83eee:	b003      	add	sp, #12
   83ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ef4:	2400      	movs	r4, #0
   83ef6:	230c      	movs	r3, #12
   83ef8:	4620      	mov	r0, r4
   83efa:	602b      	str	r3, [r5, #0]
   83efc:	b003      	add	sp, #12
   83efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f02:	2040      	movs	r0, #64	; 0x40
   83f04:	f44f 7100 	mov.w	r1, #512	; 0x200
   83f08:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83f0c:	e74a      	b.n	83da4 <_malloc_r+0x44>
   83f0e:	4423      	add	r3, r4
   83f10:	685a      	ldr	r2, [r3, #4]
   83f12:	68e1      	ldr	r1, [r4, #12]
   83f14:	e7e0      	b.n	83ed8 <_malloc_r+0x178>
   83f16:	4423      	add	r3, r4
   83f18:	685a      	ldr	r2, [r3, #4]
   83f1a:	4628      	mov	r0, r5
   83f1c:	f042 0201 	orr.w	r2, r2, #1
   83f20:	605a      	str	r2, [r3, #4]
   83f22:	3408      	adds	r4, #8
   83f24:	f000 fa84 	bl	84430 <__malloc_unlock>
   83f28:	4620      	mov	r0, r4
   83f2a:	b003      	add	sp, #12
   83f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f30:	68bc      	ldr	r4, [r7, #8]
   83f32:	6863      	ldr	r3, [r4, #4]
   83f34:	f023 0803 	bic.w	r8, r3, #3
   83f38:	45b0      	cmp	r8, r6
   83f3a:	d304      	bcc.n	83f46 <_malloc_r+0x1e6>
   83f3c:	eba8 0306 	sub.w	r3, r8, r6
   83f40:	2b0f      	cmp	r3, #15
   83f42:	f300 8085 	bgt.w	84050 <_malloc_r+0x2f0>
   83f46:	f8df 9158 	ldr.w	r9, [pc, #344]	; 840a0 <_malloc_r+0x340>
   83f4a:	4b50      	ldr	r3, [pc, #320]	; (8408c <_malloc_r+0x32c>)
   83f4c:	f8d9 2000 	ldr.w	r2, [r9]
   83f50:	681b      	ldr	r3, [r3, #0]
   83f52:	3201      	adds	r2, #1
   83f54:	4433      	add	r3, r6
   83f56:	eb04 0a08 	add.w	sl, r4, r8
   83f5a:	f000 8154 	beq.w	84206 <_malloc_r+0x4a6>
   83f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83f62:	330f      	adds	r3, #15
   83f64:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83f68:	f02b 0b0f 	bic.w	fp, fp, #15
   83f6c:	4659      	mov	r1, fp
   83f6e:	4628      	mov	r0, r5
   83f70:	f000 fc1a 	bl	847a8 <_sbrk_r>
   83f74:	1c41      	adds	r1, r0, #1
   83f76:	4602      	mov	r2, r0
   83f78:	f000 80fb 	beq.w	84172 <_malloc_r+0x412>
   83f7c:	4582      	cmp	sl, r0
   83f7e:	f200 80f6 	bhi.w	8416e <_malloc_r+0x40e>
   83f82:	4b43      	ldr	r3, [pc, #268]	; (84090 <_malloc_r+0x330>)
   83f84:	6819      	ldr	r1, [r3, #0]
   83f86:	4459      	add	r1, fp
   83f88:	6019      	str	r1, [r3, #0]
   83f8a:	f000 814c 	beq.w	84226 <_malloc_r+0x4c6>
   83f8e:	f8d9 0000 	ldr.w	r0, [r9]
   83f92:	3001      	adds	r0, #1
   83f94:	bf1b      	ittet	ne
   83f96:	eba2 0a0a 	subne.w	sl, r2, sl
   83f9a:	4451      	addne	r1, sl
   83f9c:	f8c9 2000 	streq.w	r2, [r9]
   83fa0:	6019      	strne	r1, [r3, #0]
   83fa2:	f012 0107 	ands.w	r1, r2, #7
   83fa6:	f000 8114 	beq.w	841d2 <_malloc_r+0x472>
   83faa:	f1c1 0008 	rsb	r0, r1, #8
   83fae:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83fb2:	4402      	add	r2, r0
   83fb4:	3108      	adds	r1, #8
   83fb6:	eb02 090b 	add.w	r9, r2, fp
   83fba:	f3c9 090b 	ubfx	r9, r9, #0, #12
   83fbe:	eba1 0909 	sub.w	r9, r1, r9
   83fc2:	4649      	mov	r1, r9
   83fc4:	4628      	mov	r0, r5
   83fc6:	9301      	str	r3, [sp, #4]
   83fc8:	9200      	str	r2, [sp, #0]
   83fca:	f000 fbed 	bl	847a8 <_sbrk_r>
   83fce:	1c43      	adds	r3, r0, #1
   83fd0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83fd4:	f000 8142 	beq.w	8425c <_malloc_r+0x4fc>
   83fd8:	1a80      	subs	r0, r0, r2
   83fda:	4448      	add	r0, r9
   83fdc:	f040 0001 	orr.w	r0, r0, #1
   83fe0:	6819      	ldr	r1, [r3, #0]
   83fe2:	42bc      	cmp	r4, r7
   83fe4:	4449      	add	r1, r9
   83fe6:	60ba      	str	r2, [r7, #8]
   83fe8:	6019      	str	r1, [r3, #0]
   83fea:	6050      	str	r0, [r2, #4]
   83fec:	d017      	beq.n	8401e <_malloc_r+0x2be>
   83fee:	f1b8 0f0f 	cmp.w	r8, #15
   83ff2:	f240 80fa 	bls.w	841ea <_malloc_r+0x48a>
   83ff6:	f04f 0c05 	mov.w	ip, #5
   83ffa:	6862      	ldr	r2, [r4, #4]
   83ffc:	f1a8 000c 	sub.w	r0, r8, #12
   84000:	f020 0007 	bic.w	r0, r0, #7
   84004:	f002 0201 	and.w	r2, r2, #1
   84008:	eb04 0e00 	add.w	lr, r4, r0
   8400c:	4302      	orrs	r2, r0
   8400e:	280f      	cmp	r0, #15
   84010:	6062      	str	r2, [r4, #4]
   84012:	f8ce c004 	str.w	ip, [lr, #4]
   84016:	f8ce c008 	str.w	ip, [lr, #8]
   8401a:	f200 8116 	bhi.w	8424a <_malloc_r+0x4ea>
   8401e:	4b1d      	ldr	r3, [pc, #116]	; (84094 <_malloc_r+0x334>)
   84020:	68bc      	ldr	r4, [r7, #8]
   84022:	681a      	ldr	r2, [r3, #0]
   84024:	4291      	cmp	r1, r2
   84026:	bf88      	it	hi
   84028:	6019      	strhi	r1, [r3, #0]
   8402a:	4b1b      	ldr	r3, [pc, #108]	; (84098 <_malloc_r+0x338>)
   8402c:	681a      	ldr	r2, [r3, #0]
   8402e:	4291      	cmp	r1, r2
   84030:	6862      	ldr	r2, [r4, #4]
   84032:	bf88      	it	hi
   84034:	6019      	strhi	r1, [r3, #0]
   84036:	f022 0203 	bic.w	r2, r2, #3
   8403a:	4296      	cmp	r6, r2
   8403c:	eba2 0306 	sub.w	r3, r2, r6
   84040:	d801      	bhi.n	84046 <_malloc_r+0x2e6>
   84042:	2b0f      	cmp	r3, #15
   84044:	dc04      	bgt.n	84050 <_malloc_r+0x2f0>
   84046:	4628      	mov	r0, r5
   84048:	f000 f9f2 	bl	84430 <__malloc_unlock>
   8404c:	2400      	movs	r4, #0
   8404e:	e74d      	b.n	83eec <_malloc_r+0x18c>
   84050:	f046 0201 	orr.w	r2, r6, #1
   84054:	f043 0301 	orr.w	r3, r3, #1
   84058:	4426      	add	r6, r4
   8405a:	6062      	str	r2, [r4, #4]
   8405c:	4628      	mov	r0, r5
   8405e:	60be      	str	r6, [r7, #8]
   84060:	3408      	adds	r4, #8
   84062:	6073      	str	r3, [r6, #4]
   84064:	f000 f9e4 	bl	84430 <__malloc_unlock>
   84068:	4620      	mov	r0, r4
   8406a:	b003      	add	sp, #12
   8406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84070:	2b14      	cmp	r3, #20
   84072:	d970      	bls.n	84156 <_malloc_r+0x3f6>
   84074:	2b54      	cmp	r3, #84	; 0x54
   84076:	f200 80a2 	bhi.w	841be <_malloc_r+0x45e>
   8407a:	0b33      	lsrs	r3, r6, #12
   8407c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84080:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84084:	00c1      	lsls	r1, r0, #3
   84086:	e68d      	b.n	83da4 <_malloc_r+0x44>
   84088:	200706d0 	.word	0x200706d0
   8408c:	2007c4f0 	.word	0x2007c4f0
   84090:	2007c4c0 	.word	0x2007c4c0
   84094:	2007c4e8 	.word	0x2007c4e8
   84098:	2007c4ec 	.word	0x2007c4ec
   8409c:	200706d8 	.word	0x200706d8
   840a0:	20070ad8 	.word	0x20070ad8
   840a4:	0a5a      	lsrs	r2, r3, #9
   840a6:	2a04      	cmp	r2, #4
   840a8:	d95b      	bls.n	84162 <_malloc_r+0x402>
   840aa:	2a14      	cmp	r2, #20
   840ac:	f200 80ae 	bhi.w	8420c <_malloc_r+0x4ac>
   840b0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   840b4:	00c9      	lsls	r1, r1, #3
   840b6:	325b      	adds	r2, #91	; 0x5b
   840b8:	eb07 0c01 	add.w	ip, r7, r1
   840bc:	5879      	ldr	r1, [r7, r1]
   840be:	f1ac 0c08 	sub.w	ip, ip, #8
   840c2:	458c      	cmp	ip, r1
   840c4:	f000 8088 	beq.w	841d8 <_malloc_r+0x478>
   840c8:	684a      	ldr	r2, [r1, #4]
   840ca:	f022 0203 	bic.w	r2, r2, #3
   840ce:	4293      	cmp	r3, r2
   840d0:	d273      	bcs.n	841ba <_malloc_r+0x45a>
   840d2:	6889      	ldr	r1, [r1, #8]
   840d4:	458c      	cmp	ip, r1
   840d6:	d1f7      	bne.n	840c8 <_malloc_r+0x368>
   840d8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   840dc:	687a      	ldr	r2, [r7, #4]
   840de:	60e3      	str	r3, [r4, #12]
   840e0:	f8c4 c008 	str.w	ip, [r4, #8]
   840e4:	609c      	str	r4, [r3, #8]
   840e6:	f8cc 400c 	str.w	r4, [ip, #12]
   840ea:	e69e      	b.n	83e2a <_malloc_r+0xca>
   840ec:	f046 0c01 	orr.w	ip, r6, #1
   840f0:	f042 0101 	orr.w	r1, r2, #1
   840f4:	4426      	add	r6, r4
   840f6:	f8c4 c004 	str.w	ip, [r4, #4]
   840fa:	4628      	mov	r0, r5
   840fc:	617e      	str	r6, [r7, #20]
   840fe:	613e      	str	r6, [r7, #16]
   84100:	f8c6 e00c 	str.w	lr, [r6, #12]
   84104:	f8c6 e008 	str.w	lr, [r6, #8]
   84108:	6071      	str	r1, [r6, #4]
   8410a:	50e2      	str	r2, [r4, r3]
   8410c:	f000 f990 	bl	84430 <__malloc_unlock>
   84110:	3408      	adds	r4, #8
   84112:	e6eb      	b.n	83eec <_malloc_r+0x18c>
   84114:	687a      	ldr	r2, [r7, #4]
   84116:	e688      	b.n	83e2a <_malloc_r+0xca>
   84118:	f108 0801 	add.w	r8, r8, #1
   8411c:	f018 0f03 	tst.w	r8, #3
   84120:	f10c 0c08 	add.w	ip, ip, #8
   84124:	f47f ae93 	bne.w	83e4e <_malloc_r+0xee>
   84128:	e02d      	b.n	84186 <_malloc_r+0x426>
   8412a:	68dc      	ldr	r4, [r3, #12]
   8412c:	42a3      	cmp	r3, r4
   8412e:	bf08      	it	eq
   84130:	3002      	addeq	r0, #2
   84132:	f43f ae4b 	beq.w	83dcc <_malloc_r+0x6c>
   84136:	e6c9      	b.n	83ecc <_malloc_r+0x16c>
   84138:	461c      	mov	r4, r3
   8413a:	4419      	add	r1, r3
   8413c:	684a      	ldr	r2, [r1, #4]
   8413e:	68db      	ldr	r3, [r3, #12]
   84140:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84144:	f042 0201 	orr.w	r2, r2, #1
   84148:	604a      	str	r2, [r1, #4]
   8414a:	4628      	mov	r0, r5
   8414c:	60f3      	str	r3, [r6, #12]
   8414e:	609e      	str	r6, [r3, #8]
   84150:	f000 f96e 	bl	84430 <__malloc_unlock>
   84154:	e6ca      	b.n	83eec <_malloc_r+0x18c>
   84156:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8415a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8415e:	00c1      	lsls	r1, r0, #3
   84160:	e620      	b.n	83da4 <_malloc_r+0x44>
   84162:	099a      	lsrs	r2, r3, #6
   84164:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84168:	00c9      	lsls	r1, r1, #3
   8416a:	3238      	adds	r2, #56	; 0x38
   8416c:	e7a4      	b.n	840b8 <_malloc_r+0x358>
   8416e:	42bc      	cmp	r4, r7
   84170:	d054      	beq.n	8421c <_malloc_r+0x4bc>
   84172:	68bc      	ldr	r4, [r7, #8]
   84174:	6862      	ldr	r2, [r4, #4]
   84176:	f022 0203 	bic.w	r2, r2, #3
   8417a:	e75e      	b.n	8403a <_malloc_r+0x2da>
   8417c:	f859 3908 	ldr.w	r3, [r9], #-8
   84180:	4599      	cmp	r9, r3
   84182:	f040 8086 	bne.w	84292 <_malloc_r+0x532>
   84186:	f010 0f03 	tst.w	r0, #3
   8418a:	f100 30ff 	add.w	r0, r0, #4294967295
   8418e:	d1f5      	bne.n	8417c <_malloc_r+0x41c>
   84190:	687b      	ldr	r3, [r7, #4]
   84192:	ea23 0304 	bic.w	r3, r3, r4
   84196:	607b      	str	r3, [r7, #4]
   84198:	0064      	lsls	r4, r4, #1
   8419a:	429c      	cmp	r4, r3
   8419c:	f63f aec8 	bhi.w	83f30 <_malloc_r+0x1d0>
   841a0:	2c00      	cmp	r4, #0
   841a2:	f43f aec5 	beq.w	83f30 <_malloc_r+0x1d0>
   841a6:	421c      	tst	r4, r3
   841a8:	4640      	mov	r0, r8
   841aa:	f47f ae4c 	bne.w	83e46 <_malloc_r+0xe6>
   841ae:	0064      	lsls	r4, r4, #1
   841b0:	421c      	tst	r4, r3
   841b2:	f100 0004 	add.w	r0, r0, #4
   841b6:	d0fa      	beq.n	841ae <_malloc_r+0x44e>
   841b8:	e645      	b.n	83e46 <_malloc_r+0xe6>
   841ba:	468c      	mov	ip, r1
   841bc:	e78c      	b.n	840d8 <_malloc_r+0x378>
   841be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   841c2:	d815      	bhi.n	841f0 <_malloc_r+0x490>
   841c4:	0bf3      	lsrs	r3, r6, #15
   841c6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   841ca:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   841ce:	00c1      	lsls	r1, r0, #3
   841d0:	e5e8      	b.n	83da4 <_malloc_r+0x44>
   841d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   841d6:	e6ee      	b.n	83fb6 <_malloc_r+0x256>
   841d8:	2101      	movs	r1, #1
   841da:	687b      	ldr	r3, [r7, #4]
   841dc:	1092      	asrs	r2, r2, #2
   841de:	fa01 f202 	lsl.w	r2, r1, r2
   841e2:	431a      	orrs	r2, r3
   841e4:	607a      	str	r2, [r7, #4]
   841e6:	4663      	mov	r3, ip
   841e8:	e779      	b.n	840de <_malloc_r+0x37e>
   841ea:	2301      	movs	r3, #1
   841ec:	6053      	str	r3, [r2, #4]
   841ee:	e72a      	b.n	84046 <_malloc_r+0x2e6>
   841f0:	f240 5254 	movw	r2, #1364	; 0x554
   841f4:	4293      	cmp	r3, r2
   841f6:	d822      	bhi.n	8423e <_malloc_r+0x4de>
   841f8:	0cb3      	lsrs	r3, r6, #18
   841fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   841fe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84202:	00c1      	lsls	r1, r0, #3
   84204:	e5ce      	b.n	83da4 <_malloc_r+0x44>
   84206:	f103 0b10 	add.w	fp, r3, #16
   8420a:	e6af      	b.n	83f6c <_malloc_r+0x20c>
   8420c:	2a54      	cmp	r2, #84	; 0x54
   8420e:	d829      	bhi.n	84264 <_malloc_r+0x504>
   84210:	0b1a      	lsrs	r2, r3, #12
   84212:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84216:	00c9      	lsls	r1, r1, #3
   84218:	326e      	adds	r2, #110	; 0x6e
   8421a:	e74d      	b.n	840b8 <_malloc_r+0x358>
   8421c:	4b20      	ldr	r3, [pc, #128]	; (842a0 <_malloc_r+0x540>)
   8421e:	6819      	ldr	r1, [r3, #0]
   84220:	4459      	add	r1, fp
   84222:	6019      	str	r1, [r3, #0]
   84224:	e6b3      	b.n	83f8e <_malloc_r+0x22e>
   84226:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8422a:	2800      	cmp	r0, #0
   8422c:	f47f aeaf 	bne.w	83f8e <_malloc_r+0x22e>
   84230:	eb08 030b 	add.w	r3, r8, fp
   84234:	68ba      	ldr	r2, [r7, #8]
   84236:	f043 0301 	orr.w	r3, r3, #1
   8423a:	6053      	str	r3, [r2, #4]
   8423c:	e6ef      	b.n	8401e <_malloc_r+0x2be>
   8423e:	207f      	movs	r0, #127	; 0x7f
   84240:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84244:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84248:	e5ac      	b.n	83da4 <_malloc_r+0x44>
   8424a:	f104 0108 	add.w	r1, r4, #8
   8424e:	4628      	mov	r0, r5
   84250:	9300      	str	r3, [sp, #0]
   84252:	f7ff fa6f 	bl	83734 <_free_r>
   84256:	9b00      	ldr	r3, [sp, #0]
   84258:	6819      	ldr	r1, [r3, #0]
   8425a:	e6e0      	b.n	8401e <_malloc_r+0x2be>
   8425c:	2001      	movs	r0, #1
   8425e:	f04f 0900 	mov.w	r9, #0
   84262:	e6bd      	b.n	83fe0 <_malloc_r+0x280>
   84264:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84268:	d805      	bhi.n	84276 <_malloc_r+0x516>
   8426a:	0bda      	lsrs	r2, r3, #15
   8426c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84270:	00c9      	lsls	r1, r1, #3
   84272:	3277      	adds	r2, #119	; 0x77
   84274:	e720      	b.n	840b8 <_malloc_r+0x358>
   84276:	f240 5154 	movw	r1, #1364	; 0x554
   8427a:	428a      	cmp	r2, r1
   8427c:	d805      	bhi.n	8428a <_malloc_r+0x52a>
   8427e:	0c9a      	lsrs	r2, r3, #18
   84280:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84284:	00c9      	lsls	r1, r1, #3
   84286:	327c      	adds	r2, #124	; 0x7c
   84288:	e716      	b.n	840b8 <_malloc_r+0x358>
   8428a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8428e:	227e      	movs	r2, #126	; 0x7e
   84290:	e712      	b.n	840b8 <_malloc_r+0x358>
   84292:	687b      	ldr	r3, [r7, #4]
   84294:	e780      	b.n	84198 <_malloc_r+0x438>
   84296:	08f0      	lsrs	r0, r6, #3
   84298:	f106 0308 	add.w	r3, r6, #8
   8429c:	e60e      	b.n	83ebc <_malloc_r+0x15c>
   8429e:	bf00      	nop
   842a0:	2007c4c0 	.word	0x2007c4c0

000842a4 <__ascii_mbtowc>:
   842a4:	b082      	sub	sp, #8
   842a6:	b149      	cbz	r1, 842bc <__ascii_mbtowc+0x18>
   842a8:	b15a      	cbz	r2, 842c2 <__ascii_mbtowc+0x1e>
   842aa:	b16b      	cbz	r3, 842c8 <__ascii_mbtowc+0x24>
   842ac:	7813      	ldrb	r3, [r2, #0]
   842ae:	600b      	str	r3, [r1, #0]
   842b0:	7812      	ldrb	r2, [r2, #0]
   842b2:	1c10      	adds	r0, r2, #0
   842b4:	bf18      	it	ne
   842b6:	2001      	movne	r0, #1
   842b8:	b002      	add	sp, #8
   842ba:	4770      	bx	lr
   842bc:	a901      	add	r1, sp, #4
   842be:	2a00      	cmp	r2, #0
   842c0:	d1f3      	bne.n	842aa <__ascii_mbtowc+0x6>
   842c2:	4610      	mov	r0, r2
   842c4:	b002      	add	sp, #8
   842c6:	4770      	bx	lr
   842c8:	f06f 0001 	mvn.w	r0, #1
   842cc:	e7f4      	b.n	842b8 <__ascii_mbtowc+0x14>
   842ce:	bf00      	nop

000842d0 <memchr>:
   842d0:	0783      	lsls	r3, r0, #30
   842d2:	b470      	push	{r4, r5, r6}
   842d4:	b2cd      	uxtb	r5, r1
   842d6:	d03d      	beq.n	84354 <memchr+0x84>
   842d8:	1e54      	subs	r4, r2, #1
   842da:	b30a      	cbz	r2, 84320 <memchr+0x50>
   842dc:	7803      	ldrb	r3, [r0, #0]
   842de:	42ab      	cmp	r3, r5
   842e0:	d01f      	beq.n	84322 <memchr+0x52>
   842e2:	1c43      	adds	r3, r0, #1
   842e4:	e005      	b.n	842f2 <memchr+0x22>
   842e6:	f114 34ff 	adds.w	r4, r4, #4294967295
   842ea:	d319      	bcc.n	84320 <memchr+0x50>
   842ec:	7802      	ldrb	r2, [r0, #0]
   842ee:	42aa      	cmp	r2, r5
   842f0:	d017      	beq.n	84322 <memchr+0x52>
   842f2:	f013 0f03 	tst.w	r3, #3
   842f6:	4618      	mov	r0, r3
   842f8:	f103 0301 	add.w	r3, r3, #1
   842fc:	d1f3      	bne.n	842e6 <memchr+0x16>
   842fe:	2c03      	cmp	r4, #3
   84300:	d811      	bhi.n	84326 <memchr+0x56>
   84302:	b34c      	cbz	r4, 84358 <memchr+0x88>
   84304:	7803      	ldrb	r3, [r0, #0]
   84306:	42ab      	cmp	r3, r5
   84308:	d00b      	beq.n	84322 <memchr+0x52>
   8430a:	4404      	add	r4, r0
   8430c:	1c43      	adds	r3, r0, #1
   8430e:	e002      	b.n	84316 <memchr+0x46>
   84310:	7802      	ldrb	r2, [r0, #0]
   84312:	42aa      	cmp	r2, r5
   84314:	d005      	beq.n	84322 <memchr+0x52>
   84316:	429c      	cmp	r4, r3
   84318:	4618      	mov	r0, r3
   8431a:	f103 0301 	add.w	r3, r3, #1
   8431e:	d1f7      	bne.n	84310 <memchr+0x40>
   84320:	2000      	movs	r0, #0
   84322:	bc70      	pop	{r4, r5, r6}
   84324:	4770      	bx	lr
   84326:	0209      	lsls	r1, r1, #8
   84328:	b289      	uxth	r1, r1
   8432a:	4329      	orrs	r1, r5
   8432c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84330:	6803      	ldr	r3, [r0, #0]
   84332:	4606      	mov	r6, r0
   84334:	404b      	eors	r3, r1
   84336:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8433a:	ea22 0303 	bic.w	r3, r2, r3
   8433e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84342:	f100 0004 	add.w	r0, r0, #4
   84346:	d103      	bne.n	84350 <memchr+0x80>
   84348:	3c04      	subs	r4, #4
   8434a:	2c03      	cmp	r4, #3
   8434c:	d8f0      	bhi.n	84330 <memchr+0x60>
   8434e:	e7d8      	b.n	84302 <memchr+0x32>
   84350:	4630      	mov	r0, r6
   84352:	e7d7      	b.n	84304 <memchr+0x34>
   84354:	4614      	mov	r4, r2
   84356:	e7d2      	b.n	842fe <memchr+0x2e>
   84358:	4620      	mov	r0, r4
   8435a:	e7e2      	b.n	84322 <memchr+0x52>

0008435c <memmove>:
   8435c:	4288      	cmp	r0, r1
   8435e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84360:	d90d      	bls.n	8437e <memmove+0x22>
   84362:	188b      	adds	r3, r1, r2
   84364:	4298      	cmp	r0, r3
   84366:	d20a      	bcs.n	8437e <memmove+0x22>
   84368:	1884      	adds	r4, r0, r2
   8436a:	2a00      	cmp	r2, #0
   8436c:	d051      	beq.n	84412 <memmove+0xb6>
   8436e:	4622      	mov	r2, r4
   84370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84374:	4299      	cmp	r1, r3
   84376:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8437a:	d1f9      	bne.n	84370 <memmove+0x14>
   8437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8437e:	2a0f      	cmp	r2, #15
   84380:	d948      	bls.n	84414 <memmove+0xb8>
   84382:	ea41 0300 	orr.w	r3, r1, r0
   84386:	079b      	lsls	r3, r3, #30
   84388:	d146      	bne.n	84418 <memmove+0xbc>
   8438a:	4615      	mov	r5, r2
   8438c:	f100 0410 	add.w	r4, r0, #16
   84390:	f101 0310 	add.w	r3, r1, #16
   84394:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84398:	3d10      	subs	r5, #16
   8439a:	f844 6c10 	str.w	r6, [r4, #-16]
   8439e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   843a2:	2d0f      	cmp	r5, #15
   843a4:	f844 6c0c 	str.w	r6, [r4, #-12]
   843a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   843ac:	f104 0410 	add.w	r4, r4, #16
   843b0:	f844 6c18 	str.w	r6, [r4, #-24]
   843b4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   843b8:	f103 0310 	add.w	r3, r3, #16
   843bc:	f844 6c14 	str.w	r6, [r4, #-20]
   843c0:	d8e8      	bhi.n	84394 <memmove+0x38>
   843c2:	f1a2 0310 	sub.w	r3, r2, #16
   843c6:	f023 030f 	bic.w	r3, r3, #15
   843ca:	f002 0e0f 	and.w	lr, r2, #15
   843ce:	3310      	adds	r3, #16
   843d0:	f1be 0f03 	cmp.w	lr, #3
   843d4:	4419      	add	r1, r3
   843d6:	4403      	add	r3, r0
   843d8:	d921      	bls.n	8441e <memmove+0xc2>
   843da:	460e      	mov	r6, r1
   843dc:	4674      	mov	r4, lr
   843de:	1f1d      	subs	r5, r3, #4
   843e0:	f856 7b04 	ldr.w	r7, [r6], #4
   843e4:	3c04      	subs	r4, #4
   843e6:	2c03      	cmp	r4, #3
   843e8:	f845 7f04 	str.w	r7, [r5, #4]!
   843ec:	d8f8      	bhi.n	843e0 <memmove+0x84>
   843ee:	f1ae 0404 	sub.w	r4, lr, #4
   843f2:	f024 0403 	bic.w	r4, r4, #3
   843f6:	3404      	adds	r4, #4
   843f8:	4421      	add	r1, r4
   843fa:	4423      	add	r3, r4
   843fc:	f002 0203 	and.w	r2, r2, #3
   84400:	b162      	cbz	r2, 8441c <memmove+0xc0>
   84402:	3b01      	subs	r3, #1
   84404:	440a      	add	r2, r1
   84406:	f811 4b01 	ldrb.w	r4, [r1], #1
   8440a:	428a      	cmp	r2, r1
   8440c:	f803 4f01 	strb.w	r4, [r3, #1]!
   84410:	d1f9      	bne.n	84406 <memmove+0xaa>
   84412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84414:	4603      	mov	r3, r0
   84416:	e7f3      	b.n	84400 <memmove+0xa4>
   84418:	4603      	mov	r3, r0
   8441a:	e7f2      	b.n	84402 <memmove+0xa6>
   8441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8441e:	4672      	mov	r2, lr
   84420:	e7ee      	b.n	84400 <memmove+0xa4>
   84422:	bf00      	nop

00084424 <__malloc_lock>:
   84424:	4801      	ldr	r0, [pc, #4]	; (8442c <__malloc_lock+0x8>)
   84426:	f7ff bc1f 	b.w	83c68 <__retarget_lock_acquire_recursive>
   8442a:	bf00      	nop
   8442c:	2007c550 	.word	0x2007c550

00084430 <__malloc_unlock>:
   84430:	4801      	ldr	r0, [pc, #4]	; (84438 <__malloc_unlock+0x8>)
   84432:	f7ff bc1b 	b.w	83c6c <__retarget_lock_release_recursive>
   84436:	bf00      	nop
   84438:	2007c550 	.word	0x2007c550

0008443c <_realloc_r>:
   8443c:	2900      	cmp	r1, #0
   8443e:	f000 8094 	beq.w	8456a <_realloc_r+0x12e>
   84442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84446:	460c      	mov	r4, r1
   84448:	4615      	mov	r5, r2
   8444a:	b083      	sub	sp, #12
   8444c:	4680      	mov	r8, r0
   8444e:	f105 060b 	add.w	r6, r5, #11
   84452:	f7ff ffe7 	bl	84424 <__malloc_lock>
   84456:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8445a:	2e16      	cmp	r6, #22
   8445c:	f02e 0703 	bic.w	r7, lr, #3
   84460:	f1a4 0908 	sub.w	r9, r4, #8
   84464:	d83c      	bhi.n	844e0 <_realloc_r+0xa4>
   84466:	2210      	movs	r2, #16
   84468:	4616      	mov	r6, r2
   8446a:	42b5      	cmp	r5, r6
   8446c:	d83d      	bhi.n	844ea <_realloc_r+0xae>
   8446e:	4297      	cmp	r7, r2
   84470:	da43      	bge.n	844fa <_realloc_r+0xbe>
   84472:	4bc6      	ldr	r3, [pc, #792]	; (8478c <_realloc_r+0x350>)
   84474:	eb09 0007 	add.w	r0, r9, r7
   84478:	6899      	ldr	r1, [r3, #8]
   8447a:	4288      	cmp	r0, r1
   8447c:	f000 80c3 	beq.w	84606 <_realloc_r+0x1ca>
   84480:	6843      	ldr	r3, [r0, #4]
   84482:	f023 0101 	bic.w	r1, r3, #1
   84486:	4401      	add	r1, r0
   84488:	6849      	ldr	r1, [r1, #4]
   8448a:	07c9      	lsls	r1, r1, #31
   8448c:	d54d      	bpl.n	8452a <_realloc_r+0xee>
   8448e:	f01e 0f01 	tst.w	lr, #1
   84492:	f000 809b 	beq.w	845cc <_realloc_r+0x190>
   84496:	4629      	mov	r1, r5
   84498:	4640      	mov	r0, r8
   8449a:	f7ff fc61 	bl	83d60 <_malloc_r>
   8449e:	4605      	mov	r5, r0
   844a0:	2800      	cmp	r0, #0
   844a2:	d03b      	beq.n	8451c <_realloc_r+0xe0>
   844a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   844a8:	f1a0 0208 	sub.w	r2, r0, #8
   844ac:	f023 0301 	bic.w	r3, r3, #1
   844b0:	444b      	add	r3, r9
   844b2:	429a      	cmp	r2, r3
   844b4:	f000 812b 	beq.w	8470e <_realloc_r+0x2d2>
   844b8:	1f3a      	subs	r2, r7, #4
   844ba:	2a24      	cmp	r2, #36	; 0x24
   844bc:	f200 8118 	bhi.w	846f0 <_realloc_r+0x2b4>
   844c0:	2a13      	cmp	r2, #19
   844c2:	f200 80eb 	bhi.w	8469c <_realloc_r+0x260>
   844c6:	4603      	mov	r3, r0
   844c8:	4622      	mov	r2, r4
   844ca:	6811      	ldr	r1, [r2, #0]
   844cc:	6019      	str	r1, [r3, #0]
   844ce:	6851      	ldr	r1, [r2, #4]
   844d0:	6059      	str	r1, [r3, #4]
   844d2:	6892      	ldr	r2, [r2, #8]
   844d4:	609a      	str	r2, [r3, #8]
   844d6:	4621      	mov	r1, r4
   844d8:	4640      	mov	r0, r8
   844da:	f7ff f92b 	bl	83734 <_free_r>
   844de:	e01d      	b.n	8451c <_realloc_r+0xe0>
   844e0:	f026 0607 	bic.w	r6, r6, #7
   844e4:	2e00      	cmp	r6, #0
   844e6:	4632      	mov	r2, r6
   844e8:	dabf      	bge.n	8446a <_realloc_r+0x2e>
   844ea:	2500      	movs	r5, #0
   844ec:	230c      	movs	r3, #12
   844ee:	4628      	mov	r0, r5
   844f0:	f8c8 3000 	str.w	r3, [r8]
   844f4:	b003      	add	sp, #12
   844f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844fa:	4625      	mov	r5, r4
   844fc:	1bbb      	subs	r3, r7, r6
   844fe:	2b0f      	cmp	r3, #15
   84500:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84504:	d81d      	bhi.n	84542 <_realloc_r+0x106>
   84506:	f002 0201 	and.w	r2, r2, #1
   8450a:	433a      	orrs	r2, r7
   8450c:	eb09 0107 	add.w	r1, r9, r7
   84510:	f8c9 2004 	str.w	r2, [r9, #4]
   84514:	684b      	ldr	r3, [r1, #4]
   84516:	f043 0301 	orr.w	r3, r3, #1
   8451a:	604b      	str	r3, [r1, #4]
   8451c:	4640      	mov	r0, r8
   8451e:	f7ff ff87 	bl	84430 <__malloc_unlock>
   84522:	4628      	mov	r0, r5
   84524:	b003      	add	sp, #12
   84526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8452a:	f023 0303 	bic.w	r3, r3, #3
   8452e:	18f9      	adds	r1, r7, r3
   84530:	4291      	cmp	r1, r2
   84532:	db1d      	blt.n	84570 <_realloc_r+0x134>
   84534:	68c3      	ldr	r3, [r0, #12]
   84536:	6882      	ldr	r2, [r0, #8]
   84538:	4625      	mov	r5, r4
   8453a:	60d3      	str	r3, [r2, #12]
   8453c:	460f      	mov	r7, r1
   8453e:	609a      	str	r2, [r3, #8]
   84540:	e7dc      	b.n	844fc <_realloc_r+0xc0>
   84542:	f002 0201 	and.w	r2, r2, #1
   84546:	eb09 0106 	add.w	r1, r9, r6
   8454a:	f043 0301 	orr.w	r3, r3, #1
   8454e:	4332      	orrs	r2, r6
   84550:	f8c9 2004 	str.w	r2, [r9, #4]
   84554:	444f      	add	r7, r9
   84556:	604b      	str	r3, [r1, #4]
   84558:	687b      	ldr	r3, [r7, #4]
   8455a:	3108      	adds	r1, #8
   8455c:	f043 0301 	orr.w	r3, r3, #1
   84560:	607b      	str	r3, [r7, #4]
   84562:	4640      	mov	r0, r8
   84564:	f7ff f8e6 	bl	83734 <_free_r>
   84568:	e7d8      	b.n	8451c <_realloc_r+0xe0>
   8456a:	4611      	mov	r1, r2
   8456c:	f7ff bbf8 	b.w	83d60 <_malloc_r>
   84570:	f01e 0f01 	tst.w	lr, #1
   84574:	d18f      	bne.n	84496 <_realloc_r+0x5a>
   84576:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8457a:	eba9 0a01 	sub.w	sl, r9, r1
   8457e:	f8da 1004 	ldr.w	r1, [sl, #4]
   84582:	f021 0103 	bic.w	r1, r1, #3
   84586:	440b      	add	r3, r1
   84588:	443b      	add	r3, r7
   8458a:	4293      	cmp	r3, r2
   8458c:	db26      	blt.n	845dc <_realloc_r+0x1a0>
   8458e:	4655      	mov	r5, sl
   84590:	68c1      	ldr	r1, [r0, #12]
   84592:	6880      	ldr	r0, [r0, #8]
   84594:	1f3a      	subs	r2, r7, #4
   84596:	60c1      	str	r1, [r0, #12]
   84598:	6088      	str	r0, [r1, #8]
   8459a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8459e:	f8da 100c 	ldr.w	r1, [sl, #12]
   845a2:	2a24      	cmp	r2, #36	; 0x24
   845a4:	60c1      	str	r1, [r0, #12]
   845a6:	6088      	str	r0, [r1, #8]
   845a8:	d826      	bhi.n	845f8 <_realloc_r+0x1bc>
   845aa:	2a13      	cmp	r2, #19
   845ac:	f240 8081 	bls.w	846b2 <_realloc_r+0x276>
   845b0:	6821      	ldr	r1, [r4, #0]
   845b2:	2a1b      	cmp	r2, #27
   845b4:	f8ca 1008 	str.w	r1, [sl, #8]
   845b8:	6861      	ldr	r1, [r4, #4]
   845ba:	f8ca 100c 	str.w	r1, [sl, #12]
   845be:	f200 80ad 	bhi.w	8471c <_realloc_r+0x2e0>
   845c2:	f104 0008 	add.w	r0, r4, #8
   845c6:	f10a 0210 	add.w	r2, sl, #16
   845ca:	e074      	b.n	846b6 <_realloc_r+0x27a>
   845cc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   845d0:	eba9 0a03 	sub.w	sl, r9, r3
   845d4:	f8da 1004 	ldr.w	r1, [sl, #4]
   845d8:	f021 0103 	bic.w	r1, r1, #3
   845dc:	187b      	adds	r3, r7, r1
   845de:	4293      	cmp	r3, r2
   845e0:	f6ff af59 	blt.w	84496 <_realloc_r+0x5a>
   845e4:	4655      	mov	r5, sl
   845e6:	f8da 100c 	ldr.w	r1, [sl, #12]
   845ea:	f855 0f08 	ldr.w	r0, [r5, #8]!
   845ee:	1f3a      	subs	r2, r7, #4
   845f0:	2a24      	cmp	r2, #36	; 0x24
   845f2:	60c1      	str	r1, [r0, #12]
   845f4:	6088      	str	r0, [r1, #8]
   845f6:	d9d8      	bls.n	845aa <_realloc_r+0x16e>
   845f8:	4621      	mov	r1, r4
   845fa:	4628      	mov	r0, r5
   845fc:	461f      	mov	r7, r3
   845fe:	46d1      	mov	r9, sl
   84600:	f7ff feac 	bl	8435c <memmove>
   84604:	e77a      	b.n	844fc <_realloc_r+0xc0>
   84606:	6841      	ldr	r1, [r0, #4]
   84608:	f106 0010 	add.w	r0, r6, #16
   8460c:	f021 0b03 	bic.w	fp, r1, #3
   84610:	44bb      	add	fp, r7
   84612:	4583      	cmp	fp, r0
   84614:	da58      	bge.n	846c8 <_realloc_r+0x28c>
   84616:	f01e 0f01 	tst.w	lr, #1
   8461a:	f47f af3c 	bne.w	84496 <_realloc_r+0x5a>
   8461e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84622:	eba9 0a01 	sub.w	sl, r9, r1
   84626:	f8da 1004 	ldr.w	r1, [sl, #4]
   8462a:	f021 0103 	bic.w	r1, r1, #3
   8462e:	448b      	add	fp, r1
   84630:	4558      	cmp	r0, fp
   84632:	dcd3      	bgt.n	845dc <_realloc_r+0x1a0>
   84634:	4655      	mov	r5, sl
   84636:	f8da 100c 	ldr.w	r1, [sl, #12]
   8463a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8463e:	1f3a      	subs	r2, r7, #4
   84640:	2a24      	cmp	r2, #36	; 0x24
   84642:	60c1      	str	r1, [r0, #12]
   84644:	6088      	str	r0, [r1, #8]
   84646:	f200 808d 	bhi.w	84764 <_realloc_r+0x328>
   8464a:	2a13      	cmp	r2, #19
   8464c:	f240 8087 	bls.w	8475e <_realloc_r+0x322>
   84650:	6821      	ldr	r1, [r4, #0]
   84652:	2a1b      	cmp	r2, #27
   84654:	f8ca 1008 	str.w	r1, [sl, #8]
   84658:	6861      	ldr	r1, [r4, #4]
   8465a:	f8ca 100c 	str.w	r1, [sl, #12]
   8465e:	f200 8088 	bhi.w	84772 <_realloc_r+0x336>
   84662:	f104 0108 	add.w	r1, r4, #8
   84666:	f10a 0210 	add.w	r2, sl, #16
   8466a:	6808      	ldr	r0, [r1, #0]
   8466c:	6010      	str	r0, [r2, #0]
   8466e:	6848      	ldr	r0, [r1, #4]
   84670:	6050      	str	r0, [r2, #4]
   84672:	6889      	ldr	r1, [r1, #8]
   84674:	6091      	str	r1, [r2, #8]
   84676:	ebab 0206 	sub.w	r2, fp, r6
   8467a:	eb0a 0106 	add.w	r1, sl, r6
   8467e:	f042 0201 	orr.w	r2, r2, #1
   84682:	6099      	str	r1, [r3, #8]
   84684:	604a      	str	r2, [r1, #4]
   84686:	f8da 3004 	ldr.w	r3, [sl, #4]
   8468a:	4640      	mov	r0, r8
   8468c:	f003 0301 	and.w	r3, r3, #1
   84690:	431e      	orrs	r6, r3
   84692:	f8ca 6004 	str.w	r6, [sl, #4]
   84696:	f7ff fecb 	bl	84430 <__malloc_unlock>
   8469a:	e742      	b.n	84522 <_realloc_r+0xe6>
   8469c:	6823      	ldr	r3, [r4, #0]
   8469e:	2a1b      	cmp	r2, #27
   846a0:	6003      	str	r3, [r0, #0]
   846a2:	6863      	ldr	r3, [r4, #4]
   846a4:	6043      	str	r3, [r0, #4]
   846a6:	d827      	bhi.n	846f8 <_realloc_r+0x2bc>
   846a8:	f100 0308 	add.w	r3, r0, #8
   846ac:	f104 0208 	add.w	r2, r4, #8
   846b0:	e70b      	b.n	844ca <_realloc_r+0x8e>
   846b2:	4620      	mov	r0, r4
   846b4:	462a      	mov	r2, r5
   846b6:	6801      	ldr	r1, [r0, #0]
   846b8:	461f      	mov	r7, r3
   846ba:	6011      	str	r1, [r2, #0]
   846bc:	6841      	ldr	r1, [r0, #4]
   846be:	46d1      	mov	r9, sl
   846c0:	6051      	str	r1, [r2, #4]
   846c2:	6883      	ldr	r3, [r0, #8]
   846c4:	6093      	str	r3, [r2, #8]
   846c6:	e719      	b.n	844fc <_realloc_r+0xc0>
   846c8:	ebab 0b06 	sub.w	fp, fp, r6
   846cc:	eb09 0106 	add.w	r1, r9, r6
   846d0:	f04b 0201 	orr.w	r2, fp, #1
   846d4:	6099      	str	r1, [r3, #8]
   846d6:	604a      	str	r2, [r1, #4]
   846d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   846dc:	4640      	mov	r0, r8
   846de:	f003 0301 	and.w	r3, r3, #1
   846e2:	431e      	orrs	r6, r3
   846e4:	f844 6c04 	str.w	r6, [r4, #-4]
   846e8:	f7ff fea2 	bl	84430 <__malloc_unlock>
   846ec:	4625      	mov	r5, r4
   846ee:	e718      	b.n	84522 <_realloc_r+0xe6>
   846f0:	4621      	mov	r1, r4
   846f2:	f7ff fe33 	bl	8435c <memmove>
   846f6:	e6ee      	b.n	844d6 <_realloc_r+0x9a>
   846f8:	68a3      	ldr	r3, [r4, #8]
   846fa:	2a24      	cmp	r2, #36	; 0x24
   846fc:	6083      	str	r3, [r0, #8]
   846fe:	68e3      	ldr	r3, [r4, #12]
   84700:	60c3      	str	r3, [r0, #12]
   84702:	d018      	beq.n	84736 <_realloc_r+0x2fa>
   84704:	f100 0310 	add.w	r3, r0, #16
   84708:	f104 0210 	add.w	r2, r4, #16
   8470c:	e6dd      	b.n	844ca <_realloc_r+0x8e>
   8470e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84712:	4625      	mov	r5, r4
   84714:	f023 0303 	bic.w	r3, r3, #3
   84718:	441f      	add	r7, r3
   8471a:	e6ef      	b.n	844fc <_realloc_r+0xc0>
   8471c:	68a1      	ldr	r1, [r4, #8]
   8471e:	2a24      	cmp	r2, #36	; 0x24
   84720:	f8ca 1010 	str.w	r1, [sl, #16]
   84724:	68e1      	ldr	r1, [r4, #12]
   84726:	f8ca 1014 	str.w	r1, [sl, #20]
   8472a:	d00d      	beq.n	84748 <_realloc_r+0x30c>
   8472c:	f104 0010 	add.w	r0, r4, #16
   84730:	f10a 0218 	add.w	r2, sl, #24
   84734:	e7bf      	b.n	846b6 <_realloc_r+0x27a>
   84736:	6922      	ldr	r2, [r4, #16]
   84738:	f100 0318 	add.w	r3, r0, #24
   8473c:	6102      	str	r2, [r0, #16]
   8473e:	6961      	ldr	r1, [r4, #20]
   84740:	f104 0218 	add.w	r2, r4, #24
   84744:	6141      	str	r1, [r0, #20]
   84746:	e6c0      	b.n	844ca <_realloc_r+0x8e>
   84748:	6922      	ldr	r2, [r4, #16]
   8474a:	f104 0018 	add.w	r0, r4, #24
   8474e:	f8ca 2018 	str.w	r2, [sl, #24]
   84752:	6961      	ldr	r1, [r4, #20]
   84754:	f10a 0220 	add.w	r2, sl, #32
   84758:	f8ca 101c 	str.w	r1, [sl, #28]
   8475c:	e7ab      	b.n	846b6 <_realloc_r+0x27a>
   8475e:	4621      	mov	r1, r4
   84760:	462a      	mov	r2, r5
   84762:	e782      	b.n	8466a <_realloc_r+0x22e>
   84764:	4621      	mov	r1, r4
   84766:	4628      	mov	r0, r5
   84768:	9301      	str	r3, [sp, #4]
   8476a:	f7ff fdf7 	bl	8435c <memmove>
   8476e:	9b01      	ldr	r3, [sp, #4]
   84770:	e781      	b.n	84676 <_realloc_r+0x23a>
   84772:	68a1      	ldr	r1, [r4, #8]
   84774:	2a24      	cmp	r2, #36	; 0x24
   84776:	f8ca 1010 	str.w	r1, [sl, #16]
   8477a:	68e1      	ldr	r1, [r4, #12]
   8477c:	f8ca 1014 	str.w	r1, [sl, #20]
   84780:	d006      	beq.n	84790 <_realloc_r+0x354>
   84782:	f104 0110 	add.w	r1, r4, #16
   84786:	f10a 0218 	add.w	r2, sl, #24
   8478a:	e76e      	b.n	8466a <_realloc_r+0x22e>
   8478c:	200706d0 	.word	0x200706d0
   84790:	6922      	ldr	r2, [r4, #16]
   84792:	f104 0118 	add.w	r1, r4, #24
   84796:	f8ca 2018 	str.w	r2, [sl, #24]
   8479a:	6960      	ldr	r0, [r4, #20]
   8479c:	f10a 0220 	add.w	r2, sl, #32
   847a0:	f8ca 001c 	str.w	r0, [sl, #28]
   847a4:	e761      	b.n	8466a <_realloc_r+0x22e>
   847a6:	bf00      	nop

000847a8 <_sbrk_r>:
   847a8:	b538      	push	{r3, r4, r5, lr}
   847aa:	2300      	movs	r3, #0
   847ac:	4c06      	ldr	r4, [pc, #24]	; (847c8 <_sbrk_r+0x20>)
   847ae:	4605      	mov	r5, r0
   847b0:	4608      	mov	r0, r1
   847b2:	6023      	str	r3, [r4, #0]
   847b4:	f7fd fcb0 	bl	82118 <_sbrk>
   847b8:	1c43      	adds	r3, r0, #1
   847ba:	d000      	beq.n	847be <_sbrk_r+0x16>
   847bc:	bd38      	pop	{r3, r4, r5, pc}
   847be:	6823      	ldr	r3, [r4, #0]
   847c0:	2b00      	cmp	r3, #0
   847c2:	d0fb      	beq.n	847bc <_sbrk_r+0x14>
   847c4:	602b      	str	r3, [r5, #0]
   847c6:	bd38      	pop	{r3, r4, r5, pc}
   847c8:	2007c564 	.word	0x2007c564

000847cc <__sread>:
   847cc:	b510      	push	{r4, lr}
   847ce:	460c      	mov	r4, r1
   847d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   847d4:	f000 f9f4 	bl	84bc0 <_read_r>
   847d8:	2800      	cmp	r0, #0
   847da:	db03      	blt.n	847e4 <__sread+0x18>
   847dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   847de:	4403      	add	r3, r0
   847e0:	6523      	str	r3, [r4, #80]	; 0x50
   847e2:	bd10      	pop	{r4, pc}
   847e4:	89a3      	ldrh	r3, [r4, #12]
   847e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   847ea:	81a3      	strh	r3, [r4, #12]
   847ec:	bd10      	pop	{r4, pc}
   847ee:	bf00      	nop

000847f0 <__swrite>:
   847f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847f4:	460c      	mov	r4, r1
   847f6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   847fa:	461f      	mov	r7, r3
   847fc:	05cb      	lsls	r3, r1, #23
   847fe:	4616      	mov	r6, r2
   84800:	4605      	mov	r5, r0
   84802:	d507      	bpl.n	84814 <__swrite+0x24>
   84804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84808:	2302      	movs	r3, #2
   8480a:	2200      	movs	r2, #0
   8480c:	f000 f9c2 	bl	84b94 <_lseek_r>
   84810:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84814:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84818:	81a1      	strh	r1, [r4, #12]
   8481a:	463b      	mov	r3, r7
   8481c:	4632      	mov	r2, r6
   8481e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84822:	4628      	mov	r0, r5
   84824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84828:	f000 b8a2 	b.w	84970 <_write_r>

0008482c <__sseek>:
   8482c:	b510      	push	{r4, lr}
   8482e:	460c      	mov	r4, r1
   84830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84834:	f000 f9ae 	bl	84b94 <_lseek_r>
   84838:	89a3      	ldrh	r3, [r4, #12]
   8483a:	1c42      	adds	r2, r0, #1
   8483c:	bf0e      	itee	eq
   8483e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84846:	6520      	strne	r0, [r4, #80]	; 0x50
   84848:	81a3      	strh	r3, [r4, #12]
   8484a:	bd10      	pop	{r4, pc}

0008484c <__sclose>:
   8484c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84850:	f000 b906 	b.w	84a60 <_close_r>

00084854 <__swbuf_r>:
   84854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84856:	460d      	mov	r5, r1
   84858:	4614      	mov	r4, r2
   8485a:	4606      	mov	r6, r0
   8485c:	b110      	cbz	r0, 84864 <__swbuf_r+0x10>
   8485e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84860:	2b00      	cmp	r3, #0
   84862:	d04b      	beq.n	848fc <__swbuf_r+0xa8>
   84864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84868:	69a3      	ldr	r3, [r4, #24]
   8486a:	b291      	uxth	r1, r2
   8486c:	0708      	lsls	r0, r1, #28
   8486e:	60a3      	str	r3, [r4, #8]
   84870:	d539      	bpl.n	848e6 <__swbuf_r+0x92>
   84872:	6923      	ldr	r3, [r4, #16]
   84874:	2b00      	cmp	r3, #0
   84876:	d036      	beq.n	848e6 <__swbuf_r+0x92>
   84878:	b2ed      	uxtb	r5, r5
   8487a:	0489      	lsls	r1, r1, #18
   8487c:	462f      	mov	r7, r5
   8487e:	d515      	bpl.n	848ac <__swbuf_r+0x58>
   84880:	6822      	ldr	r2, [r4, #0]
   84882:	6961      	ldr	r1, [r4, #20]
   84884:	1ad3      	subs	r3, r2, r3
   84886:	428b      	cmp	r3, r1
   84888:	da1c      	bge.n	848c4 <__swbuf_r+0x70>
   8488a:	3301      	adds	r3, #1
   8488c:	68a1      	ldr	r1, [r4, #8]
   8488e:	1c50      	adds	r0, r2, #1
   84890:	3901      	subs	r1, #1
   84892:	60a1      	str	r1, [r4, #8]
   84894:	6020      	str	r0, [r4, #0]
   84896:	7015      	strb	r5, [r2, #0]
   84898:	6962      	ldr	r2, [r4, #20]
   8489a:	429a      	cmp	r2, r3
   8489c:	d01a      	beq.n	848d4 <__swbuf_r+0x80>
   8489e:	89a3      	ldrh	r3, [r4, #12]
   848a0:	07db      	lsls	r3, r3, #31
   848a2:	d501      	bpl.n	848a8 <__swbuf_r+0x54>
   848a4:	2d0a      	cmp	r5, #10
   848a6:	d015      	beq.n	848d4 <__swbuf_r+0x80>
   848a8:	4638      	mov	r0, r7
   848aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   848ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
   848ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   848b2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   848b6:	81a2      	strh	r2, [r4, #12]
   848b8:	6822      	ldr	r2, [r4, #0]
   848ba:	6661      	str	r1, [r4, #100]	; 0x64
   848bc:	6961      	ldr	r1, [r4, #20]
   848be:	1ad3      	subs	r3, r2, r3
   848c0:	428b      	cmp	r3, r1
   848c2:	dbe2      	blt.n	8488a <__swbuf_r+0x36>
   848c4:	4621      	mov	r1, r4
   848c6:	4630      	mov	r0, r6
   848c8:	f7fe fdb6 	bl	83438 <_fflush_r>
   848cc:	b940      	cbnz	r0, 848e0 <__swbuf_r+0x8c>
   848ce:	2301      	movs	r3, #1
   848d0:	6822      	ldr	r2, [r4, #0]
   848d2:	e7db      	b.n	8488c <__swbuf_r+0x38>
   848d4:	4621      	mov	r1, r4
   848d6:	4630      	mov	r0, r6
   848d8:	f7fe fdae 	bl	83438 <_fflush_r>
   848dc:	2800      	cmp	r0, #0
   848de:	d0e3      	beq.n	848a8 <__swbuf_r+0x54>
   848e0:	f04f 37ff 	mov.w	r7, #4294967295
   848e4:	e7e0      	b.n	848a8 <__swbuf_r+0x54>
   848e6:	4621      	mov	r1, r4
   848e8:	4630      	mov	r0, r6
   848ea:	f7fe fc95 	bl	83218 <__swsetup_r>
   848ee:	2800      	cmp	r0, #0
   848f0:	d1f6      	bne.n	848e0 <__swbuf_r+0x8c>
   848f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   848f6:	6923      	ldr	r3, [r4, #16]
   848f8:	b291      	uxth	r1, r2
   848fa:	e7bd      	b.n	84878 <__swbuf_r+0x24>
   848fc:	f7fe fdf4 	bl	834e8 <__sinit>
   84900:	e7b0      	b.n	84864 <__swbuf_r+0x10>
   84902:	bf00      	nop

00084904 <_wcrtomb_r>:
   84904:	b5f0      	push	{r4, r5, r6, r7, lr}
   84906:	4606      	mov	r6, r0
   84908:	b085      	sub	sp, #20
   8490a:	461f      	mov	r7, r3
   8490c:	b189      	cbz	r1, 84932 <_wcrtomb_r+0x2e>
   8490e:	4c10      	ldr	r4, [pc, #64]	; (84950 <_wcrtomb_r+0x4c>)
   84910:	4d10      	ldr	r5, [pc, #64]	; (84954 <_wcrtomb_r+0x50>)
   84912:	6824      	ldr	r4, [r4, #0]
   84914:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84916:	2c00      	cmp	r4, #0
   84918:	bf08      	it	eq
   8491a:	462c      	moveq	r4, r5
   8491c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84920:	47a0      	blx	r4
   84922:	1c43      	adds	r3, r0, #1
   84924:	d103      	bne.n	8492e <_wcrtomb_r+0x2a>
   84926:	2200      	movs	r2, #0
   84928:	238a      	movs	r3, #138	; 0x8a
   8492a:	603a      	str	r2, [r7, #0]
   8492c:	6033      	str	r3, [r6, #0]
   8492e:	b005      	add	sp, #20
   84930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84932:	460c      	mov	r4, r1
   84934:	4a06      	ldr	r2, [pc, #24]	; (84950 <_wcrtomb_r+0x4c>)
   84936:	4d07      	ldr	r5, [pc, #28]	; (84954 <_wcrtomb_r+0x50>)
   84938:	6811      	ldr	r1, [r2, #0]
   8493a:	4622      	mov	r2, r4
   8493c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8493e:	a901      	add	r1, sp, #4
   84940:	2c00      	cmp	r4, #0
   84942:	bf08      	it	eq
   84944:	462c      	moveq	r4, r5
   84946:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8494a:	47a0      	blx	r4
   8494c:	e7e9      	b.n	84922 <_wcrtomb_r+0x1e>
   8494e:	bf00      	nop
   84950:	20070134 	.word	0x20070134
   84954:	20070564 	.word	0x20070564

00084958 <__ascii_wctomb>:
   84958:	b119      	cbz	r1, 84962 <__ascii_wctomb+0xa>
   8495a:	2aff      	cmp	r2, #255	; 0xff
   8495c:	d803      	bhi.n	84966 <__ascii_wctomb+0xe>
   8495e:	700a      	strb	r2, [r1, #0]
   84960:	2101      	movs	r1, #1
   84962:	4608      	mov	r0, r1
   84964:	4770      	bx	lr
   84966:	238a      	movs	r3, #138	; 0x8a
   84968:	f04f 31ff 	mov.w	r1, #4294967295
   8496c:	6003      	str	r3, [r0, #0]
   8496e:	e7f8      	b.n	84962 <__ascii_wctomb+0xa>

00084970 <_write_r>:
   84970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84972:	460e      	mov	r6, r1
   84974:	2500      	movs	r5, #0
   84976:	4c08      	ldr	r4, [pc, #32]	; (84998 <_write_r+0x28>)
   84978:	4611      	mov	r1, r2
   8497a:	4607      	mov	r7, r0
   8497c:	461a      	mov	r2, r3
   8497e:	4630      	mov	r0, r6
   84980:	6025      	str	r5, [r4, #0]
   84982:	f7fb fc0b 	bl	8019c <_write>
   84986:	1c43      	adds	r3, r0, #1
   84988:	d000      	beq.n	8498c <_write_r+0x1c>
   8498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8498c:	6823      	ldr	r3, [r4, #0]
   8498e:	2b00      	cmp	r3, #0
   84990:	d0fb      	beq.n	8498a <_write_r+0x1a>
   84992:	603b      	str	r3, [r7, #0]
   84994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84996:	bf00      	nop
   84998:	2007c564 	.word	0x2007c564

0008499c <__register_exitproc>:
   8499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   849a0:	4d2c      	ldr	r5, [pc, #176]	; (84a54 <__register_exitproc+0xb8>)
   849a2:	4606      	mov	r6, r0
   849a4:	6828      	ldr	r0, [r5, #0]
   849a6:	4698      	mov	r8, r3
   849a8:	460f      	mov	r7, r1
   849aa:	4691      	mov	r9, r2
   849ac:	f7ff f95c 	bl	83c68 <__retarget_lock_acquire_recursive>
   849b0:	4b29      	ldr	r3, [pc, #164]	; (84a58 <__register_exitproc+0xbc>)
   849b2:	681c      	ldr	r4, [r3, #0]
   849b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   849b8:	2b00      	cmp	r3, #0
   849ba:	d03e      	beq.n	84a3a <__register_exitproc+0x9e>
   849bc:	685a      	ldr	r2, [r3, #4]
   849be:	2a1f      	cmp	r2, #31
   849c0:	dc1c      	bgt.n	849fc <__register_exitproc+0x60>
   849c2:	f102 0e01 	add.w	lr, r2, #1
   849c6:	b176      	cbz	r6, 849e6 <__register_exitproc+0x4a>
   849c8:	2101      	movs	r1, #1
   849ca:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   849ce:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   849d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   849d6:	4091      	lsls	r1, r2
   849d8:	4308      	orrs	r0, r1
   849da:	2e02      	cmp	r6, #2
   849dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   849e0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   849e4:	d023      	beq.n	84a2e <__register_exitproc+0x92>
   849e6:	3202      	adds	r2, #2
   849e8:	f8c3 e004 	str.w	lr, [r3, #4]
   849ec:	6828      	ldr	r0, [r5, #0]
   849ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   849f2:	f7ff f93b 	bl	83c6c <__retarget_lock_release_recursive>
   849f6:	2000      	movs	r0, #0
   849f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   849fc:	4b17      	ldr	r3, [pc, #92]	; (84a5c <__register_exitproc+0xc0>)
   849fe:	b30b      	cbz	r3, 84a44 <__register_exitproc+0xa8>
   84a00:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84a04:	f3af 8000 	nop.w
   84a08:	4603      	mov	r3, r0
   84a0a:	b1d8      	cbz	r0, 84a44 <__register_exitproc+0xa8>
   84a0c:	2000      	movs	r0, #0
   84a0e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84a12:	f04f 0e01 	mov.w	lr, #1
   84a16:	6058      	str	r0, [r3, #4]
   84a18:	6019      	str	r1, [r3, #0]
   84a1a:	4602      	mov	r2, r0
   84a1c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84a20:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84a24:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84a28:	2e00      	cmp	r6, #0
   84a2a:	d0dc      	beq.n	849e6 <__register_exitproc+0x4a>
   84a2c:	e7cc      	b.n	849c8 <__register_exitproc+0x2c>
   84a2e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84a32:	4301      	orrs	r1, r0
   84a34:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84a38:	e7d5      	b.n	849e6 <__register_exitproc+0x4a>
   84a3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84a3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84a42:	e7bb      	b.n	849bc <__register_exitproc+0x20>
   84a44:	6828      	ldr	r0, [r5, #0]
   84a46:	f7ff f911 	bl	83c6c <__retarget_lock_release_recursive>
   84a4a:	f04f 30ff 	mov.w	r0, #4294967295
   84a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84a52:	bf00      	nop
   84a54:	20070560 	.word	0x20070560
   84a58:	00084f80 	.word	0x00084f80
   84a5c:	00000000 	.word	0x00000000

00084a60 <_close_r>:
   84a60:	b538      	push	{r3, r4, r5, lr}
   84a62:	2300      	movs	r3, #0
   84a64:	4c06      	ldr	r4, [pc, #24]	; (84a80 <_close_r+0x20>)
   84a66:	4605      	mov	r5, r0
   84a68:	4608      	mov	r0, r1
   84a6a:	6023      	str	r3, [r4, #0]
   84a6c:	f7fd fb70 	bl	82150 <_close>
   84a70:	1c43      	adds	r3, r0, #1
   84a72:	d000      	beq.n	84a76 <_close_r+0x16>
   84a74:	bd38      	pop	{r3, r4, r5, pc}
   84a76:	6823      	ldr	r3, [r4, #0]
   84a78:	2b00      	cmp	r3, #0
   84a7a:	d0fb      	beq.n	84a74 <_close_r+0x14>
   84a7c:	602b      	str	r3, [r5, #0]
   84a7e:	bd38      	pop	{r3, r4, r5, pc}
   84a80:	2007c564 	.word	0x2007c564

00084a84 <_fclose_r>:
   84a84:	b570      	push	{r4, r5, r6, lr}
   84a86:	b159      	cbz	r1, 84aa0 <_fclose_r+0x1c>
   84a88:	4605      	mov	r5, r0
   84a8a:	460c      	mov	r4, r1
   84a8c:	b110      	cbz	r0, 84a94 <_fclose_r+0x10>
   84a8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84a90:	2b00      	cmp	r3, #0
   84a92:	d03c      	beq.n	84b0e <_fclose_r+0x8a>
   84a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84a96:	07d8      	lsls	r0, r3, #31
   84a98:	d505      	bpl.n	84aa6 <_fclose_r+0x22>
   84a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84a9e:	b92b      	cbnz	r3, 84aac <_fclose_r+0x28>
   84aa0:	2600      	movs	r6, #0
   84aa2:	4630      	mov	r0, r6
   84aa4:	bd70      	pop	{r4, r5, r6, pc}
   84aa6:	89a3      	ldrh	r3, [r4, #12]
   84aa8:	0599      	lsls	r1, r3, #22
   84aaa:	d53c      	bpl.n	84b26 <_fclose_r+0xa2>
   84aac:	4621      	mov	r1, r4
   84aae:	4628      	mov	r0, r5
   84ab0:	f7fe fc26 	bl	83300 <__sflush_r>
   84ab4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84ab6:	4606      	mov	r6, r0
   84ab8:	b133      	cbz	r3, 84ac8 <_fclose_r+0x44>
   84aba:	69e1      	ldr	r1, [r4, #28]
   84abc:	4628      	mov	r0, r5
   84abe:	4798      	blx	r3
   84ac0:	2800      	cmp	r0, #0
   84ac2:	bfb8      	it	lt
   84ac4:	f04f 36ff 	movlt.w	r6, #4294967295
   84ac8:	89a3      	ldrh	r3, [r4, #12]
   84aca:	061a      	lsls	r2, r3, #24
   84acc:	d422      	bmi.n	84b14 <_fclose_r+0x90>
   84ace:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84ad0:	b141      	cbz	r1, 84ae4 <_fclose_r+0x60>
   84ad2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84ad6:	4299      	cmp	r1, r3
   84ad8:	d002      	beq.n	84ae0 <_fclose_r+0x5c>
   84ada:	4628      	mov	r0, r5
   84adc:	f7fe fe2a 	bl	83734 <_free_r>
   84ae0:	2300      	movs	r3, #0
   84ae2:	6323      	str	r3, [r4, #48]	; 0x30
   84ae4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84ae6:	b121      	cbz	r1, 84af2 <_fclose_r+0x6e>
   84ae8:	4628      	mov	r0, r5
   84aea:	f7fe fe23 	bl	83734 <_free_r>
   84aee:	2300      	movs	r3, #0
   84af0:	6463      	str	r3, [r4, #68]	; 0x44
   84af2:	f7fe fd29 	bl	83548 <__sfp_lock_acquire>
   84af6:	2200      	movs	r2, #0
   84af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84afa:	81a2      	strh	r2, [r4, #12]
   84afc:	07db      	lsls	r3, r3, #31
   84afe:	d50e      	bpl.n	84b1e <_fclose_r+0x9a>
   84b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b02:	f7ff f8af 	bl	83c64 <__retarget_lock_close_recursive>
   84b06:	f7fe fd25 	bl	83554 <__sfp_lock_release>
   84b0a:	4630      	mov	r0, r6
   84b0c:	bd70      	pop	{r4, r5, r6, pc}
   84b0e:	f7fe fceb 	bl	834e8 <__sinit>
   84b12:	e7bf      	b.n	84a94 <_fclose_r+0x10>
   84b14:	6921      	ldr	r1, [r4, #16]
   84b16:	4628      	mov	r0, r5
   84b18:	f7fe fe0c 	bl	83734 <_free_r>
   84b1c:	e7d7      	b.n	84ace <_fclose_r+0x4a>
   84b1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b20:	f7ff f8a4 	bl	83c6c <__retarget_lock_release_recursive>
   84b24:	e7ec      	b.n	84b00 <_fclose_r+0x7c>
   84b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b28:	f7ff f89e 	bl	83c68 <__retarget_lock_acquire_recursive>
   84b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84b30:	2b00      	cmp	r3, #0
   84b32:	d1bb      	bne.n	84aac <_fclose_r+0x28>
   84b34:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84b36:	f016 0601 	ands.w	r6, r6, #1
   84b3a:	d1b1      	bne.n	84aa0 <_fclose_r+0x1c>
   84b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b3e:	f7ff f895 	bl	83c6c <__retarget_lock_release_recursive>
   84b42:	4630      	mov	r0, r6
   84b44:	bd70      	pop	{r4, r5, r6, pc}
   84b46:	bf00      	nop

00084b48 <_fstat_r>:
   84b48:	b570      	push	{r4, r5, r6, lr}
   84b4a:	460d      	mov	r5, r1
   84b4c:	2300      	movs	r3, #0
   84b4e:	4c07      	ldr	r4, [pc, #28]	; (84b6c <_fstat_r+0x24>)
   84b50:	4606      	mov	r6, r0
   84b52:	4611      	mov	r1, r2
   84b54:	4628      	mov	r0, r5
   84b56:	6023      	str	r3, [r4, #0]
   84b58:	f7fd fafd 	bl	82156 <_fstat>
   84b5c:	1c43      	adds	r3, r0, #1
   84b5e:	d000      	beq.n	84b62 <_fstat_r+0x1a>
   84b60:	bd70      	pop	{r4, r5, r6, pc}
   84b62:	6823      	ldr	r3, [r4, #0]
   84b64:	2b00      	cmp	r3, #0
   84b66:	d0fb      	beq.n	84b60 <_fstat_r+0x18>
   84b68:	6033      	str	r3, [r6, #0]
   84b6a:	bd70      	pop	{r4, r5, r6, pc}
   84b6c:	2007c564 	.word	0x2007c564

00084b70 <_isatty_r>:
   84b70:	b538      	push	{r3, r4, r5, lr}
   84b72:	2300      	movs	r3, #0
   84b74:	4c06      	ldr	r4, [pc, #24]	; (84b90 <_isatty_r+0x20>)
   84b76:	4605      	mov	r5, r0
   84b78:	4608      	mov	r0, r1
   84b7a:	6023      	str	r3, [r4, #0]
   84b7c:	f7fd faf0 	bl	82160 <_isatty>
   84b80:	1c43      	adds	r3, r0, #1
   84b82:	d000      	beq.n	84b86 <_isatty_r+0x16>
   84b84:	bd38      	pop	{r3, r4, r5, pc}
   84b86:	6823      	ldr	r3, [r4, #0]
   84b88:	2b00      	cmp	r3, #0
   84b8a:	d0fb      	beq.n	84b84 <_isatty_r+0x14>
   84b8c:	602b      	str	r3, [r5, #0]
   84b8e:	bd38      	pop	{r3, r4, r5, pc}
   84b90:	2007c564 	.word	0x2007c564

00084b94 <_lseek_r>:
   84b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b96:	460e      	mov	r6, r1
   84b98:	2500      	movs	r5, #0
   84b9a:	4c08      	ldr	r4, [pc, #32]	; (84bbc <_lseek_r+0x28>)
   84b9c:	4611      	mov	r1, r2
   84b9e:	4607      	mov	r7, r0
   84ba0:	461a      	mov	r2, r3
   84ba2:	4630      	mov	r0, r6
   84ba4:	6025      	str	r5, [r4, #0]
   84ba6:	f7fd fadd 	bl	82164 <_lseek>
   84baa:	1c43      	adds	r3, r0, #1
   84bac:	d000      	beq.n	84bb0 <_lseek_r+0x1c>
   84bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bb0:	6823      	ldr	r3, [r4, #0]
   84bb2:	2b00      	cmp	r3, #0
   84bb4:	d0fb      	beq.n	84bae <_lseek_r+0x1a>
   84bb6:	603b      	str	r3, [r7, #0]
   84bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bba:	bf00      	nop
   84bbc:	2007c564 	.word	0x2007c564

00084bc0 <_read_r>:
   84bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84bc2:	460e      	mov	r6, r1
   84bc4:	2500      	movs	r5, #0
   84bc6:	4c08      	ldr	r4, [pc, #32]	; (84be8 <_read_r+0x28>)
   84bc8:	4611      	mov	r1, r2
   84bca:	4607      	mov	r7, r0
   84bcc:	461a      	mov	r2, r3
   84bce:	4630      	mov	r0, r6
   84bd0:	6025      	str	r5, [r4, #0]
   84bd2:	f7fb fac5 	bl	80160 <_read>
   84bd6:	1c43      	adds	r3, r0, #1
   84bd8:	d000      	beq.n	84bdc <_read_r+0x1c>
   84bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bdc:	6823      	ldr	r3, [r4, #0]
   84bde:	2b00      	cmp	r3, #0
   84be0:	d0fb      	beq.n	84bda <_read_r+0x1a>
   84be2:	603b      	str	r3, [r7, #0]
   84be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84be6:	bf00      	nop
   84be8:	2007c564 	.word	0x2007c564

00084bec <__aeabi_uldivmod>:
   84bec:	b953      	cbnz	r3, 84c04 <__aeabi_uldivmod+0x18>
   84bee:	b94a      	cbnz	r2, 84c04 <__aeabi_uldivmod+0x18>
   84bf0:	2900      	cmp	r1, #0
   84bf2:	bf08      	it	eq
   84bf4:	2800      	cmpeq	r0, #0
   84bf6:	bf1c      	itt	ne
   84bf8:	f04f 31ff 	movne.w	r1, #4294967295
   84bfc:	f04f 30ff 	movne.w	r0, #4294967295
   84c00:	f000 b97a 	b.w	84ef8 <__aeabi_idiv0>
   84c04:	f1ad 0c08 	sub.w	ip, sp, #8
   84c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   84c0c:	f000 f806 	bl	84c1c <__udivmoddi4>
   84c10:	f8dd e004 	ldr.w	lr, [sp, #4]
   84c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84c18:	b004      	add	sp, #16
   84c1a:	4770      	bx	lr

00084c1c <__udivmoddi4>:
   84c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84c20:	468c      	mov	ip, r1
   84c22:	460e      	mov	r6, r1
   84c24:	4604      	mov	r4, r0
   84c26:	9d08      	ldr	r5, [sp, #32]
   84c28:	2b00      	cmp	r3, #0
   84c2a:	d150      	bne.n	84cce <__udivmoddi4+0xb2>
   84c2c:	428a      	cmp	r2, r1
   84c2e:	4617      	mov	r7, r2
   84c30:	d96c      	bls.n	84d0c <__udivmoddi4+0xf0>
   84c32:	fab2 fe82 	clz	lr, r2
   84c36:	f1be 0f00 	cmp.w	lr, #0
   84c3a:	d00b      	beq.n	84c54 <__udivmoddi4+0x38>
   84c3c:	f1ce 0c20 	rsb	ip, lr, #32
   84c40:	fa01 f60e 	lsl.w	r6, r1, lr
   84c44:	fa20 fc0c 	lsr.w	ip, r0, ip
   84c48:	fa02 f70e 	lsl.w	r7, r2, lr
   84c4c:	ea4c 0c06 	orr.w	ip, ip, r6
   84c50:	fa00 f40e 	lsl.w	r4, r0, lr
   84c54:	0c3a      	lsrs	r2, r7, #16
   84c56:	fbbc f9f2 	udiv	r9, ip, r2
   84c5a:	b2bb      	uxth	r3, r7
   84c5c:	fb02 cc19 	mls	ip, r2, r9, ip
   84c60:	fb09 fa03 	mul.w	sl, r9, r3
   84c64:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84c68:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   84c6c:	45b2      	cmp	sl, r6
   84c6e:	d90a      	bls.n	84c86 <__udivmoddi4+0x6a>
   84c70:	19f6      	adds	r6, r6, r7
   84c72:	f109 31ff 	add.w	r1, r9, #4294967295
   84c76:	f080 8125 	bcs.w	84ec4 <__udivmoddi4+0x2a8>
   84c7a:	45b2      	cmp	sl, r6
   84c7c:	f240 8122 	bls.w	84ec4 <__udivmoddi4+0x2a8>
   84c80:	f1a9 0902 	sub.w	r9, r9, #2
   84c84:	443e      	add	r6, r7
   84c86:	eba6 060a 	sub.w	r6, r6, sl
   84c8a:	fbb6 f0f2 	udiv	r0, r6, r2
   84c8e:	fb02 6610 	mls	r6, r2, r0, r6
   84c92:	fb00 f303 	mul.w	r3, r0, r3
   84c96:	b2a4      	uxth	r4, r4
   84c98:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84c9c:	42a3      	cmp	r3, r4
   84c9e:	d909      	bls.n	84cb4 <__udivmoddi4+0x98>
   84ca0:	19e4      	adds	r4, r4, r7
   84ca2:	f100 32ff 	add.w	r2, r0, #4294967295
   84ca6:	f080 810b 	bcs.w	84ec0 <__udivmoddi4+0x2a4>
   84caa:	42a3      	cmp	r3, r4
   84cac:	f240 8108 	bls.w	84ec0 <__udivmoddi4+0x2a4>
   84cb0:	3802      	subs	r0, #2
   84cb2:	443c      	add	r4, r7
   84cb4:	2100      	movs	r1, #0
   84cb6:	1ae4      	subs	r4, r4, r3
   84cb8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84cbc:	2d00      	cmp	r5, #0
   84cbe:	d062      	beq.n	84d86 <__udivmoddi4+0x16a>
   84cc0:	2300      	movs	r3, #0
   84cc2:	fa24 f40e 	lsr.w	r4, r4, lr
   84cc6:	602c      	str	r4, [r5, #0]
   84cc8:	606b      	str	r3, [r5, #4]
   84cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84cce:	428b      	cmp	r3, r1
   84cd0:	d907      	bls.n	84ce2 <__udivmoddi4+0xc6>
   84cd2:	2d00      	cmp	r5, #0
   84cd4:	d055      	beq.n	84d82 <__udivmoddi4+0x166>
   84cd6:	2100      	movs	r1, #0
   84cd8:	e885 0041 	stmia.w	r5, {r0, r6}
   84cdc:	4608      	mov	r0, r1
   84cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84ce2:	fab3 f183 	clz	r1, r3
   84ce6:	2900      	cmp	r1, #0
   84ce8:	f040 808f 	bne.w	84e0a <__udivmoddi4+0x1ee>
   84cec:	42b3      	cmp	r3, r6
   84cee:	d302      	bcc.n	84cf6 <__udivmoddi4+0xda>
   84cf0:	4282      	cmp	r2, r0
   84cf2:	f200 80fc 	bhi.w	84eee <__udivmoddi4+0x2d2>
   84cf6:	1a84      	subs	r4, r0, r2
   84cf8:	eb66 0603 	sbc.w	r6, r6, r3
   84cfc:	2001      	movs	r0, #1
   84cfe:	46b4      	mov	ip, r6
   84d00:	2d00      	cmp	r5, #0
   84d02:	d040      	beq.n	84d86 <__udivmoddi4+0x16a>
   84d04:	e885 1010 	stmia.w	r5, {r4, ip}
   84d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84d0c:	b912      	cbnz	r2, 84d14 <__udivmoddi4+0xf8>
   84d0e:	2701      	movs	r7, #1
   84d10:	fbb7 f7f2 	udiv	r7, r7, r2
   84d14:	fab7 fe87 	clz	lr, r7
   84d18:	f1be 0f00 	cmp.w	lr, #0
   84d1c:	d135      	bne.n	84d8a <__udivmoddi4+0x16e>
   84d1e:	2101      	movs	r1, #1
   84d20:	1bf6      	subs	r6, r6, r7
   84d22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84d26:	fa1f f887 	uxth.w	r8, r7
   84d2a:	fbb6 f2fc 	udiv	r2, r6, ip
   84d2e:	fb0c 6612 	mls	r6, ip, r2, r6
   84d32:	fb08 f002 	mul.w	r0, r8, r2
   84d36:	0c23      	lsrs	r3, r4, #16
   84d38:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84d3c:	42b0      	cmp	r0, r6
   84d3e:	d907      	bls.n	84d50 <__udivmoddi4+0x134>
   84d40:	19f6      	adds	r6, r6, r7
   84d42:	f102 33ff 	add.w	r3, r2, #4294967295
   84d46:	d202      	bcs.n	84d4e <__udivmoddi4+0x132>
   84d48:	42b0      	cmp	r0, r6
   84d4a:	f200 80d2 	bhi.w	84ef2 <__udivmoddi4+0x2d6>
   84d4e:	461a      	mov	r2, r3
   84d50:	1a36      	subs	r6, r6, r0
   84d52:	fbb6 f0fc 	udiv	r0, r6, ip
   84d56:	fb0c 6610 	mls	r6, ip, r0, r6
   84d5a:	fb08 f800 	mul.w	r8, r8, r0
   84d5e:	b2a3      	uxth	r3, r4
   84d60:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84d64:	45a0      	cmp	r8, r4
   84d66:	d907      	bls.n	84d78 <__udivmoddi4+0x15c>
   84d68:	19e4      	adds	r4, r4, r7
   84d6a:	f100 33ff 	add.w	r3, r0, #4294967295
   84d6e:	d202      	bcs.n	84d76 <__udivmoddi4+0x15a>
   84d70:	45a0      	cmp	r8, r4
   84d72:	f200 80b9 	bhi.w	84ee8 <__udivmoddi4+0x2cc>
   84d76:	4618      	mov	r0, r3
   84d78:	eba4 0408 	sub.w	r4, r4, r8
   84d7c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   84d80:	e79c      	b.n	84cbc <__udivmoddi4+0xa0>
   84d82:	4629      	mov	r1, r5
   84d84:	4628      	mov	r0, r5
   84d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84d8a:	fa07 f70e 	lsl.w	r7, r7, lr
   84d8e:	f1ce 0320 	rsb	r3, lr, #32
   84d92:	fa26 f203 	lsr.w	r2, r6, r3
   84d96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84d9a:	fbb2 f1fc 	udiv	r1, r2, ip
   84d9e:	fa1f f887 	uxth.w	r8, r7
   84da2:	fb0c 2211 	mls	r2, ip, r1, r2
   84da6:	fa06 f60e 	lsl.w	r6, r6, lr
   84daa:	fa20 f303 	lsr.w	r3, r0, r3
   84dae:	fb01 f908 	mul.w	r9, r1, r8
   84db2:	4333      	orrs	r3, r6
   84db4:	0c1e      	lsrs	r6, r3, #16
   84db6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84dba:	45b1      	cmp	r9, r6
   84dbc:	fa00 f40e 	lsl.w	r4, r0, lr
   84dc0:	d909      	bls.n	84dd6 <__udivmoddi4+0x1ba>
   84dc2:	19f6      	adds	r6, r6, r7
   84dc4:	f101 32ff 	add.w	r2, r1, #4294967295
   84dc8:	f080 808c 	bcs.w	84ee4 <__udivmoddi4+0x2c8>
   84dcc:	45b1      	cmp	r9, r6
   84dce:	f240 8089 	bls.w	84ee4 <__udivmoddi4+0x2c8>
   84dd2:	3902      	subs	r1, #2
   84dd4:	443e      	add	r6, r7
   84dd6:	eba6 0609 	sub.w	r6, r6, r9
   84dda:	fbb6 f0fc 	udiv	r0, r6, ip
   84dde:	fb0c 6210 	mls	r2, ip, r0, r6
   84de2:	fb00 f908 	mul.w	r9, r0, r8
   84de6:	b29e      	uxth	r6, r3
   84de8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84dec:	45b1      	cmp	r9, r6
   84dee:	d907      	bls.n	84e00 <__udivmoddi4+0x1e4>
   84df0:	19f6      	adds	r6, r6, r7
   84df2:	f100 33ff 	add.w	r3, r0, #4294967295
   84df6:	d271      	bcs.n	84edc <__udivmoddi4+0x2c0>
   84df8:	45b1      	cmp	r9, r6
   84dfa:	d96f      	bls.n	84edc <__udivmoddi4+0x2c0>
   84dfc:	3802      	subs	r0, #2
   84dfe:	443e      	add	r6, r7
   84e00:	eba6 0609 	sub.w	r6, r6, r9
   84e04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   84e08:	e78f      	b.n	84d2a <__udivmoddi4+0x10e>
   84e0a:	f1c1 0720 	rsb	r7, r1, #32
   84e0e:	fa22 f807 	lsr.w	r8, r2, r7
   84e12:	408b      	lsls	r3, r1
   84e14:	ea48 0303 	orr.w	r3, r8, r3
   84e18:	fa26 f407 	lsr.w	r4, r6, r7
   84e1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   84e20:	fbb4 f9fe 	udiv	r9, r4, lr
   84e24:	fa1f fc83 	uxth.w	ip, r3
   84e28:	fb0e 4419 	mls	r4, lr, r9, r4
   84e2c:	408e      	lsls	r6, r1
   84e2e:	fa20 f807 	lsr.w	r8, r0, r7
   84e32:	fb09 fa0c 	mul.w	sl, r9, ip
   84e36:	ea48 0806 	orr.w	r8, r8, r6
   84e3a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   84e3e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   84e42:	45a2      	cmp	sl, r4
   84e44:	fa02 f201 	lsl.w	r2, r2, r1
   84e48:	fa00 f601 	lsl.w	r6, r0, r1
   84e4c:	d908      	bls.n	84e60 <__udivmoddi4+0x244>
   84e4e:	18e4      	adds	r4, r4, r3
   84e50:	f109 30ff 	add.w	r0, r9, #4294967295
   84e54:	d244      	bcs.n	84ee0 <__udivmoddi4+0x2c4>
   84e56:	45a2      	cmp	sl, r4
   84e58:	d942      	bls.n	84ee0 <__udivmoddi4+0x2c4>
   84e5a:	f1a9 0902 	sub.w	r9, r9, #2
   84e5e:	441c      	add	r4, r3
   84e60:	eba4 040a 	sub.w	r4, r4, sl
   84e64:	fbb4 f0fe 	udiv	r0, r4, lr
   84e68:	fb0e 4410 	mls	r4, lr, r0, r4
   84e6c:	fb00 fc0c 	mul.w	ip, r0, ip
   84e70:	fa1f f888 	uxth.w	r8, r8
   84e74:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   84e78:	45a4      	cmp	ip, r4
   84e7a:	d907      	bls.n	84e8c <__udivmoddi4+0x270>
   84e7c:	18e4      	adds	r4, r4, r3
   84e7e:	f100 3eff 	add.w	lr, r0, #4294967295
   84e82:	d229      	bcs.n	84ed8 <__udivmoddi4+0x2bc>
   84e84:	45a4      	cmp	ip, r4
   84e86:	d927      	bls.n	84ed8 <__udivmoddi4+0x2bc>
   84e88:	3802      	subs	r0, #2
   84e8a:	441c      	add	r4, r3
   84e8c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84e90:	fba0 8902 	umull	r8, r9, r0, r2
   84e94:	eba4 0c0c 	sub.w	ip, r4, ip
   84e98:	45cc      	cmp	ip, r9
   84e9a:	46c2      	mov	sl, r8
   84e9c:	46ce      	mov	lr, r9
   84e9e:	d315      	bcc.n	84ecc <__udivmoddi4+0x2b0>
   84ea0:	d012      	beq.n	84ec8 <__udivmoddi4+0x2ac>
   84ea2:	b155      	cbz	r5, 84eba <__udivmoddi4+0x29e>
   84ea4:	ebb6 030a 	subs.w	r3, r6, sl
   84ea8:	eb6c 060e 	sbc.w	r6, ip, lr
   84eac:	fa06 f707 	lsl.w	r7, r6, r7
   84eb0:	40cb      	lsrs	r3, r1
   84eb2:	431f      	orrs	r7, r3
   84eb4:	40ce      	lsrs	r6, r1
   84eb6:	602f      	str	r7, [r5, #0]
   84eb8:	606e      	str	r6, [r5, #4]
   84eba:	2100      	movs	r1, #0
   84ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84ec0:	4610      	mov	r0, r2
   84ec2:	e6f7      	b.n	84cb4 <__udivmoddi4+0x98>
   84ec4:	4689      	mov	r9, r1
   84ec6:	e6de      	b.n	84c86 <__udivmoddi4+0x6a>
   84ec8:	4546      	cmp	r6, r8
   84eca:	d2ea      	bcs.n	84ea2 <__udivmoddi4+0x286>
   84ecc:	ebb8 0a02 	subs.w	sl, r8, r2
   84ed0:	eb69 0e03 	sbc.w	lr, r9, r3
   84ed4:	3801      	subs	r0, #1
   84ed6:	e7e4      	b.n	84ea2 <__udivmoddi4+0x286>
   84ed8:	4670      	mov	r0, lr
   84eda:	e7d7      	b.n	84e8c <__udivmoddi4+0x270>
   84edc:	4618      	mov	r0, r3
   84ede:	e78f      	b.n	84e00 <__udivmoddi4+0x1e4>
   84ee0:	4681      	mov	r9, r0
   84ee2:	e7bd      	b.n	84e60 <__udivmoddi4+0x244>
   84ee4:	4611      	mov	r1, r2
   84ee6:	e776      	b.n	84dd6 <__udivmoddi4+0x1ba>
   84ee8:	3802      	subs	r0, #2
   84eea:	443c      	add	r4, r7
   84eec:	e744      	b.n	84d78 <__udivmoddi4+0x15c>
   84eee:	4608      	mov	r0, r1
   84ef0:	e706      	b.n	84d00 <__udivmoddi4+0xe4>
   84ef2:	3a02      	subs	r2, #2
   84ef4:	443e      	add	r6, r7
   84ef6:	e72b      	b.n	84d50 <__udivmoddi4+0x134>

00084ef8 <__aeabi_idiv0>:
   84ef8:	4770      	bx	lr
   84efa:	bf00      	nop
   84efc:	6e697270 	.word	0x6e697270
   84f00:	6f436674 	.word	0x6f436674
   84f04:	6c6f736e 	.word	0x6c6f736e
   84f08:	61742065 	.word	0x61742065
   84f0c:	00006b73 	.word	0x00006b73
   84f10:	0000006a 	.word	0x0000006a
   84f14:	0000006b 	.word	0x0000006b
   84f18:	454c4449 	.word	0x454c4449
   84f1c:	00000000 	.word	0x00000000
   84f20:	51726d54 	.word	0x51726d54
   84f24:	00000000 	.word	0x00000000
   84f28:	20726d54 	.word	0x20726d54
   84f2c:	00637653 	.word	0x00637653
   84f30:	7373654d 	.word	0x7373654d
   84f34:	20656761 	.word	0x20656761
   84f38:	72702031 	.word	0x72702031
   84f3c:	20746e69 	.word	0x20746e69
   84f40:	6b736174 	.word	0x6b736174
   84f44:	00000000 	.word	0x00000000
   84f48:	00000061 	.word	0x00000061
   84f4c:	20646156 	.word	0x20646156
   84f50:	21617262 	.word	0x21617262
   84f54:	00000020 	.word	0x00000020
   84f58:	7373654d 	.word	0x7373654d
   84f5c:	20656761 	.word	0x20656761
   84f60:	72702032 	.word	0x72702032
   84f64:	20746e69 	.word	0x20746e69
   84f68:	6b736174 	.word	0x6b736174
   84f6c:	00000000 	.word	0x00000000
   84f70:	6b63794d 	.word	0x6b63794d
   84f74:	6b207465 	.word	0x6b207465
   84f78:	65666661 	.word	0x65666661
   84f7c:	00002021 	.word	0x00002021

00084f80 <_global_impure_ptr>:
   84f80:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   84f90:	46454443 00000000 33323130 37363534     CDEF....01234567
   84fa0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84fb0:	0000296c                                l)..

00084fb4 <blanks.7217>:
   84fb4:	20202020 20202020 20202020 20202020                     

00084fc4 <zeroes.7218>:
   84fc4:	30303030 30303030 30303030 30303030     0000000000000000
   84fd4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00084fe4 <_ctype_>:
   84fe4:	20202000 20202020 28282020 20282828     .         ((((( 
   84ff4:	20202020 20202020 20202020 20202020                     
   85004:	10108820 10101010 10101010 10101010      ...............
   85014:	04040410 04040404 10040404 10101010     ................
   85024:	41411010 41414141 01010101 01010101     ..AAAAAA........
   85034:	01010101 01010101 01010101 10101010     ................
   85044:	42421010 42424242 02020202 02020202     ..BBBBBB........
   85054:	02020202 02020202 02020202 10101010     ................
   85064:	00000020 00000000 00000000 00000000      ...............
	...

000850e8 <_init>:
   850e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   850ea:	bf00      	nop
   850ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   850ee:	bc08      	pop	{r3}
   850f0:	469e      	mov	lr, r3
   850f2:	4770      	bx	lr

000850f4 <__init_array_start>:
   850f4:	000832e1 	.word	0x000832e1

000850f8 <__frame_dummy_init_array_entry>:
   850f8:	00080119                                ....

000850fc <_fini>:
   850fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   850fe:	bf00      	nop
   85100:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85102:	bc08      	pop	{r3}
   85104:	469e      	mov	lr, r3
   85106:	4770      	bx	lr

00085108 <__fini_array_start>:
   85108:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	2007c540                                @.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00084959 000842a5 00000000 00084fe4     YI...B.......O..
20070654:	00084fe0 00084f1c 00084f1c 00084f1c     .O...O...O...O..
20070664:	00084f1c 00084f1c 00084f1c 00084f1c     .O...O...O...O..
20070674:	00084f1c 00084f1c ffffffff ffffffff     .O...O..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
