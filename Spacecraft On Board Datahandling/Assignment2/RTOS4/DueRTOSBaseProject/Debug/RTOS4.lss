
RTOS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058a8  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000858a8  000858a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  000858b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000ba8c  20070ae0  00086390  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  2007c56c  00091e1c  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c925  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000040c3  00000000  00000000  0003d487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000082db  00000000  00000000  0004154a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000da0  00000000  00000000  00049825  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ef8  00000000  00000000  0004a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009cdd  00000000  00000000  0004b4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014b45  00000000  00000000  0005519a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006d0e4  00000000  00000000  00069cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002d18  00000000  00000000  000d6dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	70 e5 07 20 59 25 08 00 55 25 08 00 55 25 08 00     p.. Y%..U%..U%..
   80010:	55 25 08 00 55 25 08 00 55 25 08 00 00 00 00 00     U%..U%..U%......
	...
   8002c:	a1 05 08 00 55 25 08 00 00 00 00 00 41 06 08 00     ....U%......A...
   8003c:	89 06 08 00 55 25 08 00 55 25 08 00 55 25 08 00     ....U%..U%..U%..
   8004c:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..
   8005c:	55 25 08 00 55 25 08 00 55 25 08 00 00 00 00 00     U%..U%..U%......
   8006c:	fd 23 08 00 11 24 08 00 25 24 08 00 39 24 08 00     .#...$..%$..9$..
	...
   80084:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..
   80094:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..
   800a4:	00 00 00 00 55 25 08 00 55 25 08 00 55 25 08 00     ....U%..U%..U%..
   800b4:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..
   800c4:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..
   800d4:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..
   800e4:	55 25 08 00 55 25 08 00 55 25 08 00 55 25 08 00     U%..U%..U%..U%..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	000858b0 	.word	0x000858b0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000858b0 	.word	0x000858b0
   80154:	20070ae4 	.word	0x20070ae4
   80158:	000858b0 	.word	0x000858b0
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	2007c4fc 	.word	0x2007c4fc
   80198:	2007c4f4 	.word	0x2007c4f4

0008019c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8019c:	3801      	subs	r0, #1
   8019e:	2802      	cmp	r0, #2
   801a0:	d815      	bhi.n	801ce <_write+0x32>
{
   801a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801a6:	460e      	mov	r6, r1
   801a8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   801aa:	b19a      	cbz	r2, 801d4 <_write+0x38>
   801ac:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 801e8 <_write+0x4c>
   801b2:	4f0c      	ldr	r7, [pc, #48]	; (801e4 <_write+0x48>)
   801b4:	f8d8 0000 	ldr.w	r0, [r8]
   801b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   801bc:	683b      	ldr	r3, [r7, #0]
   801be:	4798      	blx	r3
   801c0:	2800      	cmp	r0, #0
   801c2:	db0a      	blt.n	801da <_write+0x3e>
   801c4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   801c6:	3c01      	subs	r4, #1
   801c8:	d1f4      	bne.n	801b4 <_write+0x18>
   801ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   801ce:	f04f 30ff 	mov.w	r0, #4294967295
   801d2:	4770      	bx	lr
	for (; len != 0; --len) {
   801d4:	4610      	mov	r0, r2
   801d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   801da:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e2:	bf00      	nop
   801e4:	2007c4f8 	.word	0x2007c4f8
   801e8:	2007c4fc 	.word	0x2007c4fc

000801ec <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   801ec:	6943      	ldr	r3, [r0, #20]
   801ee:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801f2:	bf1d      	ittte	ne
   801f4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801f8:	61c1      	strne	r1, [r0, #28]
	return 0;
   801fa:	2000      	movne	r0, #0
		return 1;
   801fc:	2001      	moveq	r0, #1
}
   801fe:	4770      	bx	lr

00080200 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80200:	6943      	ldr	r3, [r0, #20]
   80202:	f013 0f01 	tst.w	r3, #1
   80206:	d005      	beq.n	80214 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80208:	6983      	ldr	r3, [r0, #24]
   8020a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8020e:	600b      	str	r3, [r1, #0]

	return 0;
   80210:	2000      	movs	r0, #0
   80212:	4770      	bx	lr
		return 1;
   80214:	2001      	movs	r0, #1
}
   80216:	4770      	bx	lr

00080218 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80218:	b5f0      	push	{r4, r5, r6, r7, lr}
   8021a:	b083      	sub	sp, #12
   8021c:	4604      	mov	r4, r0
   8021e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80220:	2300      	movs	r3, #0
   80222:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80224:	4b20      	ldr	r3, [pc, #128]	; (802a8 <usart_serial_getchar+0x90>)
   80226:	4298      	cmp	r0, r3
   80228:	d00d      	beq.n	80246 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8022a:	4b20      	ldr	r3, [pc, #128]	; (802ac <usart_serial_getchar+0x94>)
   8022c:	4298      	cmp	r0, r3
   8022e:	d012      	beq.n	80256 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80230:	4b1f      	ldr	r3, [pc, #124]	; (802b0 <usart_serial_getchar+0x98>)
   80232:	4298      	cmp	r0, r3
   80234:	d019      	beq.n	8026a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80236:	4b1f      	ldr	r3, [pc, #124]	; (802b4 <usart_serial_getchar+0x9c>)
   80238:	429c      	cmp	r4, r3
   8023a:	d020      	beq.n	8027e <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8023c:	4b1e      	ldr	r3, [pc, #120]	; (802b8 <usart_serial_getchar+0xa0>)
   8023e:	429c      	cmp	r4, r3
   80240:	d027      	beq.n	80292 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80242:	b003      	add	sp, #12
   80244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80246:	461f      	mov	r7, r3
   80248:	4e1c      	ldr	r6, [pc, #112]	; (802bc <usart_serial_getchar+0xa4>)
   8024a:	4629      	mov	r1, r5
   8024c:	4638      	mov	r0, r7
   8024e:	47b0      	blx	r6
   80250:	2800      	cmp	r0, #0
   80252:	d1fa      	bne.n	8024a <usart_serial_getchar+0x32>
   80254:	e7ef      	b.n	80236 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80256:	461f      	mov	r7, r3
   80258:	4e19      	ldr	r6, [pc, #100]	; (802c0 <usart_serial_getchar+0xa8>)
   8025a:	a901      	add	r1, sp, #4
   8025c:	4638      	mov	r0, r7
   8025e:	47b0      	blx	r6
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80264:	9b01      	ldr	r3, [sp, #4]
   80266:	702b      	strb	r3, [r5, #0]
   80268:	e7e8      	b.n	8023c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8026a:	461e      	mov	r6, r3
   8026c:	4c14      	ldr	r4, [pc, #80]	; (802c0 <usart_serial_getchar+0xa8>)
   8026e:	a901      	add	r1, sp, #4
   80270:	4630      	mov	r0, r6
   80272:	47a0      	blx	r4
   80274:	2800      	cmp	r0, #0
   80276:	d1fa      	bne.n	8026e <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80278:	9b01      	ldr	r3, [sp, #4]
   8027a:	702b      	strb	r3, [r5, #0]
   8027c:	e7e1      	b.n	80242 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8027e:	461e      	mov	r6, r3
   80280:	4c0f      	ldr	r4, [pc, #60]	; (802c0 <usart_serial_getchar+0xa8>)
   80282:	a901      	add	r1, sp, #4
   80284:	4630      	mov	r0, r6
   80286:	47a0      	blx	r4
   80288:	2800      	cmp	r0, #0
   8028a:	d1fa      	bne.n	80282 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   8028c:	9b01      	ldr	r3, [sp, #4]
   8028e:	702b      	strb	r3, [r5, #0]
   80290:	e7d7      	b.n	80242 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80292:	461e      	mov	r6, r3
   80294:	4c0a      	ldr	r4, [pc, #40]	; (802c0 <usart_serial_getchar+0xa8>)
   80296:	a901      	add	r1, sp, #4
   80298:	4630      	mov	r0, r6
   8029a:	47a0      	blx	r4
   8029c:	2800      	cmp	r0, #0
   8029e:	d1fa      	bne.n	80296 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   802a0:	9b01      	ldr	r3, [sp, #4]
   802a2:	702b      	strb	r3, [r5, #0]
}
   802a4:	e7cd      	b.n	80242 <usart_serial_getchar+0x2a>
   802a6:	bf00      	nop
   802a8:	400e0800 	.word	0x400e0800
   802ac:	40098000 	.word	0x40098000
   802b0:	4009c000 	.word	0x4009c000
   802b4:	400a0000 	.word	0x400a0000
   802b8:	400a4000 	.word	0x400a4000
   802bc:	0008047b 	.word	0x0008047b
   802c0:	00080201 	.word	0x00080201

000802c4 <usart_serial_putchar>:
{
   802c4:	b570      	push	{r4, r5, r6, lr}
   802c6:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   802c8:	4b1e      	ldr	r3, [pc, #120]	; (80344 <usart_serial_putchar+0x80>)
   802ca:	4298      	cmp	r0, r3
   802cc:	d00d      	beq.n	802ea <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   802ce:	4b1e      	ldr	r3, [pc, #120]	; (80348 <usart_serial_putchar+0x84>)
   802d0:	4298      	cmp	r0, r3
   802d2:	d013      	beq.n	802fc <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   802d4:	4b1d      	ldr	r3, [pc, #116]	; (8034c <usart_serial_putchar+0x88>)
   802d6:	4298      	cmp	r0, r3
   802d8:	d019      	beq.n	8030e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   802da:	4b1d      	ldr	r3, [pc, #116]	; (80350 <usart_serial_putchar+0x8c>)
   802dc:	4298      	cmp	r0, r3
   802de:	d01f      	beq.n	80320 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   802e0:	4b1c      	ldr	r3, [pc, #112]	; (80354 <usart_serial_putchar+0x90>)
   802e2:	4298      	cmp	r0, r3
   802e4:	d025      	beq.n	80332 <usart_serial_putchar+0x6e>
	return 0;
   802e6:	2000      	movs	r0, #0
}
   802e8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   802ea:	461e      	mov	r6, r3
   802ec:	4d1a      	ldr	r5, [pc, #104]	; (80358 <usart_serial_putchar+0x94>)
   802ee:	4621      	mov	r1, r4
   802f0:	4630      	mov	r0, r6
   802f2:	47a8      	blx	r5
   802f4:	2800      	cmp	r0, #0
   802f6:	d1fa      	bne.n	802ee <usart_serial_putchar+0x2a>
		return 1;
   802f8:	2001      	movs	r0, #1
   802fa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   802fc:	461e      	mov	r6, r3
   802fe:	4d17      	ldr	r5, [pc, #92]	; (8035c <usart_serial_putchar+0x98>)
   80300:	4621      	mov	r1, r4
   80302:	4630      	mov	r0, r6
   80304:	47a8      	blx	r5
   80306:	2800      	cmp	r0, #0
   80308:	d1fa      	bne.n	80300 <usart_serial_putchar+0x3c>
		return 1;
   8030a:	2001      	movs	r0, #1
   8030c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8030e:	461e      	mov	r6, r3
   80310:	4d12      	ldr	r5, [pc, #72]	; (8035c <usart_serial_putchar+0x98>)
   80312:	4621      	mov	r1, r4
   80314:	4630      	mov	r0, r6
   80316:	47a8      	blx	r5
   80318:	2800      	cmp	r0, #0
   8031a:	d1fa      	bne.n	80312 <usart_serial_putchar+0x4e>
		return 1;
   8031c:	2001      	movs	r0, #1
   8031e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80320:	461e      	mov	r6, r3
   80322:	4d0e      	ldr	r5, [pc, #56]	; (8035c <usart_serial_putchar+0x98>)
   80324:	4621      	mov	r1, r4
   80326:	4630      	mov	r0, r6
   80328:	47a8      	blx	r5
   8032a:	2800      	cmp	r0, #0
   8032c:	d1fa      	bne.n	80324 <usart_serial_putchar+0x60>
		return 1;
   8032e:	2001      	movs	r0, #1
   80330:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80332:	461e      	mov	r6, r3
   80334:	4d09      	ldr	r5, [pc, #36]	; (8035c <usart_serial_putchar+0x98>)
   80336:	4621      	mov	r1, r4
   80338:	4630      	mov	r0, r6
   8033a:	47a8      	blx	r5
   8033c:	2800      	cmp	r0, #0
   8033e:	d1fa      	bne.n	80336 <usart_serial_putchar+0x72>
		return 1;
   80340:	2001      	movs	r0, #1
   80342:	bd70      	pop	{r4, r5, r6, pc}
   80344:	400e0800 	.word	0x400e0800
   80348:	40098000 	.word	0x40098000
   8034c:	4009c000 	.word	0x4009c000
   80350:	400a0000 	.word	0x400a0000
   80354:	400a4000 	.word	0x400a4000
   80358:	0008046b 	.word	0x0008046b
   8035c:	000801ed 	.word	0x000801ed

00080360 <printfConsole>:
#include <writer2.h>

SemaphoreHandle_t xSemaphore;


void printfConsole(const char * str) {
   80360:	b538      	push	{r3, r4, r5, lr}
   80362:	4604      	mov	r4, r0
	//printf(str);
	xSemaphoreTake(xSemaphore,10);
   80364:	4d08      	ldr	r5, [pc, #32]	; (80388 <printfConsole+0x28>)
   80366:	210a      	movs	r1, #10
   80368:	6828      	ldr	r0, [r5, #0]
   8036a:	4b08      	ldr	r3, [pc, #32]	; (8038c <printfConsole+0x2c>)
   8036c:	4798      	blx	r3
	for( int i = 0; i < sizeof(str); i++) {
		CONF_UART->UART_THR = str;
   8036e:	4b08      	ldr	r3, [pc, #32]	; (80390 <printfConsole+0x30>)
   80370:	61dc      	str	r4, [r3, #28]
   80372:	61dc      	str	r4, [r3, #28]
   80374:	61dc      	str	r4, [r3, #28]
   80376:	61dc      	str	r4, [r3, #28]
	}
	xSemaphoreGive(xSemaphore);
   80378:	2300      	movs	r3, #0
   8037a:	461a      	mov	r2, r3
   8037c:	4619      	mov	r1, r3
   8037e:	6828      	ldr	r0, [r5, #0]
   80380:	4c04      	ldr	r4, [pc, #16]	; (80394 <printfConsole+0x34>)
   80382:	47a0      	blx	r4
   80384:	bd38      	pop	{r3, r4, r5, pc}
   80386:	bf00      	nop
   80388:	2007c500 	.word	0x2007c500
   8038c:	00080f1d 	.word	0x00080f1d
   80390:	400e0800 	.word	0x400e0800
   80394:	00080ad1 	.word	0x00080ad1

00080398 <console_init>:

}

void console_init()
{
   80398:	b530      	push	{r4, r5, lr}
   8039a:	b085      	sub	sp, #20
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8039c:	4c16      	ldr	r4, [pc, #88]	; (803f8 <console_init+0x60>)
   8039e:	4b17      	ldr	r3, [pc, #92]	; (803fc <console_init+0x64>)
   803a0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   803a2:	4a17      	ldr	r2, [pc, #92]	; (80400 <console_init+0x68>)
   803a4:	4b17      	ldr	r3, [pc, #92]	; (80404 <console_init+0x6c>)
   803a6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   803a8:	4a17      	ldr	r2, [pc, #92]	; (80408 <console_init+0x70>)
   803aa:	4b18      	ldr	r3, [pc, #96]	; (8040c <console_init+0x74>)
   803ac:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   803ae:	4b18      	ldr	r3, [pc, #96]	; (80410 <console_init+0x78>)
   803b0:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   803b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   803b6:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   803b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803bc:	9303      	str	r3, [sp, #12]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803be:	2008      	movs	r0, #8
   803c0:	4b14      	ldr	r3, [pc, #80]	; (80414 <console_init+0x7c>)
   803c2:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
   803c4:	a901      	add	r1, sp, #4
   803c6:	4620      	mov	r0, r4
   803c8:	4b13      	ldr	r3, [pc, #76]	; (80418 <console_init+0x80>)
   803ca:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   803cc:	4d13      	ldr	r5, [pc, #76]	; (8041c <console_init+0x84>)
   803ce:	682b      	ldr	r3, [r5, #0]
   803d0:	2100      	movs	r1, #0
   803d2:	6898      	ldr	r0, [r3, #8]
   803d4:	4c12      	ldr	r4, [pc, #72]	; (80420 <console_init+0x88>)
   803d6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803d8:	682b      	ldr	r3, [r5, #0]
   803da:	2100      	movs	r1, #0
   803dc:	6858      	ldr	r0, [r3, #4]
   803de:	47a0      	blx	r4
	stdio_serial_init(CONF_UART, &usart_serial_options);
	
	
	// Semaphore

	xSemaphore = xSemaphoreCreateMutex();
   803e0:	2001      	movs	r0, #1
   803e2:	4b10      	ldr	r3, [pc, #64]	; (80424 <console_init+0x8c>)
   803e4:	4798      	blx	r3
   803e6:	4b10      	ldr	r3, [pc, #64]	; (80428 <console_init+0x90>)
   803e8:	6018      	str	r0, [r3, #0]

   if( xSemaphore != NULL )
   803ea:	b110      	cbz	r0, 803f2 <console_init+0x5a>
   {
       /* The semaphore was created successfully and
       can be used. */
	   printf('error');
   803ec:	480f      	ldr	r0, [pc, #60]	; (8042c <console_init+0x94>)
   803ee:	4b10      	ldr	r3, [pc, #64]	; (80430 <console_init+0x98>)
   803f0:	4798      	blx	r3
   }

}
   803f2:	b005      	add	sp, #20
   803f4:	bd30      	pop	{r4, r5, pc}
   803f6:	bf00      	nop
   803f8:	400e0800 	.word	0x400e0800
   803fc:	2007c4fc 	.word	0x2007c4fc
   80400:	000802c5 	.word	0x000802c5
   80404:	2007c4f8 	.word	0x2007c4f8
   80408:	00080219 	.word	0x00080219
   8040c:	2007c4f4 	.word	0x2007c4f4
   80410:	0501bd00 	.word	0x0501bd00
   80414:	00082535 	.word	0x00082535
   80418:	00080435 	.word	0x00080435
   8041c:	20070134 	.word	0x20070134
   80420:	00082a39 	.word	0x00082a39
   80424:	00080c85 	.word	0x00080c85
   80428:	2007c500 	.word	0x2007c500
   8042c:	72726f72 	.word	0x72726f72
   80430:	00082889 	.word	0x00082889

00080434 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80434:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80436:	23ac      	movs	r3, #172	; 0xac
   80438:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8043a:	680b      	ldr	r3, [r1, #0]
   8043c:	684a      	ldr	r2, [r1, #4]
   8043e:	fbb3 f3f2 	udiv	r3, r3, r2
   80442:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80444:	1e5c      	subs	r4, r3, #1
   80446:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8044a:	4294      	cmp	r4, r2
   8044c:	d80b      	bhi.n	80466 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8044e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80450:	688b      	ldr	r3, [r1, #8]
   80452:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80454:	f240 2302 	movw	r3, #514	; 0x202
   80458:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8045c:	2350      	movs	r3, #80	; 0x50
   8045e:	6003      	str	r3, [r0, #0]

	return 0;
   80460:	2000      	movs	r0, #0
}
   80462:	bc10      	pop	{r4}
   80464:	4770      	bx	lr
		return 1;
   80466:	2001      	movs	r0, #1
   80468:	e7fb      	b.n	80462 <uart_init+0x2e>

0008046a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8046a:	6943      	ldr	r3, [r0, #20]
   8046c:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80470:	bf1a      	itte	ne
   80472:	61c1      	strne	r1, [r0, #28]
	return 0;
   80474:	2000      	movne	r0, #0
		return 1;
   80476:	2001      	moveq	r0, #1
}
   80478:	4770      	bx	lr

0008047a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8047a:	6943      	ldr	r3, [r0, #20]
   8047c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80480:	bf1d      	ittte	ne
   80482:	6983      	ldrne	r3, [r0, #24]
   80484:	700b      	strbne	r3, [r1, #0]
	return 0;
   80486:	2000      	movne	r0, #0
		return 1;
   80488:	2001      	moveq	r0, #1
}
   8048a:	4770      	bx	lr

0008048c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8048c:	f100 0308 	add.w	r3, r0, #8
   80490:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80492:	f04f 32ff 	mov.w	r2, #4294967295
   80496:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80498:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8049a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   8049c:	2300      	movs	r3, #0
   8049e:	6003      	str	r3, [r0, #0]
   804a0:	4770      	bx	lr

000804a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   804a2:	2300      	movs	r3, #0
   804a4:	6103      	str	r3, [r0, #16]
   804a6:	4770      	bx	lr

000804a8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   804a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   804aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   804ac:	689a      	ldr	r2, [r3, #8]
   804ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   804b0:	689a      	ldr	r2, [r3, #8]
   804b2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   804b4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804b6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804b8:	6803      	ldr	r3, [r0, #0]
   804ba:	3301      	adds	r3, #1
   804bc:	6003      	str	r3, [r0, #0]
   804be:	4770      	bx	lr

000804c0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   804c0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   804c2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   804c4:	f1b5 3fff 	cmp.w	r5, #4294967295
   804c8:	d002      	beq.n	804d0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   804ca:	f100 0208 	add.w	r2, r0, #8
   804ce:	e002      	b.n	804d6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   804d0:	6902      	ldr	r2, [r0, #16]
   804d2:	e004      	b.n	804de <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   804d4:	461a      	mov	r2, r3
   804d6:	6853      	ldr	r3, [r2, #4]
   804d8:	681c      	ldr	r4, [r3, #0]
   804da:	42a5      	cmp	r5, r4
   804dc:	d2fa      	bcs.n	804d4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   804de:	6853      	ldr	r3, [r2, #4]
   804e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   804e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   804e4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   804e6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804ea:	6803      	ldr	r3, [r0, #0]
   804ec:	3301      	adds	r3, #1
   804ee:	6003      	str	r3, [r0, #0]
}
   804f0:	bc30      	pop	{r4, r5}
   804f2:	4770      	bx	lr

000804f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   804f4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   804f6:	6842      	ldr	r2, [r0, #4]
   804f8:	6881      	ldr	r1, [r0, #8]
   804fa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   804fc:	6882      	ldr	r2, [r0, #8]
   804fe:	6841      	ldr	r1, [r0, #4]
   80500:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80502:	685a      	ldr	r2, [r3, #4]
   80504:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80506:	bf04      	itt	eq
   80508:	6882      	ldreq	r2, [r0, #8]
   8050a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   8050c:	2200      	movs	r2, #0
   8050e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80510:	681a      	ldr	r2, [r3, #0]
   80512:	3a01      	subs	r2, #1
   80514:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80516:	6818      	ldr	r0, [r3, #0]
}
   80518:	4770      	bx	lr
	...

0008051c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   8051c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   8051e:	2300      	movs	r3, #0
   80520:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   80522:	4b0d      	ldr	r3, [pc, #52]	; (80558 <prvTaskExitError+0x3c>)
   80524:	681b      	ldr	r3, [r3, #0]
   80526:	f1b3 3fff 	cmp.w	r3, #4294967295
   8052a:	d008      	beq.n	8053e <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   8052c:	f04f 0340 	mov.w	r3, #64	; 0x40
   80530:	f383 8811 	msr	BASEPRI, r3
   80534:	f3bf 8f6f 	isb	sy
   80538:	f3bf 8f4f 	dsb	sy
   8053c:	e7fe      	b.n	8053c <prvTaskExitError+0x20>
   8053e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80542:	f383 8811 	msr	BASEPRI, r3
   80546:	f3bf 8f6f 	isb	sy
   8054a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   8054e:	9b01      	ldr	r3, [sp, #4]
   80550:	2b00      	cmp	r3, #0
   80552:	d0fc      	beq.n	8054e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   80554:	b002      	add	sp, #8
   80556:	4770      	bx	lr
   80558:	2007012c 	.word	0x2007012c

0008055c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   8055c:	4806      	ldr	r0, [pc, #24]	; (80578 <prvPortStartFirstTask+0x1c>)
   8055e:	6800      	ldr	r0, [r0, #0]
   80560:	6800      	ldr	r0, [r0, #0]
   80562:	f380 8808 	msr	MSP, r0
   80566:	b662      	cpsie	i
   80568:	b661      	cpsie	f
   8056a:	f3bf 8f4f 	dsb	sy
   8056e:	f3bf 8f6f 	isb	sy
   80572:	df00      	svc	0
   80574:	bf00      	nop
   80576:	0000      	.short	0x0000
   80578:	e000ed08 	.word	0xe000ed08

0008057c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8057c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80580:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   80584:	f021 0101 	bic.w	r1, r1, #1
   80588:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   8058c:	4b03      	ldr	r3, [pc, #12]	; (8059c <pxPortInitialiseStack+0x20>)
   8058e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   80592:	f840 2c20 	str.w	r2, [r0, #-32]
}
   80596:	3840      	subs	r0, #64	; 0x40
   80598:	4770      	bx	lr
   8059a:	bf00      	nop
   8059c:	0008051d 	.word	0x0008051d

000805a0 <SVC_Handler>:
	__asm volatile (
   805a0:	4b07      	ldr	r3, [pc, #28]	; (805c0 <pxCurrentTCBConst2>)
   805a2:	6819      	ldr	r1, [r3, #0]
   805a4:	6808      	ldr	r0, [r1, #0]
   805a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   805aa:	f380 8809 	msr	PSP, r0
   805ae:	f3bf 8f6f 	isb	sy
   805b2:	f04f 0000 	mov.w	r0, #0
   805b6:	f380 8811 	msr	BASEPRI, r0
   805ba:	f04e 0e0d 	orr.w	lr, lr, #13
   805be:	4770      	bx	lr

000805c0 <pxCurrentTCBConst2>:
   805c0:	2007c30c 	.word	0x2007c30c
   805c4:	4770      	bx	lr
   805c6:	bf00      	nop

000805c8 <vPortEnterCritical>:
   805c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   805cc:	f383 8811 	msr	BASEPRI, r3
   805d0:	f3bf 8f6f 	isb	sy
   805d4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   805d8:	4a0a      	ldr	r2, [pc, #40]	; (80604 <vPortEnterCritical+0x3c>)
   805da:	6813      	ldr	r3, [r2, #0]
   805dc:	3301      	adds	r3, #1
   805de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   805e0:	2b01      	cmp	r3, #1
   805e2:	d10d      	bne.n	80600 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   805e4:	4b08      	ldr	r3, [pc, #32]	; (80608 <vPortEnterCritical+0x40>)
   805e6:	681b      	ldr	r3, [r3, #0]
   805e8:	f013 0fff 	tst.w	r3, #255	; 0xff
   805ec:	d008      	beq.n	80600 <vPortEnterCritical+0x38>
   805ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   805f2:	f383 8811 	msr	BASEPRI, r3
   805f6:	f3bf 8f6f 	isb	sy
   805fa:	f3bf 8f4f 	dsb	sy
   805fe:	e7fe      	b.n	805fe <vPortEnterCritical+0x36>
   80600:	4770      	bx	lr
   80602:	bf00      	nop
   80604:	2007012c 	.word	0x2007012c
   80608:	e000ed04 	.word	0xe000ed04

0008060c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   8060c:	4b09      	ldr	r3, [pc, #36]	; (80634 <vPortExitCritical+0x28>)
   8060e:	681b      	ldr	r3, [r3, #0]
   80610:	b943      	cbnz	r3, 80624 <vPortExitCritical+0x18>
   80612:	f04f 0340 	mov.w	r3, #64	; 0x40
   80616:	f383 8811 	msr	BASEPRI, r3
   8061a:	f3bf 8f6f 	isb	sy
   8061e:	f3bf 8f4f 	dsb	sy
   80622:	e7fe      	b.n	80622 <vPortExitCritical+0x16>
	uxCriticalNesting--;
   80624:	3b01      	subs	r3, #1
   80626:	4a03      	ldr	r2, [pc, #12]	; (80634 <vPortExitCritical+0x28>)
   80628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8062a:	b90b      	cbnz	r3, 80630 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   8062c:	f383 8811 	msr	BASEPRI, r3
   80630:	4770      	bx	lr
   80632:	bf00      	nop
   80634:	2007012c 	.word	0x2007012c
	...

00080640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   80640:	f3ef 8009 	mrs	r0, PSP
   80644:	f3bf 8f6f 	isb	sy
   80648:	4b0d      	ldr	r3, [pc, #52]	; (80680 <pxCurrentTCBConst>)
   8064a:	681a      	ldr	r2, [r3, #0]
   8064c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80650:	6010      	str	r0, [r2, #0]
   80652:	e92d 4008 	stmdb	sp!, {r3, lr}
   80656:	f04f 0040 	mov.w	r0, #64	; 0x40
   8065a:	f380 8811 	msr	BASEPRI, r0
   8065e:	f001 f8af 	bl	817c0 <vTaskSwitchContext>
   80662:	f04f 0000 	mov.w	r0, #0
   80666:	f380 8811 	msr	BASEPRI, r0
   8066a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8066e:	6819      	ldr	r1, [r3, #0]
   80670:	6808      	ldr	r0, [r1, #0]
   80672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80676:	f380 8809 	msr	PSP, r0
   8067a:	f3bf 8f6f 	isb	sy
   8067e:	4770      	bx	lr

00080680 <pxCurrentTCBConst>:
   80680:	2007c30c 	.word	0x2007c30c
   80684:	4770      	bx	lr
   80686:	bf00      	nop

00080688 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   80688:	b508      	push	{r3, lr}
	__asm volatile
   8068a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8068e:	f383 8811 	msr	BASEPRI, r3
   80692:	f3bf 8f6f 	isb	sy
   80696:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   8069a:	4b05      	ldr	r3, [pc, #20]	; (806b0 <SysTick_Handler+0x28>)
   8069c:	4798      	blx	r3
   8069e:	b118      	cbz	r0, 806a8 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   806a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806a4:	4b03      	ldr	r3, [pc, #12]	; (806b4 <SysTick_Handler+0x2c>)
   806a6:	601a      	str	r2, [r3, #0]
	__asm volatile
   806a8:	2300      	movs	r3, #0
   806aa:	f383 8811 	msr	BASEPRI, r3
   806ae:	bd08      	pop	{r3, pc}
   806b0:	00081579 	.word	0x00081579
   806b4:	e000ed04 	.word	0xe000ed04

000806b8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   806b8:	4b05      	ldr	r3, [pc, #20]	; (806d0 <vPortSetupTimerInterrupt+0x18>)
   806ba:	2200      	movs	r2, #0
   806bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   806be:	4905      	ldr	r1, [pc, #20]	; (806d4 <vPortSetupTimerInterrupt+0x1c>)
   806c0:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   806c2:	4905      	ldr	r1, [pc, #20]	; (806d8 <vPortSetupTimerInterrupt+0x20>)
   806c4:	4a05      	ldr	r2, [pc, #20]	; (806dc <vPortSetupTimerInterrupt+0x24>)
   806c6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   806c8:	2207      	movs	r2, #7
   806ca:	601a      	str	r2, [r3, #0]
   806cc:	4770      	bx	lr
   806ce:	bf00      	nop
   806d0:	e000e010 	.word	0xe000e010
   806d4:	e000e018 	.word	0xe000e018
   806d8:	0001481f 	.word	0x0001481f
   806dc:	e000e014 	.word	0xe000e014

000806e0 <xPortStartScheduler>:
{
   806e0:	b510      	push	{r4, lr}
   806e2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   806e4:	4b29      	ldr	r3, [pc, #164]	; (8078c <xPortStartScheduler+0xac>)
   806e6:	781a      	ldrb	r2, [r3, #0]
   806e8:	b2d2      	uxtb	r2, r2
   806ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   806ec:	22ff      	movs	r2, #255	; 0xff
   806ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   806f0:	781b      	ldrb	r3, [r3, #0]
   806f2:	b2db      	uxtb	r3, r3
   806f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   806f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   806fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   80700:	4a23      	ldr	r2, [pc, #140]	; (80790 <xPortStartScheduler+0xb0>)
   80702:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   80704:	2207      	movs	r2, #7
   80706:	4b23      	ldr	r3, [pc, #140]	; (80794 <xPortStartScheduler+0xb4>)
   80708:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8070a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   8070e:	f013 0f80 	tst.w	r3, #128	; 0x80
   80712:	d012      	beq.n	8073a <xPortStartScheduler+0x5a>
   80714:	2306      	movs	r3, #6
   80716:	e000      	b.n	8071a <xPortStartScheduler+0x3a>
   80718:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   8071a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   8071e:	0052      	lsls	r2, r2, #1
   80720:	b2d2      	uxtb	r2, r2
   80722:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   80726:	f89d 2003 	ldrb.w	r2, [sp, #3]
   8072a:	1e59      	subs	r1, r3, #1
   8072c:	f012 0f80 	tst.w	r2, #128	; 0x80
   80730:	d1f2      	bne.n	80718 <xPortStartScheduler+0x38>
   80732:	4a18      	ldr	r2, [pc, #96]	; (80794 <xPortStartScheduler+0xb4>)
   80734:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   80736:	2b03      	cmp	r3, #3
   80738:	d008      	beq.n	8074c <xPortStartScheduler+0x6c>
	__asm volatile
   8073a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8073e:	f383 8811 	msr	BASEPRI, r3
   80742:	f3bf 8f6f 	isb	sy
   80746:	f3bf 8f4f 	dsb	sy
   8074a:	e7fe      	b.n	8074a <xPortStartScheduler+0x6a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8074c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   8074e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80752:	4a10      	ldr	r2, [pc, #64]	; (80794 <xPortStartScheduler+0xb4>)
   80754:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   80756:	9b01      	ldr	r3, [sp, #4]
   80758:	b2db      	uxtb	r3, r3
   8075a:	4a0c      	ldr	r2, [pc, #48]	; (8078c <xPortStartScheduler+0xac>)
   8075c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8075e:	4b0e      	ldr	r3, [pc, #56]	; (80798 <xPortStartScheduler+0xb8>)
   80760:	681a      	ldr	r2, [r3, #0]
   80762:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   80766:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80768:	681a      	ldr	r2, [r3, #0]
   8076a:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
   8076e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80770:	4b0a      	ldr	r3, [pc, #40]	; (8079c <xPortStartScheduler+0xbc>)
   80772:	4798      	blx	r3
	uxCriticalNesting = 0;
   80774:	2400      	movs	r4, #0
   80776:	4b0a      	ldr	r3, [pc, #40]	; (807a0 <xPortStartScheduler+0xc0>)
   80778:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   8077a:	4b0a      	ldr	r3, [pc, #40]	; (807a4 <xPortStartScheduler+0xc4>)
   8077c:	4798      	blx	r3
	vTaskSwitchContext();
   8077e:	4b0a      	ldr	r3, [pc, #40]	; (807a8 <xPortStartScheduler+0xc8>)
   80780:	4798      	blx	r3
	prvTaskExitError();
   80782:	4b0a      	ldr	r3, [pc, #40]	; (807ac <xPortStartScheduler+0xcc>)
   80784:	4798      	blx	r3
}
   80786:	4620      	mov	r0, r4
   80788:	b002      	add	sp, #8
   8078a:	bd10      	pop	{r4, pc}
   8078c:	e000e400 	.word	0xe000e400
   80790:	20070afc 	.word	0x20070afc
   80794:	20070b00 	.word	0x20070b00
   80798:	e000ed20 	.word	0xe000ed20
   8079c:	000806b9 	.word	0x000806b9
   807a0:	2007012c 	.word	0x2007012c
   807a4:	0008055d 	.word	0x0008055d
   807a8:	000817c1 	.word	0x000817c1
   807ac:	0008051d 	.word	0x0008051d

000807b0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   807b0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   807b4:	2b0f      	cmp	r3, #15
   807b6:	d90f      	bls.n	807d8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   807b8:	4a10      	ldr	r2, [pc, #64]	; (807fc <vPortValidateInterruptPriority+0x4c>)
   807ba:	5c9b      	ldrb	r3, [r3, r2]
   807bc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   807be:	4a10      	ldr	r2, [pc, #64]	; (80800 <vPortValidateInterruptPriority+0x50>)
   807c0:	7812      	ldrb	r2, [r2, #0]
   807c2:	429a      	cmp	r2, r3
   807c4:	d908      	bls.n	807d8 <vPortValidateInterruptPriority+0x28>
   807c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   807ca:	f383 8811 	msr	BASEPRI, r3
   807ce:	f3bf 8f6f 	isb	sy
   807d2:	f3bf 8f4f 	dsb	sy
   807d6:	e7fe      	b.n	807d6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   807d8:	4b0a      	ldr	r3, [pc, #40]	; (80804 <vPortValidateInterruptPriority+0x54>)
   807da:	681b      	ldr	r3, [r3, #0]
   807dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807e0:	4a09      	ldr	r2, [pc, #36]	; (80808 <vPortValidateInterruptPriority+0x58>)
   807e2:	6812      	ldr	r2, [r2, #0]
   807e4:	4293      	cmp	r3, r2
   807e6:	d908      	bls.n	807fa <vPortValidateInterruptPriority+0x4a>
   807e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   807ec:	f383 8811 	msr	BASEPRI, r3
   807f0:	f3bf 8f6f 	isb	sy
   807f4:	f3bf 8f4f 	dsb	sy
   807f8:	e7fe      	b.n	807f8 <vPortValidateInterruptPriority+0x48>
   807fa:	4770      	bx	lr
   807fc:	e000e3f0 	.word	0xe000e3f0
   80800:	20070afc 	.word	0x20070afc
   80804:	e000ed0c 	.word	0xe000ed0c
   80808:	20070b00 	.word	0x20070b00

0008080c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8080c:	b538      	push	{r3, r4, r5, lr}
   8080e:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80810:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80814:	bf1c      	itt	ne
   80816:	f020 0407 	bicne.w	r4, r0, #7
   8081a:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   8081c:	4b10      	ldr	r3, [pc, #64]	; (80860 <pvPortMalloc+0x54>)
   8081e:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   80820:	4b10      	ldr	r3, [pc, #64]	; (80864 <pvPortMalloc+0x58>)
   80822:	681b      	ldr	r3, [r3, #0]
   80824:	b18b      	cbz	r3, 8084a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   80826:	4b10      	ldr	r3, [pc, #64]	; (80868 <pvPortMalloc+0x5c>)
   80828:	681b      	ldr	r3, [r3, #0]
   8082a:	441c      	add	r4, r3
   8082c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
   80830:	4294      	cmp	r4, r2
   80832:	d810      	bhi.n	80856 <pvPortMalloc+0x4a>
   80834:	42a3      	cmp	r3, r4
   80836:	d210      	bcs.n	8085a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   80838:	4a0a      	ldr	r2, [pc, #40]	; (80864 <pvPortMalloc+0x58>)
   8083a:	6815      	ldr	r5, [r2, #0]
   8083c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   8083e:	4b0a      	ldr	r3, [pc, #40]	; (80868 <pvPortMalloc+0x5c>)
   80840:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   80842:	4b0a      	ldr	r3, [pc, #40]	; (8086c <pvPortMalloc+0x60>)
   80844:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80846:	4628      	mov	r0, r5
   80848:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   8084a:	4b09      	ldr	r3, [pc, #36]	; (80870 <pvPortMalloc+0x64>)
   8084c:	f023 0307 	bic.w	r3, r3, #7
   80850:	4a04      	ldr	r2, [pc, #16]	; (80864 <pvPortMalloc+0x58>)
   80852:	6013      	str	r3, [r2, #0]
   80854:	e7e7      	b.n	80826 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
   80856:	2500      	movs	r5, #0
   80858:	e7f3      	b.n	80842 <pvPortMalloc+0x36>
   8085a:	2500      	movs	r5, #0
   8085c:	e7f1      	b.n	80842 <pvPortMalloc+0x36>
   8085e:	bf00      	nop
   80860:	0008155d 	.word	0x0008155d
   80864:	20070b04 	.word	0x20070b04
   80868:	2007c308 	.word	0x2007c308
   8086c:	000816ad 	.word	0x000816ad
   80870:	20070b10 	.word	0x20070b10

00080874 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   80874:	b140      	cbz	r0, 80888 <vPortFree+0x14>
   80876:	f04f 0340 	mov.w	r3, #64	; 0x40
   8087a:	f383 8811 	msr	BASEPRI, r3
   8087e:	f3bf 8f6f 	isb	sy
   80882:	f3bf 8f4f 	dsb	sy
   80886:	e7fe      	b.n	80886 <vPortFree+0x12>
   80888:	4770      	bx	lr
	...

0008088c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   8088c:	b510      	push	{r4, lr}
   8088e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80890:	4b04      	ldr	r3, [pc, #16]	; (808a4 <prvIsQueueEmpty+0x18>)
   80892:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   80894:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80896:	4b04      	ldr	r3, [pc, #16]	; (808a8 <prvIsQueueEmpty+0x1c>)
   80898:	4798      	blx	r3

	return xReturn;
}
   8089a:	fab4 f084 	clz	r0, r4
   8089e:	0940      	lsrs	r0, r0, #5
   808a0:	bd10      	pop	{r4, pc}
   808a2:	bf00      	nop
   808a4:	000805c9 	.word	0x000805c9
   808a8:	0008060d 	.word	0x0008060d

000808ac <prvCopyDataToQueue>:
{
   808ac:	b570      	push	{r4, r5, r6, lr}
   808ae:	4604      	mov	r4, r0
   808b0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   808b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   808b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   808b6:	b952      	cbnz	r2, 808ce <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   808b8:	6803      	ldr	r3, [r0, #0]
   808ba:	2b00      	cmp	r3, #0
   808bc:	d12a      	bne.n	80914 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   808be:	6840      	ldr	r0, [r0, #4]
   808c0:	4b18      	ldr	r3, [pc, #96]	; (80924 <prvCopyDataToQueue+0x78>)
   808c2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   808c4:	2300      	movs	r3, #0
   808c6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   808c8:	3501      	adds	r5, #1
   808ca:	63a5      	str	r5, [r4, #56]	; 0x38
}
   808cc:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   808ce:	b96e      	cbnz	r6, 808ec <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   808d0:	6880      	ldr	r0, [r0, #8]
   808d2:	4b15      	ldr	r3, [pc, #84]	; (80928 <prvCopyDataToQueue+0x7c>)
   808d4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   808d6:	68a3      	ldr	r3, [r4, #8]
   808d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   808da:	4413      	add	r3, r2
   808dc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   808de:	6862      	ldr	r2, [r4, #4]
   808e0:	4293      	cmp	r3, r2
   808e2:	d319      	bcc.n	80918 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   808e4:	6823      	ldr	r3, [r4, #0]
   808e6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   808e8:	2000      	movs	r0, #0
   808ea:	e7ed      	b.n	808c8 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   808ec:	68c0      	ldr	r0, [r0, #12]
   808ee:	4b0e      	ldr	r3, [pc, #56]	; (80928 <prvCopyDataToQueue+0x7c>)
   808f0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   808f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   808f4:	425b      	negs	r3, r3
   808f6:	68e2      	ldr	r2, [r4, #12]
   808f8:	441a      	add	r2, r3
   808fa:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   808fc:	6821      	ldr	r1, [r4, #0]
   808fe:	428a      	cmp	r2, r1
   80900:	d202      	bcs.n	80908 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80902:	6862      	ldr	r2, [r4, #4]
   80904:	4413      	add	r3, r2
   80906:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   80908:	2e02      	cmp	r6, #2
   8090a:	d107      	bne.n	8091c <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   8090c:	b145      	cbz	r5, 80920 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
   8090e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   80910:	2000      	movs	r0, #0
   80912:	e7d9      	b.n	808c8 <prvCopyDataToQueue+0x1c>
   80914:	2000      	movs	r0, #0
   80916:	e7d7      	b.n	808c8 <prvCopyDataToQueue+0x1c>
   80918:	2000      	movs	r0, #0
   8091a:	e7d5      	b.n	808c8 <prvCopyDataToQueue+0x1c>
   8091c:	2000      	movs	r0, #0
   8091e:	e7d3      	b.n	808c8 <prvCopyDataToQueue+0x1c>
   80920:	2000      	movs	r0, #0
   80922:	e7d1      	b.n	808c8 <prvCopyDataToQueue+0x1c>
   80924:	00081af1 	.word	0x00081af1
   80928:	000828b1 	.word	0x000828b1

0008092c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   8092c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   8092e:	b172      	cbz	r2, 8094e <prvCopyDataFromQueue+0x22>
{
   80930:	b510      	push	{r4, lr}
   80932:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   80934:	68c4      	ldr	r4, [r0, #12]
   80936:	4414      	add	r4, r2
   80938:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   8093a:	6840      	ldr	r0, [r0, #4]
   8093c:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   8093e:	bf24      	itt	cs
   80940:	6818      	ldrcs	r0, [r3, #0]
   80942:	60d8      	strcs	r0, [r3, #12]
   80944:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   80946:	68d9      	ldr	r1, [r3, #12]
   80948:	4b01      	ldr	r3, [pc, #4]	; (80950 <prvCopyDataFromQueue+0x24>)
   8094a:	4798      	blx	r3
   8094c:	bd10      	pop	{r4, pc}
   8094e:	4770      	bx	lr
   80950:	000828b1 	.word	0x000828b1

00080954 <prvUnlockQueue>:
{
   80954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80958:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   8095a:	4b20      	ldr	r3, [pc, #128]	; (809dc <prvUnlockQueue+0x88>)
   8095c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   8095e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   80962:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80964:	2c00      	cmp	r4, #0
   80966:	dd12      	ble.n	8098e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80968:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   8096a:	b183      	cbz	r3, 8098e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8096c:	f105 0724 	add.w	r7, r5, #36	; 0x24
   80970:	4e1b      	ldr	r6, [pc, #108]	; (809e0 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   80972:	f8df 8074 	ldr.w	r8, [pc, #116]	; 809e8 <prvUnlockQueue+0x94>
   80976:	e004      	b.n	80982 <prvUnlockQueue+0x2e>
   80978:	3c01      	subs	r4, #1
   8097a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   8097c:	b13c      	cbz	r4, 8098e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8097e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80980:	b12b      	cbz	r3, 8098e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80982:	4638      	mov	r0, r7
   80984:	47b0      	blx	r6
   80986:	2800      	cmp	r0, #0
   80988:	d0f6      	beq.n	80978 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   8098a:	47c0      	blx	r8
   8098c:	e7f4      	b.n	80978 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   8098e:	23ff      	movs	r3, #255	; 0xff
   80990:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   80994:	4b13      	ldr	r3, [pc, #76]	; (809e4 <prvUnlockQueue+0x90>)
   80996:	4798      	blx	r3
	taskENTER_CRITICAL();
   80998:	4b10      	ldr	r3, [pc, #64]	; (809dc <prvUnlockQueue+0x88>)
   8099a:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   8099c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   809a0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   809a2:	2c00      	cmp	r4, #0
   809a4:	dd12      	ble.n	809cc <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   809a6:	692b      	ldr	r3, [r5, #16]
   809a8:	b183      	cbz	r3, 809cc <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   809aa:	f105 0710 	add.w	r7, r5, #16
   809ae:	4e0c      	ldr	r6, [pc, #48]	; (809e0 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   809b0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 809e8 <prvUnlockQueue+0x94>
   809b4:	e004      	b.n	809c0 <prvUnlockQueue+0x6c>
   809b6:	3c01      	subs	r4, #1
   809b8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   809ba:	b13c      	cbz	r4, 809cc <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   809bc:	692b      	ldr	r3, [r5, #16]
   809be:	b12b      	cbz	r3, 809cc <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   809c0:	4638      	mov	r0, r7
   809c2:	47b0      	blx	r6
   809c4:	2800      	cmp	r0, #0
   809c6:	d0f6      	beq.n	809b6 <prvUnlockQueue+0x62>
					vTaskMissedYield();
   809c8:	47c0      	blx	r8
   809ca:	e7f4      	b.n	809b6 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   809cc:	23ff      	movs	r3, #255	; 0xff
   809ce:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   809d2:	4b04      	ldr	r3, [pc, #16]	; (809e4 <prvUnlockQueue+0x90>)
   809d4:	4798      	blx	r3
   809d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809da:	bf00      	nop
   809dc:	000805c9 	.word	0x000805c9
   809e0:	000818d1 	.word	0x000818d1
   809e4:	0008060d 	.word	0x0008060d
   809e8:	00081a05 	.word	0x00081a05

000809ec <xQueueGenericReset>:
{
   809ec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   809ee:	b330      	cbz	r0, 80a3e <xQueueGenericReset+0x52>
   809f0:	4604      	mov	r4, r0
   809f2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
   809f4:	4b1c      	ldr	r3, [pc, #112]	; (80a68 <xQueueGenericReset+0x7c>)
   809f6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   809f8:	6822      	ldr	r2, [r4, #0]
   809fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
   809fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809fe:	fb03 f301 	mul.w	r3, r3, r1
   80a02:	18d0      	adds	r0, r2, r3
   80a04:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   80a06:	2000      	movs	r0, #0
   80a08:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80a0a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   80a0c:	1a5b      	subs	r3, r3, r1
   80a0e:	4413      	add	r3, r2
   80a10:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   80a12:	23ff      	movs	r3, #255	; 0xff
   80a14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   80a18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   80a1c:	b9c5      	cbnz	r5, 80a50 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80a1e:	6923      	ldr	r3, [r4, #16]
   80a20:	b1eb      	cbz	r3, 80a5e <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80a22:	f104 0010 	add.w	r0, r4, #16
   80a26:	4b11      	ldr	r3, [pc, #68]	; (80a6c <xQueueGenericReset+0x80>)
   80a28:	4798      	blx	r3
   80a2a:	b1c0      	cbz	r0, 80a5e <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
   80a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80a30:	4b0f      	ldr	r3, [pc, #60]	; (80a70 <xQueueGenericReset+0x84>)
   80a32:	601a      	str	r2, [r3, #0]
   80a34:	f3bf 8f4f 	dsb	sy
   80a38:	f3bf 8f6f 	isb	sy
   80a3c:	e00f      	b.n	80a5e <xQueueGenericReset+0x72>
   80a3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a42:	f383 8811 	msr	BASEPRI, r3
   80a46:	f3bf 8f6f 	isb	sy
   80a4a:	f3bf 8f4f 	dsb	sy
   80a4e:	e7fe      	b.n	80a4e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80a50:	f104 0010 	add.w	r0, r4, #16
   80a54:	4d07      	ldr	r5, [pc, #28]	; (80a74 <xQueueGenericReset+0x88>)
   80a56:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80a58:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a5c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
   80a5e:	4b06      	ldr	r3, [pc, #24]	; (80a78 <xQueueGenericReset+0x8c>)
   80a60:	4798      	blx	r3
}
   80a62:	2001      	movs	r0, #1
   80a64:	bd38      	pop	{r3, r4, r5, pc}
   80a66:	bf00      	nop
   80a68:	000805c9 	.word	0x000805c9
   80a6c:	000818d1 	.word	0x000818d1
   80a70:	e000ed04 	.word	0xe000ed04
   80a74:	0008048d 	.word	0x0008048d
   80a78:	0008060d 	.word	0x0008060d

00080a7c <xQueueGenericCreate>:
	{
   80a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   80a7e:	b940      	cbnz	r0, 80a92 <xQueueGenericCreate+0x16>
   80a80:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a84:	f383 8811 	msr	BASEPRI, r3
   80a88:	f3bf 8f6f 	isb	sy
   80a8c:	f3bf 8f4f 	dsb	sy
   80a90:	e7fe      	b.n	80a90 <xQueueGenericCreate+0x14>
   80a92:	4606      	mov	r6, r0
   80a94:	4617      	mov	r7, r2
   80a96:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80a98:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   80a9c:	3050      	adds	r0, #80	; 0x50
   80a9e:	4b0a      	ldr	r3, [pc, #40]	; (80ac8 <xQueueGenericCreate+0x4c>)
   80aa0:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80aa2:	4604      	mov	r4, r0
   80aa4:	b168      	cbz	r0, 80ac2 <xQueueGenericCreate+0x46>
	if( uxItemSize == ( UBaseType_t ) 0 )
   80aa6:	b11d      	cbz	r5, 80ab0 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   80aa8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   80aac:	6003      	str	r3, [r0, #0]
   80aae:	e000      	b.n	80ab2 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   80ab0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   80ab2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   80ab4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   80ab6:	2101      	movs	r1, #1
   80ab8:	4620      	mov	r0, r4
   80aba:	4b04      	ldr	r3, [pc, #16]	; (80acc <xQueueGenericCreate+0x50>)
   80abc:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   80abe:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   80ac2:	4620      	mov	r0, r4
   80ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ac6:	bf00      	nop
   80ac8:	0008080d 	.word	0x0008080d
   80acc:	000809ed 	.word	0x000809ed

00080ad0 <xQueueGenericSend>:
{
   80ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ad4:	b085      	sub	sp, #20
   80ad6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80ad8:	b198      	cbz	r0, 80b02 <xQueueGenericSend+0x32>
   80ada:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80adc:	b1d1      	cbz	r1, 80b14 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80ade:	2b02      	cmp	r3, #2
   80ae0:	d024      	beq.n	80b2c <xQueueGenericSend+0x5c>
   80ae2:	461e      	mov	r6, r3
   80ae4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80ae6:	4b5b      	ldr	r3, [pc, #364]	; (80c54 <xQueueGenericSend+0x184>)
   80ae8:	4798      	blx	r3
   80aea:	bb58      	cbnz	r0, 80b44 <xQueueGenericSend+0x74>
   80aec:	9b01      	ldr	r3, [sp, #4]
   80aee:	b38b      	cbz	r3, 80b54 <xQueueGenericSend+0x84>
   80af0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80af4:	f383 8811 	msr	BASEPRI, r3
   80af8:	f3bf 8f6f 	isb	sy
   80afc:	f3bf 8f4f 	dsb	sy
   80b00:	e7fe      	b.n	80b00 <xQueueGenericSend+0x30>
   80b02:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b06:	f383 8811 	msr	BASEPRI, r3
   80b0a:	f3bf 8f6f 	isb	sy
   80b0e:	f3bf 8f4f 	dsb	sy
   80b12:	e7fe      	b.n	80b12 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80b14:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80b16:	2a00      	cmp	r2, #0
   80b18:	d0e1      	beq.n	80ade <xQueueGenericSend+0xe>
   80b1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b1e:	f383 8811 	msr	BASEPRI, r3
   80b22:	f3bf 8f6f 	isb	sy
   80b26:	f3bf 8f4f 	dsb	sy
   80b2a:	e7fe      	b.n	80b2a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80b2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   80b2e:	2a01      	cmp	r2, #1
   80b30:	d0d7      	beq.n	80ae2 <xQueueGenericSend+0x12>
   80b32:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b36:	f383 8811 	msr	BASEPRI, r3
   80b3a:	f3bf 8f6f 	isb	sy
   80b3e:	f3bf 8f4f 	dsb	sy
   80b42:	e7fe      	b.n	80b42 <xQueueGenericSend+0x72>
   80b44:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   80b46:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80c7c <xQueueGenericSend+0x1ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80b4a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80c80 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   80b4e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80c60 <xQueueGenericSend+0x190>
   80b52:	e030      	b.n	80bb6 <xQueueGenericSend+0xe6>
   80b54:	2500      	movs	r5, #0
   80b56:	e7f6      	b.n	80b46 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80b58:	4632      	mov	r2, r6
   80b5a:	4639      	mov	r1, r7
   80b5c:	4620      	mov	r0, r4
   80b5e:	4b3e      	ldr	r3, [pc, #248]	; (80c58 <xQueueGenericSend+0x188>)
   80b60:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b64:	b193      	cbz	r3, 80b8c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b66:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b6a:	4b3c      	ldr	r3, [pc, #240]	; (80c5c <xQueueGenericSend+0x18c>)
   80b6c:	4798      	blx	r3
   80b6e:	b138      	cbz	r0, 80b80 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
   80b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80b74:	4b3a      	ldr	r3, [pc, #232]	; (80c60 <xQueueGenericSend+0x190>)
   80b76:	601a      	str	r2, [r3, #0]
   80b78:	f3bf 8f4f 	dsb	sy
   80b7c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80b80:	4b38      	ldr	r3, [pc, #224]	; (80c64 <xQueueGenericSend+0x194>)
   80b82:	4798      	blx	r3
				return pdPASS;
   80b84:	2001      	movs	r0, #1
}
   80b86:	b005      	add	sp, #20
   80b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if( xYieldRequired != pdFALSE )
   80b8c:	2800      	cmp	r0, #0
   80b8e:	d0f7      	beq.n	80b80 <xQueueGenericSend+0xb0>
						queueYIELD_IF_USING_PREEMPTION();
   80b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80b94:	4b32      	ldr	r3, [pc, #200]	; (80c60 <xQueueGenericSend+0x190>)
   80b96:	601a      	str	r2, [r3, #0]
   80b98:	f3bf 8f4f 	dsb	sy
   80b9c:	f3bf 8f6f 	isb	sy
   80ba0:	e7ee      	b.n	80b80 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
   80ba2:	4b30      	ldr	r3, [pc, #192]	; (80c64 <xQueueGenericSend+0x194>)
   80ba4:	4798      	blx	r3
					return errQUEUE_FULL;
   80ba6:	2000      	movs	r0, #0
   80ba8:	e7ed      	b.n	80b86 <xQueueGenericSend+0xb6>
				prvUnlockQueue( pxQueue );
   80baa:	4620      	mov	r0, r4
   80bac:	4b2e      	ldr	r3, [pc, #184]	; (80c68 <xQueueGenericSend+0x198>)
   80bae:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80bb0:	4b2e      	ldr	r3, [pc, #184]	; (80c6c <xQueueGenericSend+0x19c>)
   80bb2:	4798      	blx	r3
   80bb4:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   80bb6:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80bb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80bba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80bbc:	429a      	cmp	r2, r3
   80bbe:	d3cb      	bcc.n	80b58 <xQueueGenericSend+0x88>
   80bc0:	2e02      	cmp	r6, #2
   80bc2:	d0c9      	beq.n	80b58 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
   80bc4:	9b01      	ldr	r3, [sp, #4]
   80bc6:	2b00      	cmp	r3, #0
   80bc8:	d0eb      	beq.n	80ba2 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   80bca:	b90d      	cbnz	r5, 80bd0 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80bcc:	a802      	add	r0, sp, #8
   80bce:	47d0      	blx	sl
		taskEXIT_CRITICAL();
   80bd0:	4b24      	ldr	r3, [pc, #144]	; (80c64 <xQueueGenericSend+0x194>)
   80bd2:	4798      	blx	r3
		vTaskSuspendAll();
   80bd4:	4b26      	ldr	r3, [pc, #152]	; (80c70 <xQueueGenericSend+0x1a0>)
   80bd6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80bd8:	47c0      	blx	r8
   80bda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80bde:	b25b      	sxtb	r3, r3
   80be0:	f1b3 3fff 	cmp.w	r3, #4294967295
   80be4:	bf04      	itt	eq
   80be6:	2300      	moveq	r3, #0
   80be8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80bec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80bf0:	b25b      	sxtb	r3, r3
   80bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bf6:	bf04      	itt	eq
   80bf8:	2300      	moveq	r3, #0
   80bfa:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80bfe:	4b19      	ldr	r3, [pc, #100]	; (80c64 <xQueueGenericSend+0x194>)
   80c00:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c02:	a901      	add	r1, sp, #4
   80c04:	a802      	add	r0, sp, #8
   80c06:	4b1b      	ldr	r3, [pc, #108]	; (80c74 <xQueueGenericSend+0x1a4>)
   80c08:	4798      	blx	r3
   80c0a:	b9e0      	cbnz	r0, 80c46 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80c0c:	47c0      	blx	r8
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   80c0e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80c12:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80c14:	4b13      	ldr	r3, [pc, #76]	; (80c64 <xQueueGenericSend+0x194>)
   80c16:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80c18:	45ab      	cmp	fp, r5
   80c1a:	d1c6      	bne.n	80baa <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80c1c:	9901      	ldr	r1, [sp, #4]
   80c1e:	f104 0010 	add.w	r0, r4, #16
   80c22:	4b15      	ldr	r3, [pc, #84]	; (80c78 <xQueueGenericSend+0x1a8>)
   80c24:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80c26:	4620      	mov	r0, r4
   80c28:	4b0f      	ldr	r3, [pc, #60]	; (80c68 <xQueueGenericSend+0x198>)
   80c2a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80c2c:	4b0f      	ldr	r3, [pc, #60]	; (80c6c <xQueueGenericSend+0x19c>)
   80c2e:	4798      	blx	r3
   80c30:	2800      	cmp	r0, #0
   80c32:	d1bf      	bne.n	80bb4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
   80c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80c38:	f8c9 3000 	str.w	r3, [r9]
   80c3c:	f3bf 8f4f 	dsb	sy
   80c40:	f3bf 8f6f 	isb	sy
   80c44:	e7b6      	b.n	80bb4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
   80c46:	4620      	mov	r0, r4
   80c48:	4b07      	ldr	r3, [pc, #28]	; (80c68 <xQueueGenericSend+0x198>)
   80c4a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80c4c:	4b07      	ldr	r3, [pc, #28]	; (80c6c <xQueueGenericSend+0x19c>)
   80c4e:	4798      	blx	r3
			return errQUEUE_FULL;
   80c50:	2000      	movs	r0, #0
   80c52:	e798      	b.n	80b86 <xQueueGenericSend+0xb6>
   80c54:	00081a11 	.word	0x00081a11
   80c58:	000808ad 	.word	0x000808ad
   80c5c:	000818d1 	.word	0x000818d1
   80c60:	e000ed04 	.word	0xe000ed04
   80c64:	0008060d 	.word	0x0008060d
   80c68:	00080955 	.word	0x00080955
   80c6c:	000816ad 	.word	0x000816ad
   80c70:	0008155d 	.word	0x0008155d
   80c74:	00081979 	.word	0x00081979
   80c78:	00081855 	.word	0x00081855
   80c7c:	000805c9 	.word	0x000805c9
   80c80:	00081961 	.word	0x00081961

00080c84 <xQueueCreateMutex>:
	{
   80c84:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   80c86:	4602      	mov	r2, r0
   80c88:	2100      	movs	r1, #0
   80c8a:	2001      	movs	r0, #1
   80c8c:	4b06      	ldr	r3, [pc, #24]	; (80ca8 <xQueueCreateMutex+0x24>)
   80c8e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80c90:	4604      	mov	r4, r0
   80c92:	b138      	cbz	r0, 80ca4 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   80c94:	2100      	movs	r1, #0
   80c96:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   80c98:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   80c9a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   80c9c:	460b      	mov	r3, r1
   80c9e:	460a      	mov	r2, r1
   80ca0:	4d02      	ldr	r5, [pc, #8]	; (80cac <xQueueCreateMutex+0x28>)
   80ca2:	47a8      	blx	r5
	}
   80ca4:	4620      	mov	r0, r4
   80ca6:	bd38      	pop	{r3, r4, r5, pc}
   80ca8:	00080a7d 	.word	0x00080a7d
   80cac:	00080ad1 	.word	0x00080ad1

00080cb0 <xQueueGenericSendFromISR>:
{
   80cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
   80cb4:	2800      	cmp	r0, #0
   80cb6:	d037      	beq.n	80d28 <xQueueGenericSendFromISR+0x78>
   80cb8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80cba:	2900      	cmp	r1, #0
   80cbc:	d03d      	beq.n	80d3a <xQueueGenericSendFromISR+0x8a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80cbe:	2b02      	cmp	r3, #2
   80cc0:	d047      	beq.n	80d52 <xQueueGenericSendFromISR+0xa2>
   80cc2:	461f      	mov	r7, r3
   80cc4:	4690      	mov	r8, r2
   80cc6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   80cc8:	4b2f      	ldr	r3, [pc, #188]	; (80d88 <xQueueGenericSendFromISR+0xd8>)
   80cca:	4798      	blx	r3
	__asm volatile
   80ccc:	f3ef 8611 	mrs	r6, BASEPRI
   80cd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80cd4:	f383 8811 	msr	BASEPRI, r3
   80cd8:	f3bf 8f6f 	isb	sy
   80cdc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80ce0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ce4:	429a      	cmp	r2, r3
   80ce6:	d301      	bcc.n	80cec <xQueueGenericSendFromISR+0x3c>
   80ce8:	2f02      	cmp	r7, #2
   80cea:	d144      	bne.n	80d76 <xQueueGenericSendFromISR+0xc6>
			const int8_t cTxLock = pxQueue->cTxLock;
   80cec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   80cf0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80cf2:	463a      	mov	r2, r7
   80cf4:	4649      	mov	r1, r9
   80cf6:	4620      	mov	r0, r4
   80cf8:	4b24      	ldr	r3, [pc, #144]	; (80d8c <xQueueGenericSendFromISR+0xdc>)
   80cfa:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   80cfc:	f1b5 3fff 	cmp.w	r5, #4294967295
   80d00:	d133      	bne.n	80d6a <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d04:	2b00      	cmp	r3, #0
   80d06:	d038      	beq.n	80d7a <xQueueGenericSendFromISR+0xca>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80d08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d0c:	4b20      	ldr	r3, [pc, #128]	; (80d90 <xQueueGenericSendFromISR+0xe0>)
   80d0e:	4798      	blx	r3
   80d10:	2800      	cmp	r0, #0
   80d12:	d034      	beq.n	80d7e <xQueueGenericSendFromISR+0xce>
							if( pxHigherPriorityTaskWoken != NULL )
   80d14:	f1b8 0f00 	cmp.w	r8, #0
   80d18:	d033      	beq.n	80d82 <xQueueGenericSendFromISR+0xd2>
								*pxHigherPriorityTaskWoken = pdTRUE;
   80d1a:	2001      	movs	r0, #1
   80d1c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
   80d20:	f386 8811 	msr	BASEPRI, r6
}
   80d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
   80d28:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d2c:	f383 8811 	msr	BASEPRI, r3
   80d30:	f3bf 8f6f 	isb	sy
   80d34:	f3bf 8f4f 	dsb	sy
   80d38:	e7fe      	b.n	80d38 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80d3a:	6c00      	ldr	r0, [r0, #64]	; 0x40
   80d3c:	2800      	cmp	r0, #0
   80d3e:	d0be      	beq.n	80cbe <xQueueGenericSendFromISR+0xe>
   80d40:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d44:	f383 8811 	msr	BASEPRI, r3
   80d48:	f3bf 8f6f 	isb	sy
   80d4c:	f3bf 8f4f 	dsb	sy
   80d50:	e7fe      	b.n	80d50 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80d52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80d54:	2801      	cmp	r0, #1
   80d56:	d0b4      	beq.n	80cc2 <xQueueGenericSendFromISR+0x12>
   80d58:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d5c:	f383 8811 	msr	BASEPRI, r3
   80d60:	f3bf 8f6f 	isb	sy
   80d64:	f3bf 8f4f 	dsb	sy
   80d68:	e7fe      	b.n	80d68 <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   80d6a:	1c6b      	adds	r3, r5, #1
   80d6c:	b25b      	sxtb	r3, r3
   80d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   80d72:	2001      	movs	r0, #1
   80d74:	e7d4      	b.n	80d20 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
   80d76:	2000      	movs	r0, #0
   80d78:	e7d2      	b.n	80d20 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
   80d7a:	2001      	movs	r0, #1
   80d7c:	e7d0      	b.n	80d20 <xQueueGenericSendFromISR+0x70>
   80d7e:	2001      	movs	r0, #1
   80d80:	e7ce      	b.n	80d20 <xQueueGenericSendFromISR+0x70>
   80d82:	2001      	movs	r0, #1
   80d84:	e7cc      	b.n	80d20 <xQueueGenericSendFromISR+0x70>
   80d86:	bf00      	nop
   80d88:	000807b1 	.word	0x000807b1
   80d8c:	000808ad 	.word	0x000808ad
   80d90:	000818d1 	.word	0x000818d1

00080d94 <xQueueReceive>:
{
   80d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80d98:	b084      	sub	sp, #16
   80d9a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   80d9c:	b180      	cbz	r0, 80dc0 <xQueueReceive+0x2c>
   80d9e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80da0:	b1b9      	cbz	r1, 80dd2 <xQueueReceive+0x3e>
   80da2:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80da4:	4b50      	ldr	r3, [pc, #320]	; (80ee8 <xQueueReceive+0x154>)
   80da6:	4798      	blx	r3
   80da8:	b9f8      	cbnz	r0, 80dea <xQueueReceive+0x56>
   80daa:	9b01      	ldr	r3, [sp, #4]
   80dac:	b32b      	cbz	r3, 80dfa <xQueueReceive+0x66>
   80dae:	f04f 0340 	mov.w	r3, #64	; 0x40
   80db2:	f383 8811 	msr	BASEPRI, r3
   80db6:	f3bf 8f6f 	isb	sy
   80dba:	f3bf 8f4f 	dsb	sy
   80dbe:	e7fe      	b.n	80dbe <xQueueReceive+0x2a>
   80dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80dc4:	f383 8811 	msr	BASEPRI, r3
   80dc8:	f3bf 8f6f 	isb	sy
   80dcc:	f3bf 8f4f 	dsb	sy
   80dd0:	e7fe      	b.n	80dd0 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80dd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80dd4:	2b00      	cmp	r3, #0
   80dd6:	d0e4      	beq.n	80da2 <xQueueReceive+0xe>
   80dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   80ddc:	f383 8811 	msr	BASEPRI, r3
   80de0:	f3bf 8f6f 	isb	sy
   80de4:	f3bf 8f4f 	dsb	sy
   80de8:	e7fe      	b.n	80de8 <xQueueReceive+0x54>
   80dea:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80dec:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80f14 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80df0:	f8df a124 	ldr.w	sl, [pc, #292]	; 80f18 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
   80df4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80ef4 <xQueueReceive+0x160>
   80df8:	e029      	b.n	80e4e <xQueueReceive+0xba>
   80dfa:	2700      	movs	r7, #0
   80dfc:	e7f6      	b.n	80dec <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80dfe:	4631      	mov	r1, r6
   80e00:	4620      	mov	r0, r4
   80e02:	4b3a      	ldr	r3, [pc, #232]	; (80eec <xQueueReceive+0x158>)
   80e04:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   80e06:	3d01      	subs	r5, #1
   80e08:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e0a:	6923      	ldr	r3, [r4, #16]
   80e0c:	b163      	cbz	r3, 80e28 <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80e0e:	f104 0010 	add.w	r0, r4, #16
   80e12:	4b37      	ldr	r3, [pc, #220]	; (80ef0 <xQueueReceive+0x15c>)
   80e14:	4798      	blx	r3
   80e16:	b138      	cbz	r0, 80e28 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
   80e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e1c:	4b35      	ldr	r3, [pc, #212]	; (80ef4 <xQueueReceive+0x160>)
   80e1e:	601a      	str	r2, [r3, #0]
   80e20:	f3bf 8f4f 	dsb	sy
   80e24:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80e28:	4b33      	ldr	r3, [pc, #204]	; (80ef8 <xQueueReceive+0x164>)
   80e2a:	4798      	blx	r3
				return pdPASS;
   80e2c:	2001      	movs	r0, #1
}
   80e2e:	b004      	add	sp, #16
   80e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
   80e34:	4b30      	ldr	r3, [pc, #192]	; (80ef8 <xQueueReceive+0x164>)
   80e36:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80e38:	2000      	movs	r0, #0
   80e3a:	e7f8      	b.n	80e2e <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80e3c:	a802      	add	r0, sp, #8
   80e3e:	47d0      	blx	sl
   80e40:	e00e      	b.n	80e60 <xQueueReceive+0xcc>
				prvUnlockQueue( pxQueue );
   80e42:	4620      	mov	r0, r4
   80e44:	4b2d      	ldr	r3, [pc, #180]	; (80efc <xQueueReceive+0x168>)
   80e46:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e48:	4b2d      	ldr	r3, [pc, #180]	; (80f00 <xQueueReceive+0x16c>)
   80e4a:	4798      	blx	r3
   80e4c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80e4e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80e50:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   80e52:	2d00      	cmp	r5, #0
   80e54:	d1d3      	bne.n	80dfe <xQueueReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
   80e56:	9b01      	ldr	r3, [sp, #4]
   80e58:	2b00      	cmp	r3, #0
   80e5a:	d0eb      	beq.n	80e34 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   80e5c:	2f00      	cmp	r7, #0
   80e5e:	d0ed      	beq.n	80e3c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
   80e60:	4b25      	ldr	r3, [pc, #148]	; (80ef8 <xQueueReceive+0x164>)
   80e62:	4798      	blx	r3
		vTaskSuspendAll();
   80e64:	4b27      	ldr	r3, [pc, #156]	; (80f04 <xQueueReceive+0x170>)
   80e66:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80e68:	47c0      	blx	r8
   80e6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80e6e:	b25b      	sxtb	r3, r3
   80e70:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e74:	bf04      	itt	eq
   80e76:	2300      	moveq	r3, #0
   80e78:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80e7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80e80:	b25b      	sxtb	r3, r3
   80e82:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e86:	bf04      	itt	eq
   80e88:	2300      	moveq	r3, #0
   80e8a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80e8e:	4b1a      	ldr	r3, [pc, #104]	; (80ef8 <xQueueReceive+0x164>)
   80e90:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80e92:	a901      	add	r1, sp, #4
   80e94:	a802      	add	r0, sp, #8
   80e96:	4b1c      	ldr	r3, [pc, #112]	; (80f08 <xQueueReceive+0x174>)
   80e98:	4798      	blx	r3
   80e9a:	b9c8      	cbnz	r0, 80ed0 <xQueueReceive+0x13c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80e9c:	4620      	mov	r0, r4
   80e9e:	4b1b      	ldr	r3, [pc, #108]	; (80f0c <xQueueReceive+0x178>)
   80ea0:	4798      	blx	r3
   80ea2:	2800      	cmp	r0, #0
   80ea4:	d0cd      	beq.n	80e42 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80ea6:	9901      	ldr	r1, [sp, #4]
   80ea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80eac:	4b18      	ldr	r3, [pc, #96]	; (80f10 <xQueueReceive+0x17c>)
   80eae:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80eb0:	4620      	mov	r0, r4
   80eb2:	4b12      	ldr	r3, [pc, #72]	; (80efc <xQueueReceive+0x168>)
   80eb4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80eb6:	4b12      	ldr	r3, [pc, #72]	; (80f00 <xQueueReceive+0x16c>)
   80eb8:	4798      	blx	r3
   80eba:	2800      	cmp	r0, #0
   80ebc:	d1c6      	bne.n	80e4c <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
   80ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80ec2:	f8c9 3000 	str.w	r3, [r9]
   80ec6:	f3bf 8f4f 	dsb	sy
   80eca:	f3bf 8f6f 	isb	sy
   80ece:	e7bd      	b.n	80e4c <xQueueReceive+0xb8>
			prvUnlockQueue( pxQueue );
   80ed0:	4620      	mov	r0, r4
   80ed2:	4b0a      	ldr	r3, [pc, #40]	; (80efc <xQueueReceive+0x168>)
   80ed4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80ed6:	4b0a      	ldr	r3, [pc, #40]	; (80f00 <xQueueReceive+0x16c>)
   80ed8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80eda:	4620      	mov	r0, r4
   80edc:	4b0b      	ldr	r3, [pc, #44]	; (80f0c <xQueueReceive+0x178>)
   80ede:	4798      	blx	r3
   80ee0:	2800      	cmp	r0, #0
   80ee2:	d0b3      	beq.n	80e4c <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
   80ee4:	2000      	movs	r0, #0
   80ee6:	e7a2      	b.n	80e2e <xQueueReceive+0x9a>
   80ee8:	00081a11 	.word	0x00081a11
   80eec:	0008092d 	.word	0x0008092d
   80ef0:	000818d1 	.word	0x000818d1
   80ef4:	e000ed04 	.word	0xe000ed04
   80ef8:	0008060d 	.word	0x0008060d
   80efc:	00080955 	.word	0x00080955
   80f00:	000816ad 	.word	0x000816ad
   80f04:	0008155d 	.word	0x0008155d
   80f08:	00081979 	.word	0x00081979
   80f0c:	0008088d 	.word	0x0008088d
   80f10:	00081855 	.word	0x00081855
   80f14:	000805c9 	.word	0x000805c9
   80f18:	00081961 	.word	0x00081961

00080f1c <xQueueSemaphoreTake>:
{
   80f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80f20:	b085      	sub	sp, #20
   80f22:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   80f24:	b158      	cbz	r0, 80f3e <xQueueSemaphoreTake+0x22>
   80f26:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
   80f28:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f2a:	b18b      	cbz	r3, 80f50 <xQueueSemaphoreTake+0x34>
   80f2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f30:	f383 8811 	msr	BASEPRI, r3
   80f34:	f3bf 8f6f 	isb	sy
   80f38:	f3bf 8f4f 	dsb	sy
   80f3c:	e7fe      	b.n	80f3c <xQueueSemaphoreTake+0x20>
   80f3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f42:	f383 8811 	msr	BASEPRI, r3
   80f46:	f3bf 8f6f 	isb	sy
   80f4a:	f3bf 8f4f 	dsb	sy
   80f4e:	e7fe      	b.n	80f4e <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80f50:	4b5b      	ldr	r3, [pc, #364]	; (810c0 <xQueueSemaphoreTake+0x1a4>)
   80f52:	4798      	blx	r3
   80f54:	b950      	cbnz	r0, 80f6c <xQueueSemaphoreTake+0x50>
   80f56:	9b01      	ldr	r3, [sp, #4]
   80f58:	b183      	cbz	r3, 80f7c <xQueueSemaphoreTake+0x60>
   80f5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f5e:	f383 8811 	msr	BASEPRI, r3
   80f62:	f3bf 8f6f 	isb	sy
   80f66:	f3bf 8f4f 	dsb	sy
   80f6a:	e7fe      	b.n	80f6a <xQueueSemaphoreTake+0x4e>
   80f6c:	2500      	movs	r5, #0
   80f6e:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
   80f70:	4e54      	ldr	r6, [pc, #336]	; (810c4 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState( &xTimeOut );
   80f72:	f8df 9184 	ldr.w	r9, [pc, #388]	; 810f8 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
   80f76:	f8df 8158 	ldr.w	r8, [pc, #344]	; 810d0 <xQueueSemaphoreTake+0x1b4>
   80f7a:	e048      	b.n	8100e <xQueueSemaphoreTake+0xf2>
   80f7c:	2500      	movs	r5, #0
   80f7e:	462f      	mov	r7, r5
   80f80:	e7f6      	b.n	80f70 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   80f82:	3b01      	subs	r3, #1
   80f84:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f86:	6823      	ldr	r3, [r4, #0]
   80f88:	b913      	cbnz	r3, 80f90 <xQueueSemaphoreTake+0x74>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   80f8a:	4b4f      	ldr	r3, [pc, #316]	; (810c8 <xQueueSemaphoreTake+0x1ac>)
   80f8c:	4798      	blx	r3
   80f8e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80f90:	6923      	ldr	r3, [r4, #16]
   80f92:	b163      	cbz	r3, 80fae <xQueueSemaphoreTake+0x92>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80f94:	f104 0010 	add.w	r0, r4, #16
   80f98:	4b4c      	ldr	r3, [pc, #304]	; (810cc <xQueueSemaphoreTake+0x1b0>)
   80f9a:	4798      	blx	r3
   80f9c:	b138      	cbz	r0, 80fae <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
   80f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fa2:	4b4b      	ldr	r3, [pc, #300]	; (810d0 <xQueueSemaphoreTake+0x1b4>)
   80fa4:	601a      	str	r2, [r3, #0]
   80fa6:	f3bf 8f4f 	dsb	sy
   80faa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80fae:	4b49      	ldr	r3, [pc, #292]	; (810d4 <xQueueSemaphoreTake+0x1b8>)
   80fb0:	4798      	blx	r3
				return pdPASS;
   80fb2:	2501      	movs	r5, #1
}
   80fb4:	4628      	mov	r0, r5
   80fb6:	b005      	add	sp, #20
   80fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
   80fbc:	b145      	cbz	r5, 80fd0 <xQueueSemaphoreTake+0xb4>
   80fbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   80fc2:	f383 8811 	msr	BASEPRI, r3
   80fc6:	f3bf 8f6f 	isb	sy
   80fca:	f3bf 8f4f 	dsb	sy
   80fce:	e7fe      	b.n	80fce <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
   80fd0:	4b40      	ldr	r3, [pc, #256]	; (810d4 <xQueueSemaphoreTake+0x1b8>)
   80fd2:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80fd4:	e7ee      	b.n	80fb4 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80fd6:	a802      	add	r0, sp, #8
   80fd8:	47c8      	blx	r9
   80fda:	e021      	b.n	81020 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
   80fdc:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80fde:	6860      	ldr	r0, [r4, #4]
   80fe0:	4b3d      	ldr	r3, [pc, #244]	; (810d8 <xQueueSemaphoreTake+0x1bc>)
   80fe2:	4798      	blx	r3
   80fe4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
   80fe6:	4b3b      	ldr	r3, [pc, #236]	; (810d4 <xQueueSemaphoreTake+0x1b8>)
   80fe8:	4798      	blx	r3
   80fea:	e040      	b.n	8106e <xQueueSemaphoreTake+0x152>
				prvUnlockQueue( pxQueue );
   80fec:	4620      	mov	r0, r4
   80fee:	4b3b      	ldr	r3, [pc, #236]	; (810dc <xQueueSemaphoreTake+0x1c0>)
   80ff0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80ff2:	4b3b      	ldr	r3, [pc, #236]	; (810e0 <xQueueSemaphoreTake+0x1c4>)
   80ff4:	4798      	blx	r3
   80ff6:	e009      	b.n	8100c <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue( pxQueue );
   80ff8:	4620      	mov	r0, r4
   80ffa:	4b38      	ldr	r3, [pc, #224]	; (810dc <xQueueSemaphoreTake+0x1c0>)
   80ffc:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80ffe:	4b38      	ldr	r3, [pc, #224]	; (810e0 <xQueueSemaphoreTake+0x1c4>)
   81000:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81002:	4620      	mov	r0, r4
   81004:	4b37      	ldr	r3, [pc, #220]	; (810e4 <xQueueSemaphoreTake+0x1c8>)
   81006:	4798      	blx	r3
   81008:	2800      	cmp	r0, #0
   8100a:	d145      	bne.n	81098 <xQueueSemaphoreTake+0x17c>
   8100c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   8100e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   81010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   81012:	2b00      	cmp	r3, #0
   81014:	d1b5      	bne.n	80f82 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
   81016:	9b01      	ldr	r3, [sp, #4]
   81018:	2b00      	cmp	r3, #0
   8101a:	d0cf      	beq.n	80fbc <xQueueSemaphoreTake+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   8101c:	2f00      	cmp	r7, #0
   8101e:	d0da      	beq.n	80fd6 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
   81020:	4b2c      	ldr	r3, [pc, #176]	; (810d4 <xQueueSemaphoreTake+0x1b8>)
   81022:	4798      	blx	r3
		vTaskSuspendAll();
   81024:	4b30      	ldr	r3, [pc, #192]	; (810e8 <xQueueSemaphoreTake+0x1cc>)
   81026:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81028:	47b0      	blx	r6
   8102a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8102e:	b25b      	sxtb	r3, r3
   81030:	f1b3 3fff 	cmp.w	r3, #4294967295
   81034:	bf04      	itt	eq
   81036:	2300      	moveq	r3, #0
   81038:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8103c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   81040:	b25b      	sxtb	r3, r3
   81042:	f1b3 3fff 	cmp.w	r3, #4294967295
   81046:	bf04      	itt	eq
   81048:	2300      	moveq	r3, #0
   8104a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8104e:	4b21      	ldr	r3, [pc, #132]	; (810d4 <xQueueSemaphoreTake+0x1b8>)
   81050:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81052:	a901      	add	r1, sp, #4
   81054:	a802      	add	r0, sp, #8
   81056:	4b25      	ldr	r3, [pc, #148]	; (810ec <xQueueSemaphoreTake+0x1d0>)
   81058:	4798      	blx	r3
   8105a:	2800      	cmp	r0, #0
   8105c:	d1cc      	bne.n	80ff8 <xQueueSemaphoreTake+0xdc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8105e:	4620      	mov	r0, r4
   81060:	4b20      	ldr	r3, [pc, #128]	; (810e4 <xQueueSemaphoreTake+0x1c8>)
   81062:	4798      	blx	r3
   81064:	2800      	cmp	r0, #0
   81066:	d0c1      	beq.n	80fec <xQueueSemaphoreTake+0xd0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81068:	6823      	ldr	r3, [r4, #0]
   8106a:	2b00      	cmp	r3, #0
   8106c:	d0b6      	beq.n	80fdc <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8106e:	9901      	ldr	r1, [sp, #4]
   81070:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81074:	4b1e      	ldr	r3, [pc, #120]	; (810f0 <xQueueSemaphoreTake+0x1d4>)
   81076:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81078:	4620      	mov	r0, r4
   8107a:	4b18      	ldr	r3, [pc, #96]	; (810dc <xQueueSemaphoreTake+0x1c0>)
   8107c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8107e:	4b18      	ldr	r3, [pc, #96]	; (810e0 <xQueueSemaphoreTake+0x1c4>)
   81080:	4798      	blx	r3
   81082:	2800      	cmp	r0, #0
   81084:	d1c2      	bne.n	8100c <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
   81086:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8108a:	f8c8 3000 	str.w	r3, [r8]
   8108e:	f3bf 8f4f 	dsb	sy
   81092:	f3bf 8f6f 	isb	sy
   81096:	e7b9      	b.n	8100c <xQueueSemaphoreTake+0xf0>
					if( xInheritanceOccurred != pdFALSE )
   81098:	2d00      	cmp	r5, #0
   8109a:	d08b      	beq.n	80fb4 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
   8109c:	4b09      	ldr	r3, [pc, #36]	; (810c4 <xQueueSemaphoreTake+0x1a8>)
   8109e:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   810a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   810a2:	b153      	cbz	r3, 810ba <xQueueSemaphoreTake+0x19e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   810a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   810a6:	6819      	ldr	r1, [r3, #0]
   810a8:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   810ac:	6860      	ldr	r0, [r4, #4]
   810ae:	4b11      	ldr	r3, [pc, #68]	; (810f4 <xQueueSemaphoreTake+0x1d8>)
   810b0:	4798      	blx	r3
						taskEXIT_CRITICAL();
   810b2:	4b08      	ldr	r3, [pc, #32]	; (810d4 <xQueueSemaphoreTake+0x1b8>)
   810b4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   810b6:	2500      	movs	r5, #0
   810b8:	e77c      	b.n	80fb4 <xQueueSemaphoreTake+0x98>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   810ba:	2100      	movs	r1, #0
   810bc:	e7f6      	b.n	810ac <xQueueSemaphoreTake+0x190>
   810be:	bf00      	nop
   810c0:	00081a11 	.word	0x00081a11
   810c4:	000805c9 	.word	0x000805c9
   810c8:	00081c75 	.word	0x00081c75
   810cc:	000818d1 	.word	0x000818d1
   810d0:	e000ed04 	.word	0xe000ed04
   810d4:	0008060d 	.word	0x0008060d
   810d8:	00081a31 	.word	0x00081a31
   810dc:	00080955 	.word	0x00080955
   810e0:	000816ad 	.word	0x000816ad
   810e4:	0008088d 	.word	0x0008088d
   810e8:	0008155d 	.word	0x0008155d
   810ec:	00081979 	.word	0x00081979
   810f0:	00081855 	.word	0x00081855
   810f4:	00081bad 	.word	0x00081bad
   810f8:	00081961 	.word	0x00081961

000810fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   810fc:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   810fe:	4b0a      	ldr	r3, [pc, #40]	; (81128 <vQueueAddToRegistry+0x2c>)
   81100:	681b      	ldr	r3, [r3, #0]
   81102:	b14b      	cbz	r3, 81118 <vQueueAddToRegistry+0x1c>
   81104:	2301      	movs	r3, #1
   81106:	4c08      	ldr	r4, [pc, #32]	; (81128 <vQueueAddToRegistry+0x2c>)
   81108:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   8110c:	b12a      	cbz	r2, 8111a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   8110e:	3301      	adds	r3, #1
   81110:	2b08      	cmp	r3, #8
   81112:	d1f9      	bne.n	81108 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   81114:	bc10      	pop	{r4}
   81116:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   81118:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   8111a:	4a03      	ldr	r2, [pc, #12]	; (81128 <vQueueAddToRegistry+0x2c>)
   8111c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   81120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81124:	6058      	str	r0, [r3, #4]
				break;
   81126:	e7f5      	b.n	81114 <vQueueAddToRegistry+0x18>
   81128:	2007c504 	.word	0x2007c504

0008112c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   8112c:	b570      	push	{r4, r5, r6, lr}
   8112e:	4604      	mov	r4, r0
   81130:	460d      	mov	r5, r1
   81132:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81134:	4b11      	ldr	r3, [pc, #68]	; (8117c <vQueueWaitForMessageRestricted+0x50>)
   81136:	4798      	blx	r3
   81138:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8113c:	b25b      	sxtb	r3, r3
   8113e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81142:	bf04      	itt	eq
   81144:	2300      	moveq	r3, #0
   81146:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8114a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   8114e:	b25b      	sxtb	r3, r3
   81150:	f1b3 3fff 	cmp.w	r3, #4294967295
   81154:	bf04      	itt	eq
   81156:	2300      	moveq	r3, #0
   81158:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8115c:	4b08      	ldr	r3, [pc, #32]	; (81180 <vQueueWaitForMessageRestricted+0x54>)
   8115e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   81160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81162:	b11b      	cbz	r3, 8116c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   81164:	4620      	mov	r0, r4
   81166:	4b07      	ldr	r3, [pc, #28]	; (81184 <vQueueWaitForMessageRestricted+0x58>)
   81168:	4798      	blx	r3
   8116a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   8116c:	4632      	mov	r2, r6
   8116e:	4629      	mov	r1, r5
   81170:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81174:	4b04      	ldr	r3, [pc, #16]	; (81188 <vQueueWaitForMessageRestricted+0x5c>)
   81176:	4798      	blx	r3
   81178:	e7f4      	b.n	81164 <vQueueWaitForMessageRestricted+0x38>
   8117a:	bf00      	nop
   8117c:	000805c9 	.word	0x000805c9
   81180:	0008060d 	.word	0x0008060d
   81184:	00080955 	.word	0x00080955
   81188:	0008188d 	.word	0x0008188d

0008118c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8118c:	4b08      	ldr	r3, [pc, #32]	; (811b0 <prvResetNextTaskUnblockTime+0x24>)
   8118e:	681b      	ldr	r3, [r3, #0]
   81190:	681b      	ldr	r3, [r3, #0]
   81192:	b13b      	cbz	r3, 811a4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81194:	4b06      	ldr	r3, [pc, #24]	; (811b0 <prvResetNextTaskUnblockTime+0x24>)
   81196:	681b      	ldr	r3, [r3, #0]
   81198:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   8119a:	68db      	ldr	r3, [r3, #12]
   8119c:	685a      	ldr	r2, [r3, #4]
   8119e:	4b05      	ldr	r3, [pc, #20]	; (811b4 <prvResetNextTaskUnblockTime+0x28>)
   811a0:	601a      	str	r2, [r3, #0]
   811a2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   811a4:	f04f 32ff 	mov.w	r2, #4294967295
   811a8:	4b02      	ldr	r3, [pc, #8]	; (811b4 <prvResetNextTaskUnblockTime+0x28>)
   811aa:	601a      	str	r2, [r3, #0]
   811ac:	4770      	bx	lr
   811ae:	bf00      	nop
   811b0:	2007c310 	.word	0x2007c310
   811b4:	2007c3c0 	.word	0x2007c3c0

000811b8 <prvIdleTask>:
{
   811b8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   811ba:	4d16      	ldr	r5, [pc, #88]	; (81214 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   811bc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8122c <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   811c0:	4f15      	ldr	r7, [pc, #84]	; (81218 <prvIdleTask+0x60>)
				taskYIELD();
   811c2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 81230 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   811c6:	682b      	ldr	r3, [r5, #0]
   811c8:	b1bb      	cbz	r3, 811fa <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   811ca:	4e14      	ldr	r6, [pc, #80]	; (8121c <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   811cc:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   811ce:	68fb      	ldr	r3, [r7, #12]
   811d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   811d2:	1d20      	adds	r0, r4, #4
   811d4:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   811d6:	4a12      	ldr	r2, [pc, #72]	; (81220 <prvIdleTask+0x68>)
   811d8:	6813      	ldr	r3, [r2, #0]
   811da:	3b01      	subs	r3, #1
   811dc:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   811de:	682b      	ldr	r3, [r5, #0]
   811e0:	3b01      	subs	r3, #1
   811e2:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   811e4:	4b0f      	ldr	r3, [pc, #60]	; (81224 <prvIdleTask+0x6c>)
   811e6:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   811e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   811ea:	f8df a048 	ldr.w	sl, [pc, #72]	; 81234 <prvIdleTask+0x7c>
   811ee:	47d0      	blx	sl
			vPortFree( pxTCB );
   811f0:	4620      	mov	r0, r4
   811f2:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   811f4:	682b      	ldr	r3, [r5, #0]
   811f6:	2b00      	cmp	r3, #0
   811f8:	d1e8      	bne.n	811cc <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   811fa:	4b0b      	ldr	r3, [pc, #44]	; (81228 <prvIdleTask+0x70>)
   811fc:	681b      	ldr	r3, [r3, #0]
   811fe:	2b01      	cmp	r3, #1
   81200:	d9e1      	bls.n	811c6 <prvIdleTask+0xe>
				taskYIELD();
   81202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81206:	f8c9 3000 	str.w	r3, [r9]
   8120a:	f3bf 8f4f 	dsb	sy
   8120e:	f3bf 8f6f 	isb	sy
   81212:	e7d8      	b.n	811c6 <prvIdleTask+0xe>
   81214:	2007c380 	.word	0x2007c380
   81218:	2007c3f4 	.word	0x2007c3f4
   8121c:	000804f5 	.word	0x000804f5
   81220:	2007c37c 	.word	0x2007c37c
   81224:	0008060d 	.word	0x0008060d
   81228:	2007c318 	.word	0x2007c318
   8122c:	000805c9 	.word	0x000805c9
   81230:	e000ed04 	.word	0xe000ed04
   81234:	00080875 	.word	0x00080875

00081238 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   81238:	b570      	push	{r4, r5, r6, lr}
   8123a:	4604      	mov	r4, r0
   8123c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   8123e:	4b1d      	ldr	r3, [pc, #116]	; (812b4 <prvAddCurrentTaskToDelayedList+0x7c>)
   81240:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81242:	4b1d      	ldr	r3, [pc, #116]	; (812b8 <prvAddCurrentTaskToDelayedList+0x80>)
   81244:	6818      	ldr	r0, [r3, #0]
   81246:	3004      	adds	r0, #4
   81248:	4b1c      	ldr	r3, [pc, #112]	; (812bc <prvAddCurrentTaskToDelayedList+0x84>)
   8124a:	4798      	blx	r3
   8124c:	b948      	cbnz	r0, 81262 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8124e:	4b1a      	ldr	r3, [pc, #104]	; (812b8 <prvAddCurrentTaskToDelayedList+0x80>)
   81250:	681a      	ldr	r2, [r3, #0]
   81252:	491b      	ldr	r1, [pc, #108]	; (812c0 <prvAddCurrentTaskToDelayedList+0x88>)
   81254:	680b      	ldr	r3, [r1, #0]
   81256:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   81258:	2201      	movs	r2, #1
   8125a:	4082      	lsls	r2, r0
   8125c:	ea23 0302 	bic.w	r3, r3, r2
   81260:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81262:	f1b4 3fff 	cmp.w	r4, #4294967295
   81266:	d013      	beq.n	81290 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   81268:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   8126a:	4b13      	ldr	r3, [pc, #76]	; (812b8 <prvAddCurrentTaskToDelayedList+0x80>)
   8126c:	681b      	ldr	r3, [r3, #0]
   8126e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   81270:	42a5      	cmp	r5, r4
   81272:	d816      	bhi.n	812a2 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81274:	4b13      	ldr	r3, [pc, #76]	; (812c4 <prvAddCurrentTaskToDelayedList+0x8c>)
   81276:	6818      	ldr	r0, [r3, #0]
   81278:	4b0f      	ldr	r3, [pc, #60]	; (812b8 <prvAddCurrentTaskToDelayedList+0x80>)
   8127a:	6819      	ldr	r1, [r3, #0]
   8127c:	3104      	adds	r1, #4
   8127e:	4b12      	ldr	r3, [pc, #72]	; (812c8 <prvAddCurrentTaskToDelayedList+0x90>)
   81280:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   81282:	4b12      	ldr	r3, [pc, #72]	; (812cc <prvAddCurrentTaskToDelayedList+0x94>)
   81284:	681b      	ldr	r3, [r3, #0]
   81286:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   81288:	bf3c      	itt	cc
   8128a:	4b10      	ldrcc	r3, [pc, #64]	; (812cc <prvAddCurrentTaskToDelayedList+0x94>)
   8128c:	601c      	strcc	r4, [r3, #0]
   8128e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81290:	2e00      	cmp	r6, #0
   81292:	d0e9      	beq.n	81268 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81294:	4b08      	ldr	r3, [pc, #32]	; (812b8 <prvAddCurrentTaskToDelayedList+0x80>)
   81296:	6819      	ldr	r1, [r3, #0]
   81298:	3104      	adds	r1, #4
   8129a:	480d      	ldr	r0, [pc, #52]	; (812d0 <prvAddCurrentTaskToDelayedList+0x98>)
   8129c:	4b0d      	ldr	r3, [pc, #52]	; (812d4 <prvAddCurrentTaskToDelayedList+0x9c>)
   8129e:	4798      	blx	r3
   812a0:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   812a2:	4b0d      	ldr	r3, [pc, #52]	; (812d8 <prvAddCurrentTaskToDelayedList+0xa0>)
   812a4:	6818      	ldr	r0, [r3, #0]
   812a6:	4b04      	ldr	r3, [pc, #16]	; (812b8 <prvAddCurrentTaskToDelayedList+0x80>)
   812a8:	6819      	ldr	r1, [r3, #0]
   812aa:	3104      	adds	r1, #4
   812ac:	4b06      	ldr	r3, [pc, #24]	; (812c8 <prvAddCurrentTaskToDelayedList+0x90>)
   812ae:	4798      	blx	r3
   812b0:	bd70      	pop	{r4, r5, r6, pc}
   812b2:	bf00      	nop
   812b4:	2007c408 	.word	0x2007c408
   812b8:	2007c30c 	.word	0x2007c30c
   812bc:	000804f5 	.word	0x000804f5
   812c0:	2007c390 	.word	0x2007c390
   812c4:	2007c310 	.word	0x2007c310
   812c8:	000804c1 	.word	0x000804c1
   812cc:	2007c3c0 	.word	0x2007c3c0
   812d0:	2007c3e0 	.word	0x2007c3e0
   812d4:	000804a9 	.word	0x000804a9
   812d8:	2007c314 	.word	0x2007c314

000812dc <xTaskCreate>:
	{
   812dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812e0:	b083      	sub	sp, #12
   812e2:	4683      	mov	fp, r0
   812e4:	460d      	mov	r5, r1
   812e6:	9301      	str	r3, [sp, #4]
   812e8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   812ec:	0096      	lsls	r6, r2, #2
   812ee:	4630      	mov	r0, r6
   812f0:	4b60      	ldr	r3, [pc, #384]	; (81474 <xTaskCreate+0x198>)
   812f2:	4798      	blx	r3
			if( pxStack != NULL )
   812f4:	2800      	cmp	r0, #0
   812f6:	f000 808d 	beq.w	81414 <xTaskCreate+0x138>
   812fa:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   812fc:	2060      	movs	r0, #96	; 0x60
   812fe:	4b5d      	ldr	r3, [pc, #372]	; (81474 <xTaskCreate+0x198>)
   81300:	4798      	blx	r3
				if( pxNewTCB != NULL )
   81302:	4604      	mov	r4, r0
   81304:	2800      	cmp	r0, #0
   81306:	f000 8082 	beq.w	8140e <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
   8130a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   8130c:	4632      	mov	r2, r6
   8130e:	21a5      	movs	r1, #165	; 0xa5
   81310:	4638      	mov	r0, r7
   81312:	4b59      	ldr	r3, [pc, #356]	; (81478 <xTaskCreate+0x19c>)
   81314:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   81316:	3e04      	subs	r6, #4
   81318:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8131a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   8131c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81320:	782b      	ldrb	r3, [r5, #0]
   81322:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   81326:	782b      	ldrb	r3, [r5, #0]
   81328:	b163      	cbz	r3, 81344 <xTaskCreate+0x68>
   8132a:	462b      	mov	r3, r5
   8132c:	f104 0234 	add.w	r2, r4, #52	; 0x34
   81330:	f105 0113 	add.w	r1, r5, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81334:	7858      	ldrb	r0, [r3, #1]
   81336:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   8133a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   8133e:	b108      	cbz	r0, 81344 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   81340:	428b      	cmp	r3, r1
   81342:	d1f7      	bne.n	81334 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   81344:	2700      	movs	r7, #0
   81346:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
   8134a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8134c:	2d04      	cmp	r5, #4
   8134e:	bf28      	it	cs
   81350:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   81352:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   81354:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
   81356:	6567      	str	r7, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   81358:	f104 0804 	add.w	r8, r4, #4
   8135c:	4640      	mov	r0, r8
   8135e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 814cc <xTaskCreate+0x1f0>
   81362:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   81364:	f104 0018 	add.w	r0, r4, #24
   81368:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   8136a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8136c:	f1c5 0505 	rsb	r5, r5, #5
   81370:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   81372:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   81374:	65a7      	str	r7, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   81376:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8137a:	9a01      	ldr	r2, [sp, #4]
   8137c:	4659      	mov	r1, fp
   8137e:	4630      	mov	r0, r6
   81380:	4b3e      	ldr	r3, [pc, #248]	; (8147c <xTaskCreate+0x1a0>)
   81382:	4798      	blx	r3
   81384:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   81386:	f1ba 0f00 	cmp.w	sl, #0
   8138a:	d001      	beq.n	81390 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   8138c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   81390:	4b3b      	ldr	r3, [pc, #236]	; (81480 <xTaskCreate+0x1a4>)
   81392:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   81394:	4a3b      	ldr	r2, [pc, #236]	; (81484 <xTaskCreate+0x1a8>)
   81396:	6813      	ldr	r3, [r2, #0]
   81398:	3301      	adds	r3, #1
   8139a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   8139c:	4b3a      	ldr	r3, [pc, #232]	; (81488 <xTaskCreate+0x1ac>)
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	2b00      	cmp	r3, #0
   813a2:	d03a      	beq.n	8141a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
   813a4:	4b39      	ldr	r3, [pc, #228]	; (8148c <xTaskCreate+0x1b0>)
   813a6:	681b      	ldr	r3, [r3, #0]
   813a8:	b93b      	cbnz	r3, 813ba <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   813aa:	4b37      	ldr	r3, [pc, #220]	; (81488 <xTaskCreate+0x1ac>)
   813ac:	681b      	ldr	r3, [r3, #0]
   813ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   813b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   813b2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   813b4:	bf9c      	itt	ls
   813b6:	4b34      	ldrls	r3, [pc, #208]	; (81488 <xTaskCreate+0x1ac>)
   813b8:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   813ba:	4a35      	ldr	r2, [pc, #212]	; (81490 <xTaskCreate+0x1b4>)
   813bc:	6813      	ldr	r3, [r2, #0]
   813be:	3301      	adds	r3, #1
   813c0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   813c2:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
   813c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   813c6:	4a33      	ldr	r2, [pc, #204]	; (81494 <xTaskCreate+0x1b8>)
   813c8:	6811      	ldr	r1, [r2, #0]
   813ca:	2301      	movs	r3, #1
   813cc:	4083      	lsls	r3, r0
   813ce:	430b      	orrs	r3, r1
   813d0:	6013      	str	r3, [r2, #0]
   813d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   813d6:	4641      	mov	r1, r8
   813d8:	4b2f      	ldr	r3, [pc, #188]	; (81498 <xTaskCreate+0x1bc>)
   813da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   813de:	4b2f      	ldr	r3, [pc, #188]	; (8149c <xTaskCreate+0x1c0>)
   813e0:	4798      	blx	r3
	taskEXIT_CRITICAL();
   813e2:	4b2f      	ldr	r3, [pc, #188]	; (814a0 <xTaskCreate+0x1c4>)
   813e4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   813e6:	4b29      	ldr	r3, [pc, #164]	; (8148c <xTaskCreate+0x1b0>)
   813e8:	681b      	ldr	r3, [r3, #0]
   813ea:	2b00      	cmp	r3, #0
   813ec:	d03b      	beq.n	81466 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   813ee:	4b26      	ldr	r3, [pc, #152]	; (81488 <xTaskCreate+0x1ac>)
   813f0:	681b      	ldr	r3, [r3, #0]
   813f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   813f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   813f6:	429a      	cmp	r2, r3
   813f8:	d239      	bcs.n	8146e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
   813fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   813fe:	4b29      	ldr	r3, [pc, #164]	; (814a4 <xTaskCreate+0x1c8>)
   81400:	601a      	str	r2, [r3, #0]
   81402:	f3bf 8f4f 	dsb	sy
   81406:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   8140a:	2001      	movs	r0, #1
   8140c:	e02c      	b.n	81468 <xTaskCreate+0x18c>
					vPortFree( pxStack );
   8140e:	4638      	mov	r0, r7
   81410:	4b25      	ldr	r3, [pc, #148]	; (814a8 <xTaskCreate+0x1cc>)
   81412:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81414:	f04f 30ff 	mov.w	r0, #4294967295
   81418:	e026      	b.n	81468 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
   8141a:	4b1b      	ldr	r3, [pc, #108]	; (81488 <xTaskCreate+0x1ac>)
   8141c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   8141e:	6813      	ldr	r3, [r2, #0]
   81420:	2b01      	cmp	r3, #1
   81422:	d1ca      	bne.n	813ba <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   81424:	4e1c      	ldr	r6, [pc, #112]	; (81498 <xTaskCreate+0x1bc>)
   81426:	4630      	mov	r0, r6
   81428:	4d20      	ldr	r5, [pc, #128]	; (814ac <xTaskCreate+0x1d0>)
   8142a:	47a8      	blx	r5
   8142c:	f106 0014 	add.w	r0, r6, #20
   81430:	47a8      	blx	r5
   81432:	f106 0028 	add.w	r0, r6, #40	; 0x28
   81436:	47a8      	blx	r5
   81438:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   8143c:	47a8      	blx	r5
   8143e:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81442:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   81444:	4f1a      	ldr	r7, [pc, #104]	; (814b0 <xTaskCreate+0x1d4>)
   81446:	4638      	mov	r0, r7
   81448:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   8144a:	4e1a      	ldr	r6, [pc, #104]	; (814b4 <xTaskCreate+0x1d8>)
   8144c:	4630      	mov	r0, r6
   8144e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   81450:	4819      	ldr	r0, [pc, #100]	; (814b8 <xTaskCreate+0x1dc>)
   81452:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   81454:	4819      	ldr	r0, [pc, #100]	; (814bc <xTaskCreate+0x1e0>)
   81456:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   81458:	4819      	ldr	r0, [pc, #100]	; (814c0 <xTaskCreate+0x1e4>)
   8145a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   8145c:	4b19      	ldr	r3, [pc, #100]	; (814c4 <xTaskCreate+0x1e8>)
   8145e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81460:	4b19      	ldr	r3, [pc, #100]	; (814c8 <xTaskCreate+0x1ec>)
   81462:	601e      	str	r6, [r3, #0]
   81464:	e7a9      	b.n	813ba <xTaskCreate+0xde>
			xReturn = pdPASS;
   81466:	2001      	movs	r0, #1
	}
   81468:	b003      	add	sp, #12
   8146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   8146e:	2001      	movs	r0, #1
		return xReturn;
   81470:	e7fa      	b.n	81468 <xTaskCreate+0x18c>
   81472:	bf00      	nop
   81474:	0008080d 	.word	0x0008080d
   81478:	0008299d 	.word	0x0008299d
   8147c:	0008057d 	.word	0x0008057d
   81480:	000805c9 	.word	0x000805c9
   81484:	2007c37c 	.word	0x2007c37c
   81488:	2007c30c 	.word	0x2007c30c
   8148c:	2007c3dc 	.word	0x2007c3dc
   81490:	2007c38c 	.word	0x2007c38c
   81494:	2007c390 	.word	0x2007c390
   81498:	2007c318 	.word	0x2007c318
   8149c:	000804a9 	.word	0x000804a9
   814a0:	0008060d 	.word	0x0008060d
   814a4:	e000ed04 	.word	0xe000ed04
   814a8:	00080875 	.word	0x00080875
   814ac:	0008048d 	.word	0x0008048d
   814b0:	2007c394 	.word	0x2007c394
   814b4:	2007c3a8 	.word	0x2007c3a8
   814b8:	2007c3c8 	.word	0x2007c3c8
   814bc:	2007c3f4 	.word	0x2007c3f4
   814c0:	2007c3e0 	.word	0x2007c3e0
   814c4:	2007c310 	.word	0x2007c310
   814c8:	2007c314 	.word	0x2007c314
   814cc:	000804a3 	.word	0x000804a3

000814d0 <vTaskStartScheduler>:
{
   814d0:	b510      	push	{r4, lr}
   814d2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   814d4:	4b18      	ldr	r3, [pc, #96]	; (81538 <vTaskStartScheduler+0x68>)
   814d6:	9301      	str	r3, [sp, #4]
   814d8:	2300      	movs	r3, #0
   814da:	9300      	str	r3, [sp, #0]
   814dc:	2282      	movs	r2, #130	; 0x82
   814de:	4917      	ldr	r1, [pc, #92]	; (8153c <vTaskStartScheduler+0x6c>)
   814e0:	4817      	ldr	r0, [pc, #92]	; (81540 <vTaskStartScheduler+0x70>)
   814e2:	4c18      	ldr	r4, [pc, #96]	; (81544 <vTaskStartScheduler+0x74>)
   814e4:	47a0      	blx	r4
		if( xReturn == pdPASS )
   814e6:	2801      	cmp	r0, #1
   814e8:	d004      	beq.n	814f4 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   814ea:	f1b0 3fff 	cmp.w	r0, #4294967295
   814ee:	d01a      	beq.n	81526 <vTaskStartScheduler+0x56>
}
   814f0:	b002      	add	sp, #8
   814f2:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   814f4:	4b14      	ldr	r3, [pc, #80]	; (81548 <vTaskStartScheduler+0x78>)
   814f6:	4798      	blx	r3
	if( xReturn == pdPASS )
   814f8:	2801      	cmp	r0, #1
   814fa:	d1f6      	bne.n	814ea <vTaskStartScheduler+0x1a>
   814fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   81500:	f383 8811 	msr	BASEPRI, r3
   81504:	f3bf 8f6f 	isb	sy
   81508:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   8150c:	f04f 32ff 	mov.w	r2, #4294967295
   81510:	4b0e      	ldr	r3, [pc, #56]	; (8154c <vTaskStartScheduler+0x7c>)
   81512:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   81514:	2201      	movs	r2, #1
   81516:	4b0e      	ldr	r3, [pc, #56]	; (81550 <vTaskStartScheduler+0x80>)
   81518:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   8151a:	2200      	movs	r2, #0
   8151c:	4b0d      	ldr	r3, [pc, #52]	; (81554 <vTaskStartScheduler+0x84>)
   8151e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   81520:	4b0d      	ldr	r3, [pc, #52]	; (81558 <vTaskStartScheduler+0x88>)
   81522:	4798      	blx	r3
   81524:	e7e4      	b.n	814f0 <vTaskStartScheduler+0x20>
   81526:	f04f 0340 	mov.w	r3, #64	; 0x40
   8152a:	f383 8811 	msr	BASEPRI, r3
   8152e:	f3bf 8f6f 	isb	sy
   81532:	f3bf 8f4f 	dsb	sy
   81536:	e7fe      	b.n	81536 <vTaskStartScheduler+0x66>
   81538:	2007c3bc 	.word	0x2007c3bc
   8153c:	000856b8 	.word	0x000856b8
   81540:	000811b9 	.word	0x000811b9
   81544:	000812dd 	.word	0x000812dd
   81548:	00081d4d 	.word	0x00081d4d
   8154c:	2007c3c0 	.word	0x2007c3c0
   81550:	2007c3dc 	.word	0x2007c3dc
   81554:	2007c408 	.word	0x2007c408
   81558:	000806e1 	.word	0x000806e1

0008155c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   8155c:	4a02      	ldr	r2, [pc, #8]	; (81568 <vTaskSuspendAll+0xc>)
   8155e:	6813      	ldr	r3, [r2, #0]
   81560:	3301      	adds	r3, #1
   81562:	6013      	str	r3, [r2, #0]
   81564:	4770      	bx	lr
   81566:	bf00      	nop
   81568:	2007c388 	.word	0x2007c388

0008156c <xTaskGetTickCount>:
		xTicks = xTickCount;
   8156c:	4b01      	ldr	r3, [pc, #4]	; (81574 <xTaskGetTickCount+0x8>)
   8156e:	6818      	ldr	r0, [r3, #0]
}
   81570:	4770      	bx	lr
   81572:	bf00      	nop
   81574:	2007c408 	.word	0x2007c408

00081578 <xTaskIncrementTick>:
{
   81578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8157c:	4b3d      	ldr	r3, [pc, #244]	; (81674 <xTaskIncrementTick+0xfc>)
   8157e:	681b      	ldr	r3, [r3, #0]
   81580:	2b00      	cmp	r3, #0
   81582:	d169      	bne.n	81658 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   81584:	4b3c      	ldr	r3, [pc, #240]	; (81678 <xTaskIncrementTick+0x100>)
   81586:	681d      	ldr	r5, [r3, #0]
   81588:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   8158a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   8158c:	b9c5      	cbnz	r5, 815c0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
   8158e:	4b3b      	ldr	r3, [pc, #236]	; (8167c <xTaskIncrementTick+0x104>)
   81590:	681b      	ldr	r3, [r3, #0]
   81592:	681b      	ldr	r3, [r3, #0]
   81594:	b143      	cbz	r3, 815a8 <xTaskIncrementTick+0x30>
   81596:	f04f 0340 	mov.w	r3, #64	; 0x40
   8159a:	f383 8811 	msr	BASEPRI, r3
   8159e:	f3bf 8f6f 	isb	sy
   815a2:	f3bf 8f4f 	dsb	sy
   815a6:	e7fe      	b.n	815a6 <xTaskIncrementTick+0x2e>
   815a8:	4a34      	ldr	r2, [pc, #208]	; (8167c <xTaskIncrementTick+0x104>)
   815aa:	6811      	ldr	r1, [r2, #0]
   815ac:	4b34      	ldr	r3, [pc, #208]	; (81680 <xTaskIncrementTick+0x108>)
   815ae:	6818      	ldr	r0, [r3, #0]
   815b0:	6010      	str	r0, [r2, #0]
   815b2:	6019      	str	r1, [r3, #0]
   815b4:	4a33      	ldr	r2, [pc, #204]	; (81684 <xTaskIncrementTick+0x10c>)
   815b6:	6813      	ldr	r3, [r2, #0]
   815b8:	3301      	adds	r3, #1
   815ba:	6013      	str	r3, [r2, #0]
   815bc:	4b32      	ldr	r3, [pc, #200]	; (81688 <xTaskIncrementTick+0x110>)
   815be:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   815c0:	4b32      	ldr	r3, [pc, #200]	; (8168c <xTaskIncrementTick+0x114>)
   815c2:	681b      	ldr	r3, [r3, #0]
   815c4:	429d      	cmp	r5, r3
   815c6:	d20c      	bcs.n	815e2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
   815c8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   815ca:	4b31      	ldr	r3, [pc, #196]	; (81690 <xTaskIncrementTick+0x118>)
   815cc:	681b      	ldr	r3, [r3, #0]
   815ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815d4:	009b      	lsls	r3, r3, #2
   815d6:	4a2f      	ldr	r2, [pc, #188]	; (81694 <xTaskIncrementTick+0x11c>)
   815d8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   815da:	2b02      	cmp	r3, #2
   815dc:	bf28      	it	cs
   815de:	2401      	movcs	r4, #1
   815e0:	e03f      	b.n	81662 <xTaskIncrementTick+0xea>
   815e2:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   815e4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8167c <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   815e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 816a8 <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
   815ec:	4f2a      	ldr	r7, [pc, #168]	; (81698 <xTaskIncrementTick+0x120>)
   815ee:	e01f      	b.n	81630 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   815f0:	f04f 32ff 	mov.w	r2, #4294967295
   815f4:	4b25      	ldr	r3, [pc, #148]	; (8168c <xTaskIncrementTick+0x114>)
   815f6:	601a      	str	r2, [r3, #0]
					break;
   815f8:	e7e7      	b.n	815ca <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
   815fa:	4a24      	ldr	r2, [pc, #144]	; (8168c <xTaskIncrementTick+0x114>)
   815fc:	6013      	str	r3, [r2, #0]
						break;
   815fe:	e7e4      	b.n	815ca <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   81600:	f106 0018 	add.w	r0, r6, #24
   81604:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   81606:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   81608:	683a      	ldr	r2, [r7, #0]
   8160a:	2301      	movs	r3, #1
   8160c:	4083      	lsls	r3, r0
   8160e:	4313      	orrs	r3, r2
   81610:	603b      	str	r3, [r7, #0]
   81612:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81616:	4651      	mov	r1, sl
   81618:	4b1e      	ldr	r3, [pc, #120]	; (81694 <xTaskIncrementTick+0x11c>)
   8161a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8161e:	4b1f      	ldr	r3, [pc, #124]	; (8169c <xTaskIncrementTick+0x124>)
   81620:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81622:	4b1b      	ldr	r3, [pc, #108]	; (81690 <xTaskIncrementTick+0x118>)
   81624:	681b      	ldr	r3, [r3, #0]
   81626:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   81628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   8162a:	429a      	cmp	r2, r3
   8162c:	bf28      	it	cs
   8162e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81630:	f8d9 3000 	ldr.w	r3, [r9]
   81634:	681b      	ldr	r3, [r3, #0]
   81636:	2b00      	cmp	r3, #0
   81638:	d0da      	beq.n	815f0 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8163a:	f8d9 3000 	ldr.w	r3, [r9]
   8163e:	68db      	ldr	r3, [r3, #12]
   81640:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   81642:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   81644:	429d      	cmp	r5, r3
   81646:	d3d8      	bcc.n	815fa <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   81648:	f106 0a04 	add.w	sl, r6, #4
   8164c:	4650      	mov	r0, sl
   8164e:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81650:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   81652:	2b00      	cmp	r3, #0
   81654:	d1d4      	bne.n	81600 <xTaskIncrementTick+0x88>
   81656:	e7d6      	b.n	81606 <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
   81658:	4a11      	ldr	r2, [pc, #68]	; (816a0 <xTaskIncrementTick+0x128>)
   8165a:	6813      	ldr	r3, [r2, #0]
   8165c:	3301      	adds	r3, #1
   8165e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   81660:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   81662:	4b10      	ldr	r3, [pc, #64]	; (816a4 <xTaskIncrementTick+0x12c>)
   81664:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   81666:	2b00      	cmp	r3, #0
}
   81668:	bf0c      	ite	eq
   8166a:	4620      	moveq	r0, r4
   8166c:	2001      	movne	r0, #1
   8166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81672:	bf00      	nop
   81674:	2007c388 	.word	0x2007c388
   81678:	2007c408 	.word	0x2007c408
   8167c:	2007c310 	.word	0x2007c310
   81680:	2007c314 	.word	0x2007c314
   81684:	2007c3c4 	.word	0x2007c3c4
   81688:	0008118d 	.word	0x0008118d
   8168c:	2007c3c0 	.word	0x2007c3c0
   81690:	2007c30c 	.word	0x2007c30c
   81694:	2007c318 	.word	0x2007c318
   81698:	2007c390 	.word	0x2007c390
   8169c:	000804a9 	.word	0x000804a9
   816a0:	2007c384 	.word	0x2007c384
   816a4:	2007c40c 	.word	0x2007c40c
   816a8:	000804f5 	.word	0x000804f5

000816ac <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   816ac:	4b35      	ldr	r3, [pc, #212]	; (81784 <xTaskResumeAll+0xd8>)
   816ae:	681b      	ldr	r3, [r3, #0]
   816b0:	b943      	cbnz	r3, 816c4 <xTaskResumeAll+0x18>
   816b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   816b6:	f383 8811 	msr	BASEPRI, r3
   816ba:	f3bf 8f6f 	isb	sy
   816be:	f3bf 8f4f 	dsb	sy
   816c2:	e7fe      	b.n	816c2 <xTaskResumeAll+0x16>
{
   816c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
   816c8:	4b2f      	ldr	r3, [pc, #188]	; (81788 <xTaskResumeAll+0xdc>)
   816ca:	4798      	blx	r3
		--uxSchedulerSuspended;
   816cc:	4b2d      	ldr	r3, [pc, #180]	; (81784 <xTaskResumeAll+0xd8>)
   816ce:	681a      	ldr	r2, [r3, #0]
   816d0:	3a01      	subs	r2, #1
   816d2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   816d4:	681b      	ldr	r3, [r3, #0]
   816d6:	2b00      	cmp	r3, #0
   816d8:	d150      	bne.n	8177c <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   816da:	4b2c      	ldr	r3, [pc, #176]	; (8178c <xTaskResumeAll+0xe0>)
   816dc:	681b      	ldr	r3, [r3, #0]
   816de:	b92b      	cbnz	r3, 816ec <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
   816e0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   816e2:	4b2b      	ldr	r3, [pc, #172]	; (81790 <xTaskResumeAll+0xe4>)
   816e4:	4798      	blx	r3
}
   816e6:	4620      	mov	r0, r4
   816e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816ec:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   816ee:	4f29      	ldr	r7, [pc, #164]	; (81794 <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   816f0:	4e29      	ldr	r6, [pc, #164]	; (81798 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
   816f2:	4d2a      	ldr	r5, [pc, #168]	; (8179c <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   816f4:	683b      	ldr	r3, [r7, #0]
   816f6:	b303      	cbz	r3, 8173a <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   816f8:	68fb      	ldr	r3, [r7, #12]
   816fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   816fc:	f104 0018 	add.w	r0, r4, #24
   81700:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   81702:	f104 0804 	add.w	r8, r4, #4
   81706:	4640      	mov	r0, r8
   81708:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   8170a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8170c:	682a      	ldr	r2, [r5, #0]
   8170e:	2301      	movs	r3, #1
   81710:	4083      	lsls	r3, r0
   81712:	4313      	orrs	r3, r2
   81714:	602b      	str	r3, [r5, #0]
   81716:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8171a:	4641      	mov	r1, r8
   8171c:	4b20      	ldr	r3, [pc, #128]	; (817a0 <xTaskResumeAll+0xf4>)
   8171e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81722:	4b20      	ldr	r3, [pc, #128]	; (817a4 <xTaskResumeAll+0xf8>)
   81724:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81726:	4b20      	ldr	r3, [pc, #128]	; (817a8 <xTaskResumeAll+0xfc>)
   81728:	681b      	ldr	r3, [r3, #0]
   8172a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8172e:	429a      	cmp	r2, r3
   81730:	d3e0      	bcc.n	816f4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
   81732:	2201      	movs	r2, #1
   81734:	4b1d      	ldr	r3, [pc, #116]	; (817ac <xTaskResumeAll+0x100>)
   81736:	601a      	str	r2, [r3, #0]
   81738:	e7dc      	b.n	816f4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
   8173a:	b10c      	cbz	r4, 81740 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
   8173c:	4b1c      	ldr	r3, [pc, #112]	; (817b0 <xTaskResumeAll+0x104>)
   8173e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   81740:	4b1c      	ldr	r3, [pc, #112]	; (817b4 <xTaskResumeAll+0x108>)
   81742:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   81744:	b16c      	cbz	r4, 81762 <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
   81746:	4f1c      	ldr	r7, [pc, #112]	; (817b8 <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   81748:	4e18      	ldr	r6, [pc, #96]	; (817ac <xTaskResumeAll+0x100>)
   8174a:	2501      	movs	r5, #1
   8174c:	e001      	b.n	81752 <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   8174e:	3c01      	subs	r4, #1
   81750:	d004      	beq.n	8175c <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   81752:	47b8      	blx	r7
   81754:	2800      	cmp	r0, #0
   81756:	d0fa      	beq.n	8174e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
   81758:	6035      	str	r5, [r6, #0]
   8175a:	e7f8      	b.n	8174e <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
   8175c:	2200      	movs	r2, #0
   8175e:	4b15      	ldr	r3, [pc, #84]	; (817b4 <xTaskResumeAll+0x108>)
   81760:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   81762:	4b12      	ldr	r3, [pc, #72]	; (817ac <xTaskResumeAll+0x100>)
   81764:	681b      	ldr	r3, [r3, #0]
   81766:	b15b      	cbz	r3, 81780 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
   81768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8176c:	4b13      	ldr	r3, [pc, #76]	; (817bc <xTaskResumeAll+0x110>)
   8176e:	601a      	str	r2, [r3, #0]
   81770:	f3bf 8f4f 	dsb	sy
   81774:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   81778:	2401      	movs	r4, #1
   8177a:	e7b2      	b.n	816e2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
   8177c:	2400      	movs	r4, #0
   8177e:	e7b0      	b.n	816e2 <xTaskResumeAll+0x36>
   81780:	2400      	movs	r4, #0
   81782:	e7ae      	b.n	816e2 <xTaskResumeAll+0x36>
   81784:	2007c388 	.word	0x2007c388
   81788:	000805c9 	.word	0x000805c9
   8178c:	2007c37c 	.word	0x2007c37c
   81790:	0008060d 	.word	0x0008060d
   81794:	2007c3c8 	.word	0x2007c3c8
   81798:	000804f5 	.word	0x000804f5
   8179c:	2007c390 	.word	0x2007c390
   817a0:	2007c318 	.word	0x2007c318
   817a4:	000804a9 	.word	0x000804a9
   817a8:	2007c30c 	.word	0x2007c30c
   817ac:	2007c40c 	.word	0x2007c40c
   817b0:	0008118d 	.word	0x0008118d
   817b4:	2007c384 	.word	0x2007c384
   817b8:	00081579 	.word	0x00081579
   817bc:	e000ed04 	.word	0xe000ed04

000817c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   817c0:	4b1f      	ldr	r3, [pc, #124]	; (81840 <vTaskSwitchContext+0x80>)
   817c2:	681b      	ldr	r3, [r3, #0]
   817c4:	b9c3      	cbnz	r3, 817f8 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
   817c6:	2200      	movs	r2, #0
   817c8:	4b1e      	ldr	r3, [pc, #120]	; (81844 <vTaskSwitchContext+0x84>)
   817ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   817cc:	4b1e      	ldr	r3, [pc, #120]	; (81848 <vTaskSwitchContext+0x88>)
   817ce:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   817d0:	fab3 f383 	clz	r3, r3
   817d4:	b2db      	uxtb	r3, r3
   817d6:	f1c3 031f 	rsb	r3, r3, #31
   817da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   817de:	0092      	lsls	r2, r2, #2
   817e0:	491a      	ldr	r1, [pc, #104]	; (8184c <vTaskSwitchContext+0x8c>)
   817e2:	588a      	ldr	r2, [r1, r2]
   817e4:	b962      	cbnz	r2, 81800 <vTaskSwitchContext+0x40>
	__asm volatile
   817e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   817ea:	f383 8811 	msr	BASEPRI, r3
   817ee:	f3bf 8f6f 	isb	sy
   817f2:	f3bf 8f4f 	dsb	sy
   817f6:	e7fe      	b.n	817f6 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
   817f8:	2201      	movs	r2, #1
   817fa:	4b12      	ldr	r3, [pc, #72]	; (81844 <vTaskSwitchContext+0x84>)
   817fc:	601a      	str	r2, [r3, #0]
   817fe:	4770      	bx	lr
{
   81800:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81802:	4a12      	ldr	r2, [pc, #72]	; (8184c <vTaskSwitchContext+0x8c>)
   81804:	0099      	lsls	r1, r3, #2
   81806:	18c8      	adds	r0, r1, r3
   81808:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   8180c:	6844      	ldr	r4, [r0, #4]
   8180e:	6864      	ldr	r4, [r4, #4]
   81810:	6044      	str	r4, [r0, #4]
   81812:	4419      	add	r1, r3
   81814:	4602      	mov	r2, r0
   81816:	3208      	adds	r2, #8
   81818:	4294      	cmp	r4, r2
   8181a:	d00a      	beq.n	81832 <vTaskSwitchContext+0x72>
   8181c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81820:	4a0a      	ldr	r2, [pc, #40]	; (8184c <vTaskSwitchContext+0x8c>)
   81822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81826:	685b      	ldr	r3, [r3, #4]
   81828:	68da      	ldr	r2, [r3, #12]
   8182a:	4b09      	ldr	r3, [pc, #36]	; (81850 <vTaskSwitchContext+0x90>)
   8182c:	601a      	str	r2, [r3, #0]
}
   8182e:	bc10      	pop	{r4}
   81830:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81832:	6860      	ldr	r0, [r4, #4]
   81834:	4a05      	ldr	r2, [pc, #20]	; (8184c <vTaskSwitchContext+0x8c>)
   81836:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8183a:	6050      	str	r0, [r2, #4]
   8183c:	e7ee      	b.n	8181c <vTaskSwitchContext+0x5c>
   8183e:	bf00      	nop
   81840:	2007c388 	.word	0x2007c388
   81844:	2007c40c 	.word	0x2007c40c
   81848:	2007c390 	.word	0x2007c390
   8184c:	2007c318 	.word	0x2007c318
   81850:	2007c30c 	.word	0x2007c30c

00081854 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   81854:	b940      	cbnz	r0, 81868 <vTaskPlaceOnEventList+0x14>
   81856:	f04f 0340 	mov.w	r3, #64	; 0x40
   8185a:	f383 8811 	msr	BASEPRI, r3
   8185e:	f3bf 8f6f 	isb	sy
   81862:	f3bf 8f4f 	dsb	sy
   81866:	e7fe      	b.n	81866 <vTaskPlaceOnEventList+0x12>
{
   81868:	b510      	push	{r4, lr}
   8186a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   8186c:	4b04      	ldr	r3, [pc, #16]	; (81880 <vTaskPlaceOnEventList+0x2c>)
   8186e:	6819      	ldr	r1, [r3, #0]
   81870:	3118      	adds	r1, #24
   81872:	4b04      	ldr	r3, [pc, #16]	; (81884 <vTaskPlaceOnEventList+0x30>)
   81874:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   81876:	2101      	movs	r1, #1
   81878:	4620      	mov	r0, r4
   8187a:	4b03      	ldr	r3, [pc, #12]	; (81888 <vTaskPlaceOnEventList+0x34>)
   8187c:	4798      	blx	r3
   8187e:	bd10      	pop	{r4, pc}
   81880:	2007c30c 	.word	0x2007c30c
   81884:	000804c1 	.word	0x000804c1
   81888:	00081239 	.word	0x00081239

0008188c <vTaskPlaceOnEventListRestricted>:
	{
   8188c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   8188e:	b178      	cbz	r0, 818b0 <vTaskPlaceOnEventListRestricted+0x24>
   81890:	4614      	mov	r4, r2
   81892:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81894:	4b0b      	ldr	r3, [pc, #44]	; (818c4 <vTaskPlaceOnEventListRestricted+0x38>)
   81896:	6819      	ldr	r1, [r3, #0]
   81898:	3118      	adds	r1, #24
   8189a:	4b0b      	ldr	r3, [pc, #44]	; (818c8 <vTaskPlaceOnEventListRestricted+0x3c>)
   8189c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   8189e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   818a0:	4621      	mov	r1, r4
   818a2:	bf0c      	ite	eq
   818a4:	4628      	moveq	r0, r5
   818a6:	f04f 30ff 	movne.w	r0, #4294967295
   818aa:	4b08      	ldr	r3, [pc, #32]	; (818cc <vTaskPlaceOnEventListRestricted+0x40>)
   818ac:	4798      	blx	r3
   818ae:	bd38      	pop	{r3, r4, r5, pc}
   818b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   818b4:	f383 8811 	msr	BASEPRI, r3
   818b8:	f3bf 8f6f 	isb	sy
   818bc:	f3bf 8f4f 	dsb	sy
   818c0:	e7fe      	b.n	818c0 <vTaskPlaceOnEventListRestricted+0x34>
   818c2:	bf00      	nop
   818c4:	2007c30c 	.word	0x2007c30c
   818c8:	000804a9 	.word	0x000804a9
   818cc:	00081239 	.word	0x00081239

000818d0 <xTaskRemoveFromEventList>:
{
   818d0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   818d2:	68c3      	ldr	r3, [r0, #12]
   818d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   818d6:	b32c      	cbz	r4, 81924 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   818d8:	f104 0518 	add.w	r5, r4, #24
   818dc:	4628      	mov	r0, r5
   818de:	4b18      	ldr	r3, [pc, #96]	; (81940 <xTaskRemoveFromEventList+0x70>)
   818e0:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   818e2:	4b18      	ldr	r3, [pc, #96]	; (81944 <xTaskRemoveFromEventList+0x74>)
   818e4:	681b      	ldr	r3, [r3, #0]
   818e6:	bb33      	cbnz	r3, 81936 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   818e8:	1d25      	adds	r5, r4, #4
   818ea:	4628      	mov	r0, r5
   818ec:	4b14      	ldr	r3, [pc, #80]	; (81940 <xTaskRemoveFromEventList+0x70>)
   818ee:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   818f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   818f2:	4a15      	ldr	r2, [pc, #84]	; (81948 <xTaskRemoveFromEventList+0x78>)
   818f4:	6811      	ldr	r1, [r2, #0]
   818f6:	2301      	movs	r3, #1
   818f8:	4083      	lsls	r3, r0
   818fa:	430b      	orrs	r3, r1
   818fc:	6013      	str	r3, [r2, #0]
   818fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81902:	4629      	mov	r1, r5
   81904:	4b11      	ldr	r3, [pc, #68]	; (8194c <xTaskRemoveFromEventList+0x7c>)
   81906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8190a:	4b11      	ldr	r3, [pc, #68]	; (81950 <xTaskRemoveFromEventList+0x80>)
   8190c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   8190e:	4b11      	ldr	r3, [pc, #68]	; (81954 <xTaskRemoveFromEventList+0x84>)
   81910:	681b      	ldr	r3, [r3, #0]
   81912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81916:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   81918:	bf83      	ittte	hi
   8191a:	2001      	movhi	r0, #1
   8191c:	4b0e      	ldrhi	r3, [pc, #56]	; (81958 <xTaskRemoveFromEventList+0x88>)
   8191e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   81920:	2000      	movls	r0, #0
}
   81922:	bd38      	pop	{r3, r4, r5, pc}
   81924:	f04f 0340 	mov.w	r3, #64	; 0x40
   81928:	f383 8811 	msr	BASEPRI, r3
   8192c:	f3bf 8f6f 	isb	sy
   81930:	f3bf 8f4f 	dsb	sy
   81934:	e7fe      	b.n	81934 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81936:	4629      	mov	r1, r5
   81938:	4808      	ldr	r0, [pc, #32]	; (8195c <xTaskRemoveFromEventList+0x8c>)
   8193a:	4b05      	ldr	r3, [pc, #20]	; (81950 <xTaskRemoveFromEventList+0x80>)
   8193c:	4798      	blx	r3
   8193e:	e7e6      	b.n	8190e <xTaskRemoveFromEventList+0x3e>
   81940:	000804f5 	.word	0x000804f5
   81944:	2007c388 	.word	0x2007c388
   81948:	2007c390 	.word	0x2007c390
   8194c:	2007c318 	.word	0x2007c318
   81950:	000804a9 	.word	0x000804a9
   81954:	2007c30c 	.word	0x2007c30c
   81958:	2007c40c 	.word	0x2007c40c
   8195c:	2007c3c8 	.word	0x2007c3c8

00081960 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81960:	4b03      	ldr	r3, [pc, #12]	; (81970 <vTaskInternalSetTimeOutState+0x10>)
   81962:	681b      	ldr	r3, [r3, #0]
   81964:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81966:	4b03      	ldr	r3, [pc, #12]	; (81974 <vTaskInternalSetTimeOutState+0x14>)
   81968:	681b      	ldr	r3, [r3, #0]
   8196a:	6043      	str	r3, [r0, #4]
   8196c:	4770      	bx	lr
   8196e:	bf00      	nop
   81970:	2007c3c4 	.word	0x2007c3c4
   81974:	2007c408 	.word	0x2007c408

00081978 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   81978:	b1e8      	cbz	r0, 819b6 <xTaskCheckForTimeOut+0x3e>
{
   8197a:	b570      	push	{r4, r5, r6, lr}
   8197c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
   8197e:	b319      	cbz	r1, 819c8 <xTaskCheckForTimeOut+0x50>
   81980:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
   81982:	4b1b      	ldr	r3, [pc, #108]	; (819f0 <xTaskCheckForTimeOut+0x78>)
   81984:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   81986:	4b1b      	ldr	r3, [pc, #108]	; (819f4 <xTaskCheckForTimeOut+0x7c>)
   81988:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   8198a:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   8198c:	6823      	ldr	r3, [r4, #0]
   8198e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81992:	d029      	beq.n	819e8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   81994:	4818      	ldr	r0, [pc, #96]	; (819f8 <xTaskCheckForTimeOut+0x80>)
   81996:	6800      	ldr	r0, [r0, #0]
   81998:	682e      	ldr	r6, [r5, #0]
   8199a:	4286      	cmp	r6, r0
   8199c:	d001      	beq.n	819a2 <xTaskCheckForTimeOut+0x2a>
   8199e:	428a      	cmp	r2, r1
   819a0:	d224      	bcs.n	819ec <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   819a2:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   819a4:	429a      	cmp	r2, r3
   819a6:	d318      	bcc.n	819da <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
   819a8:	2300      	movs	r3, #0
   819aa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   819ac:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   819ae:	4b13      	ldr	r3, [pc, #76]	; (819fc <xTaskCheckForTimeOut+0x84>)
   819b0:	4798      	blx	r3
}
   819b2:	4620      	mov	r0, r4
   819b4:	bd70      	pop	{r4, r5, r6, pc}
   819b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   819ba:	f383 8811 	msr	BASEPRI, r3
   819be:	f3bf 8f6f 	isb	sy
   819c2:	f3bf 8f4f 	dsb	sy
   819c6:	e7fe      	b.n	819c6 <xTaskCheckForTimeOut+0x4e>
   819c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   819cc:	f383 8811 	msr	BASEPRI, r3
   819d0:	f3bf 8f6f 	isb	sy
   819d4:	f3bf 8f4f 	dsb	sy
   819d8:	e7fe      	b.n	819d8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   819da:	1a9b      	subs	r3, r3, r2
   819dc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   819de:	4628      	mov	r0, r5
   819e0:	4b07      	ldr	r3, [pc, #28]	; (81a00 <xTaskCheckForTimeOut+0x88>)
   819e2:	4798      	blx	r3
			xReturn = pdFALSE;
   819e4:	2400      	movs	r4, #0
   819e6:	e7e2      	b.n	819ae <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   819e8:	2400      	movs	r4, #0
   819ea:	e7e0      	b.n	819ae <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   819ec:	2401      	movs	r4, #1
   819ee:	e7de      	b.n	819ae <xTaskCheckForTimeOut+0x36>
   819f0:	000805c9 	.word	0x000805c9
   819f4:	2007c408 	.word	0x2007c408
   819f8:	2007c3c4 	.word	0x2007c3c4
   819fc:	0008060d 	.word	0x0008060d
   81a00:	00081961 	.word	0x00081961

00081a04 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   81a04:	2201      	movs	r2, #1
   81a06:	4b01      	ldr	r3, [pc, #4]	; (81a0c <vTaskMissedYield+0x8>)
   81a08:	601a      	str	r2, [r3, #0]
   81a0a:	4770      	bx	lr
   81a0c:	2007c40c 	.word	0x2007c40c

00081a10 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   81a10:	4b05      	ldr	r3, [pc, #20]	; (81a28 <xTaskGetSchedulerState+0x18>)
   81a12:	681b      	ldr	r3, [r3, #0]
   81a14:	b133      	cbz	r3, 81a24 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81a16:	4b05      	ldr	r3, [pc, #20]	; (81a2c <xTaskGetSchedulerState+0x1c>)
   81a18:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   81a1a:	2b00      	cmp	r3, #0
   81a1c:	bf0c      	ite	eq
   81a1e:	2002      	moveq	r0, #2
   81a20:	2000      	movne	r0, #0
   81a22:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81a24:	2001      	movs	r0, #1
	}
   81a26:	4770      	bx	lr
   81a28:	2007c3dc 	.word	0x2007c3dc
   81a2c:	2007c388 	.word	0x2007c388

00081a30 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
   81a30:	2800      	cmp	r0, #0
   81a32:	d050      	beq.n	81ad6 <xTaskPriorityInherit+0xa6>
	{
   81a34:	b538      	push	{r3, r4, r5, lr}
   81a36:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   81a38:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81a3a:	4928      	ldr	r1, [pc, #160]	; (81adc <xTaskPriorityInherit+0xac>)
   81a3c:	6809      	ldr	r1, [r1, #0]
   81a3e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81a40:	428a      	cmp	r2, r1
   81a42:	d23f      	bcs.n	81ac4 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   81a44:	6981      	ldr	r1, [r0, #24]
   81a46:	2900      	cmp	r1, #0
   81a48:	db05      	blt.n	81a56 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81a4a:	4924      	ldr	r1, [pc, #144]	; (81adc <xTaskPriorityInherit+0xac>)
   81a4c:	6809      	ldr	r1, [r1, #0]
   81a4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81a50:	f1c1 0105 	rsb	r1, r1, #5
   81a54:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   81a56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81a5a:	4921      	ldr	r1, [pc, #132]	; (81ae0 <xTaskPriorityInherit+0xb0>)
   81a5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   81a60:	6961      	ldr	r1, [r4, #20]
   81a62:	4291      	cmp	r1, r2
   81a64:	d005      	beq.n	81a72 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   81a66:	4a1d      	ldr	r2, [pc, #116]	; (81adc <xTaskPriorityInherit+0xac>)
   81a68:	6812      	ldr	r2, [r2, #0]
   81a6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81a6c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
   81a6e:	2001      	movs	r0, #1
   81a70:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81a72:	1d25      	adds	r5, r4, #4
   81a74:	4628      	mov	r0, r5
   81a76:	4b1b      	ldr	r3, [pc, #108]	; (81ae4 <xTaskPriorityInherit+0xb4>)
   81a78:	4798      	blx	r3
   81a7a:	b970      	cbnz	r0, 81a9a <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
   81a7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81a7e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   81a82:	009b      	lsls	r3, r3, #2
   81a84:	4916      	ldr	r1, [pc, #88]	; (81ae0 <xTaskPriorityInherit+0xb0>)
   81a86:	58cb      	ldr	r3, [r1, r3]
   81a88:	b93b      	cbnz	r3, 81a9a <xTaskPriorityInherit+0x6a>
   81a8a:	4817      	ldr	r0, [pc, #92]	; (81ae8 <xTaskPriorityInherit+0xb8>)
   81a8c:	6803      	ldr	r3, [r0, #0]
   81a8e:	2101      	movs	r1, #1
   81a90:	fa01 f202 	lsl.w	r2, r1, r2
   81a94:	ea23 0202 	bic.w	r2, r3, r2
   81a98:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   81a9a:	4b10      	ldr	r3, [pc, #64]	; (81adc <xTaskPriorityInherit+0xac>)
   81a9c:	681b      	ldr	r3, [r3, #0]
   81a9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81aa0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   81aa2:	4a11      	ldr	r2, [pc, #68]	; (81ae8 <xTaskPriorityInherit+0xb8>)
   81aa4:	6811      	ldr	r1, [r2, #0]
   81aa6:	2401      	movs	r4, #1
   81aa8:	fa04 f300 	lsl.w	r3, r4, r0
   81aac:	430b      	orrs	r3, r1
   81aae:	6013      	str	r3, [r2, #0]
   81ab0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ab4:	4629      	mov	r1, r5
   81ab6:	4b0a      	ldr	r3, [pc, #40]	; (81ae0 <xTaskPriorityInherit+0xb0>)
   81ab8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81abc:	4b0b      	ldr	r3, [pc, #44]	; (81aec <xTaskPriorityInherit+0xbc>)
   81abe:	4798      	blx	r3
				xReturn = pdTRUE;
   81ac0:	4620      	mov	r0, r4
   81ac2:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   81ac4:	4a05      	ldr	r2, [pc, #20]	; (81adc <xTaskPriorityInherit+0xac>)
   81ac6:	6812      	ldr	r2, [r2, #0]
   81ac8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   81aca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   81acc:	4298      	cmp	r0, r3
   81ace:	bf2c      	ite	cs
   81ad0:	2000      	movcs	r0, #0
   81ad2:	2001      	movcc	r0, #1
   81ad4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   81ad6:	2000      	movs	r0, #0
		return xReturn;
   81ad8:	4770      	bx	lr
   81ada:	bf00      	nop
   81adc:	2007c30c 	.word	0x2007c30c
   81ae0:	2007c318 	.word	0x2007c318
   81ae4:	000804f5 	.word	0x000804f5
   81ae8:	2007c390 	.word	0x2007c390
   81aec:	000804a9 	.word	0x000804a9

00081af0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   81af0:	2800      	cmp	r0, #0
   81af2:	d04a      	beq.n	81b8a <xTaskPriorityDisinherit+0x9a>
	{
   81af4:	b538      	push	{r3, r4, r5, lr}
   81af6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   81af8:	4a27      	ldr	r2, [pc, #156]	; (81b98 <xTaskPriorityDisinherit+0xa8>)
   81afa:	6812      	ldr	r2, [r2, #0]
   81afc:	4290      	cmp	r0, r2
   81afe:	d008      	beq.n	81b12 <xTaskPriorityDisinherit+0x22>
   81b00:	f04f 0340 	mov.w	r3, #64	; 0x40
   81b04:	f383 8811 	msr	BASEPRI, r3
   81b08:	f3bf 8f6f 	isb	sy
   81b0c:	f3bf 8f4f 	dsb	sy
   81b10:	e7fe      	b.n	81b10 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
   81b12:	6d42      	ldr	r2, [r0, #84]	; 0x54
   81b14:	b942      	cbnz	r2, 81b28 <xTaskPriorityDisinherit+0x38>
   81b16:	f04f 0340 	mov.w	r3, #64	; 0x40
   81b1a:	f383 8811 	msr	BASEPRI, r3
   81b1e:	f3bf 8f6f 	isb	sy
   81b22:	f3bf 8f4f 	dsb	sy
   81b26:	e7fe      	b.n	81b26 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
   81b28:	3a01      	subs	r2, #1
   81b2a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81b2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81b2e:	6d21      	ldr	r1, [r4, #80]	; 0x50
   81b30:	4288      	cmp	r0, r1
   81b32:	d02c      	beq.n	81b8e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   81b34:	2a00      	cmp	r2, #0
   81b36:	d12c      	bne.n	81b92 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81b38:	1d25      	adds	r5, r4, #4
   81b3a:	4628      	mov	r0, r5
   81b3c:	4b17      	ldr	r3, [pc, #92]	; (81b9c <xTaskPriorityDisinherit+0xac>)
   81b3e:	4798      	blx	r3
   81b40:	b968      	cbnz	r0, 81b5e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81b42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81b44:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81b48:	009b      	lsls	r3, r3, #2
   81b4a:	4a15      	ldr	r2, [pc, #84]	; (81ba0 <xTaskPriorityDisinherit+0xb0>)
   81b4c:	58d3      	ldr	r3, [r2, r3]
   81b4e:	b933      	cbnz	r3, 81b5e <xTaskPriorityDisinherit+0x6e>
   81b50:	4814      	ldr	r0, [pc, #80]	; (81ba4 <xTaskPriorityDisinherit+0xb4>)
   81b52:	6803      	ldr	r3, [r0, #0]
   81b54:	2201      	movs	r2, #1
   81b56:	408a      	lsls	r2, r1
   81b58:	ea23 0302 	bic.w	r3, r3, r2
   81b5c:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   81b5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   81b60:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81b62:	f1c0 0305 	rsb	r3, r0, #5
   81b66:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   81b68:	4a0e      	ldr	r2, [pc, #56]	; (81ba4 <xTaskPriorityDisinherit+0xb4>)
   81b6a:	6811      	ldr	r1, [r2, #0]
   81b6c:	2401      	movs	r4, #1
   81b6e:	fa04 f300 	lsl.w	r3, r4, r0
   81b72:	430b      	orrs	r3, r1
   81b74:	6013      	str	r3, [r2, #0]
   81b76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b7a:	4629      	mov	r1, r5
   81b7c:	4b08      	ldr	r3, [pc, #32]	; (81ba0 <xTaskPriorityDisinherit+0xb0>)
   81b7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81b82:	4b09      	ldr	r3, [pc, #36]	; (81ba8 <xTaskPriorityDisinherit+0xb8>)
   81b84:	4798      	blx	r3
					xReturn = pdTRUE;
   81b86:	4620      	mov	r0, r4
   81b88:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   81b8a:	2000      	movs	r0, #0
   81b8c:	4770      	bx	lr
   81b8e:	2000      	movs	r0, #0
   81b90:	bd38      	pop	{r3, r4, r5, pc}
   81b92:	2000      	movs	r0, #0
	}
   81b94:	bd38      	pop	{r3, r4, r5, pc}
   81b96:	bf00      	nop
   81b98:	2007c30c 	.word	0x2007c30c
   81b9c:	000804f5 	.word	0x000804f5
   81ba0:	2007c318 	.word	0x2007c318
   81ba4:	2007c390 	.word	0x2007c390
   81ba8:	000804a9 	.word	0x000804a9

00081bac <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
   81bac:	2800      	cmp	r0, #0
   81bae:	d055      	beq.n	81c5c <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
   81bb0:	b538      	push	{r3, r4, r5, lr}
   81bb2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
   81bb4:	6d40      	ldr	r0, [r0, #84]	; 0x54
   81bb6:	b940      	cbnz	r0, 81bca <vTaskPriorityDisinheritAfterTimeout+0x1e>
   81bb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   81bbc:	f383 8811 	msr	BASEPRI, r3
   81bc0:	f3bf 8f6f 	isb	sy
   81bc4:	f3bf 8f4f 	dsb	sy
   81bc8:	e7fe      	b.n	81bc8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
   81bca:	6d22      	ldr	r2, [r4, #80]	; 0x50
   81bcc:	428a      	cmp	r2, r1
   81bce:	bf38      	it	cc
   81bd0:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   81bd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81bd4:	4291      	cmp	r1, r2
   81bd6:	d001      	beq.n	81bdc <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   81bd8:	2801      	cmp	r0, #1
   81bda:	d000      	beq.n	81bde <vTaskPriorityDisinheritAfterTimeout+0x32>
   81bdc:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
   81bde:	4820      	ldr	r0, [pc, #128]	; (81c60 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
   81be0:	6800      	ldr	r0, [r0, #0]
   81be2:	4284      	cmp	r4, r0
   81be4:	d108      	bne.n	81bf8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
   81be6:	f04f 0340 	mov.w	r3, #64	; 0x40
   81bea:	f383 8811 	msr	BASEPRI, r3
   81bee:	f3bf 8f6f 	isb	sy
   81bf2:	f3bf 8f4f 	dsb	sy
   81bf6:	e7fe      	b.n	81bf6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
   81bf8:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   81bfa:	69a0      	ldr	r0, [r4, #24]
   81bfc:	2800      	cmp	r0, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81bfe:	bfa4      	itt	ge
   81c00:	f1c2 0205 	rsbge	r2, r2, #5
   81c04:	61a2      	strge	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   81c06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81c0a:	4a16      	ldr	r2, [pc, #88]	; (81c64 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   81c0c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   81c10:	6962      	ldr	r2, [r4, #20]
   81c12:	428a      	cmp	r2, r1
   81c14:	d1e2      	bne.n	81bdc <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81c16:	1d25      	adds	r5, r4, #4
   81c18:	4628      	mov	r0, r5
   81c1a:	4b13      	ldr	r3, [pc, #76]	; (81c68 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
   81c1c:	4798      	blx	r3
   81c1e:	b968      	cbnz	r0, 81c3c <vTaskPriorityDisinheritAfterTimeout+0x90>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81c20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81c22:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81c26:	009b      	lsls	r3, r3, #2
   81c28:	4a0e      	ldr	r2, [pc, #56]	; (81c64 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   81c2a:	58d3      	ldr	r3, [r2, r3]
   81c2c:	b933      	cbnz	r3, 81c3c <vTaskPriorityDisinheritAfterTimeout+0x90>
   81c2e:	480f      	ldr	r0, [pc, #60]	; (81c6c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
   81c30:	6803      	ldr	r3, [r0, #0]
   81c32:	2201      	movs	r2, #1
   81c34:	408a      	lsls	r2, r1
   81c36:	ea23 0302 	bic.w	r3, r3, r2
   81c3a:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
   81c3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81c3e:	4a0b      	ldr	r2, [pc, #44]	; (81c6c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
   81c40:	6811      	ldr	r1, [r2, #0]
   81c42:	2301      	movs	r3, #1
   81c44:	4083      	lsls	r3, r0
   81c46:	430b      	orrs	r3, r1
   81c48:	6013      	str	r3, [r2, #0]
   81c4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c4e:	4629      	mov	r1, r5
   81c50:	4b04      	ldr	r3, [pc, #16]	; (81c64 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   81c52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81c56:	4b06      	ldr	r3, [pc, #24]	; (81c70 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
   81c58:	4798      	blx	r3
	}
   81c5a:	e7bf      	b.n	81bdc <vTaskPriorityDisinheritAfterTimeout+0x30>
   81c5c:	4770      	bx	lr
   81c5e:	bf00      	nop
   81c60:	2007c30c 	.word	0x2007c30c
   81c64:	2007c318 	.word	0x2007c318
   81c68:	000804f5 	.word	0x000804f5
   81c6c:	2007c390 	.word	0x2007c390
   81c70:	000804a9 	.word	0x000804a9

00081c74 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   81c74:	4b05      	ldr	r3, [pc, #20]	; (81c8c <pvTaskIncrementMutexHeldCount+0x18>)
   81c76:	681b      	ldr	r3, [r3, #0]
   81c78:	b123      	cbz	r3, 81c84 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
   81c7a:	4b04      	ldr	r3, [pc, #16]	; (81c8c <pvTaskIncrementMutexHeldCount+0x18>)
   81c7c:	681a      	ldr	r2, [r3, #0]
   81c7e:	6d53      	ldr	r3, [r2, #84]	; 0x54
   81c80:	3301      	adds	r3, #1
   81c82:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
   81c84:	4b01      	ldr	r3, [pc, #4]	; (81c8c <pvTaskIncrementMutexHeldCount+0x18>)
   81c86:	6818      	ldr	r0, [r3, #0]
	}
   81c88:	4770      	bx	lr
   81c8a:	bf00      	nop
   81c8c:	2007c30c 	.word	0x2007c30c

00081c90 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   81c90:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81c92:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81c94:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81c96:	4291      	cmp	r1, r2
   81c98:	d80c      	bhi.n	81cb4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81c9a:	1ad2      	subs	r2, r2, r3
   81c9c:	6983      	ldr	r3, [r0, #24]
   81c9e:	429a      	cmp	r2, r3
   81ca0:	d301      	bcc.n	81ca6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81ca2:	2001      	movs	r0, #1
   81ca4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81ca6:	1d01      	adds	r1, r0, #4
   81ca8:	4b09      	ldr	r3, [pc, #36]	; (81cd0 <prvInsertTimerInActiveList+0x40>)
   81caa:	6818      	ldr	r0, [r3, #0]
   81cac:	4b09      	ldr	r3, [pc, #36]	; (81cd4 <prvInsertTimerInActiveList+0x44>)
   81cae:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81cb0:	2000      	movs	r0, #0
   81cb2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81cb4:	429a      	cmp	r2, r3
   81cb6:	d201      	bcs.n	81cbc <prvInsertTimerInActiveList+0x2c>
   81cb8:	4299      	cmp	r1, r3
   81cba:	d206      	bcs.n	81cca <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81cbc:	1d01      	adds	r1, r0, #4
   81cbe:	4b06      	ldr	r3, [pc, #24]	; (81cd8 <prvInsertTimerInActiveList+0x48>)
   81cc0:	6818      	ldr	r0, [r3, #0]
   81cc2:	4b04      	ldr	r3, [pc, #16]	; (81cd4 <prvInsertTimerInActiveList+0x44>)
   81cc4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81cc6:	2000      	movs	r0, #0
   81cc8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   81cca:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   81ccc:	bd08      	pop	{r3, pc}
   81cce:	bf00      	nop
   81cd0:	2007c414 	.word	0x2007c414
   81cd4:	000804c1 	.word	0x000804c1
   81cd8:	2007c410 	.word	0x2007c410

00081cdc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81cdc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81cde:	4b10      	ldr	r3, [pc, #64]	; (81d20 <prvCheckForValidListAndQueue+0x44>)
   81ce0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81ce2:	4b10      	ldr	r3, [pc, #64]	; (81d24 <prvCheckForValidListAndQueue+0x48>)
   81ce4:	681b      	ldr	r3, [r3, #0]
   81ce6:	b113      	cbz	r3, 81cee <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   81ce8:	4b0f      	ldr	r3, [pc, #60]	; (81d28 <prvCheckForValidListAndQueue+0x4c>)
   81cea:	4798      	blx	r3
   81cec:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   81cee:	4d0f      	ldr	r5, [pc, #60]	; (81d2c <prvCheckForValidListAndQueue+0x50>)
   81cf0:	4628      	mov	r0, r5
   81cf2:	4e0f      	ldr	r6, [pc, #60]	; (81d30 <prvCheckForValidListAndQueue+0x54>)
   81cf4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81cf6:	4c0f      	ldr	r4, [pc, #60]	; (81d34 <prvCheckForValidListAndQueue+0x58>)
   81cf8:	4620      	mov	r0, r4
   81cfa:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81cfc:	4b0e      	ldr	r3, [pc, #56]	; (81d38 <prvCheckForValidListAndQueue+0x5c>)
   81cfe:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81d00:	4b0e      	ldr	r3, [pc, #56]	; (81d3c <prvCheckForValidListAndQueue+0x60>)
   81d02:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   81d04:	2200      	movs	r2, #0
   81d06:	2110      	movs	r1, #16
   81d08:	2005      	movs	r0, #5
   81d0a:	4b0d      	ldr	r3, [pc, #52]	; (81d40 <prvCheckForValidListAndQueue+0x64>)
   81d0c:	4798      	blx	r3
   81d0e:	4b05      	ldr	r3, [pc, #20]	; (81d24 <prvCheckForValidListAndQueue+0x48>)
   81d10:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   81d12:	2800      	cmp	r0, #0
   81d14:	d0e8      	beq.n	81ce8 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   81d16:	490b      	ldr	r1, [pc, #44]	; (81d44 <prvCheckForValidListAndQueue+0x68>)
   81d18:	4b0b      	ldr	r3, [pc, #44]	; (81d48 <prvCheckForValidListAndQueue+0x6c>)
   81d1a:	4798      	blx	r3
   81d1c:	e7e4      	b.n	81ce8 <prvCheckForValidListAndQueue+0xc>
   81d1e:	bf00      	nop
   81d20:	000805c9 	.word	0x000805c9
   81d24:	2007c444 	.word	0x2007c444
   81d28:	0008060d 	.word	0x0008060d
   81d2c:	2007c418 	.word	0x2007c418
   81d30:	0008048d 	.word	0x0008048d
   81d34:	2007c42c 	.word	0x2007c42c
   81d38:	2007c410 	.word	0x2007c410
   81d3c:	2007c414 	.word	0x2007c414
   81d40:	00080a7d 	.word	0x00080a7d
   81d44:	000856c0 	.word	0x000856c0
   81d48:	000810fd 	.word	0x000810fd

00081d4c <xTimerCreateTimerTask>:
{
   81d4c:	b510      	push	{r4, lr}
   81d4e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   81d50:	4b0d      	ldr	r3, [pc, #52]	; (81d88 <xTimerCreateTimerTask+0x3c>)
   81d52:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81d54:	4b0d      	ldr	r3, [pc, #52]	; (81d8c <xTimerCreateTimerTask+0x40>)
   81d56:	681b      	ldr	r3, [r3, #0]
   81d58:	b16b      	cbz	r3, 81d76 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
   81d5a:	4b0d      	ldr	r3, [pc, #52]	; (81d90 <xTimerCreateTimerTask+0x44>)
   81d5c:	9301      	str	r3, [sp, #4]
   81d5e:	2304      	movs	r3, #4
   81d60:	9300      	str	r3, [sp, #0]
   81d62:	2300      	movs	r3, #0
   81d64:	f44f 7282 	mov.w	r2, #260	; 0x104
   81d68:	490a      	ldr	r1, [pc, #40]	; (81d94 <xTimerCreateTimerTask+0x48>)
   81d6a:	480b      	ldr	r0, [pc, #44]	; (81d98 <xTimerCreateTimerTask+0x4c>)
   81d6c:	4c0b      	ldr	r4, [pc, #44]	; (81d9c <xTimerCreateTimerTask+0x50>)
   81d6e:	47a0      	blx	r4
	configASSERT( xReturn );
   81d70:	b108      	cbz	r0, 81d76 <xTimerCreateTimerTask+0x2a>
}
   81d72:	b002      	add	sp, #8
   81d74:	bd10      	pop	{r4, pc}
   81d76:	f04f 0340 	mov.w	r3, #64	; 0x40
   81d7a:	f383 8811 	msr	BASEPRI, r3
   81d7e:	f3bf 8f6f 	isb	sy
   81d82:	f3bf 8f4f 	dsb	sy
   81d86:	e7fe      	b.n	81d86 <xTimerCreateTimerTask+0x3a>
   81d88:	00081cdd 	.word	0x00081cdd
   81d8c:	2007c444 	.word	0x2007c444
   81d90:	2007c448 	.word	0x2007c448
   81d94:	000856c8 	.word	0x000856c8
   81d98:	00081ec1 	.word	0x00081ec1
   81d9c:	000812dd 	.word	0x000812dd

00081da0 <xTimerGenericCommand>:
	configASSERT( xTimer );
   81da0:	b1d8      	cbz	r0, 81dda <xTimerGenericCommand+0x3a>
{
   81da2:	b530      	push	{r4, r5, lr}
   81da4:	b085      	sub	sp, #20
   81da6:	4615      	mov	r5, r2
   81da8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
   81daa:	4a14      	ldr	r2, [pc, #80]	; (81dfc <xTimerGenericCommand+0x5c>)
   81dac:	6810      	ldr	r0, [r2, #0]
   81dae:	b310      	cbz	r0, 81df6 <xTimerGenericCommand+0x56>
   81db0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
   81db2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   81db4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   81db6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   81db8:	2905      	cmp	r1, #5
   81dba:	dc17      	bgt.n	81dec <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81dbc:	4b10      	ldr	r3, [pc, #64]	; (81e00 <xTimerGenericCommand+0x60>)
   81dbe:	4798      	blx	r3
   81dc0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   81dc2:	f04f 0300 	mov.w	r3, #0
   81dc6:	bf0c      	ite	eq
   81dc8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81dca:	461a      	movne	r2, r3
   81dcc:	4669      	mov	r1, sp
   81dce:	480b      	ldr	r0, [pc, #44]	; (81dfc <xTimerGenericCommand+0x5c>)
   81dd0:	6800      	ldr	r0, [r0, #0]
   81dd2:	4c0c      	ldr	r4, [pc, #48]	; (81e04 <xTimerGenericCommand+0x64>)
   81dd4:	47a0      	blx	r4
}
   81dd6:	b005      	add	sp, #20
   81dd8:	bd30      	pop	{r4, r5, pc}
   81dda:	f04f 0340 	mov.w	r3, #64	; 0x40
   81dde:	f383 8811 	msr	BASEPRI, r3
   81de2:	f3bf 8f6f 	isb	sy
   81de6:	f3bf 8f4f 	dsb	sy
   81dea:	e7fe      	b.n	81dea <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81dec:	2300      	movs	r3, #0
   81dee:	4669      	mov	r1, sp
   81df0:	4c05      	ldr	r4, [pc, #20]	; (81e08 <xTimerGenericCommand+0x68>)
   81df2:	47a0      	blx	r4
   81df4:	e7ef      	b.n	81dd6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
   81df6:	2000      	movs	r0, #0
	return xReturn;
   81df8:	e7ed      	b.n	81dd6 <xTimerGenericCommand+0x36>
   81dfa:	bf00      	nop
   81dfc:	2007c444 	.word	0x2007c444
   81e00:	00081a11 	.word	0x00081a11
   81e04:	00080ad1 	.word	0x00080ad1
   81e08:	00080cb1 	.word	0x00080cb1

00081e0c <prvSampleTimeNow>:
{
   81e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e10:	b082      	sub	sp, #8
   81e12:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   81e14:	4b23      	ldr	r3, [pc, #140]	; (81ea4 <prvSampleTimeNow+0x98>)
   81e16:	4798      	blx	r3
   81e18:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   81e1a:	4b23      	ldr	r3, [pc, #140]	; (81ea8 <prvSampleTimeNow+0x9c>)
   81e1c:	681b      	ldr	r3, [r3, #0]
   81e1e:	4298      	cmp	r0, r3
   81e20:	d319      	bcc.n	81e56 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
   81e22:	2300      	movs	r3, #0
   81e24:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   81e28:	4b1f      	ldr	r3, [pc, #124]	; (81ea8 <prvSampleTimeNow+0x9c>)
   81e2a:	601f      	str	r7, [r3, #0]
}
   81e2c:	4638      	mov	r0, r7
   81e2e:	b002      	add	sp, #8
   81e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81e34:	2100      	movs	r1, #0
   81e36:	9100      	str	r1, [sp, #0]
   81e38:	460b      	mov	r3, r1
   81e3a:	4652      	mov	r2, sl
   81e3c:	4620      	mov	r0, r4
   81e3e:	4c1b      	ldr	r4, [pc, #108]	; (81eac <prvSampleTimeNow+0xa0>)
   81e40:	47a0      	blx	r4
				configASSERT( xResult );
   81e42:	b950      	cbnz	r0, 81e5a <prvSampleTimeNow+0x4e>
   81e44:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e48:	f383 8811 	msr	BASEPRI, r3
   81e4c:	f3bf 8f6f 	isb	sy
   81e50:	f3bf 8f4f 	dsb	sy
   81e54:	e7fe      	b.n	81e54 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e56:	4d16      	ldr	r5, [pc, #88]	; (81eb0 <prvSampleTimeNow+0xa4>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81e58:	4e16      	ldr	r6, [pc, #88]	; (81eb4 <prvSampleTimeNow+0xa8>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e5a:	682b      	ldr	r3, [r5, #0]
   81e5c:	681a      	ldr	r2, [r3, #0]
   81e5e:	b1c2      	cbz	r2, 81e92 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e60:	68db      	ldr	r3, [r3, #12]
   81e62:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e66:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81e68:	f104 0904 	add.w	r9, r4, #4
   81e6c:	4648      	mov	r0, r9
   81e6e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81e72:	4620      	mov	r0, r4
   81e74:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81e76:	69e3      	ldr	r3, [r4, #28]
   81e78:	2b01      	cmp	r3, #1
   81e7a:	d1ee      	bne.n	81e5a <prvSampleTimeNow+0x4e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81e7c:	69a3      	ldr	r3, [r4, #24]
   81e7e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81e80:	459a      	cmp	sl, r3
   81e82:	d2d7      	bcs.n	81e34 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81e84:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81e86:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81e88:	4649      	mov	r1, r9
   81e8a:	6828      	ldr	r0, [r5, #0]
   81e8c:	4b0a      	ldr	r3, [pc, #40]	; (81eb8 <prvSampleTimeNow+0xac>)
   81e8e:	4798      	blx	r3
   81e90:	e7e3      	b.n	81e5a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList = pxOverflowTimerList;
   81e92:	4a0a      	ldr	r2, [pc, #40]	; (81ebc <prvSampleTimeNow+0xb0>)
   81e94:	6810      	ldr	r0, [r2, #0]
   81e96:	4906      	ldr	r1, [pc, #24]	; (81eb0 <prvSampleTimeNow+0xa4>)
   81e98:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81e9a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81e9c:	2301      	movs	r3, #1
   81e9e:	f8c8 3000 	str.w	r3, [r8]
   81ea2:	e7c1      	b.n	81e28 <prvSampleTimeNow+0x1c>
   81ea4:	0008156d 	.word	0x0008156d
   81ea8:	2007c440 	.word	0x2007c440
   81eac:	00081da1 	.word	0x00081da1
   81eb0:	2007c410 	.word	0x2007c410
   81eb4:	000804f5 	.word	0x000804f5
   81eb8:	000804c1 	.word	0x000804c1
   81ebc:	2007c414 	.word	0x2007c414

00081ec0 <prvTimerTask>:
{
   81ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ec4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81ec6:	4e70      	ldr	r6, [pc, #448]	; (82088 <prvTimerTask+0x1c8>)
			( void ) xTaskResumeAll();
   81ec8:	4f70      	ldr	r7, [pc, #448]	; (8208c <prvTimerTask+0x1cc>)
					portYIELD_WITHIN_API();
   81eca:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 820b4 <prvTimerTask+0x1f4>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81ece:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 820b8 <prvTimerTask+0x1f8>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81ed2:	6833      	ldr	r3, [r6, #0]
   81ed4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81ed6:	b172      	cbz	r2, 81ef6 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ed8:	68db      	ldr	r3, [r3, #12]
   81eda:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   81edc:	4b6c      	ldr	r3, [pc, #432]	; (82090 <prvTimerTask+0x1d0>)
   81ede:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ee0:	a804      	add	r0, sp, #16
   81ee2:	4b6c      	ldr	r3, [pc, #432]	; (82094 <prvTimerTask+0x1d4>)
   81ee4:	4798      	blx	r3
   81ee6:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81ee8:	9b04      	ldr	r3, [sp, #16]
   81eea:	2b00      	cmp	r3, #0
   81eec:	d152      	bne.n	81f94 <prvTimerTask+0xd4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81eee:	42a0      	cmp	r0, r4
   81ef0:	d223      	bcs.n	81f3a <prvTimerTask+0x7a>
   81ef2:	2200      	movs	r2, #0
   81ef4:	e00f      	b.n	81f16 <prvTimerTask+0x56>
	vTaskSuspendAll();
   81ef6:	4b66      	ldr	r3, [pc, #408]	; (82090 <prvTimerTask+0x1d0>)
   81ef8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81efa:	a804      	add	r0, sp, #16
   81efc:	4b65      	ldr	r3, [pc, #404]	; (82094 <prvTimerTask+0x1d4>)
   81efe:	4798      	blx	r3
   81f00:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81f02:	9b04      	ldr	r3, [sp, #16]
   81f04:	2b00      	cmp	r3, #0
   81f06:	d145      	bne.n	81f94 <prvTimerTask+0xd4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   81f08:	4b63      	ldr	r3, [pc, #396]	; (82098 <prvTimerTask+0x1d8>)
   81f0a:	681b      	ldr	r3, [r3, #0]
   81f0c:	681a      	ldr	r2, [r3, #0]
   81f0e:	fab2 f282 	clz	r2, r2
   81f12:	0952      	lsrs	r2, r2, #5
   81f14:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   81f16:	1b61      	subs	r1, r4, r5
   81f18:	4b60      	ldr	r3, [pc, #384]	; (8209c <prvTimerTask+0x1dc>)
   81f1a:	6818      	ldr	r0, [r3, #0]
   81f1c:	4b60      	ldr	r3, [pc, #384]	; (820a0 <prvTimerTask+0x1e0>)
   81f1e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81f20:	47b8      	blx	r7
   81f22:	b938      	cbnz	r0, 81f34 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
   81f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81f28:	f8c9 3000 	str.w	r3, [r9]
   81f2c:	f3bf 8f4f 	dsb	sy
   81f30:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81f34:	4d59      	ldr	r5, [pc, #356]	; (8209c <prvTimerTask+0x1dc>)
   81f36:	4c5b      	ldr	r4, [pc, #364]	; (820a4 <prvTimerTask+0x1e4>)
   81f38:	e035      	b.n	81fa6 <prvTimerTask+0xe6>
				( void ) xTaskResumeAll();
   81f3a:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f3c:	6833      	ldr	r3, [r6, #0]
   81f3e:	68db      	ldr	r3, [r3, #12]
   81f40:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f44:	f10a 0004 	add.w	r0, sl, #4
   81f48:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81f4a:	f8da 301c 	ldr.w	r3, [sl, #28]
   81f4e:	2b01      	cmp	r3, #1
   81f50:	d004      	beq.n	81f5c <prvTimerTask+0x9c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81f52:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   81f56:	4650      	mov	r0, sl
   81f58:	4798      	blx	r3
   81f5a:	e7eb      	b.n	81f34 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   81f5c:	f8da 1018 	ldr.w	r1, [sl, #24]
   81f60:	4623      	mov	r3, r4
   81f62:	462a      	mov	r2, r5
   81f64:	4421      	add	r1, r4
   81f66:	4650      	mov	r0, sl
   81f68:	4d4f      	ldr	r5, [pc, #316]	; (820a8 <prvTimerTask+0x1e8>)
   81f6a:	47a8      	blx	r5
   81f6c:	2800      	cmp	r0, #0
   81f6e:	d0f0      	beq.n	81f52 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81f70:	2100      	movs	r1, #0
   81f72:	9100      	str	r1, [sp, #0]
   81f74:	460b      	mov	r3, r1
   81f76:	4622      	mov	r2, r4
   81f78:	4650      	mov	r0, sl
   81f7a:	4c4c      	ldr	r4, [pc, #304]	; (820ac <prvTimerTask+0x1ec>)
   81f7c:	47a0      	blx	r4
			configASSERT( xResult );
   81f7e:	2800      	cmp	r0, #0
   81f80:	d1e7      	bne.n	81f52 <prvTimerTask+0x92>
   81f82:	f04f 0340 	mov.w	r3, #64	; 0x40
   81f86:	f383 8811 	msr	BASEPRI, r3
   81f8a:	f3bf 8f6f 	isb	sy
   81f8e:	f3bf 8f4f 	dsb	sy
   81f92:	e7fe      	b.n	81f92 <prvTimerTask+0xd2>
			( void ) xTaskResumeAll();
   81f94:	47b8      	blx	r7
   81f96:	e7cd      	b.n	81f34 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   81f98:	9907      	ldr	r1, [sp, #28]
   81f9a:	9806      	ldr	r0, [sp, #24]
   81f9c:	9b05      	ldr	r3, [sp, #20]
   81f9e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   81fa0:	9b04      	ldr	r3, [sp, #16]
   81fa2:	2b00      	cmp	r3, #0
   81fa4:	da08      	bge.n	81fb8 <prvTimerTask+0xf8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81fa6:	2200      	movs	r2, #0
   81fa8:	a904      	add	r1, sp, #16
   81faa:	6828      	ldr	r0, [r5, #0]
   81fac:	47a0      	blx	r4
   81fae:	2800      	cmp	r0, #0
   81fb0:	d08f      	beq.n	81ed2 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   81fb2:	9b04      	ldr	r3, [sp, #16]
   81fb4:	2b00      	cmp	r3, #0
   81fb6:	dbef      	blt.n	81f98 <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   81fb8:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   81fbc:	f8da 3014 	ldr.w	r3, [sl, #20]
   81fc0:	b113      	cbz	r3, 81fc8 <prvTimerTask+0x108>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81fc2:	f10a 0004 	add.w	r0, sl, #4
   81fc6:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81fc8:	a803      	add	r0, sp, #12
   81fca:	4b32      	ldr	r3, [pc, #200]	; (82094 <prvTimerTask+0x1d4>)
   81fcc:	4798      	blx	r3
			switch( xMessage.xMessageID )
   81fce:	9b04      	ldr	r3, [sp, #16]
   81fd0:	2b09      	cmp	r3, #9
   81fd2:	d8e8      	bhi.n	81fa6 <prvTimerTask+0xe6>
   81fd4:	a201      	add	r2, pc, #4	; (adr r2, 81fdc <prvTimerTask+0x11c>)
   81fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81fda:	bf00      	nop
   81fdc:	00082005 	.word	0x00082005
   81fe0:	00082005 	.word	0x00082005
   81fe4:	00082005 	.word	0x00082005
   81fe8:	00081fa7 	.word	0x00081fa7
   81fec:	00082057 	.word	0x00082057
   81ff0:	0008207f 	.word	0x0008207f
   81ff4:	00082005 	.word	0x00082005
   81ff8:	00082005 	.word	0x00082005
   81ffc:	00081fa7 	.word	0x00081fa7
   82000:	00082057 	.word	0x00082057
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   82004:	9c05      	ldr	r4, [sp, #20]
   82006:	f8da 1018 	ldr.w	r1, [sl, #24]
   8200a:	4623      	mov	r3, r4
   8200c:	4602      	mov	r2, r0
   8200e:	4421      	add	r1, r4
   82010:	4650      	mov	r0, sl
   82012:	4c25      	ldr	r4, [pc, #148]	; (820a8 <prvTimerTask+0x1e8>)
   82014:	47a0      	blx	r4
   82016:	2800      	cmp	r0, #0
   82018:	d08d      	beq.n	81f36 <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8201a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   8201e:	4650      	mov	r0, sl
   82020:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   82022:	f8da 301c 	ldr.w	r3, [sl, #28]
   82026:	2b01      	cmp	r3, #1
   82028:	d185      	bne.n	81f36 <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8202a:	f8da 2018 	ldr.w	r2, [sl, #24]
   8202e:	2100      	movs	r1, #0
   82030:	9100      	str	r1, [sp, #0]
   82032:	460b      	mov	r3, r1
   82034:	9805      	ldr	r0, [sp, #20]
   82036:	4402      	add	r2, r0
   82038:	4650      	mov	r0, sl
   8203a:	4c1c      	ldr	r4, [pc, #112]	; (820ac <prvTimerTask+0x1ec>)
   8203c:	47a0      	blx	r4
							configASSERT( xResult );
   8203e:	2800      	cmp	r0, #0
   82040:	f47f af79 	bne.w	81f36 <prvTimerTask+0x76>
   82044:	f04f 0340 	mov.w	r3, #64	; 0x40
   82048:	f383 8811 	msr	BASEPRI, r3
   8204c:	f3bf 8f6f 	isb	sy
   82050:	f3bf 8f4f 	dsb	sy
   82054:	e7fe      	b.n	82054 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   82056:	9905      	ldr	r1, [sp, #20]
   82058:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8205c:	b131      	cbz	r1, 8206c <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8205e:	4603      	mov	r3, r0
   82060:	4602      	mov	r2, r0
   82062:	4401      	add	r1, r0
   82064:	4650      	mov	r0, sl
   82066:	4c10      	ldr	r4, [pc, #64]	; (820a8 <prvTimerTask+0x1e8>)
   82068:	47a0      	blx	r4
   8206a:	e764      	b.n	81f36 <prvTimerTask+0x76>
   8206c:	f04f 0340 	mov.w	r3, #64	; 0x40
   82070:	f383 8811 	msr	BASEPRI, r3
   82074:	f3bf 8f6f 	isb	sy
   82078:	f3bf 8f4f 	dsb	sy
   8207c:	e7fe      	b.n	8207c <prvTimerTask+0x1bc>
						vPortFree( pxTimer );
   8207e:	4650      	mov	r0, sl
   82080:	4b0b      	ldr	r3, [pc, #44]	; (820b0 <prvTimerTask+0x1f0>)
   82082:	4798      	blx	r3
   82084:	e757      	b.n	81f36 <prvTimerTask+0x76>
   82086:	bf00      	nop
   82088:	2007c410 	.word	0x2007c410
   8208c:	000816ad 	.word	0x000816ad
   82090:	0008155d 	.word	0x0008155d
   82094:	00081e0d 	.word	0x00081e0d
   82098:	2007c414 	.word	0x2007c414
   8209c:	2007c444 	.word	0x2007c444
   820a0:	0008112d 	.word	0x0008112d
   820a4:	00080d95 	.word	0x00080d95
   820a8:	00081c91 	.word	0x00081c91
   820ac:	00081da1 	.word	0x00081da1
   820b0:	00080875 	.word	0x00080875
   820b4:	e000ed04 	.word	0xe000ed04
   820b8:	000804f5 	.word	0x000804f5

000820bc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   820bc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   820be:	480e      	ldr	r0, [pc, #56]	; (820f8 <sysclk_init+0x3c>)
   820c0:	4b0e      	ldr	r3, [pc, #56]	; (820fc <sysclk_init+0x40>)
   820c2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   820c4:	213e      	movs	r1, #62	; 0x3e
   820c6:	2000      	movs	r0, #0
   820c8:	4b0d      	ldr	r3, [pc, #52]	; (82100 <sysclk_init+0x44>)
   820ca:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   820cc:	4c0d      	ldr	r4, [pc, #52]	; (82104 <sysclk_init+0x48>)
   820ce:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   820d0:	2800      	cmp	r0, #0
   820d2:	d0fc      	beq.n	820ce <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   820d4:	4b0c      	ldr	r3, [pc, #48]	; (82108 <sysclk_init+0x4c>)
   820d6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   820d8:	4a0c      	ldr	r2, [pc, #48]	; (8210c <sysclk_init+0x50>)
   820da:	4b0d      	ldr	r3, [pc, #52]	; (82110 <sysclk_init+0x54>)
   820dc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   820de:	4c0d      	ldr	r4, [pc, #52]	; (82114 <sysclk_init+0x58>)
   820e0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   820e2:	2800      	cmp	r0, #0
   820e4:	d0fc      	beq.n	820e0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   820e6:	2010      	movs	r0, #16
   820e8:	4b0b      	ldr	r3, [pc, #44]	; (82118 <sysclk_init+0x5c>)
   820ea:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   820ec:	4b0b      	ldr	r3, [pc, #44]	; (8211c <sysclk_init+0x60>)
   820ee:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   820f0:	4801      	ldr	r0, [pc, #4]	; (820f8 <sysclk_init+0x3c>)
   820f2:	4b02      	ldr	r3, [pc, #8]	; (820fc <sysclk_init+0x40>)
   820f4:	4798      	blx	r3
   820f6:	bd10      	pop	{r4, pc}
   820f8:	0501bd00 	.word	0x0501bd00
   820fc:	200700a5 	.word	0x200700a5
   82100:	000824b1 	.word	0x000824b1
   82104:	00082505 	.word	0x00082505
   82108:	00082515 	.word	0x00082515
   8210c:	200d3f01 	.word	0x200d3f01
   82110:	400e0600 	.word	0x400e0600
   82114:	00082525 	.word	0x00082525
   82118:	0008244d 	.word	0x0008244d
   8211c:	000825f1 	.word	0x000825f1

00082120 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82120:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82126:	4b16      	ldr	r3, [pc, #88]	; (82180 <board_init+0x60>)
   82128:	605a      	str	r2, [r3, #4]
   8212a:	200b      	movs	r0, #11
   8212c:	4c15      	ldr	r4, [pc, #84]	; (82184 <board_init+0x64>)
   8212e:	47a0      	blx	r4
   82130:	200c      	movs	r0, #12
   82132:	47a0      	blx	r4
   82134:	200d      	movs	r0, #13
   82136:	47a0      	blx	r4
   82138:	200e      	movs	r0, #14
   8213a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8213c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82140:	203b      	movs	r0, #59	; 0x3b
   82142:	4c11      	ldr	r4, [pc, #68]	; (82188 <board_init+0x68>)
   82144:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82146:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8214a:	2055      	movs	r0, #85	; 0x55
   8214c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8214e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82152:	2056      	movs	r0, #86	; 0x56
   82154:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82156:	490d      	ldr	r1, [pc, #52]	; (8218c <board_init+0x6c>)
   82158:	2068      	movs	r0, #104	; 0x68
   8215a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8215c:	490c      	ldr	r1, [pc, #48]	; (82190 <board_init+0x70>)
   8215e:	205c      	movs	r0, #92	; 0x5c
   82160:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82162:	4a0c      	ldr	r2, [pc, #48]	; (82194 <board_init+0x74>)
   82164:	f44f 7140 	mov.w	r1, #768	; 0x300
   82168:	480b      	ldr	r0, [pc, #44]	; (82198 <board_init+0x78>)
   8216a:	4b0c      	ldr	r3, [pc, #48]	; (8219c <board_init+0x7c>)
   8216c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8216e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82172:	202b      	movs	r0, #43	; 0x2b
   82174:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82176:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8217a:	202a      	movs	r0, #42	; 0x2a
   8217c:	47a0      	blx	r4
   8217e:	bd10      	pop	{r4, pc}
   82180:	400e1a50 	.word	0x400e1a50
   82184:	00082535 	.word	0x00082535
   82188:	00082241 	.word	0x00082241
   8218c:	28000079 	.word	0x28000079
   82190:	28000001 	.word	0x28000001
   82194:	08000001 	.word	0x08000001
   82198:	400e0e00 	.word	0x400e0e00
   8219c:	00082311 	.word	0x00082311

000821a0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   821a0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   821a2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   821a6:	d016      	beq.n	821d6 <pio_set_peripheral+0x36>
   821a8:	d80b      	bhi.n	821c2 <pio_set_peripheral+0x22>
   821aa:	b149      	cbz	r1, 821c0 <pio_set_peripheral+0x20>
   821ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   821b0:	d105      	bne.n	821be <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   821b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   821b4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   821b6:	400b      	ands	r3, r1
   821b8:	ea23 0302 	bic.w	r3, r3, r2
   821bc:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   821be:	6042      	str	r2, [r0, #4]
   821c0:	4770      	bx	lr
	switch (ul_type) {
   821c2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   821c6:	d0fb      	beq.n	821c0 <pio_set_peripheral+0x20>
   821c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   821cc:	d0f8      	beq.n	821c0 <pio_set_peripheral+0x20>
   821ce:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   821d2:	d1f4      	bne.n	821be <pio_set_peripheral+0x1e>
   821d4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   821d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   821d8:	4313      	orrs	r3, r2
   821da:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   821dc:	e7ef      	b.n	821be <pio_set_peripheral+0x1e>

000821de <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   821de:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   821e0:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   821e4:	bf14      	ite	ne
   821e6:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   821e8:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   821ea:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   821ee:	bf14      	ite	ne
   821f0:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   821f2:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   821f4:	f012 0f02 	tst.w	r2, #2
   821f8:	d107      	bne.n	8220a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   821fa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   821fe:	bf18      	it	ne
   82200:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82204:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82206:	6001      	str	r1, [r0, #0]
   82208:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8220a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8220e:	e7f9      	b.n	82204 <pio_set_input+0x26>

00082210 <pio_set_output>:
{
   82210:	b410      	push	{r4}
   82212:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82214:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82216:	b944      	cbnz	r4, 8222a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   82218:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8221a:	b143      	cbz	r3, 8222e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8221c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8221e:	b942      	cbnz	r2, 82232 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   82220:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   82222:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82224:	6001      	str	r1, [r0, #0]
}
   82226:	bc10      	pop	{r4}
   82228:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8222a:	6641      	str	r1, [r0, #100]	; 0x64
   8222c:	e7f5      	b.n	8221a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8222e:	6541      	str	r1, [r0, #84]	; 0x54
   82230:	e7f5      	b.n	8221e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   82232:	6301      	str	r1, [r0, #48]	; 0x30
   82234:	e7f5      	b.n	82222 <pio_set_output+0x12>

00082236 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82236:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82238:	4770      	bx	lr

0008223a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8223a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8223c:	4770      	bx	lr
	...

00082240 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82240:	b570      	push	{r4, r5, r6, lr}
   82242:	b082      	sub	sp, #8
   82244:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82246:	0943      	lsrs	r3, r0, #5
   82248:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8224c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82250:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82252:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82256:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8225a:	d031      	beq.n	822c0 <pio_configure_pin+0x80>
   8225c:	d816      	bhi.n	8228c <pio_configure_pin+0x4c>
   8225e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82262:	d01b      	beq.n	8229c <pio_configure_pin+0x5c>
   82264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82268:	d116      	bne.n	82298 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8226a:	f000 001f 	and.w	r0, r0, #31
   8226e:	2601      	movs	r6, #1
   82270:	4086      	lsls	r6, r0
   82272:	4632      	mov	r2, r6
   82274:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82278:	4620      	mov	r0, r4
   8227a:	4b22      	ldr	r3, [pc, #136]	; (82304 <pio_configure_pin+0xc4>)
   8227c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8227e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82282:	bf14      	ite	ne
   82284:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82286:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82288:	2001      	movs	r0, #1
   8228a:	e017      	b.n	822bc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8228c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82290:	d021      	beq.n	822d6 <pio_configure_pin+0x96>
   82292:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82296:	d01e      	beq.n	822d6 <pio_configure_pin+0x96>
		return 0;
   82298:	2000      	movs	r0, #0
   8229a:	e00f      	b.n	822bc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8229c:	f000 001f 	and.w	r0, r0, #31
   822a0:	2601      	movs	r6, #1
   822a2:	4086      	lsls	r6, r0
   822a4:	4632      	mov	r2, r6
   822a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   822aa:	4620      	mov	r0, r4
   822ac:	4b15      	ldr	r3, [pc, #84]	; (82304 <pio_configure_pin+0xc4>)
   822ae:	4798      	blx	r3
	if (ul_pull_up_enable) {
   822b0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822b4:	bf14      	ite	ne
   822b6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   822b8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   822ba:	2001      	movs	r0, #1
}
   822bc:	b002      	add	sp, #8
   822be:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   822c0:	f000 011f 	and.w	r1, r0, #31
   822c4:	2601      	movs	r6, #1
   822c6:	462a      	mov	r2, r5
   822c8:	fa06 f101 	lsl.w	r1, r6, r1
   822cc:	4620      	mov	r0, r4
   822ce:	4b0e      	ldr	r3, [pc, #56]	; (82308 <pio_configure_pin+0xc8>)
   822d0:	4798      	blx	r3
	return 1;
   822d2:	4630      	mov	r0, r6
		break;
   822d4:	e7f2      	b.n	822bc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   822d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822da:	f000 011f 	and.w	r1, r0, #31
   822de:	2601      	movs	r6, #1
   822e0:	ea05 0306 	and.w	r3, r5, r6
   822e4:	9300      	str	r3, [sp, #0]
   822e6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   822ea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   822ee:	bf14      	ite	ne
   822f0:	2200      	movne	r2, #0
   822f2:	2201      	moveq	r2, #1
   822f4:	fa06 f101 	lsl.w	r1, r6, r1
   822f8:	4620      	mov	r0, r4
   822fa:	4c04      	ldr	r4, [pc, #16]	; (8230c <pio_configure_pin+0xcc>)
   822fc:	47a0      	blx	r4
	return 1;
   822fe:	4630      	mov	r0, r6
		break;
   82300:	e7dc      	b.n	822bc <pio_configure_pin+0x7c>
   82302:	bf00      	nop
   82304:	000821a1 	.word	0x000821a1
   82308:	000821df 	.word	0x000821df
   8230c:	00082211 	.word	0x00082211

00082310 <pio_configure_pin_group>:
{
   82310:	b570      	push	{r4, r5, r6, lr}
   82312:	b082      	sub	sp, #8
   82314:	4605      	mov	r5, r0
   82316:	460e      	mov	r6, r1
   82318:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8231a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8231e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82322:	d027      	beq.n	82374 <pio_configure_pin_group+0x64>
   82324:	d811      	bhi.n	8234a <pio_configure_pin_group+0x3a>
   82326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8232a:	d016      	beq.n	8235a <pio_configure_pin_group+0x4a>
   8232c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82330:	d111      	bne.n	82356 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82332:	460a      	mov	r2, r1
   82334:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82338:	4b19      	ldr	r3, [pc, #100]	; (823a0 <pio_configure_pin_group+0x90>)
   8233a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8233c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82340:	bf14      	ite	ne
   82342:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82344:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82346:	2001      	movs	r0, #1
   82348:	e012      	b.n	82370 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8234a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8234e:	d015      	beq.n	8237c <pio_configure_pin_group+0x6c>
   82350:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82354:	d012      	beq.n	8237c <pio_configure_pin_group+0x6c>
		return 0;
   82356:	2000      	movs	r0, #0
   82358:	e00a      	b.n	82370 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8235a:	460a      	mov	r2, r1
   8235c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82360:	4b0f      	ldr	r3, [pc, #60]	; (823a0 <pio_configure_pin_group+0x90>)
   82362:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82364:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82368:	bf14      	ite	ne
   8236a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8236c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8236e:	2001      	movs	r0, #1
}
   82370:	b002      	add	sp, #8
   82372:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82374:	4b0b      	ldr	r3, [pc, #44]	; (823a4 <pio_configure_pin_group+0x94>)
   82376:	4798      	blx	r3
	return 1;
   82378:	2001      	movs	r0, #1
		break;
   8237a:	e7f9      	b.n	82370 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8237c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82380:	f004 0301 	and.w	r3, r4, #1
   82384:	9300      	str	r3, [sp, #0]
   82386:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8238a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8238e:	bf14      	ite	ne
   82390:	2200      	movne	r2, #0
   82392:	2201      	moveq	r2, #1
   82394:	4631      	mov	r1, r6
   82396:	4628      	mov	r0, r5
   82398:	4c03      	ldr	r4, [pc, #12]	; (823a8 <pio_configure_pin_group+0x98>)
   8239a:	47a0      	blx	r4
	return 1;
   8239c:	2001      	movs	r0, #1
		break;
   8239e:	e7e7      	b.n	82370 <pio_configure_pin_group+0x60>
   823a0:	000821a1 	.word	0x000821a1
   823a4:	000821df 	.word	0x000821df
   823a8:	00082211 	.word	0x00082211

000823ac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   823ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823b0:	4604      	mov	r4, r0
   823b2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   823b4:	4b0e      	ldr	r3, [pc, #56]	; (823f0 <pio_handler_process+0x44>)
   823b6:	4798      	blx	r3
   823b8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   823ba:	4620      	mov	r0, r4
   823bc:	4b0d      	ldr	r3, [pc, #52]	; (823f4 <pio_handler_process+0x48>)
   823be:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   823c0:	4005      	ands	r5, r0
   823c2:	d013      	beq.n	823ec <pio_handler_process+0x40>
   823c4:	4c0c      	ldr	r4, [pc, #48]	; (823f8 <pio_handler_process+0x4c>)
   823c6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   823ca:	e003      	b.n	823d4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   823cc:	42b4      	cmp	r4, r6
   823ce:	d00d      	beq.n	823ec <pio_handler_process+0x40>
   823d0:	3410      	adds	r4, #16
		while (status != 0) {
   823d2:	b15d      	cbz	r5, 823ec <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   823d4:	6820      	ldr	r0, [r4, #0]
   823d6:	4540      	cmp	r0, r8
   823d8:	d1f8      	bne.n	823cc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   823da:	6861      	ldr	r1, [r4, #4]
   823dc:	4229      	tst	r1, r5
   823de:	d0f5      	beq.n	823cc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   823e0:	68e3      	ldr	r3, [r4, #12]
   823e2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   823e4:	6863      	ldr	r3, [r4, #4]
   823e6:	ea25 0503 	bic.w	r5, r5, r3
   823ea:	e7ef      	b.n	823cc <pio_handler_process+0x20>
   823ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823f0:	00082237 	.word	0x00082237
   823f4:	0008223b 	.word	0x0008223b
   823f8:	2007c44c 	.word	0x2007c44c

000823fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   823fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   823fe:	210b      	movs	r1, #11
   82400:	4801      	ldr	r0, [pc, #4]	; (82408 <PIOA_Handler+0xc>)
   82402:	4b02      	ldr	r3, [pc, #8]	; (8240c <PIOA_Handler+0x10>)
   82404:	4798      	blx	r3
   82406:	bd08      	pop	{r3, pc}
   82408:	400e0e00 	.word	0x400e0e00
   8240c:	000823ad 	.word	0x000823ad

00082410 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82410:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82412:	210c      	movs	r1, #12
   82414:	4801      	ldr	r0, [pc, #4]	; (8241c <PIOB_Handler+0xc>)
   82416:	4b02      	ldr	r3, [pc, #8]	; (82420 <PIOB_Handler+0x10>)
   82418:	4798      	blx	r3
   8241a:	bd08      	pop	{r3, pc}
   8241c:	400e1000 	.word	0x400e1000
   82420:	000823ad 	.word	0x000823ad

00082424 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82424:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82426:	210d      	movs	r1, #13
   82428:	4801      	ldr	r0, [pc, #4]	; (82430 <PIOC_Handler+0xc>)
   8242a:	4b02      	ldr	r3, [pc, #8]	; (82434 <PIOC_Handler+0x10>)
   8242c:	4798      	blx	r3
   8242e:	bd08      	pop	{r3, pc}
   82430:	400e1200 	.word	0x400e1200
   82434:	000823ad 	.word	0x000823ad

00082438 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82438:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8243a:	210e      	movs	r1, #14
   8243c:	4801      	ldr	r0, [pc, #4]	; (82444 <PIOD_Handler+0xc>)
   8243e:	4b02      	ldr	r3, [pc, #8]	; (82448 <PIOD_Handler+0x10>)
   82440:	4798      	blx	r3
   82442:	bd08      	pop	{r3, pc}
   82444:	400e1400 	.word	0x400e1400
   82448:	000823ad 	.word	0x000823ad

0008244c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8244c:	4a17      	ldr	r2, [pc, #92]	; (824ac <pmc_switch_mck_to_pllack+0x60>)
   8244e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82454:	4318      	orrs	r0, r3
   82456:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82458:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8245a:	f013 0f08 	tst.w	r3, #8
   8245e:	d10a      	bne.n	82476 <pmc_switch_mck_to_pllack+0x2a>
   82460:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82464:	4911      	ldr	r1, [pc, #68]	; (824ac <pmc_switch_mck_to_pllack+0x60>)
   82466:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82468:	f012 0f08 	tst.w	r2, #8
   8246c:	d103      	bne.n	82476 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8246e:	3b01      	subs	r3, #1
   82470:	d1f9      	bne.n	82466 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82472:	2001      	movs	r0, #1
   82474:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82476:	4a0d      	ldr	r2, [pc, #52]	; (824ac <pmc_switch_mck_to_pllack+0x60>)
   82478:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8247a:	f023 0303 	bic.w	r3, r3, #3
   8247e:	f043 0302 	orr.w	r3, r3, #2
   82482:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82484:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82486:	f013 0f08 	tst.w	r3, #8
   8248a:	d10a      	bne.n	824a2 <pmc_switch_mck_to_pllack+0x56>
   8248c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82490:	4906      	ldr	r1, [pc, #24]	; (824ac <pmc_switch_mck_to_pllack+0x60>)
   82492:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82494:	f012 0f08 	tst.w	r2, #8
   82498:	d105      	bne.n	824a6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8249a:	3b01      	subs	r3, #1
   8249c:	d1f9      	bne.n	82492 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8249e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   824a0:	4770      	bx	lr
	return 0;
   824a2:	2000      	movs	r0, #0
   824a4:	4770      	bx	lr
   824a6:	2000      	movs	r0, #0
   824a8:	4770      	bx	lr
   824aa:	bf00      	nop
   824ac:	400e0600 	.word	0x400e0600

000824b0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   824b0:	b9c8      	cbnz	r0, 824e6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824b2:	4a11      	ldr	r2, [pc, #68]	; (824f8 <pmc_switch_mainck_to_xtal+0x48>)
   824b4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   824b6:	0209      	lsls	r1, r1, #8
   824b8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   824ba:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824be:	f023 0303 	bic.w	r3, r3, #3
   824c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   824c6:	f043 0301 	orr.w	r3, r3, #1
   824ca:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824cc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   824ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
   824d0:	f013 0f01 	tst.w	r3, #1
   824d4:	d0fb      	beq.n	824ce <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   824d6:	4a08      	ldr	r2, [pc, #32]	; (824f8 <pmc_switch_mainck_to_xtal+0x48>)
   824d8:	6a13      	ldr	r3, [r2, #32]
   824da:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   824de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   824e2:	6213      	str	r3, [r2, #32]
   824e4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824e6:	4904      	ldr	r1, [pc, #16]	; (824f8 <pmc_switch_mainck_to_xtal+0x48>)
   824e8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   824ea:	4a04      	ldr	r2, [pc, #16]	; (824fc <pmc_switch_mainck_to_xtal+0x4c>)
   824ec:	401a      	ands	r2, r3
   824ee:	4b04      	ldr	r3, [pc, #16]	; (82500 <pmc_switch_mainck_to_xtal+0x50>)
   824f0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824f2:	620b      	str	r3, [r1, #32]
   824f4:	4770      	bx	lr
   824f6:	bf00      	nop
   824f8:	400e0600 	.word	0x400e0600
   824fc:	fec8fffc 	.word	0xfec8fffc
   82500:	01370002 	.word	0x01370002

00082504 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82504:	4b02      	ldr	r3, [pc, #8]	; (82510 <pmc_osc_is_ready_mainck+0xc>)
   82506:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82508:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8250c:	4770      	bx	lr
   8250e:	bf00      	nop
   82510:	400e0600 	.word	0x400e0600

00082514 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82514:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82518:	4b01      	ldr	r3, [pc, #4]	; (82520 <pmc_disable_pllack+0xc>)
   8251a:	629a      	str	r2, [r3, #40]	; 0x28
   8251c:	4770      	bx	lr
   8251e:	bf00      	nop
   82520:	400e0600 	.word	0x400e0600

00082524 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82524:	4b02      	ldr	r3, [pc, #8]	; (82530 <pmc_is_locked_pllack+0xc>)
   82526:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82528:	f000 0002 	and.w	r0, r0, #2
   8252c:	4770      	bx	lr
   8252e:	bf00      	nop
   82530:	400e0600 	.word	0x400e0600

00082534 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   82534:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82538:	4b05      	ldr	r3, [pc, #20]	; (82550 <pmc_enable_periph_clk+0x1c>)
   8253a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   8253e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   82542:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   82546:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   8254a:	2000      	movs	r0, #0
   8254c:	4770      	bx	lr
   8254e:	bf00      	nop
   82550:	400e0600 	.word	0x400e0600

00082554 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82554:	e7fe      	b.n	82554 <Dummy_Handler>
	...

00082558 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82558:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8255a:	4b1c      	ldr	r3, [pc, #112]	; (825cc <Reset_Handler+0x74>)
   8255c:	4a1c      	ldr	r2, [pc, #112]	; (825d0 <Reset_Handler+0x78>)
   8255e:	429a      	cmp	r2, r3
   82560:	d010      	beq.n	82584 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   82562:	4b1c      	ldr	r3, [pc, #112]	; (825d4 <Reset_Handler+0x7c>)
   82564:	4a19      	ldr	r2, [pc, #100]	; (825cc <Reset_Handler+0x74>)
   82566:	429a      	cmp	r2, r3
   82568:	d20c      	bcs.n	82584 <Reset_Handler+0x2c>
   8256a:	3b01      	subs	r3, #1
   8256c:	1a9b      	subs	r3, r3, r2
   8256e:	f023 0303 	bic.w	r3, r3, #3
   82572:	3304      	adds	r3, #4
   82574:	4413      	add	r3, r2
   82576:	4916      	ldr	r1, [pc, #88]	; (825d0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82578:	f851 0b04 	ldr.w	r0, [r1], #4
   8257c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82580:	429a      	cmp	r2, r3
   82582:	d1f9      	bne.n	82578 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82584:	4b14      	ldr	r3, [pc, #80]	; (825d8 <Reset_Handler+0x80>)
   82586:	4a15      	ldr	r2, [pc, #84]	; (825dc <Reset_Handler+0x84>)
   82588:	429a      	cmp	r2, r3
   8258a:	d20a      	bcs.n	825a2 <Reset_Handler+0x4a>
   8258c:	3b01      	subs	r3, #1
   8258e:	1a9b      	subs	r3, r3, r2
   82590:	f023 0303 	bic.w	r3, r3, #3
   82594:	3304      	adds	r3, #4
   82596:	4413      	add	r3, r2
		*pDest++ = 0;
   82598:	2100      	movs	r1, #0
   8259a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8259e:	4293      	cmp	r3, r2
   825a0:	d1fb      	bne.n	8259a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   825a2:	4b0f      	ldr	r3, [pc, #60]	; (825e0 <Reset_Handler+0x88>)
   825a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   825a8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   825ac:	490d      	ldr	r1, [pc, #52]	; (825e4 <Reset_Handler+0x8c>)
   825ae:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   825b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   825b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   825b8:	d203      	bcs.n	825c2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   825ba:	688b      	ldr	r3, [r1, #8]
   825bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   825c0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   825c2:	4b09      	ldr	r3, [pc, #36]	; (825e8 <Reset_Handler+0x90>)
   825c4:	4798      	blx	r3

	/* Branch to main function */
	main();
   825c6:	4b09      	ldr	r3, [pc, #36]	; (825ec <Reset_Handler+0x94>)
   825c8:	4798      	blx	r3
   825ca:	e7fe      	b.n	825ca <Reset_Handler+0x72>
   825cc:	20070000 	.word	0x20070000
   825d0:	000858b0 	.word	0x000858b0
   825d4:	20070ae0 	.word	0x20070ae0
   825d8:	2007c56c 	.word	0x2007c56c
   825dc:	20070ae0 	.word	0x20070ae0
   825e0:	00080000 	.word	0x00080000
   825e4:	e000ed00 	.word	0xe000ed00
   825e8:	00082839 	.word	0x00082839
   825ec:	00082801 	.word	0x00082801

000825f0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   825f0:	4b3d      	ldr	r3, [pc, #244]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   825f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   825f4:	f003 0303 	and.w	r3, r3, #3
   825f8:	2b03      	cmp	r3, #3
   825fa:	d80e      	bhi.n	8261a <SystemCoreClockUpdate+0x2a>
   825fc:	e8df f003 	tbb	[pc, r3]
   82600:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82604:	4b39      	ldr	r3, [pc, #228]	; (826ec <SystemCoreClockUpdate+0xfc>)
   82606:	695b      	ldr	r3, [r3, #20]
   82608:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8260c:	bf14      	ite	ne
   8260e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82612:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82616:	4b36      	ldr	r3, [pc, #216]	; (826f0 <SystemCoreClockUpdate+0x100>)
   82618:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8261a:	4b33      	ldr	r3, [pc, #204]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   8261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8261e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82622:	2b70      	cmp	r3, #112	; 0x70
   82624:	d057      	beq.n	826d6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82626:	4b30      	ldr	r3, [pc, #192]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   82628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8262a:	4931      	ldr	r1, [pc, #196]	; (826f0 <SystemCoreClockUpdate+0x100>)
   8262c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82630:	680b      	ldr	r3, [r1, #0]
   82632:	40d3      	lsrs	r3, r2
   82634:	600b      	str	r3, [r1, #0]
   82636:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82638:	4b2b      	ldr	r3, [pc, #172]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   8263a:	6a1b      	ldr	r3, [r3, #32]
   8263c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82640:	d003      	beq.n	8264a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82642:	4a2c      	ldr	r2, [pc, #176]	; (826f4 <SystemCoreClockUpdate+0x104>)
   82644:	4b2a      	ldr	r3, [pc, #168]	; (826f0 <SystemCoreClockUpdate+0x100>)
   82646:	601a      	str	r2, [r3, #0]
   82648:	e7e7      	b.n	8261a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8264a:	4a2b      	ldr	r2, [pc, #172]	; (826f8 <SystemCoreClockUpdate+0x108>)
   8264c:	4b28      	ldr	r3, [pc, #160]	; (826f0 <SystemCoreClockUpdate+0x100>)
   8264e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82650:	4b25      	ldr	r3, [pc, #148]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   82652:	6a1b      	ldr	r3, [r3, #32]
   82654:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82658:	2b10      	cmp	r3, #16
   8265a:	d005      	beq.n	82668 <SystemCoreClockUpdate+0x78>
   8265c:	2b20      	cmp	r3, #32
   8265e:	d1dc      	bne.n	8261a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82660:	4a24      	ldr	r2, [pc, #144]	; (826f4 <SystemCoreClockUpdate+0x104>)
   82662:	4b23      	ldr	r3, [pc, #140]	; (826f0 <SystemCoreClockUpdate+0x100>)
   82664:	601a      	str	r2, [r3, #0]
				break;
   82666:	e7d8      	b.n	8261a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82668:	4a24      	ldr	r2, [pc, #144]	; (826fc <SystemCoreClockUpdate+0x10c>)
   8266a:	4b21      	ldr	r3, [pc, #132]	; (826f0 <SystemCoreClockUpdate+0x100>)
   8266c:	601a      	str	r2, [r3, #0]
				break;
   8266e:	e7d4      	b.n	8261a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82670:	4b1d      	ldr	r3, [pc, #116]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   82672:	6a1b      	ldr	r3, [r3, #32]
   82674:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82678:	d00c      	beq.n	82694 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8267a:	4a1e      	ldr	r2, [pc, #120]	; (826f4 <SystemCoreClockUpdate+0x104>)
   8267c:	4b1c      	ldr	r3, [pc, #112]	; (826f0 <SystemCoreClockUpdate+0x100>)
   8267e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82680:	4b19      	ldr	r3, [pc, #100]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   82682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82684:	f003 0303 	and.w	r3, r3, #3
   82688:	2b02      	cmp	r3, #2
   8268a:	d016      	beq.n	826ba <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8268c:	4a1c      	ldr	r2, [pc, #112]	; (82700 <SystemCoreClockUpdate+0x110>)
   8268e:	4b18      	ldr	r3, [pc, #96]	; (826f0 <SystemCoreClockUpdate+0x100>)
   82690:	601a      	str	r2, [r3, #0]
   82692:	e7c2      	b.n	8261a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82694:	4a18      	ldr	r2, [pc, #96]	; (826f8 <SystemCoreClockUpdate+0x108>)
   82696:	4b16      	ldr	r3, [pc, #88]	; (826f0 <SystemCoreClockUpdate+0x100>)
   82698:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8269a:	4b13      	ldr	r3, [pc, #76]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   8269c:	6a1b      	ldr	r3, [r3, #32]
   8269e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   826a2:	2b10      	cmp	r3, #16
   826a4:	d005      	beq.n	826b2 <SystemCoreClockUpdate+0xc2>
   826a6:	2b20      	cmp	r3, #32
   826a8:	d1ea      	bne.n	82680 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   826aa:	4a12      	ldr	r2, [pc, #72]	; (826f4 <SystemCoreClockUpdate+0x104>)
   826ac:	4b10      	ldr	r3, [pc, #64]	; (826f0 <SystemCoreClockUpdate+0x100>)
   826ae:	601a      	str	r2, [r3, #0]
				break;
   826b0:	e7e6      	b.n	82680 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   826b2:	4a12      	ldr	r2, [pc, #72]	; (826fc <SystemCoreClockUpdate+0x10c>)
   826b4:	4b0e      	ldr	r3, [pc, #56]	; (826f0 <SystemCoreClockUpdate+0x100>)
   826b6:	601a      	str	r2, [r3, #0]
				break;
   826b8:	e7e2      	b.n	82680 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826ba:	4a0b      	ldr	r2, [pc, #44]	; (826e8 <SystemCoreClockUpdate+0xf8>)
   826bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826be:	6a92      	ldr	r2, [r2, #40]	; 0x28
   826c0:	480b      	ldr	r0, [pc, #44]	; (826f0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826c2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   826c6:	6803      	ldr	r3, [r0, #0]
   826c8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826cc:	b2d2      	uxtb	r2, r2
   826ce:	fbb3 f3f2 	udiv	r3, r3, r2
   826d2:	6003      	str	r3, [r0, #0]
   826d4:	e7a1      	b.n	8261a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   826d6:	4a06      	ldr	r2, [pc, #24]	; (826f0 <SystemCoreClockUpdate+0x100>)
   826d8:	6813      	ldr	r3, [r2, #0]
   826da:	490a      	ldr	r1, [pc, #40]	; (82704 <SystemCoreClockUpdate+0x114>)
   826dc:	fba1 1303 	umull	r1, r3, r1, r3
   826e0:	085b      	lsrs	r3, r3, #1
   826e2:	6013      	str	r3, [r2, #0]
   826e4:	4770      	bx	lr
   826e6:	bf00      	nop
   826e8:	400e0600 	.word	0x400e0600
   826ec:	400e1a10 	.word	0x400e1a10
   826f0:	20070130 	.word	0x20070130
   826f4:	00b71b00 	.word	0x00b71b00
   826f8:	003d0900 	.word	0x003d0900
   826fc:	007a1200 	.word	0x007a1200
   82700:	0e4e1c00 	.word	0x0e4e1c00
   82704:	aaaaaaab 	.word	0xaaaaaaab

00082708 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82708:	4b0a      	ldr	r3, [pc, #40]	; (82734 <_sbrk+0x2c>)
   8270a:	681b      	ldr	r3, [r3, #0]
   8270c:	b153      	cbz	r3, 82724 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8270e:	4b09      	ldr	r3, [pc, #36]	; (82734 <_sbrk+0x2c>)
   82710:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82712:	181a      	adds	r2, r3, r0
   82714:	4908      	ldr	r1, [pc, #32]	; (82738 <_sbrk+0x30>)
   82716:	4291      	cmp	r1, r2
   82718:	db08      	blt.n	8272c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8271a:	4610      	mov	r0, r2
   8271c:	4a05      	ldr	r2, [pc, #20]	; (82734 <_sbrk+0x2c>)
   8271e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82720:	4618      	mov	r0, r3
   82722:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82724:	4a05      	ldr	r2, [pc, #20]	; (8273c <_sbrk+0x34>)
   82726:	4b03      	ldr	r3, [pc, #12]	; (82734 <_sbrk+0x2c>)
   82728:	601a      	str	r2, [r3, #0]
   8272a:	e7f0      	b.n	8270e <_sbrk+0x6>
		return (caddr_t) -1;	
   8272c:	f04f 30ff 	mov.w	r0, #4294967295
}
   82730:	4770      	bx	lr
   82732:	bf00      	nop
   82734:	2007c4bc 	.word	0x2007c4bc
   82738:	20087ffc 	.word	0x20087ffc
   8273c:	2007e570 	.word	0x2007e570

00082740 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82740:	f04f 30ff 	mov.w	r0, #4294967295
   82744:	4770      	bx	lr

00082746 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8274a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8274c:	2000      	movs	r0, #0
   8274e:	4770      	bx	lr

00082750 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82750:	2001      	movs	r0, #1
   82752:	4770      	bx	lr

00082754 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82754:	2000      	movs	r0, #0
   82756:	4770      	bx	lr

00082758 <writer1>:
#include <console_po.h>

#include <writer1.h>
#include <writer2.h>

void writer1 (){
   82758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(;;) {
		//xSemaphoreTake(xSemaphore,10);
		const char * str = "Vad bra! ";
		printfConsole(str);
   8275a:	4f06      	ldr	r7, [pc, #24]	; (82774 <writer1+0x1c>)
   8275c:	4e06      	ldr	r6, [pc, #24]	; (82778 <writer1+0x20>)
		xSemaphoreGive(xSemaphore);
   8275e:	4d07      	ldr	r5, [pc, #28]	; (8277c <writer1+0x24>)
		printfConsole(str);
   82760:	4638      	mov	r0, r7
   82762:	47b0      	blx	r6
		xSemaphoreGive(xSemaphore);
   82764:	2300      	movs	r3, #0
   82766:	461a      	mov	r2, r3
   82768:	4619      	mov	r1, r3
   8276a:	6828      	ldr	r0, [r5, #0]
   8276c:	4c04      	ldr	r4, [pc, #16]	; (82780 <writer1+0x28>)
   8276e:	47a0      	blx	r4
   82770:	e7f6      	b.n	82760 <writer1+0x8>
   82772:	bf00      	nop
   82774:	000856e8 	.word	0x000856e8
   82778:	00080361 	.word	0x00080361
   8277c:	2007c500 	.word	0x2007c500
   82780:	00080ad1 	.word	0x00080ad1

00082784 <init_writer1>:
	}

}
	
void init_writer1() {
   82784:	b510      	push	{r4, lr}
   82786:	b082      	sub	sp, #8
	/* Create task */
	xTaskCreate(
   82788:	2300      	movs	r3, #0
   8278a:	9301      	str	r3, [sp, #4]
   8278c:	2201      	movs	r2, #1
   8278e:	9200      	str	r2, [sp, #0]
   82790:	22fa      	movs	r2, #250	; 0xfa
   82792:	4903      	ldr	r1, [pc, #12]	; (827a0 <init_writer1+0x1c>)
   82794:	4803      	ldr	r0, [pc, #12]	; (827a4 <init_writer1+0x20>)
   82796:	4c04      	ldr	r4, [pc, #16]	; (827a8 <init_writer1+0x24>)
   82798:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */								// What's this?
	NULL,						/* Parameter passed into the task. */
	1,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   8279a:	b002      	add	sp, #8
   8279c:	bd10      	pop	{r4, pc}
   8279e:	bf00      	nop
   827a0:	000856d0 	.word	0x000856d0
   827a4:	00082759 	.word	0x00082759
   827a8:	000812dd 	.word	0x000812dd

000827ac <writer2>:

#include <writer1.h>
#include <writer2.h>


void writer2(){
   827ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(;;) {
		//xSemaphoreTake(xSemaphore,10);
		const char * str = "Mycket kaffe! ";
		printfConsole(str);
   827ae:	4f06      	ldr	r7, [pc, #24]	; (827c8 <writer2+0x1c>)
   827b0:	4e06      	ldr	r6, [pc, #24]	; (827cc <writer2+0x20>)
		xSemaphoreGive(xSemaphore);
   827b2:	4d07      	ldr	r5, [pc, #28]	; (827d0 <writer2+0x24>)
		printfConsole(str);
   827b4:	4638      	mov	r0, r7
   827b6:	47b0      	blx	r6
		xSemaphoreGive(xSemaphore);
   827b8:	2300      	movs	r3, #0
   827ba:	461a      	mov	r2, r3
   827bc:	4619      	mov	r1, r3
   827be:	6828      	ldr	r0, [r5, #0]
   827c0:	4c04      	ldr	r4, [pc, #16]	; (827d4 <writer2+0x28>)
   827c2:	47a0      	blx	r4
   827c4:	e7f6      	b.n	827b4 <writer2+0x8>
   827c6:	bf00      	nop
   827c8:	0008570c 	.word	0x0008570c
   827cc:	00080361 	.word	0x00080361
   827d0:	2007c500 	.word	0x2007c500
   827d4:	00080ad1 	.word	0x00080ad1

000827d8 <init_writer2>:
	}
}


void init_writer2() {
   827d8:	b510      	push	{r4, lr}
   827da:	b082      	sub	sp, #8
	/* Create task */
	xTaskCreate(
   827dc:	2300      	movs	r3, #0
   827de:	9301      	str	r3, [sp, #4]
   827e0:	2201      	movs	r2, #1
   827e2:	9200      	str	r2, [sp, #0]
   827e4:	22fa      	movs	r2, #250	; 0xfa
   827e6:	4903      	ldr	r1, [pc, #12]	; (827f4 <init_writer2+0x1c>)
   827e8:	4803      	ldr	r0, [pc, #12]	; (827f8 <init_writer2+0x20>)
   827ea:	4c04      	ldr	r4, [pc, #16]	; (827fc <init_writer2+0x24>)
   827ec:	47a0      	blx	r4
	250,						/* Stack size in words, not bytes. */								// What's this?
	NULL,						/* Parameter passed into the task. */
	1,							/* Priority at which the task is created. */
	NULL 						/* Used to pass out the created task's handle. */
	);
   827ee:	b002      	add	sp, #8
   827f0:	bd10      	pop	{r4, pc}
   827f2:	bf00      	nop
   827f4:	000856f4 	.word	0x000856f4
   827f8:	000827ad 	.word	0x000827ad
   827fc:	000812dd 	.word	0x000812dd

00082800 <main>:

#include <writer1.h>
#include <writer2.h>

int main (void)
{
   82800:	b508      	push	{r3, lr}
	/* System clock initialization */
	sysclk_init();
   82802:	4b07      	ldr	r3, [pc, #28]	; (82820 <main+0x20>)
   82804:	4798      	blx	r3
	
	/* Board peripherals initialization */
	board_init();
   82806:	4b07      	ldr	r3, [pc, #28]	; (82824 <main+0x24>)
   82808:	4798      	blx	r3
	
	/* Init UART console */
	console_init();
   8280a:	4b07      	ldr	r3, [pc, #28]	; (82828 <main+0x28>)
   8280c:	4798      	blx	r3
	
	/* Init tasks */
	init_writer1();
   8280e:	4b07      	ldr	r3, [pc, #28]	; (8282c <main+0x2c>)
   82810:	4798      	blx	r3
	init_writer2();
   82812:	4b07      	ldr	r3, [pc, #28]	; (82830 <main+0x30>)
   82814:	4798      	blx	r3
	
	/* Start scheduler */
	vTaskStartScheduler();
   82816:	4b07      	ldr	r3, [pc, #28]	; (82834 <main+0x34>)
   82818:	4798      	blx	r3
	
	/* Should never reach here ... */
	return 1;
}
   8281a:	2001      	movs	r0, #1
   8281c:	bd08      	pop	{r3, pc}
   8281e:	bf00      	nop
   82820:	000820bd 	.word	0x000820bd
   82824:	00082121 	.word	0x00082121
   82828:	00080399 	.word	0x00080399
   8282c:	00082785 	.word	0x00082785
   82830:	000827d9 	.word	0x000827d9
   82834:	000814d1 	.word	0x000814d1

00082838 <__libc_init_array>:
   82838:	b570      	push	{r4, r5, r6, lr}
   8283a:	4e0f      	ldr	r6, [pc, #60]	; (82878 <__libc_init_array+0x40>)
   8283c:	4d0f      	ldr	r5, [pc, #60]	; (8287c <__libc_init_array+0x44>)
   8283e:	1b76      	subs	r6, r6, r5
   82840:	10b6      	asrs	r6, r6, #2
   82842:	bf18      	it	ne
   82844:	2400      	movne	r4, #0
   82846:	d005      	beq.n	82854 <__libc_init_array+0x1c>
   82848:	3401      	adds	r4, #1
   8284a:	f855 3b04 	ldr.w	r3, [r5], #4
   8284e:	4798      	blx	r3
   82850:	42a6      	cmp	r6, r4
   82852:	d1f9      	bne.n	82848 <__libc_init_array+0x10>
   82854:	4e0a      	ldr	r6, [pc, #40]	; (82880 <__libc_init_array+0x48>)
   82856:	4d0b      	ldr	r5, [pc, #44]	; (82884 <__libc_init_array+0x4c>)
   82858:	f003 f814 	bl	85884 <_init>
   8285c:	1b76      	subs	r6, r6, r5
   8285e:	10b6      	asrs	r6, r6, #2
   82860:	bf18      	it	ne
   82862:	2400      	movne	r4, #0
   82864:	d006      	beq.n	82874 <__libc_init_array+0x3c>
   82866:	3401      	adds	r4, #1
   82868:	f855 3b04 	ldr.w	r3, [r5], #4
   8286c:	4798      	blx	r3
   8286e:	42a6      	cmp	r6, r4
   82870:	d1f9      	bne.n	82866 <__libc_init_array+0x2e>
   82872:	bd70      	pop	{r4, r5, r6, pc}
   82874:	bd70      	pop	{r4, r5, r6, pc}
   82876:	bf00      	nop
   82878:	00085890 	.word	0x00085890
   8287c:	00085890 	.word	0x00085890
   82880:	00085898 	.word	0x00085898
   82884:	00085890 	.word	0x00085890

00082888 <iprintf>:
   82888:	b40f      	push	{r0, r1, r2, r3}
   8288a:	b510      	push	{r4, lr}
   8288c:	4b07      	ldr	r3, [pc, #28]	; (828ac <iprintf+0x24>)
   8288e:	b082      	sub	sp, #8
   82890:	ac04      	add	r4, sp, #16
   82892:	f854 2b04 	ldr.w	r2, [r4], #4
   82896:	6818      	ldr	r0, [r3, #0]
   82898:	4623      	mov	r3, r4
   8289a:	6881      	ldr	r1, [r0, #8]
   8289c:	9401      	str	r4, [sp, #4]
   8289e:	f000 fa09 	bl	82cb4 <_vfiprintf_r>
   828a2:	b002      	add	sp, #8
   828a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   828a8:	b004      	add	sp, #16
   828aa:	4770      	bx	lr
   828ac:	20070134 	.word	0x20070134

000828b0 <memcpy>:
   828b0:	4684      	mov	ip, r0
   828b2:	ea41 0300 	orr.w	r3, r1, r0
   828b6:	f013 0303 	ands.w	r3, r3, #3
   828ba:	d149      	bne.n	82950 <memcpy+0xa0>
   828bc:	3a40      	subs	r2, #64	; 0x40
   828be:	d323      	bcc.n	82908 <memcpy+0x58>
   828c0:	680b      	ldr	r3, [r1, #0]
   828c2:	6003      	str	r3, [r0, #0]
   828c4:	684b      	ldr	r3, [r1, #4]
   828c6:	6043      	str	r3, [r0, #4]
   828c8:	688b      	ldr	r3, [r1, #8]
   828ca:	6083      	str	r3, [r0, #8]
   828cc:	68cb      	ldr	r3, [r1, #12]
   828ce:	60c3      	str	r3, [r0, #12]
   828d0:	690b      	ldr	r3, [r1, #16]
   828d2:	6103      	str	r3, [r0, #16]
   828d4:	694b      	ldr	r3, [r1, #20]
   828d6:	6143      	str	r3, [r0, #20]
   828d8:	698b      	ldr	r3, [r1, #24]
   828da:	6183      	str	r3, [r0, #24]
   828dc:	69cb      	ldr	r3, [r1, #28]
   828de:	61c3      	str	r3, [r0, #28]
   828e0:	6a0b      	ldr	r3, [r1, #32]
   828e2:	6203      	str	r3, [r0, #32]
   828e4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   828e6:	6243      	str	r3, [r0, #36]	; 0x24
   828e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   828ea:	6283      	str	r3, [r0, #40]	; 0x28
   828ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   828ee:	62c3      	str	r3, [r0, #44]	; 0x2c
   828f0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   828f2:	6303      	str	r3, [r0, #48]	; 0x30
   828f4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   828f6:	6343      	str	r3, [r0, #52]	; 0x34
   828f8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   828fa:	6383      	str	r3, [r0, #56]	; 0x38
   828fc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   828fe:	63c3      	str	r3, [r0, #60]	; 0x3c
   82900:	3040      	adds	r0, #64	; 0x40
   82902:	3140      	adds	r1, #64	; 0x40
   82904:	3a40      	subs	r2, #64	; 0x40
   82906:	d2db      	bcs.n	828c0 <memcpy+0x10>
   82908:	3230      	adds	r2, #48	; 0x30
   8290a:	d30b      	bcc.n	82924 <memcpy+0x74>
   8290c:	680b      	ldr	r3, [r1, #0]
   8290e:	6003      	str	r3, [r0, #0]
   82910:	684b      	ldr	r3, [r1, #4]
   82912:	6043      	str	r3, [r0, #4]
   82914:	688b      	ldr	r3, [r1, #8]
   82916:	6083      	str	r3, [r0, #8]
   82918:	68cb      	ldr	r3, [r1, #12]
   8291a:	60c3      	str	r3, [r0, #12]
   8291c:	3010      	adds	r0, #16
   8291e:	3110      	adds	r1, #16
   82920:	3a10      	subs	r2, #16
   82922:	d2f3      	bcs.n	8290c <memcpy+0x5c>
   82924:	320c      	adds	r2, #12
   82926:	d305      	bcc.n	82934 <memcpy+0x84>
   82928:	f851 3b04 	ldr.w	r3, [r1], #4
   8292c:	f840 3b04 	str.w	r3, [r0], #4
   82930:	3a04      	subs	r2, #4
   82932:	d2f9      	bcs.n	82928 <memcpy+0x78>
   82934:	3204      	adds	r2, #4
   82936:	d008      	beq.n	8294a <memcpy+0x9a>
   82938:	07d2      	lsls	r2, r2, #31
   8293a:	bf1c      	itt	ne
   8293c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82940:	f800 3b01 	strbne.w	r3, [r0], #1
   82944:	d301      	bcc.n	8294a <memcpy+0x9a>
   82946:	880b      	ldrh	r3, [r1, #0]
   82948:	8003      	strh	r3, [r0, #0]
   8294a:	4660      	mov	r0, ip
   8294c:	4770      	bx	lr
   8294e:	bf00      	nop
   82950:	2a08      	cmp	r2, #8
   82952:	d313      	bcc.n	8297c <memcpy+0xcc>
   82954:	078b      	lsls	r3, r1, #30
   82956:	d0b1      	beq.n	828bc <memcpy+0xc>
   82958:	f010 0303 	ands.w	r3, r0, #3
   8295c:	d0ae      	beq.n	828bc <memcpy+0xc>
   8295e:	f1c3 0304 	rsb	r3, r3, #4
   82962:	1ad2      	subs	r2, r2, r3
   82964:	07db      	lsls	r3, r3, #31
   82966:	bf1c      	itt	ne
   82968:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8296c:	f800 3b01 	strbne.w	r3, [r0], #1
   82970:	d3a4      	bcc.n	828bc <memcpy+0xc>
   82972:	f831 3b02 	ldrh.w	r3, [r1], #2
   82976:	f820 3b02 	strh.w	r3, [r0], #2
   8297a:	e79f      	b.n	828bc <memcpy+0xc>
   8297c:	3a04      	subs	r2, #4
   8297e:	d3d9      	bcc.n	82934 <memcpy+0x84>
   82980:	3a01      	subs	r2, #1
   82982:	f811 3b01 	ldrb.w	r3, [r1], #1
   82986:	f800 3b01 	strb.w	r3, [r0], #1
   8298a:	d2f9      	bcs.n	82980 <memcpy+0xd0>
   8298c:	780b      	ldrb	r3, [r1, #0]
   8298e:	7003      	strb	r3, [r0, #0]
   82990:	784b      	ldrb	r3, [r1, #1]
   82992:	7043      	strb	r3, [r0, #1]
   82994:	788b      	ldrb	r3, [r1, #2]
   82996:	7083      	strb	r3, [r0, #2]
   82998:	4660      	mov	r0, ip
   8299a:	4770      	bx	lr

0008299c <memset>:
   8299c:	b470      	push	{r4, r5, r6}
   8299e:	0786      	lsls	r6, r0, #30
   829a0:	d046      	beq.n	82a30 <memset+0x94>
   829a2:	1e54      	subs	r4, r2, #1
   829a4:	2a00      	cmp	r2, #0
   829a6:	d041      	beq.n	82a2c <memset+0x90>
   829a8:	b2ca      	uxtb	r2, r1
   829aa:	4603      	mov	r3, r0
   829ac:	e002      	b.n	829b4 <memset+0x18>
   829ae:	f114 34ff 	adds.w	r4, r4, #4294967295
   829b2:	d33b      	bcc.n	82a2c <memset+0x90>
   829b4:	f803 2b01 	strb.w	r2, [r3], #1
   829b8:	079d      	lsls	r5, r3, #30
   829ba:	d1f8      	bne.n	829ae <memset+0x12>
   829bc:	2c03      	cmp	r4, #3
   829be:	d92e      	bls.n	82a1e <memset+0x82>
   829c0:	b2cd      	uxtb	r5, r1
   829c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   829c6:	2c0f      	cmp	r4, #15
   829c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   829cc:	d919      	bls.n	82a02 <memset+0x66>
   829ce:	4626      	mov	r6, r4
   829d0:	f103 0210 	add.w	r2, r3, #16
   829d4:	3e10      	subs	r6, #16
   829d6:	2e0f      	cmp	r6, #15
   829d8:	f842 5c10 	str.w	r5, [r2, #-16]
   829dc:	f842 5c0c 	str.w	r5, [r2, #-12]
   829e0:	f842 5c08 	str.w	r5, [r2, #-8]
   829e4:	f842 5c04 	str.w	r5, [r2, #-4]
   829e8:	f102 0210 	add.w	r2, r2, #16
   829ec:	d8f2      	bhi.n	829d4 <memset+0x38>
   829ee:	f1a4 0210 	sub.w	r2, r4, #16
   829f2:	f022 020f 	bic.w	r2, r2, #15
   829f6:	f004 040f 	and.w	r4, r4, #15
   829fa:	3210      	adds	r2, #16
   829fc:	2c03      	cmp	r4, #3
   829fe:	4413      	add	r3, r2
   82a00:	d90d      	bls.n	82a1e <memset+0x82>
   82a02:	461e      	mov	r6, r3
   82a04:	4622      	mov	r2, r4
   82a06:	3a04      	subs	r2, #4
   82a08:	2a03      	cmp	r2, #3
   82a0a:	f846 5b04 	str.w	r5, [r6], #4
   82a0e:	d8fa      	bhi.n	82a06 <memset+0x6a>
   82a10:	1f22      	subs	r2, r4, #4
   82a12:	f022 0203 	bic.w	r2, r2, #3
   82a16:	3204      	adds	r2, #4
   82a18:	4413      	add	r3, r2
   82a1a:	f004 0403 	and.w	r4, r4, #3
   82a1e:	b12c      	cbz	r4, 82a2c <memset+0x90>
   82a20:	b2c9      	uxtb	r1, r1
   82a22:	441c      	add	r4, r3
   82a24:	f803 1b01 	strb.w	r1, [r3], #1
   82a28:	429c      	cmp	r4, r3
   82a2a:	d1fb      	bne.n	82a24 <memset+0x88>
   82a2c:	bc70      	pop	{r4, r5, r6}
   82a2e:	4770      	bx	lr
   82a30:	4614      	mov	r4, r2
   82a32:	4603      	mov	r3, r0
   82a34:	e7c2      	b.n	829bc <memset+0x20>
   82a36:	bf00      	nop

00082a38 <setbuf>:
   82a38:	2900      	cmp	r1, #0
   82a3a:	bf0c      	ite	eq
   82a3c:	2202      	moveq	r2, #2
   82a3e:	2200      	movne	r2, #0
   82a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a44:	f000 b800 	b.w	82a48 <setvbuf>

00082a48 <setvbuf>:
   82a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82a4c:	4d61      	ldr	r5, [pc, #388]	; (82bd4 <setvbuf+0x18c>)
   82a4e:	b083      	sub	sp, #12
   82a50:	682d      	ldr	r5, [r5, #0]
   82a52:	4604      	mov	r4, r0
   82a54:	460f      	mov	r7, r1
   82a56:	4690      	mov	r8, r2
   82a58:	461e      	mov	r6, r3
   82a5a:	b115      	cbz	r5, 82a62 <setvbuf+0x1a>
   82a5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82a5e:	2b00      	cmp	r3, #0
   82a60:	d064      	beq.n	82b2c <setvbuf+0xe4>
   82a62:	f1b8 0f02 	cmp.w	r8, #2
   82a66:	d006      	beq.n	82a76 <setvbuf+0x2e>
   82a68:	f1b8 0f01 	cmp.w	r8, #1
   82a6c:	f200 809f 	bhi.w	82bae <setvbuf+0x166>
   82a70:	2e00      	cmp	r6, #0
   82a72:	f2c0 809c 	blt.w	82bae <setvbuf+0x166>
   82a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82a78:	07d8      	lsls	r0, r3, #31
   82a7a:	d534      	bpl.n	82ae6 <setvbuf+0x9e>
   82a7c:	4621      	mov	r1, r4
   82a7e:	4628      	mov	r0, r5
   82a80:	f001 f8b0 	bl	83be4 <_fflush_r>
   82a84:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82a86:	b141      	cbz	r1, 82a9a <setvbuf+0x52>
   82a88:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82a8c:	4299      	cmp	r1, r3
   82a8e:	d002      	beq.n	82a96 <setvbuf+0x4e>
   82a90:	4628      	mov	r0, r5
   82a92:	f001 fa25 	bl	83ee0 <_free_r>
   82a96:	2300      	movs	r3, #0
   82a98:	6323      	str	r3, [r4, #48]	; 0x30
   82a9a:	2200      	movs	r2, #0
   82a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82aa0:	61a2      	str	r2, [r4, #24]
   82aa2:	6062      	str	r2, [r4, #4]
   82aa4:	061a      	lsls	r2, r3, #24
   82aa6:	d43a      	bmi.n	82b1e <setvbuf+0xd6>
   82aa8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82aac:	f023 0303 	bic.w	r3, r3, #3
   82ab0:	f1b8 0f02 	cmp.w	r8, #2
   82ab4:	81a3      	strh	r3, [r4, #12]
   82ab6:	d01d      	beq.n	82af4 <setvbuf+0xac>
   82ab8:	ab01      	add	r3, sp, #4
   82aba:	466a      	mov	r2, sp
   82abc:	4621      	mov	r1, r4
   82abe:	4628      	mov	r0, r5
   82ac0:	f001 fcac 	bl	8441c <__swhatbuf_r>
   82ac4:	89a3      	ldrh	r3, [r4, #12]
   82ac6:	4318      	orrs	r0, r3
   82ac8:	81a0      	strh	r0, [r4, #12]
   82aca:	2e00      	cmp	r6, #0
   82acc:	d132      	bne.n	82b34 <setvbuf+0xec>
   82ace:	9e00      	ldr	r6, [sp, #0]
   82ad0:	4630      	mov	r0, r6
   82ad2:	f001 fd1b 	bl	8450c <malloc>
   82ad6:	4607      	mov	r7, r0
   82ad8:	2800      	cmp	r0, #0
   82ada:	d06b      	beq.n	82bb4 <setvbuf+0x16c>
   82adc:	89a3      	ldrh	r3, [r4, #12]
   82ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82ae2:	81a3      	strh	r3, [r4, #12]
   82ae4:	e028      	b.n	82b38 <setvbuf+0xf0>
   82ae6:	89a3      	ldrh	r3, [r4, #12]
   82ae8:	0599      	lsls	r1, r3, #22
   82aea:	d4c7      	bmi.n	82a7c <setvbuf+0x34>
   82aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82aee:	f001 fc91 	bl	84414 <__retarget_lock_acquire_recursive>
   82af2:	e7c3      	b.n	82a7c <setvbuf+0x34>
   82af4:	2500      	movs	r5, #0
   82af6:	2600      	movs	r6, #0
   82af8:	2001      	movs	r0, #1
   82afa:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82b00:	f043 0302 	orr.w	r3, r3, #2
   82b04:	60a6      	str	r6, [r4, #8]
   82b06:	07ce      	lsls	r6, r1, #31
   82b08:	81a3      	strh	r3, [r4, #12]
   82b0a:	6160      	str	r0, [r4, #20]
   82b0c:	6022      	str	r2, [r4, #0]
   82b0e:	6122      	str	r2, [r4, #16]
   82b10:	d401      	bmi.n	82b16 <setvbuf+0xce>
   82b12:	0598      	lsls	r0, r3, #22
   82b14:	d53e      	bpl.n	82b94 <setvbuf+0x14c>
   82b16:	4628      	mov	r0, r5
   82b18:	b003      	add	sp, #12
   82b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82b1e:	6921      	ldr	r1, [r4, #16]
   82b20:	4628      	mov	r0, r5
   82b22:	f001 f9dd 	bl	83ee0 <_free_r>
   82b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b2a:	e7bd      	b.n	82aa8 <setvbuf+0x60>
   82b2c:	4628      	mov	r0, r5
   82b2e:	f001 f8b1 	bl	83c94 <__sinit>
   82b32:	e796      	b.n	82a62 <setvbuf+0x1a>
   82b34:	2f00      	cmp	r7, #0
   82b36:	d0cb      	beq.n	82ad0 <setvbuf+0x88>
   82b38:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82b3a:	2b00      	cmp	r3, #0
   82b3c:	d033      	beq.n	82ba6 <setvbuf+0x15e>
   82b3e:	9b00      	ldr	r3, [sp, #0]
   82b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82b44:	429e      	cmp	r6, r3
   82b46:	bf1c      	itt	ne
   82b48:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82b4c:	81a2      	strhne	r2, [r4, #12]
   82b4e:	f1b8 0f01 	cmp.w	r8, #1
   82b52:	bf04      	itt	eq
   82b54:	f042 0201 	orreq.w	r2, r2, #1
   82b58:	81a2      	strheq	r2, [r4, #12]
   82b5a:	b292      	uxth	r2, r2
   82b5c:	f012 0308 	ands.w	r3, r2, #8
   82b60:	6027      	str	r7, [r4, #0]
   82b62:	6127      	str	r7, [r4, #16]
   82b64:	6166      	str	r6, [r4, #20]
   82b66:	d00e      	beq.n	82b86 <setvbuf+0x13e>
   82b68:	07d1      	lsls	r1, r2, #31
   82b6a:	d51a      	bpl.n	82ba2 <setvbuf+0x15a>
   82b6c:	2300      	movs	r3, #0
   82b6e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82b70:	4276      	negs	r6, r6
   82b72:	f015 0501 	ands.w	r5, r5, #1
   82b76:	61a6      	str	r6, [r4, #24]
   82b78:	60a3      	str	r3, [r4, #8]
   82b7a:	d009      	beq.n	82b90 <setvbuf+0x148>
   82b7c:	2500      	movs	r5, #0
   82b7e:	4628      	mov	r0, r5
   82b80:	b003      	add	sp, #12
   82b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82b86:	60a3      	str	r3, [r4, #8]
   82b88:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82b8a:	f015 0501 	ands.w	r5, r5, #1
   82b8e:	d1f5      	bne.n	82b7c <setvbuf+0x134>
   82b90:	0593      	lsls	r3, r2, #22
   82b92:	d4c0      	bmi.n	82b16 <setvbuf+0xce>
   82b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82b96:	f001 fc3f 	bl	84418 <__retarget_lock_release_recursive>
   82b9a:	4628      	mov	r0, r5
   82b9c:	b003      	add	sp, #12
   82b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82ba2:	60a6      	str	r6, [r4, #8]
   82ba4:	e7f0      	b.n	82b88 <setvbuf+0x140>
   82ba6:	4628      	mov	r0, r5
   82ba8:	f001 f874 	bl	83c94 <__sinit>
   82bac:	e7c7      	b.n	82b3e <setvbuf+0xf6>
   82bae:	f04f 35ff 	mov.w	r5, #4294967295
   82bb2:	e7b0      	b.n	82b16 <setvbuf+0xce>
   82bb4:	f8dd 9000 	ldr.w	r9, [sp]
   82bb8:	45b1      	cmp	r9, r6
   82bba:	d004      	beq.n	82bc6 <setvbuf+0x17e>
   82bbc:	4648      	mov	r0, r9
   82bbe:	f001 fca5 	bl	8450c <malloc>
   82bc2:	4607      	mov	r7, r0
   82bc4:	b920      	cbnz	r0, 82bd0 <setvbuf+0x188>
   82bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bca:	f04f 35ff 	mov.w	r5, #4294967295
   82bce:	e792      	b.n	82af6 <setvbuf+0xae>
   82bd0:	464e      	mov	r6, r9
   82bd2:	e783      	b.n	82adc <setvbuf+0x94>
   82bd4:	20070134 	.word	0x20070134

00082bd8 <strlen>:
   82bd8:	f020 0103 	bic.w	r1, r0, #3
   82bdc:	f010 0003 	ands.w	r0, r0, #3
   82be0:	f1c0 0000 	rsb	r0, r0, #0
   82be4:	f851 3b04 	ldr.w	r3, [r1], #4
   82be8:	f100 0c04 	add.w	ip, r0, #4
   82bec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82bf0:	f06f 0200 	mvn.w	r2, #0
   82bf4:	bf1c      	itt	ne
   82bf6:	fa22 f20c 	lsrne.w	r2, r2, ip
   82bfa:	4313      	orrne	r3, r2
   82bfc:	f04f 0c01 	mov.w	ip, #1
   82c00:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82c04:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82c08:	eba3 020c 	sub.w	r2, r3, ip
   82c0c:	ea22 0203 	bic.w	r2, r2, r3
   82c10:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82c14:	bf04      	itt	eq
   82c16:	f851 3b04 	ldreq.w	r3, [r1], #4
   82c1a:	3004      	addeq	r0, #4
   82c1c:	d0f4      	beq.n	82c08 <strlen+0x30>
   82c1e:	f1c2 0100 	rsb	r1, r2, #0
   82c22:	ea02 0201 	and.w	r2, r2, r1
   82c26:	fab2 f282 	clz	r2, r2
   82c2a:	f1c2 021f 	rsb	r2, r2, #31
   82c2e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82c32:	4770      	bx	lr

00082c34 <__sprint_r.part.0>:
   82c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82c3a:	4693      	mov	fp, r2
   82c3c:	049c      	lsls	r4, r3, #18
   82c3e:	d52f      	bpl.n	82ca0 <__sprint_r.part.0+0x6c>
   82c40:	6893      	ldr	r3, [r2, #8]
   82c42:	6812      	ldr	r2, [r2, #0]
   82c44:	b353      	cbz	r3, 82c9c <__sprint_r.part.0+0x68>
   82c46:	460e      	mov	r6, r1
   82c48:	4607      	mov	r7, r0
   82c4a:	f102 0908 	add.w	r9, r2, #8
   82c4e:	e919 0420 	ldmdb	r9, {r5, sl}
   82c52:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82c56:	d017      	beq.n	82c88 <__sprint_r.part.0+0x54>
   82c58:	2400      	movs	r4, #0
   82c5a:	3d04      	subs	r5, #4
   82c5c:	e001      	b.n	82c62 <__sprint_r.part.0+0x2e>
   82c5e:	45a0      	cmp	r8, r4
   82c60:	d010      	beq.n	82c84 <__sprint_r.part.0+0x50>
   82c62:	4632      	mov	r2, r6
   82c64:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82c68:	4638      	mov	r0, r7
   82c6a:	f001 f8b5 	bl	83dd8 <_fputwc_r>
   82c6e:	1c43      	adds	r3, r0, #1
   82c70:	f104 0401 	add.w	r4, r4, #1
   82c74:	d1f3      	bne.n	82c5e <__sprint_r.part.0+0x2a>
   82c76:	2300      	movs	r3, #0
   82c78:	f8cb 3008 	str.w	r3, [fp, #8]
   82c7c:	f8cb 3004 	str.w	r3, [fp, #4]
   82c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c84:	f8db 3008 	ldr.w	r3, [fp, #8]
   82c88:	f02a 0a03 	bic.w	sl, sl, #3
   82c8c:	eba3 030a 	sub.w	r3, r3, sl
   82c90:	f8cb 3008 	str.w	r3, [fp, #8]
   82c94:	f109 0908 	add.w	r9, r9, #8
   82c98:	2b00      	cmp	r3, #0
   82c9a:	d1d8      	bne.n	82c4e <__sprint_r.part.0+0x1a>
   82c9c:	2000      	movs	r0, #0
   82c9e:	e7ea      	b.n	82c76 <__sprint_r.part.0+0x42>
   82ca0:	f001 fa04 	bl	840ac <__sfvwrite_r>
   82ca4:	2300      	movs	r3, #0
   82ca6:	f8cb 3008 	str.w	r3, [fp, #8]
   82caa:	f8cb 3004 	str.w	r3, [fp, #4]
   82cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cb2:	bf00      	nop

00082cb4 <_vfiprintf_r>:
   82cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82cb8:	b0ad      	sub	sp, #180	; 0xb4
   82cba:	461d      	mov	r5, r3
   82cbc:	468b      	mov	fp, r1
   82cbe:	4690      	mov	r8, r2
   82cc0:	9307      	str	r3, [sp, #28]
   82cc2:	9006      	str	r0, [sp, #24]
   82cc4:	b118      	cbz	r0, 82cce <_vfiprintf_r+0x1a>
   82cc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82cc8:	2b00      	cmp	r3, #0
   82cca:	f000 80f3 	beq.w	82eb4 <_vfiprintf_r+0x200>
   82cce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82cd2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82cd6:	07df      	lsls	r7, r3, #31
   82cd8:	b281      	uxth	r1, r0
   82cda:	d402      	bmi.n	82ce2 <_vfiprintf_r+0x2e>
   82cdc:	058e      	lsls	r6, r1, #22
   82cde:	f140 80fc 	bpl.w	82eda <_vfiprintf_r+0x226>
   82ce2:	048c      	lsls	r4, r1, #18
   82ce4:	d40a      	bmi.n	82cfc <_vfiprintf_r+0x48>
   82ce6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82cea:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82cf2:	f8ab 100c 	strh.w	r1, [fp, #12]
   82cf6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82cfa:	b289      	uxth	r1, r1
   82cfc:	0708      	lsls	r0, r1, #28
   82cfe:	f140 80b3 	bpl.w	82e68 <_vfiprintf_r+0x1b4>
   82d02:	f8db 3010 	ldr.w	r3, [fp, #16]
   82d06:	2b00      	cmp	r3, #0
   82d08:	f000 80ae 	beq.w	82e68 <_vfiprintf_r+0x1b4>
   82d0c:	f001 031a 	and.w	r3, r1, #26
   82d10:	2b0a      	cmp	r3, #10
   82d12:	f000 80b5 	beq.w	82e80 <_vfiprintf_r+0x1cc>
   82d16:	2300      	movs	r3, #0
   82d18:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82d1c:	46d1      	mov	r9, sl
   82d1e:	930b      	str	r3, [sp, #44]	; 0x2c
   82d20:	9303      	str	r3, [sp, #12]
   82d22:	9311      	str	r3, [sp, #68]	; 0x44
   82d24:	9310      	str	r3, [sp, #64]	; 0x40
   82d26:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   82d2a:	f8cd b010 	str.w	fp, [sp, #16]
   82d2e:	f898 3000 	ldrb.w	r3, [r8]
   82d32:	4644      	mov	r4, r8
   82d34:	b1fb      	cbz	r3, 82d76 <_vfiprintf_r+0xc2>
   82d36:	2b25      	cmp	r3, #37	; 0x25
   82d38:	d102      	bne.n	82d40 <_vfiprintf_r+0x8c>
   82d3a:	e01c      	b.n	82d76 <_vfiprintf_r+0xc2>
   82d3c:	2b25      	cmp	r3, #37	; 0x25
   82d3e:	d003      	beq.n	82d48 <_vfiprintf_r+0x94>
   82d40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82d44:	2b00      	cmp	r3, #0
   82d46:	d1f9      	bne.n	82d3c <_vfiprintf_r+0x88>
   82d48:	eba4 0508 	sub.w	r5, r4, r8
   82d4c:	b19d      	cbz	r5, 82d76 <_vfiprintf_r+0xc2>
   82d4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d52:	3301      	adds	r3, #1
   82d54:	442a      	add	r2, r5
   82d56:	2b07      	cmp	r3, #7
   82d58:	f8c9 8000 	str.w	r8, [r9]
   82d5c:	f8c9 5004 	str.w	r5, [r9, #4]
   82d60:	9211      	str	r2, [sp, #68]	; 0x44
   82d62:	9310      	str	r3, [sp, #64]	; 0x40
   82d64:	dd7a      	ble.n	82e5c <_vfiprintf_r+0x1a8>
   82d66:	2a00      	cmp	r2, #0
   82d68:	f040 84b5 	bne.w	836d6 <_vfiprintf_r+0xa22>
   82d6c:	46d1      	mov	r9, sl
   82d6e:	9b03      	ldr	r3, [sp, #12]
   82d70:	9210      	str	r2, [sp, #64]	; 0x40
   82d72:	442b      	add	r3, r5
   82d74:	9303      	str	r3, [sp, #12]
   82d76:	7823      	ldrb	r3, [r4, #0]
   82d78:	2b00      	cmp	r3, #0
   82d7a:	f000 83e5 	beq.w	83548 <_vfiprintf_r+0x894>
   82d7e:	2000      	movs	r0, #0
   82d80:	f04f 0300 	mov.w	r3, #0
   82d84:	f104 0801 	add.w	r8, r4, #1
   82d88:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82d8c:	7862      	ldrb	r2, [r4, #1]
   82d8e:	4606      	mov	r6, r0
   82d90:	4605      	mov	r5, r0
   82d92:	4603      	mov	r3, r0
   82d94:	f04f 34ff 	mov.w	r4, #4294967295
   82d98:	f108 0801 	add.w	r8, r8, #1
   82d9c:	f1a2 0120 	sub.w	r1, r2, #32
   82da0:	2958      	cmp	r1, #88	; 0x58
   82da2:	f200 82d9 	bhi.w	83358 <_vfiprintf_r+0x6a4>
   82da6:	e8df f011 	tbh	[pc, r1, lsl #1]
   82daa:	0228      	.short	0x0228
   82dac:	02d702d7 	.word	0x02d702d7
   82db0:	02d70230 	.word	0x02d70230
   82db4:	02d702d7 	.word	0x02d702d7
   82db8:	02d702d7 	.word	0x02d702d7
   82dbc:	00a002d7 	.word	0x00a002d7
   82dc0:	02d70288 	.word	0x02d70288
   82dc4:	02b800a8 	.word	0x02b800a8
   82dc8:	01a602d7 	.word	0x01a602d7
   82dcc:	01ab01ab 	.word	0x01ab01ab
   82dd0:	01ab01ab 	.word	0x01ab01ab
   82dd4:	01ab01ab 	.word	0x01ab01ab
   82dd8:	01ab01ab 	.word	0x01ab01ab
   82ddc:	02d701ab 	.word	0x02d701ab
   82de0:	02d702d7 	.word	0x02d702d7
   82de4:	02d702d7 	.word	0x02d702d7
   82de8:	02d702d7 	.word	0x02d702d7
   82dec:	02d702d7 	.word	0x02d702d7
   82df0:	01b902d7 	.word	0x01b902d7
   82df4:	02d702d7 	.word	0x02d702d7
   82df8:	02d702d7 	.word	0x02d702d7
   82dfc:	02d702d7 	.word	0x02d702d7
   82e00:	02d702d7 	.word	0x02d702d7
   82e04:	02d702d7 	.word	0x02d702d7
   82e08:	02d7019e 	.word	0x02d7019e
   82e0c:	02d702d7 	.word	0x02d702d7
   82e10:	02d702d7 	.word	0x02d702d7
   82e14:	02d701a2 	.word	0x02d701a2
   82e18:	025a02d7 	.word	0x025a02d7
   82e1c:	02d702d7 	.word	0x02d702d7
   82e20:	02d702d7 	.word	0x02d702d7
   82e24:	02d702d7 	.word	0x02d702d7
   82e28:	02d702d7 	.word	0x02d702d7
   82e2c:	02d702d7 	.word	0x02d702d7
   82e30:	02220261 	.word	0x02220261
   82e34:	02d702d7 	.word	0x02d702d7
   82e38:	027602d7 	.word	0x027602d7
   82e3c:	02d70222 	.word	0x02d70222
   82e40:	027b02d7 	.word	0x027b02d7
   82e44:	01fc02d7 	.word	0x01fc02d7
   82e48:	02100189 	.word	0x02100189
   82e4c:	02d702d2 	.word	0x02d702d2
   82e50:	02d70295 	.word	0x02d70295
   82e54:	02d700ad 	.word	0x02d700ad
   82e58:	023502d7 	.word	0x023502d7
   82e5c:	f109 0908 	add.w	r9, r9, #8
   82e60:	9b03      	ldr	r3, [sp, #12]
   82e62:	442b      	add	r3, r5
   82e64:	9303      	str	r3, [sp, #12]
   82e66:	e786      	b.n	82d76 <_vfiprintf_r+0xc2>
   82e68:	4659      	mov	r1, fp
   82e6a:	9806      	ldr	r0, [sp, #24]
   82e6c:	f000 fdaa 	bl	839c4 <__swsetup_r>
   82e70:	bb18      	cbnz	r0, 82eba <_vfiprintf_r+0x206>
   82e72:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82e76:	f001 031a 	and.w	r3, r1, #26
   82e7a:	2b0a      	cmp	r3, #10
   82e7c:	f47f af4b 	bne.w	82d16 <_vfiprintf_r+0x62>
   82e80:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82e84:	2b00      	cmp	r3, #0
   82e86:	f6ff af46 	blt.w	82d16 <_vfiprintf_r+0x62>
   82e8a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82e8e:	07db      	lsls	r3, r3, #31
   82e90:	d405      	bmi.n	82e9e <_vfiprintf_r+0x1ea>
   82e92:	058f      	lsls	r7, r1, #22
   82e94:	d403      	bmi.n	82e9e <_vfiprintf_r+0x1ea>
   82e96:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82e9a:	f001 fabd 	bl	84418 <__retarget_lock_release_recursive>
   82e9e:	462b      	mov	r3, r5
   82ea0:	4642      	mov	r2, r8
   82ea2:	4659      	mov	r1, fp
   82ea4:	9806      	ldr	r0, [sp, #24]
   82ea6:	f000 fd49 	bl	8393c <__sbprintf>
   82eaa:	9003      	str	r0, [sp, #12]
   82eac:	9803      	ldr	r0, [sp, #12]
   82eae:	b02d      	add	sp, #180	; 0xb4
   82eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eb4:	f000 feee 	bl	83c94 <__sinit>
   82eb8:	e709      	b.n	82cce <_vfiprintf_r+0x1a>
   82eba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82ebe:	07d9      	lsls	r1, r3, #31
   82ec0:	d404      	bmi.n	82ecc <_vfiprintf_r+0x218>
   82ec2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82ec6:	059a      	lsls	r2, r3, #22
   82ec8:	f140 84ae 	bpl.w	83828 <_vfiprintf_r+0xb74>
   82ecc:	f04f 33ff 	mov.w	r3, #4294967295
   82ed0:	9303      	str	r3, [sp, #12]
   82ed2:	9803      	ldr	r0, [sp, #12]
   82ed4:	b02d      	add	sp, #180	; 0xb4
   82ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82ede:	f001 fa99 	bl	84414 <__retarget_lock_acquire_recursive>
   82ee2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82ee6:	b281      	uxth	r1, r0
   82ee8:	e6fb      	b.n	82ce2 <_vfiprintf_r+0x2e>
   82eea:	9907      	ldr	r1, [sp, #28]
   82eec:	460a      	mov	r2, r1
   82eee:	680d      	ldr	r5, [r1, #0]
   82ef0:	3204      	adds	r2, #4
   82ef2:	2d00      	cmp	r5, #0
   82ef4:	9207      	str	r2, [sp, #28]
   82ef6:	da02      	bge.n	82efe <_vfiprintf_r+0x24a>
   82ef8:	426d      	negs	r5, r5
   82efa:	f043 0304 	orr.w	r3, r3, #4
   82efe:	f898 2000 	ldrb.w	r2, [r8]
   82f02:	e749      	b.n	82d98 <_vfiprintf_r+0xe4>
   82f04:	9508      	str	r5, [sp, #32]
   82f06:	069e      	lsls	r6, r3, #26
   82f08:	f100 845a 	bmi.w	837c0 <_vfiprintf_r+0xb0c>
   82f0c:	9907      	ldr	r1, [sp, #28]
   82f0e:	06dd      	lsls	r5, r3, #27
   82f10:	460a      	mov	r2, r1
   82f12:	f100 83ef 	bmi.w	836f4 <_vfiprintf_r+0xa40>
   82f16:	0658      	lsls	r0, r3, #25
   82f18:	f140 83ec 	bpl.w	836f4 <_vfiprintf_r+0xa40>
   82f1c:	2700      	movs	r7, #0
   82f1e:	2201      	movs	r2, #1
   82f20:	880e      	ldrh	r6, [r1, #0]
   82f22:	3104      	adds	r1, #4
   82f24:	9107      	str	r1, [sp, #28]
   82f26:	f04f 0100 	mov.w	r1, #0
   82f2a:	2500      	movs	r5, #0
   82f2c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82f30:	1c61      	adds	r1, r4, #1
   82f32:	f000 8117 	beq.w	83164 <_vfiprintf_r+0x4b0>
   82f36:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82f3a:	9102      	str	r1, [sp, #8]
   82f3c:	ea56 0107 	orrs.w	r1, r6, r7
   82f40:	f040 8115 	bne.w	8316e <_vfiprintf_r+0x4ba>
   82f44:	2c00      	cmp	r4, #0
   82f46:	f040 835b 	bne.w	83600 <_vfiprintf_r+0x94c>
   82f4a:	2a00      	cmp	r2, #0
   82f4c:	f040 83b6 	bne.w	836bc <_vfiprintf_r+0xa08>
   82f50:	f013 0301 	ands.w	r3, r3, #1
   82f54:	9305      	str	r3, [sp, #20]
   82f56:	f000 8455 	beq.w	83804 <_vfiprintf_r+0xb50>
   82f5a:	2330      	movs	r3, #48	; 0x30
   82f5c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82f60:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82f64:	9b05      	ldr	r3, [sp, #20]
   82f66:	42a3      	cmp	r3, r4
   82f68:	bfb8      	it	lt
   82f6a:	4623      	movlt	r3, r4
   82f6c:	9301      	str	r3, [sp, #4]
   82f6e:	b10d      	cbz	r5, 82f74 <_vfiprintf_r+0x2c0>
   82f70:	3301      	adds	r3, #1
   82f72:	9301      	str	r3, [sp, #4]
   82f74:	9b02      	ldr	r3, [sp, #8]
   82f76:	f013 0302 	ands.w	r3, r3, #2
   82f7a:	9309      	str	r3, [sp, #36]	; 0x24
   82f7c:	d002      	beq.n	82f84 <_vfiprintf_r+0x2d0>
   82f7e:	9b01      	ldr	r3, [sp, #4]
   82f80:	3302      	adds	r3, #2
   82f82:	9301      	str	r3, [sp, #4]
   82f84:	9b02      	ldr	r3, [sp, #8]
   82f86:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82f8a:	930a      	str	r3, [sp, #40]	; 0x28
   82f8c:	f040 8215 	bne.w	833ba <_vfiprintf_r+0x706>
   82f90:	9b08      	ldr	r3, [sp, #32]
   82f92:	9a01      	ldr	r2, [sp, #4]
   82f94:	1a9d      	subs	r5, r3, r2
   82f96:	2d00      	cmp	r5, #0
   82f98:	f340 820f 	ble.w	833ba <_vfiprintf_r+0x706>
   82f9c:	2d10      	cmp	r5, #16
   82f9e:	f340 8484 	ble.w	838aa <_vfiprintf_r+0xbf6>
   82fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82fa4:	46ce      	mov	lr, r9
   82fa6:	2710      	movs	r7, #16
   82fa8:	46a1      	mov	r9, r4
   82faa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fac:	4ec5      	ldr	r6, [pc, #788]	; (832c4 <_vfiprintf_r+0x610>)
   82fae:	4619      	mov	r1, r3
   82fb0:	9c06      	ldr	r4, [sp, #24]
   82fb2:	e007      	b.n	82fc4 <_vfiprintf_r+0x310>
   82fb4:	f101 0c02 	add.w	ip, r1, #2
   82fb8:	4601      	mov	r1, r0
   82fba:	f10e 0e08 	add.w	lr, lr, #8
   82fbe:	3d10      	subs	r5, #16
   82fc0:	2d10      	cmp	r5, #16
   82fc2:	dd11      	ble.n	82fe8 <_vfiprintf_r+0x334>
   82fc4:	1c48      	adds	r0, r1, #1
   82fc6:	3210      	adds	r2, #16
   82fc8:	2807      	cmp	r0, #7
   82fca:	9211      	str	r2, [sp, #68]	; 0x44
   82fcc:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82fd0:	9010      	str	r0, [sp, #64]	; 0x40
   82fd2:	ddef      	ble.n	82fb4 <_vfiprintf_r+0x300>
   82fd4:	2a00      	cmp	r2, #0
   82fd6:	f040 81d9 	bne.w	8338c <_vfiprintf_r+0x6d8>
   82fda:	3d10      	subs	r5, #16
   82fdc:	2d10      	cmp	r5, #16
   82fde:	4611      	mov	r1, r2
   82fe0:	f04f 0c01 	mov.w	ip, #1
   82fe4:	46d6      	mov	lr, sl
   82fe6:	dced      	bgt.n	82fc4 <_vfiprintf_r+0x310>
   82fe8:	464c      	mov	r4, r9
   82fea:	4661      	mov	r1, ip
   82fec:	46f1      	mov	r9, lr
   82fee:	442a      	add	r2, r5
   82ff0:	2907      	cmp	r1, #7
   82ff2:	9211      	str	r2, [sp, #68]	; 0x44
   82ff4:	f8c9 6000 	str.w	r6, [r9]
   82ff8:	f8c9 5004 	str.w	r5, [r9, #4]
   82ffc:	9110      	str	r1, [sp, #64]	; 0x40
   82ffe:	f300 82eb 	bgt.w	835d8 <_vfiprintf_r+0x924>
   83002:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83006:	f109 0908 	add.w	r9, r9, #8
   8300a:	1c48      	adds	r0, r1, #1
   8300c:	2d00      	cmp	r5, #0
   8300e:	f040 81dc 	bne.w	833ca <_vfiprintf_r+0x716>
   83012:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83014:	2b00      	cmp	r3, #0
   83016:	f000 81f6 	beq.w	83406 <_vfiprintf_r+0x752>
   8301a:	2102      	movs	r1, #2
   8301c:	ab0e      	add	r3, sp, #56	; 0x38
   8301e:	440a      	add	r2, r1
   83020:	2807      	cmp	r0, #7
   83022:	9211      	str	r2, [sp, #68]	; 0x44
   83024:	9010      	str	r0, [sp, #64]	; 0x40
   83026:	f8c9 1004 	str.w	r1, [r9, #4]
   8302a:	f8c9 3000 	str.w	r3, [r9]
   8302e:	f340 81e6 	ble.w	833fe <_vfiprintf_r+0x74a>
   83032:	2a00      	cmp	r2, #0
   83034:	f040 8395 	bne.w	83762 <_vfiprintf_r+0xaae>
   83038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8303a:	2001      	movs	r0, #1
   8303c:	2b80      	cmp	r3, #128	; 0x80
   8303e:	4611      	mov	r1, r2
   83040:	46d1      	mov	r9, sl
   83042:	f040 81e4 	bne.w	8340e <_vfiprintf_r+0x75a>
   83046:	9b08      	ldr	r3, [sp, #32]
   83048:	9d01      	ldr	r5, [sp, #4]
   8304a:	1b5e      	subs	r6, r3, r5
   8304c:	2e00      	cmp	r6, #0
   8304e:	f340 81de 	ble.w	8340e <_vfiprintf_r+0x75a>
   83052:	2e10      	cmp	r6, #16
   83054:	f340 843c 	ble.w	838d0 <_vfiprintf_r+0xc1c>
   83058:	46cc      	mov	ip, r9
   8305a:	2710      	movs	r7, #16
   8305c:	46a1      	mov	r9, r4
   8305e:	4d9a      	ldr	r5, [pc, #616]	; (832c8 <_vfiprintf_r+0x614>)
   83060:	9c06      	ldr	r4, [sp, #24]
   83062:	e007      	b.n	83074 <_vfiprintf_r+0x3c0>
   83064:	f101 0e02 	add.w	lr, r1, #2
   83068:	4601      	mov	r1, r0
   8306a:	f10c 0c08 	add.w	ip, ip, #8
   8306e:	3e10      	subs	r6, #16
   83070:	2e10      	cmp	r6, #16
   83072:	dd11      	ble.n	83098 <_vfiprintf_r+0x3e4>
   83074:	1c48      	adds	r0, r1, #1
   83076:	3210      	adds	r2, #16
   83078:	2807      	cmp	r0, #7
   8307a:	9211      	str	r2, [sp, #68]	; 0x44
   8307c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   83080:	9010      	str	r0, [sp, #64]	; 0x40
   83082:	ddef      	ble.n	83064 <_vfiprintf_r+0x3b0>
   83084:	2a00      	cmp	r2, #0
   83086:	f040 829b 	bne.w	835c0 <_vfiprintf_r+0x90c>
   8308a:	3e10      	subs	r6, #16
   8308c:	2e10      	cmp	r6, #16
   8308e:	f04f 0e01 	mov.w	lr, #1
   83092:	4611      	mov	r1, r2
   83094:	46d4      	mov	ip, sl
   83096:	dced      	bgt.n	83074 <_vfiprintf_r+0x3c0>
   83098:	464c      	mov	r4, r9
   8309a:	46e1      	mov	r9, ip
   8309c:	4432      	add	r2, r6
   8309e:	f1be 0f07 	cmp.w	lr, #7
   830a2:	9211      	str	r2, [sp, #68]	; 0x44
   830a4:	e889 0060 	stmia.w	r9, {r5, r6}
   830a8:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   830ac:	f300 8366 	bgt.w	8377c <_vfiprintf_r+0xac8>
   830b0:	f109 0908 	add.w	r9, r9, #8
   830b4:	f10e 0001 	add.w	r0, lr, #1
   830b8:	4671      	mov	r1, lr
   830ba:	e1a8      	b.n	8340e <_vfiprintf_r+0x75a>
   830bc:	9508      	str	r5, [sp, #32]
   830be:	f013 0220 	ands.w	r2, r3, #32
   830c2:	f040 8389 	bne.w	837d8 <_vfiprintf_r+0xb24>
   830c6:	f013 0110 	ands.w	r1, r3, #16
   830ca:	f040 8319 	bne.w	83700 <_vfiprintf_r+0xa4c>
   830ce:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   830d2:	f000 8315 	beq.w	83700 <_vfiprintf_r+0xa4c>
   830d6:	9807      	ldr	r0, [sp, #28]
   830d8:	460a      	mov	r2, r1
   830da:	4601      	mov	r1, r0
   830dc:	3104      	adds	r1, #4
   830de:	8806      	ldrh	r6, [r0, #0]
   830e0:	2700      	movs	r7, #0
   830e2:	9107      	str	r1, [sp, #28]
   830e4:	e71f      	b.n	82f26 <_vfiprintf_r+0x272>
   830e6:	9508      	str	r5, [sp, #32]
   830e8:	f043 0310 	orr.w	r3, r3, #16
   830ec:	e7e7      	b.n	830be <_vfiprintf_r+0x40a>
   830ee:	9508      	str	r5, [sp, #32]
   830f0:	f043 0310 	orr.w	r3, r3, #16
   830f4:	e707      	b.n	82f06 <_vfiprintf_r+0x252>
   830f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   830fa:	f898 2000 	ldrb.w	r2, [r8]
   830fe:	e64b      	b.n	82d98 <_vfiprintf_r+0xe4>
   83100:	2500      	movs	r5, #0
   83102:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83106:	f818 2b01 	ldrb.w	r2, [r8], #1
   8310a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8310e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   83112:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83116:	2909      	cmp	r1, #9
   83118:	d9f5      	bls.n	83106 <_vfiprintf_r+0x452>
   8311a:	e63f      	b.n	82d9c <_vfiprintf_r+0xe8>
   8311c:	9508      	str	r5, [sp, #32]
   8311e:	2800      	cmp	r0, #0
   83120:	f040 8402 	bne.w	83928 <_vfiprintf_r+0xc74>
   83124:	f043 0310 	orr.w	r3, r3, #16
   83128:	069e      	lsls	r6, r3, #26
   8312a:	f100 833d 	bmi.w	837a8 <_vfiprintf_r+0xaf4>
   8312e:	9907      	ldr	r1, [sp, #28]
   83130:	06dd      	lsls	r5, r3, #27
   83132:	460a      	mov	r2, r1
   83134:	f100 82f0 	bmi.w	83718 <_vfiprintf_r+0xa64>
   83138:	0658      	lsls	r0, r3, #25
   8313a:	f140 82ed 	bpl.w	83718 <_vfiprintf_r+0xa64>
   8313e:	f9b1 6000 	ldrsh.w	r6, [r1]
   83142:	3204      	adds	r2, #4
   83144:	17f7      	asrs	r7, r6, #31
   83146:	4630      	mov	r0, r6
   83148:	4639      	mov	r1, r7
   8314a:	9207      	str	r2, [sp, #28]
   8314c:	2800      	cmp	r0, #0
   8314e:	f171 0200 	sbcs.w	r2, r1, #0
   83152:	f2c0 835a 	blt.w	8380a <_vfiprintf_r+0xb56>
   83156:	1c61      	adds	r1, r4, #1
   83158:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8315c:	f04f 0201 	mov.w	r2, #1
   83160:	f47f aee9 	bne.w	82f36 <_vfiprintf_r+0x282>
   83164:	ea56 0107 	orrs.w	r1, r6, r7
   83168:	f000 824b 	beq.w	83602 <_vfiprintf_r+0x94e>
   8316c:	9302      	str	r3, [sp, #8]
   8316e:	2a01      	cmp	r2, #1
   83170:	f000 828a 	beq.w	83688 <_vfiprintf_r+0x9d4>
   83174:	2a02      	cmp	r2, #2
   83176:	f040 825a 	bne.w	8362e <_vfiprintf_r+0x97a>
   8317a:	46d3      	mov	fp, sl
   8317c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8317e:	0933      	lsrs	r3, r6, #4
   83180:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   83184:	0939      	lsrs	r1, r7, #4
   83186:	f006 020f 	and.w	r2, r6, #15
   8318a:	460f      	mov	r7, r1
   8318c:	461e      	mov	r6, r3
   8318e:	5c83      	ldrb	r3, [r0, r2]
   83190:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   83194:	ea56 0307 	orrs.w	r3, r6, r7
   83198:	d1f1      	bne.n	8317e <_vfiprintf_r+0x4ca>
   8319a:	ebaa 030b 	sub.w	r3, sl, fp
   8319e:	9305      	str	r3, [sp, #20]
   831a0:	e6e0      	b.n	82f64 <_vfiprintf_r+0x2b0>
   831a2:	2800      	cmp	r0, #0
   831a4:	f040 83bd 	bne.w	83922 <_vfiprintf_r+0xc6e>
   831a8:	0699      	lsls	r1, r3, #26
   831aa:	f100 8359 	bmi.w	83860 <_vfiprintf_r+0xbac>
   831ae:	06da      	lsls	r2, r3, #27
   831b0:	f100 80e5 	bmi.w	8337e <_vfiprintf_r+0x6ca>
   831b4:	065b      	lsls	r3, r3, #25
   831b6:	f140 80e2 	bpl.w	8337e <_vfiprintf_r+0x6ca>
   831ba:	9a07      	ldr	r2, [sp, #28]
   831bc:	6813      	ldr	r3, [r2, #0]
   831be:	3204      	adds	r2, #4
   831c0:	9207      	str	r2, [sp, #28]
   831c2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   831c6:	801a      	strh	r2, [r3, #0]
   831c8:	e5b1      	b.n	82d2e <_vfiprintf_r+0x7a>
   831ca:	2278      	movs	r2, #120	; 0x78
   831cc:	2130      	movs	r1, #48	; 0x30
   831ce:	9508      	str	r5, [sp, #32]
   831d0:	9d07      	ldr	r5, [sp, #28]
   831d2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   831d6:	1d2a      	adds	r2, r5, #4
   831d8:	9207      	str	r2, [sp, #28]
   831da:	4a3c      	ldr	r2, [pc, #240]	; (832cc <_vfiprintf_r+0x618>)
   831dc:	682e      	ldr	r6, [r5, #0]
   831de:	920b      	str	r2, [sp, #44]	; 0x2c
   831e0:	f043 0302 	orr.w	r3, r3, #2
   831e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   831e8:	2700      	movs	r7, #0
   831ea:	2202      	movs	r2, #2
   831ec:	e69b      	b.n	82f26 <_vfiprintf_r+0x272>
   831ee:	9508      	str	r5, [sp, #32]
   831f0:	2800      	cmp	r0, #0
   831f2:	d099      	beq.n	83128 <_vfiprintf_r+0x474>
   831f4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   831f8:	e796      	b.n	83128 <_vfiprintf_r+0x474>
   831fa:	f898 2000 	ldrb.w	r2, [r8]
   831fe:	2e00      	cmp	r6, #0
   83200:	f47f adca 	bne.w	82d98 <_vfiprintf_r+0xe4>
   83204:	2001      	movs	r0, #1
   83206:	2620      	movs	r6, #32
   83208:	e5c6      	b.n	82d98 <_vfiprintf_r+0xe4>
   8320a:	f043 0301 	orr.w	r3, r3, #1
   8320e:	f898 2000 	ldrb.w	r2, [r8]
   83212:	e5c1      	b.n	82d98 <_vfiprintf_r+0xe4>
   83214:	9508      	str	r5, [sp, #32]
   83216:	2800      	cmp	r0, #0
   83218:	f040 8380 	bne.w	8391c <_vfiprintf_r+0xc68>
   8321c:	492b      	ldr	r1, [pc, #172]	; (832cc <_vfiprintf_r+0x618>)
   8321e:	910b      	str	r1, [sp, #44]	; 0x2c
   83220:	069f      	lsls	r7, r3, #26
   83222:	f100 82e5 	bmi.w	837f0 <_vfiprintf_r+0xb3c>
   83226:	9807      	ldr	r0, [sp, #28]
   83228:	06de      	lsls	r6, r3, #27
   8322a:	4601      	mov	r1, r0
   8322c:	f100 826f 	bmi.w	8370e <_vfiprintf_r+0xa5a>
   83230:	065d      	lsls	r5, r3, #25
   83232:	f140 826c 	bpl.w	8370e <_vfiprintf_r+0xa5a>
   83236:	2700      	movs	r7, #0
   83238:	3104      	adds	r1, #4
   8323a:	8806      	ldrh	r6, [r0, #0]
   8323c:	9107      	str	r1, [sp, #28]
   8323e:	07d8      	lsls	r0, r3, #31
   83240:	f140 8220 	bpl.w	83684 <_vfiprintf_r+0x9d0>
   83244:	ea56 0107 	orrs.w	r1, r6, r7
   83248:	f000 821c 	beq.w	83684 <_vfiprintf_r+0x9d0>
   8324c:	2130      	movs	r1, #48	; 0x30
   8324e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   83252:	f043 0302 	orr.w	r3, r3, #2
   83256:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8325a:	2202      	movs	r2, #2
   8325c:	e663      	b.n	82f26 <_vfiprintf_r+0x272>
   8325e:	9508      	str	r5, [sp, #32]
   83260:	2800      	cmp	r0, #0
   83262:	f040 8355 	bne.w	83910 <_vfiprintf_r+0xc5c>
   83266:	491a      	ldr	r1, [pc, #104]	; (832d0 <_vfiprintf_r+0x61c>)
   83268:	910b      	str	r1, [sp, #44]	; 0x2c
   8326a:	e7d9      	b.n	83220 <_vfiprintf_r+0x56c>
   8326c:	2201      	movs	r2, #1
   8326e:	9807      	ldr	r0, [sp, #28]
   83270:	4611      	mov	r1, r2
   83272:	9201      	str	r2, [sp, #4]
   83274:	6802      	ldr	r2, [r0, #0]
   83276:	f04f 0400 	mov.w	r4, #0
   8327a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8327e:	4602      	mov	r2, r0
   83280:	3204      	adds	r2, #4
   83282:	9508      	str	r5, [sp, #32]
   83284:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   83288:	9105      	str	r1, [sp, #20]
   8328a:	9207      	str	r2, [sp, #28]
   8328c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83290:	9302      	str	r3, [sp, #8]
   83292:	2400      	movs	r4, #0
   83294:	e66e      	b.n	82f74 <_vfiprintf_r+0x2c0>
   83296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8329a:	f898 2000 	ldrb.w	r2, [r8]
   8329e:	e57b      	b.n	82d98 <_vfiprintf_r+0xe4>
   832a0:	f898 2000 	ldrb.w	r2, [r8]
   832a4:	2a6c      	cmp	r2, #108	; 0x6c
   832a6:	bf03      	ittte	eq
   832a8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   832ac:	f043 0320 	orreq.w	r3, r3, #32
   832b0:	f108 0801 	addeq.w	r8, r8, #1
   832b4:	f043 0310 	orrne.w	r3, r3, #16
   832b8:	e56e      	b.n	82d98 <_vfiprintf_r+0xe4>
   832ba:	f898 2000 	ldrb.w	r2, [r8]
   832be:	2001      	movs	r0, #1
   832c0:	262b      	movs	r6, #43	; 0x2b
   832c2:	e569      	b.n	82d98 <_vfiprintf_r+0xe4>
   832c4:	00085750 	.word	0x00085750
   832c8:	00085760 	.word	0x00085760
   832cc:	00085734 	.word	0x00085734
   832d0:	00085720 	.word	0x00085720
   832d4:	f04f 0200 	mov.w	r2, #0
   832d8:	9907      	ldr	r1, [sp, #28]
   832da:	9508      	str	r5, [sp, #32]
   832dc:	f8d1 b000 	ldr.w	fp, [r1]
   832e0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   832e4:	1d0d      	adds	r5, r1, #4
   832e6:	f1bb 0f00 	cmp.w	fp, #0
   832ea:	f000 82e4 	beq.w	838b6 <_vfiprintf_r+0xc02>
   832ee:	1c67      	adds	r7, r4, #1
   832f0:	f000 82c3 	beq.w	8387a <_vfiprintf_r+0xbc6>
   832f4:	4622      	mov	r2, r4
   832f6:	2100      	movs	r1, #0
   832f8:	4658      	mov	r0, fp
   832fa:	9301      	str	r3, [sp, #4]
   832fc:	f001 fbc6 	bl	84a8c <memchr>
   83300:	9b01      	ldr	r3, [sp, #4]
   83302:	2800      	cmp	r0, #0
   83304:	f000 82e8 	beq.w	838d8 <_vfiprintf_r+0xc24>
   83308:	eba0 020b 	sub.w	r2, r0, fp
   8330c:	9507      	str	r5, [sp, #28]
   8330e:	9205      	str	r2, [sp, #20]
   83310:	9302      	str	r3, [sp, #8]
   83312:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83316:	2400      	movs	r4, #0
   83318:	e624      	b.n	82f64 <_vfiprintf_r+0x2b0>
   8331a:	f898 2000 	ldrb.w	r2, [r8]
   8331e:	f108 0701 	add.w	r7, r8, #1
   83322:	2a2a      	cmp	r2, #42	; 0x2a
   83324:	f000 82e9 	beq.w	838fa <_vfiprintf_r+0xc46>
   83328:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8332c:	2909      	cmp	r1, #9
   8332e:	46b8      	mov	r8, r7
   83330:	f04f 0400 	mov.w	r4, #0
   83334:	f63f ad32 	bhi.w	82d9c <_vfiprintf_r+0xe8>
   83338:	f818 2b01 	ldrb.w	r2, [r8], #1
   8333c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83340:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   83344:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83348:	2909      	cmp	r1, #9
   8334a:	d9f5      	bls.n	83338 <_vfiprintf_r+0x684>
   8334c:	e526      	b.n	82d9c <_vfiprintf_r+0xe8>
   8334e:	f043 0320 	orr.w	r3, r3, #32
   83352:	f898 2000 	ldrb.w	r2, [r8]
   83356:	e51f      	b.n	82d98 <_vfiprintf_r+0xe4>
   83358:	9508      	str	r5, [sp, #32]
   8335a:	2800      	cmp	r0, #0
   8335c:	f040 82db 	bne.w	83916 <_vfiprintf_r+0xc62>
   83360:	2a00      	cmp	r2, #0
   83362:	f000 80f1 	beq.w	83548 <_vfiprintf_r+0x894>
   83366:	2101      	movs	r1, #1
   83368:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8336c:	f04f 0200 	mov.w	r2, #0
   83370:	9101      	str	r1, [sp, #4]
   83372:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83376:	9105      	str	r1, [sp, #20]
   83378:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   8337c:	e788      	b.n	83290 <_vfiprintf_r+0x5dc>
   8337e:	9a07      	ldr	r2, [sp, #28]
   83380:	6813      	ldr	r3, [r2, #0]
   83382:	3204      	adds	r2, #4
   83384:	9207      	str	r2, [sp, #28]
   83386:	9a03      	ldr	r2, [sp, #12]
   83388:	601a      	str	r2, [r3, #0]
   8338a:	e4d0      	b.n	82d2e <_vfiprintf_r+0x7a>
   8338c:	aa0f      	add	r2, sp, #60	; 0x3c
   8338e:	9904      	ldr	r1, [sp, #16]
   83390:	4620      	mov	r0, r4
   83392:	f7ff fc4f 	bl	82c34 <__sprint_r.part.0>
   83396:	2800      	cmp	r0, #0
   83398:	f040 8143 	bne.w	83622 <_vfiprintf_r+0x96e>
   8339c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8339e:	46d6      	mov	lr, sl
   833a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833a2:	f101 0c01 	add.w	ip, r1, #1
   833a6:	e60a      	b.n	82fbe <_vfiprintf_r+0x30a>
   833a8:	aa0f      	add	r2, sp, #60	; 0x3c
   833aa:	9904      	ldr	r1, [sp, #16]
   833ac:	9806      	ldr	r0, [sp, #24]
   833ae:	f7ff fc41 	bl	82c34 <__sprint_r.part.0>
   833b2:	2800      	cmp	r0, #0
   833b4:	f040 8135 	bne.w	83622 <_vfiprintf_r+0x96e>
   833b8:	46d1      	mov	r9, sl
   833ba:	9910      	ldr	r1, [sp, #64]	; 0x40
   833bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   833c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833c2:	1c48      	adds	r0, r1, #1
   833c4:	2d00      	cmp	r5, #0
   833c6:	f43f ae24 	beq.w	83012 <_vfiprintf_r+0x35e>
   833ca:	2101      	movs	r1, #1
   833cc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   833d0:	440a      	add	r2, r1
   833d2:	2807      	cmp	r0, #7
   833d4:	9211      	str	r2, [sp, #68]	; 0x44
   833d6:	9010      	str	r0, [sp, #64]	; 0x40
   833d8:	f8c9 1004 	str.w	r1, [r9, #4]
   833dc:	f8c9 5000 	str.w	r5, [r9]
   833e0:	f340 8109 	ble.w	835f6 <_vfiprintf_r+0x942>
   833e4:	2a00      	cmp	r2, #0
   833e6:	f040 81af 	bne.w	83748 <_vfiprintf_r+0xa94>
   833ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   833ec:	2b00      	cmp	r3, #0
   833ee:	f43f ae23 	beq.w	83038 <_vfiprintf_r+0x384>
   833f2:	2202      	movs	r2, #2
   833f4:	4608      	mov	r0, r1
   833f6:	46d1      	mov	r9, sl
   833f8:	ab0e      	add	r3, sp, #56	; 0x38
   833fa:	921d      	str	r2, [sp, #116]	; 0x74
   833fc:	931c      	str	r3, [sp, #112]	; 0x70
   833fe:	4601      	mov	r1, r0
   83400:	f109 0908 	add.w	r9, r9, #8
   83404:	3001      	adds	r0, #1
   83406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83408:	2b80      	cmp	r3, #128	; 0x80
   8340a:	f43f ae1c 	beq.w	83046 <_vfiprintf_r+0x392>
   8340e:	9b05      	ldr	r3, [sp, #20]
   83410:	1ae4      	subs	r4, r4, r3
   83412:	2c00      	cmp	r4, #0
   83414:	dd2f      	ble.n	83476 <_vfiprintf_r+0x7c2>
   83416:	2c10      	cmp	r4, #16
   83418:	f340 8220 	ble.w	8385c <_vfiprintf_r+0xba8>
   8341c:	46ce      	mov	lr, r9
   8341e:	2610      	movs	r6, #16
   83420:	4db2      	ldr	r5, [pc, #712]	; (836ec <_vfiprintf_r+0xa38>)
   83422:	9f06      	ldr	r7, [sp, #24]
   83424:	f8dd 9010 	ldr.w	r9, [sp, #16]
   83428:	e006      	b.n	83438 <_vfiprintf_r+0x784>
   8342a:	1c88      	adds	r0, r1, #2
   8342c:	4619      	mov	r1, r3
   8342e:	f10e 0e08 	add.w	lr, lr, #8
   83432:	3c10      	subs	r4, #16
   83434:	2c10      	cmp	r4, #16
   83436:	dd10      	ble.n	8345a <_vfiprintf_r+0x7a6>
   83438:	1c4b      	adds	r3, r1, #1
   8343a:	3210      	adds	r2, #16
   8343c:	2b07      	cmp	r3, #7
   8343e:	9211      	str	r2, [sp, #68]	; 0x44
   83440:	e88e 0060 	stmia.w	lr, {r5, r6}
   83444:	9310      	str	r3, [sp, #64]	; 0x40
   83446:	ddf0      	ble.n	8342a <_vfiprintf_r+0x776>
   83448:	2a00      	cmp	r2, #0
   8344a:	d165      	bne.n	83518 <_vfiprintf_r+0x864>
   8344c:	3c10      	subs	r4, #16
   8344e:	2c10      	cmp	r4, #16
   83450:	f04f 0001 	mov.w	r0, #1
   83454:	4611      	mov	r1, r2
   83456:	46d6      	mov	lr, sl
   83458:	dcee      	bgt.n	83438 <_vfiprintf_r+0x784>
   8345a:	46f1      	mov	r9, lr
   8345c:	4422      	add	r2, r4
   8345e:	2807      	cmp	r0, #7
   83460:	9211      	str	r2, [sp, #68]	; 0x44
   83462:	f8c9 5000 	str.w	r5, [r9]
   83466:	f8c9 4004 	str.w	r4, [r9, #4]
   8346a:	9010      	str	r0, [sp, #64]	; 0x40
   8346c:	f300 8085 	bgt.w	8357a <_vfiprintf_r+0x8c6>
   83470:	f109 0908 	add.w	r9, r9, #8
   83474:	3001      	adds	r0, #1
   83476:	9905      	ldr	r1, [sp, #20]
   83478:	2807      	cmp	r0, #7
   8347a:	440a      	add	r2, r1
   8347c:	9211      	str	r2, [sp, #68]	; 0x44
   8347e:	f8c9 b000 	str.w	fp, [r9]
   83482:	f8c9 1004 	str.w	r1, [r9, #4]
   83486:	9010      	str	r0, [sp, #64]	; 0x40
   83488:	f340 8082 	ble.w	83590 <_vfiprintf_r+0x8dc>
   8348c:	2a00      	cmp	r2, #0
   8348e:	f040 8118 	bne.w	836c2 <_vfiprintf_r+0xa0e>
   83492:	9b02      	ldr	r3, [sp, #8]
   83494:	9210      	str	r2, [sp, #64]	; 0x40
   83496:	0758      	lsls	r0, r3, #29
   83498:	d535      	bpl.n	83506 <_vfiprintf_r+0x852>
   8349a:	9b08      	ldr	r3, [sp, #32]
   8349c:	9901      	ldr	r1, [sp, #4]
   8349e:	1a5c      	subs	r4, r3, r1
   834a0:	2c00      	cmp	r4, #0
   834a2:	f340 80e7 	ble.w	83674 <_vfiprintf_r+0x9c0>
   834a6:	46d1      	mov	r9, sl
   834a8:	2c10      	cmp	r4, #16
   834aa:	f340 820d 	ble.w	838c8 <_vfiprintf_r+0xc14>
   834ae:	2510      	movs	r5, #16
   834b0:	9910      	ldr	r1, [sp, #64]	; 0x40
   834b2:	4e8f      	ldr	r6, [pc, #572]	; (836f0 <_vfiprintf_r+0xa3c>)
   834b4:	9f06      	ldr	r7, [sp, #24]
   834b6:	f8dd b010 	ldr.w	fp, [sp, #16]
   834ba:	e006      	b.n	834ca <_vfiprintf_r+0x816>
   834bc:	1c88      	adds	r0, r1, #2
   834be:	4619      	mov	r1, r3
   834c0:	f109 0908 	add.w	r9, r9, #8
   834c4:	3c10      	subs	r4, #16
   834c6:	2c10      	cmp	r4, #16
   834c8:	dd11      	ble.n	834ee <_vfiprintf_r+0x83a>
   834ca:	1c4b      	adds	r3, r1, #1
   834cc:	3210      	adds	r2, #16
   834ce:	2b07      	cmp	r3, #7
   834d0:	9211      	str	r2, [sp, #68]	; 0x44
   834d2:	f8c9 6000 	str.w	r6, [r9]
   834d6:	f8c9 5004 	str.w	r5, [r9, #4]
   834da:	9310      	str	r3, [sp, #64]	; 0x40
   834dc:	ddee      	ble.n	834bc <_vfiprintf_r+0x808>
   834de:	bb42      	cbnz	r2, 83532 <_vfiprintf_r+0x87e>
   834e0:	3c10      	subs	r4, #16
   834e2:	2c10      	cmp	r4, #16
   834e4:	f04f 0001 	mov.w	r0, #1
   834e8:	4611      	mov	r1, r2
   834ea:	46d1      	mov	r9, sl
   834ec:	dced      	bgt.n	834ca <_vfiprintf_r+0x816>
   834ee:	4422      	add	r2, r4
   834f0:	2807      	cmp	r0, #7
   834f2:	9211      	str	r2, [sp, #68]	; 0x44
   834f4:	f8c9 6000 	str.w	r6, [r9]
   834f8:	f8c9 4004 	str.w	r4, [r9, #4]
   834fc:	9010      	str	r0, [sp, #64]	; 0x40
   834fe:	dd51      	ble.n	835a4 <_vfiprintf_r+0x8f0>
   83500:	2a00      	cmp	r2, #0
   83502:	f040 819a 	bne.w	8383a <_vfiprintf_r+0xb86>
   83506:	9b03      	ldr	r3, [sp, #12]
   83508:	9a08      	ldr	r2, [sp, #32]
   8350a:	9901      	ldr	r1, [sp, #4]
   8350c:	428a      	cmp	r2, r1
   8350e:	bfac      	ite	ge
   83510:	189b      	addge	r3, r3, r2
   83512:	185b      	addlt	r3, r3, r1
   83514:	9303      	str	r3, [sp, #12]
   83516:	e04e      	b.n	835b6 <_vfiprintf_r+0x902>
   83518:	aa0f      	add	r2, sp, #60	; 0x3c
   8351a:	4649      	mov	r1, r9
   8351c:	4638      	mov	r0, r7
   8351e:	f7ff fb89 	bl	82c34 <__sprint_r.part.0>
   83522:	2800      	cmp	r0, #0
   83524:	f040 813e 	bne.w	837a4 <_vfiprintf_r+0xaf0>
   83528:	9910      	ldr	r1, [sp, #64]	; 0x40
   8352a:	46d6      	mov	lr, sl
   8352c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8352e:	1c48      	adds	r0, r1, #1
   83530:	e77f      	b.n	83432 <_vfiprintf_r+0x77e>
   83532:	aa0f      	add	r2, sp, #60	; 0x3c
   83534:	4659      	mov	r1, fp
   83536:	4638      	mov	r0, r7
   83538:	f7ff fb7c 	bl	82c34 <__sprint_r.part.0>
   8353c:	b960      	cbnz	r0, 83558 <_vfiprintf_r+0x8a4>
   8353e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83540:	46d1      	mov	r9, sl
   83542:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83544:	1c48      	adds	r0, r1, #1
   83546:	e7bd      	b.n	834c4 <_vfiprintf_r+0x810>
   83548:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8354a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8354e:	2b00      	cmp	r3, #0
   83550:	f040 81ca 	bne.w	838e8 <_vfiprintf_r+0xc34>
   83554:	2300      	movs	r3, #0
   83556:	9310      	str	r3, [sp, #64]	; 0x40
   83558:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8355c:	f013 0f01 	tst.w	r3, #1
   83560:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83564:	d102      	bne.n	8356c <_vfiprintf_r+0x8b8>
   83566:	059a      	lsls	r2, r3, #22
   83568:	f140 80dd 	bpl.w	83726 <_vfiprintf_r+0xa72>
   8356c:	065b      	lsls	r3, r3, #25
   8356e:	f53f acad 	bmi.w	82ecc <_vfiprintf_r+0x218>
   83572:	9803      	ldr	r0, [sp, #12]
   83574:	b02d      	add	sp, #180	; 0xb4
   83576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8357a:	2a00      	cmp	r2, #0
   8357c:	f040 8105 	bne.w	8378a <_vfiprintf_r+0xad6>
   83580:	2301      	movs	r3, #1
   83582:	46d1      	mov	r9, sl
   83584:	9a05      	ldr	r2, [sp, #20]
   83586:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8358a:	921d      	str	r2, [sp, #116]	; 0x74
   8358c:	9211      	str	r2, [sp, #68]	; 0x44
   8358e:	9310      	str	r3, [sp, #64]	; 0x40
   83590:	f109 0908 	add.w	r9, r9, #8
   83594:	9b02      	ldr	r3, [sp, #8]
   83596:	0759      	lsls	r1, r3, #29
   83598:	d504      	bpl.n	835a4 <_vfiprintf_r+0x8f0>
   8359a:	9b08      	ldr	r3, [sp, #32]
   8359c:	9901      	ldr	r1, [sp, #4]
   8359e:	1a5c      	subs	r4, r3, r1
   835a0:	2c00      	cmp	r4, #0
   835a2:	dc81      	bgt.n	834a8 <_vfiprintf_r+0x7f4>
   835a4:	9b03      	ldr	r3, [sp, #12]
   835a6:	9908      	ldr	r1, [sp, #32]
   835a8:	9801      	ldr	r0, [sp, #4]
   835aa:	4281      	cmp	r1, r0
   835ac:	bfac      	ite	ge
   835ae:	185b      	addge	r3, r3, r1
   835b0:	181b      	addlt	r3, r3, r0
   835b2:	9303      	str	r3, [sp, #12]
   835b4:	bb72      	cbnz	r2, 83614 <_vfiprintf_r+0x960>
   835b6:	2300      	movs	r3, #0
   835b8:	46d1      	mov	r9, sl
   835ba:	9310      	str	r3, [sp, #64]	; 0x40
   835bc:	f7ff bbb7 	b.w	82d2e <_vfiprintf_r+0x7a>
   835c0:	aa0f      	add	r2, sp, #60	; 0x3c
   835c2:	9904      	ldr	r1, [sp, #16]
   835c4:	4620      	mov	r0, r4
   835c6:	f7ff fb35 	bl	82c34 <__sprint_r.part.0>
   835ca:	bb50      	cbnz	r0, 83622 <_vfiprintf_r+0x96e>
   835cc:	9910      	ldr	r1, [sp, #64]	; 0x40
   835ce:	46d4      	mov	ip, sl
   835d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   835d2:	f101 0e01 	add.w	lr, r1, #1
   835d6:	e54a      	b.n	8306e <_vfiprintf_r+0x3ba>
   835d8:	2a00      	cmp	r2, #0
   835da:	f47f aee5 	bne.w	833a8 <_vfiprintf_r+0x6f4>
   835de:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   835e2:	2900      	cmp	r1, #0
   835e4:	f000 811a 	beq.w	8381c <_vfiprintf_r+0xb68>
   835e8:	2201      	movs	r2, #1
   835ea:	46d1      	mov	r9, sl
   835ec:	4610      	mov	r0, r2
   835ee:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   835f2:	921d      	str	r2, [sp, #116]	; 0x74
   835f4:	911c      	str	r1, [sp, #112]	; 0x70
   835f6:	4601      	mov	r1, r0
   835f8:	f109 0908 	add.w	r9, r9, #8
   835fc:	3001      	adds	r0, #1
   835fe:	e508      	b.n	83012 <_vfiprintf_r+0x35e>
   83600:	9b02      	ldr	r3, [sp, #8]
   83602:	2a01      	cmp	r2, #1
   83604:	f000 8097 	beq.w	83736 <_vfiprintf_r+0xa82>
   83608:	2a02      	cmp	r2, #2
   8360a:	d10d      	bne.n	83628 <_vfiprintf_r+0x974>
   8360c:	9302      	str	r3, [sp, #8]
   8360e:	2600      	movs	r6, #0
   83610:	2700      	movs	r7, #0
   83612:	e5b2      	b.n	8317a <_vfiprintf_r+0x4c6>
   83614:	aa0f      	add	r2, sp, #60	; 0x3c
   83616:	9904      	ldr	r1, [sp, #16]
   83618:	9806      	ldr	r0, [sp, #24]
   8361a:	f7ff fb0b 	bl	82c34 <__sprint_r.part.0>
   8361e:	2800      	cmp	r0, #0
   83620:	d0c9      	beq.n	835b6 <_vfiprintf_r+0x902>
   83622:	f8dd b010 	ldr.w	fp, [sp, #16]
   83626:	e797      	b.n	83558 <_vfiprintf_r+0x8a4>
   83628:	2600      	movs	r6, #0
   8362a:	2700      	movs	r7, #0
   8362c:	9302      	str	r3, [sp, #8]
   8362e:	4651      	mov	r1, sl
   83630:	e000      	b.n	83634 <_vfiprintf_r+0x980>
   83632:	4659      	mov	r1, fp
   83634:	08f2      	lsrs	r2, r6, #3
   83636:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8363a:	08f8      	lsrs	r0, r7, #3
   8363c:	f006 0307 	and.w	r3, r6, #7
   83640:	4607      	mov	r7, r0
   83642:	4616      	mov	r6, r2
   83644:	3330      	adds	r3, #48	; 0x30
   83646:	ea56 0207 	orrs.w	r2, r6, r7
   8364a:	f801 3c01 	strb.w	r3, [r1, #-1]
   8364e:	f101 3bff 	add.w	fp, r1, #4294967295
   83652:	d1ee      	bne.n	83632 <_vfiprintf_r+0x97e>
   83654:	9a02      	ldr	r2, [sp, #8]
   83656:	07d6      	lsls	r6, r2, #31
   83658:	f57f ad9f 	bpl.w	8319a <_vfiprintf_r+0x4e6>
   8365c:	2b30      	cmp	r3, #48	; 0x30
   8365e:	f43f ad9c 	beq.w	8319a <_vfiprintf_r+0x4e6>
   83662:	2330      	movs	r3, #48	; 0x30
   83664:	3902      	subs	r1, #2
   83666:	f80b 3c01 	strb.w	r3, [fp, #-1]
   8366a:	ebaa 0301 	sub.w	r3, sl, r1
   8366e:	9305      	str	r3, [sp, #20]
   83670:	468b      	mov	fp, r1
   83672:	e477      	b.n	82f64 <_vfiprintf_r+0x2b0>
   83674:	9b03      	ldr	r3, [sp, #12]
   83676:	9a08      	ldr	r2, [sp, #32]
   83678:	428a      	cmp	r2, r1
   8367a:	bfac      	ite	ge
   8367c:	189b      	addge	r3, r3, r2
   8367e:	185b      	addlt	r3, r3, r1
   83680:	9303      	str	r3, [sp, #12]
   83682:	e798      	b.n	835b6 <_vfiprintf_r+0x902>
   83684:	2202      	movs	r2, #2
   83686:	e44e      	b.n	82f26 <_vfiprintf_r+0x272>
   83688:	2f00      	cmp	r7, #0
   8368a:	bf08      	it	eq
   8368c:	2e0a      	cmpeq	r6, #10
   8368e:	d351      	bcc.n	83734 <_vfiprintf_r+0xa80>
   83690:	46d3      	mov	fp, sl
   83692:	4630      	mov	r0, r6
   83694:	4639      	mov	r1, r7
   83696:	220a      	movs	r2, #10
   83698:	2300      	movs	r3, #0
   8369a:	f001 fe85 	bl	853a8 <__aeabi_uldivmod>
   8369e:	3230      	adds	r2, #48	; 0x30
   836a0:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   836a4:	4630      	mov	r0, r6
   836a6:	4639      	mov	r1, r7
   836a8:	2300      	movs	r3, #0
   836aa:	220a      	movs	r2, #10
   836ac:	f001 fe7c 	bl	853a8 <__aeabi_uldivmod>
   836b0:	4606      	mov	r6, r0
   836b2:	460f      	mov	r7, r1
   836b4:	ea56 0307 	orrs.w	r3, r6, r7
   836b8:	d1eb      	bne.n	83692 <_vfiprintf_r+0x9de>
   836ba:	e56e      	b.n	8319a <_vfiprintf_r+0x4e6>
   836bc:	9405      	str	r4, [sp, #20]
   836be:	46d3      	mov	fp, sl
   836c0:	e450      	b.n	82f64 <_vfiprintf_r+0x2b0>
   836c2:	aa0f      	add	r2, sp, #60	; 0x3c
   836c4:	9904      	ldr	r1, [sp, #16]
   836c6:	9806      	ldr	r0, [sp, #24]
   836c8:	f7ff fab4 	bl	82c34 <__sprint_r.part.0>
   836cc:	2800      	cmp	r0, #0
   836ce:	d1a8      	bne.n	83622 <_vfiprintf_r+0x96e>
   836d0:	46d1      	mov	r9, sl
   836d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836d4:	e75e      	b.n	83594 <_vfiprintf_r+0x8e0>
   836d6:	aa0f      	add	r2, sp, #60	; 0x3c
   836d8:	9904      	ldr	r1, [sp, #16]
   836da:	9806      	ldr	r0, [sp, #24]
   836dc:	f7ff faaa 	bl	82c34 <__sprint_r.part.0>
   836e0:	2800      	cmp	r0, #0
   836e2:	d19e      	bne.n	83622 <_vfiprintf_r+0x96e>
   836e4:	46d1      	mov	r9, sl
   836e6:	f7ff bbbb 	b.w	82e60 <_vfiprintf_r+0x1ac>
   836ea:	bf00      	nop
   836ec:	00085760 	.word	0x00085760
   836f0:	00085750 	.word	0x00085750
   836f4:	3104      	adds	r1, #4
   836f6:	6816      	ldr	r6, [r2, #0]
   836f8:	2700      	movs	r7, #0
   836fa:	2201      	movs	r2, #1
   836fc:	9107      	str	r1, [sp, #28]
   836fe:	e412      	b.n	82f26 <_vfiprintf_r+0x272>
   83700:	9807      	ldr	r0, [sp, #28]
   83702:	2700      	movs	r7, #0
   83704:	4601      	mov	r1, r0
   83706:	3104      	adds	r1, #4
   83708:	6806      	ldr	r6, [r0, #0]
   8370a:	9107      	str	r1, [sp, #28]
   8370c:	e40b      	b.n	82f26 <_vfiprintf_r+0x272>
   8370e:	680e      	ldr	r6, [r1, #0]
   83710:	3104      	adds	r1, #4
   83712:	9107      	str	r1, [sp, #28]
   83714:	2700      	movs	r7, #0
   83716:	e592      	b.n	8323e <_vfiprintf_r+0x58a>
   83718:	6816      	ldr	r6, [r2, #0]
   8371a:	3204      	adds	r2, #4
   8371c:	17f7      	asrs	r7, r6, #31
   8371e:	9207      	str	r2, [sp, #28]
   83720:	4630      	mov	r0, r6
   83722:	4639      	mov	r1, r7
   83724:	e512      	b.n	8314c <_vfiprintf_r+0x498>
   83726:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8372a:	f000 fe75 	bl	84418 <__retarget_lock_release_recursive>
   8372e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83732:	e71b      	b.n	8356c <_vfiprintf_r+0x8b8>
   83734:	9b02      	ldr	r3, [sp, #8]
   83736:	9302      	str	r3, [sp, #8]
   83738:	2301      	movs	r3, #1
   8373a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8373e:	3630      	adds	r6, #48	; 0x30
   83740:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83744:	9305      	str	r3, [sp, #20]
   83746:	e40d      	b.n	82f64 <_vfiprintf_r+0x2b0>
   83748:	aa0f      	add	r2, sp, #60	; 0x3c
   8374a:	9904      	ldr	r1, [sp, #16]
   8374c:	9806      	ldr	r0, [sp, #24]
   8374e:	f7ff fa71 	bl	82c34 <__sprint_r.part.0>
   83752:	2800      	cmp	r0, #0
   83754:	f47f af65 	bne.w	83622 <_vfiprintf_r+0x96e>
   83758:	9910      	ldr	r1, [sp, #64]	; 0x40
   8375a:	46d1      	mov	r9, sl
   8375c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8375e:	1c48      	adds	r0, r1, #1
   83760:	e457      	b.n	83012 <_vfiprintf_r+0x35e>
   83762:	aa0f      	add	r2, sp, #60	; 0x3c
   83764:	9904      	ldr	r1, [sp, #16]
   83766:	9806      	ldr	r0, [sp, #24]
   83768:	f7ff fa64 	bl	82c34 <__sprint_r.part.0>
   8376c:	2800      	cmp	r0, #0
   8376e:	f47f af58 	bne.w	83622 <_vfiprintf_r+0x96e>
   83772:	9910      	ldr	r1, [sp, #64]	; 0x40
   83774:	46d1      	mov	r9, sl
   83776:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83778:	1c48      	adds	r0, r1, #1
   8377a:	e644      	b.n	83406 <_vfiprintf_r+0x752>
   8377c:	2a00      	cmp	r2, #0
   8377e:	f040 8087 	bne.w	83890 <_vfiprintf_r+0xbdc>
   83782:	2001      	movs	r0, #1
   83784:	4611      	mov	r1, r2
   83786:	46d1      	mov	r9, sl
   83788:	e641      	b.n	8340e <_vfiprintf_r+0x75a>
   8378a:	aa0f      	add	r2, sp, #60	; 0x3c
   8378c:	9904      	ldr	r1, [sp, #16]
   8378e:	9806      	ldr	r0, [sp, #24]
   83790:	f7ff fa50 	bl	82c34 <__sprint_r.part.0>
   83794:	2800      	cmp	r0, #0
   83796:	f47f af44 	bne.w	83622 <_vfiprintf_r+0x96e>
   8379a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8379c:	46d1      	mov	r9, sl
   8379e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   837a0:	3001      	adds	r0, #1
   837a2:	e668      	b.n	83476 <_vfiprintf_r+0x7c2>
   837a4:	46cb      	mov	fp, r9
   837a6:	e6d7      	b.n	83558 <_vfiprintf_r+0x8a4>
   837a8:	9d07      	ldr	r5, [sp, #28]
   837aa:	3507      	adds	r5, #7
   837ac:	f025 0507 	bic.w	r5, r5, #7
   837b0:	f105 0208 	add.w	r2, r5, #8
   837b4:	e9d5 0100 	ldrd	r0, r1, [r5]
   837b8:	9207      	str	r2, [sp, #28]
   837ba:	4606      	mov	r6, r0
   837bc:	460f      	mov	r7, r1
   837be:	e4c5      	b.n	8314c <_vfiprintf_r+0x498>
   837c0:	9d07      	ldr	r5, [sp, #28]
   837c2:	3507      	adds	r5, #7
   837c4:	f025 0207 	bic.w	r2, r5, #7
   837c8:	f102 0108 	add.w	r1, r2, #8
   837cc:	e9d2 6700 	ldrd	r6, r7, [r2]
   837d0:	9107      	str	r1, [sp, #28]
   837d2:	2201      	movs	r2, #1
   837d4:	f7ff bba7 	b.w	82f26 <_vfiprintf_r+0x272>
   837d8:	9d07      	ldr	r5, [sp, #28]
   837da:	3507      	adds	r5, #7
   837dc:	f025 0207 	bic.w	r2, r5, #7
   837e0:	f102 0108 	add.w	r1, r2, #8
   837e4:	e9d2 6700 	ldrd	r6, r7, [r2]
   837e8:	9107      	str	r1, [sp, #28]
   837ea:	2200      	movs	r2, #0
   837ec:	f7ff bb9b 	b.w	82f26 <_vfiprintf_r+0x272>
   837f0:	9d07      	ldr	r5, [sp, #28]
   837f2:	3507      	adds	r5, #7
   837f4:	f025 0107 	bic.w	r1, r5, #7
   837f8:	f101 0008 	add.w	r0, r1, #8
   837fc:	9007      	str	r0, [sp, #28]
   837fe:	e9d1 6700 	ldrd	r6, r7, [r1]
   83802:	e51c      	b.n	8323e <_vfiprintf_r+0x58a>
   83804:	46d3      	mov	fp, sl
   83806:	f7ff bbad 	b.w	82f64 <_vfiprintf_r+0x2b0>
   8380a:	252d      	movs	r5, #45	; 0x2d
   8380c:	4276      	negs	r6, r6
   8380e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83812:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83816:	2201      	movs	r2, #1
   83818:	f7ff bb8a 	b.w	82f30 <_vfiprintf_r+0x27c>
   8381c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8381e:	b9b3      	cbnz	r3, 8384e <_vfiprintf_r+0xb9a>
   83820:	4611      	mov	r1, r2
   83822:	2001      	movs	r0, #1
   83824:	46d1      	mov	r9, sl
   83826:	e5f2      	b.n	8340e <_vfiprintf_r+0x75a>
   83828:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8382c:	f000 fdf4 	bl	84418 <__retarget_lock_release_recursive>
   83830:	f04f 33ff 	mov.w	r3, #4294967295
   83834:	9303      	str	r3, [sp, #12]
   83836:	f7ff bb4c 	b.w	82ed2 <_vfiprintf_r+0x21e>
   8383a:	aa0f      	add	r2, sp, #60	; 0x3c
   8383c:	9904      	ldr	r1, [sp, #16]
   8383e:	9806      	ldr	r0, [sp, #24]
   83840:	f7ff f9f8 	bl	82c34 <__sprint_r.part.0>
   83844:	2800      	cmp	r0, #0
   83846:	f47f aeec 	bne.w	83622 <_vfiprintf_r+0x96e>
   8384a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8384c:	e6aa      	b.n	835a4 <_vfiprintf_r+0x8f0>
   8384e:	2202      	movs	r2, #2
   83850:	ab0e      	add	r3, sp, #56	; 0x38
   83852:	921d      	str	r2, [sp, #116]	; 0x74
   83854:	931c      	str	r3, [sp, #112]	; 0x70
   83856:	2001      	movs	r0, #1
   83858:	46d1      	mov	r9, sl
   8385a:	e5d0      	b.n	833fe <_vfiprintf_r+0x74a>
   8385c:	4d34      	ldr	r5, [pc, #208]	; (83930 <_vfiprintf_r+0xc7c>)
   8385e:	e5fd      	b.n	8345c <_vfiprintf_r+0x7a8>
   83860:	9a07      	ldr	r2, [sp, #28]
   83862:	4613      	mov	r3, r2
   83864:	3304      	adds	r3, #4
   83866:	9307      	str	r3, [sp, #28]
   83868:	9b03      	ldr	r3, [sp, #12]
   8386a:	6811      	ldr	r1, [r2, #0]
   8386c:	17dd      	asrs	r5, r3, #31
   8386e:	461a      	mov	r2, r3
   83870:	462b      	mov	r3, r5
   83872:	e9c1 2300 	strd	r2, r3, [r1]
   83876:	f7ff ba5a 	b.w	82d2e <_vfiprintf_r+0x7a>
   8387a:	4658      	mov	r0, fp
   8387c:	9507      	str	r5, [sp, #28]
   8387e:	9302      	str	r3, [sp, #8]
   83880:	f7ff f9aa 	bl	82bd8 <strlen>
   83884:	2400      	movs	r4, #0
   83886:	9005      	str	r0, [sp, #20]
   83888:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8388c:	f7ff bb6a 	b.w	82f64 <_vfiprintf_r+0x2b0>
   83890:	aa0f      	add	r2, sp, #60	; 0x3c
   83892:	9904      	ldr	r1, [sp, #16]
   83894:	9806      	ldr	r0, [sp, #24]
   83896:	f7ff f9cd 	bl	82c34 <__sprint_r.part.0>
   8389a:	2800      	cmp	r0, #0
   8389c:	f47f aec1 	bne.w	83622 <_vfiprintf_r+0x96e>
   838a0:	9910      	ldr	r1, [sp, #64]	; 0x40
   838a2:	46d1      	mov	r9, sl
   838a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   838a6:	1c48      	adds	r0, r1, #1
   838a8:	e5b1      	b.n	8340e <_vfiprintf_r+0x75a>
   838aa:	9910      	ldr	r1, [sp, #64]	; 0x40
   838ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   838ae:	3101      	adds	r1, #1
   838b0:	4e20      	ldr	r6, [pc, #128]	; (83934 <_vfiprintf_r+0xc80>)
   838b2:	f7ff bb9c 	b.w	82fee <_vfiprintf_r+0x33a>
   838b6:	2c06      	cmp	r4, #6
   838b8:	bf28      	it	cs
   838ba:	2406      	movcs	r4, #6
   838bc:	9507      	str	r5, [sp, #28]
   838be:	9405      	str	r4, [sp, #20]
   838c0:	9401      	str	r4, [sp, #4]
   838c2:	f8df b074 	ldr.w	fp, [pc, #116]	; 83938 <_vfiprintf_r+0xc84>
   838c6:	e4e3      	b.n	83290 <_vfiprintf_r+0x5dc>
   838c8:	9810      	ldr	r0, [sp, #64]	; 0x40
   838ca:	4e1a      	ldr	r6, [pc, #104]	; (83934 <_vfiprintf_r+0xc80>)
   838cc:	3001      	adds	r0, #1
   838ce:	e60e      	b.n	834ee <_vfiprintf_r+0x83a>
   838d0:	4686      	mov	lr, r0
   838d2:	4d17      	ldr	r5, [pc, #92]	; (83930 <_vfiprintf_r+0xc7c>)
   838d4:	f7ff bbe2 	b.w	8309c <_vfiprintf_r+0x3e8>
   838d8:	9405      	str	r4, [sp, #20]
   838da:	9507      	str	r5, [sp, #28]
   838dc:	9302      	str	r3, [sp, #8]
   838de:	4604      	mov	r4, r0
   838e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   838e4:	f7ff bb3e 	b.w	82f64 <_vfiprintf_r+0x2b0>
   838e8:	9806      	ldr	r0, [sp, #24]
   838ea:	aa0f      	add	r2, sp, #60	; 0x3c
   838ec:	4659      	mov	r1, fp
   838ee:	f7ff f9a1 	bl	82c34 <__sprint_r.part.0>
   838f2:	2800      	cmp	r0, #0
   838f4:	f43f ae2e 	beq.w	83554 <_vfiprintf_r+0x8a0>
   838f8:	e62e      	b.n	83558 <_vfiprintf_r+0x8a4>
   838fa:	9907      	ldr	r1, [sp, #28]
   838fc:	f898 2001 	ldrb.w	r2, [r8, #1]
   83900:	680c      	ldr	r4, [r1, #0]
   83902:	3104      	adds	r1, #4
   83904:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   83908:	46b8      	mov	r8, r7
   8390a:	9107      	str	r1, [sp, #28]
   8390c:	f7ff ba44 	b.w	82d98 <_vfiprintf_r+0xe4>
   83910:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83914:	e4a7      	b.n	83266 <_vfiprintf_r+0x5b2>
   83916:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8391a:	e521      	b.n	83360 <_vfiprintf_r+0x6ac>
   8391c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83920:	e47c      	b.n	8321c <_vfiprintf_r+0x568>
   83922:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83926:	e43f      	b.n	831a8 <_vfiprintf_r+0x4f4>
   83928:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8392c:	f7ff bbfa 	b.w	83124 <_vfiprintf_r+0x470>
   83930:	00085760 	.word	0x00085760
   83934:	00085750 	.word	0x00085750
   83938:	00085748 	.word	0x00085748

0008393c <__sbprintf>:
   8393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83940:	460c      	mov	r4, r1
   83942:	f04f 0e00 	mov.w	lr, #0
   83946:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8394a:	4606      	mov	r6, r0
   8394c:	4617      	mov	r7, r2
   8394e:	4698      	mov	r8, r3
   83950:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83952:	89e3      	ldrh	r3, [r4, #14]
   83954:	8989      	ldrh	r1, [r1, #12]
   83956:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8395a:	f021 0102 	bic.w	r1, r1, #2
   8395e:	9219      	str	r2, [sp, #100]	; 0x64
   83960:	f8ad 300e 	strh.w	r3, [sp, #14]
   83964:	69e2      	ldr	r2, [r4, #28]
   83966:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83968:	f8ad 100c 	strh.w	r1, [sp, #12]
   8396c:	a816      	add	r0, sp, #88	; 0x58
   8396e:	a91a      	add	r1, sp, #104	; 0x68
   83970:	f8cd e018 	str.w	lr, [sp, #24]
   83974:	9207      	str	r2, [sp, #28]
   83976:	9309      	str	r3, [sp, #36]	; 0x24
   83978:	9100      	str	r1, [sp, #0]
   8397a:	9104      	str	r1, [sp, #16]
   8397c:	9502      	str	r5, [sp, #8]
   8397e:	9505      	str	r5, [sp, #20]
   83980:	f000 fd44 	bl	8440c <__retarget_lock_init_recursive>
   83984:	4643      	mov	r3, r8
   83986:	463a      	mov	r2, r7
   83988:	4669      	mov	r1, sp
   8398a:	4630      	mov	r0, r6
   8398c:	f7ff f992 	bl	82cb4 <_vfiprintf_r>
   83990:	1e05      	subs	r5, r0, #0
   83992:	db07      	blt.n	839a4 <__sbprintf+0x68>
   83994:	4630      	mov	r0, r6
   83996:	4669      	mov	r1, sp
   83998:	f000 f924 	bl	83be4 <_fflush_r>
   8399c:	2800      	cmp	r0, #0
   8399e:	bf18      	it	ne
   839a0:	f04f 35ff 	movne.w	r5, #4294967295
   839a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   839a8:	065b      	lsls	r3, r3, #25
   839aa:	d503      	bpl.n	839b4 <__sbprintf+0x78>
   839ac:	89a3      	ldrh	r3, [r4, #12]
   839ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839b2:	81a3      	strh	r3, [r4, #12]
   839b4:	9816      	ldr	r0, [sp, #88]	; 0x58
   839b6:	f000 fd2b 	bl	84410 <__retarget_lock_close_recursive>
   839ba:	4628      	mov	r0, r5
   839bc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   839c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000839c4 <__swsetup_r>:
   839c4:	b538      	push	{r3, r4, r5, lr}
   839c6:	4b30      	ldr	r3, [pc, #192]	; (83a88 <__swsetup_r+0xc4>)
   839c8:	4605      	mov	r5, r0
   839ca:	6818      	ldr	r0, [r3, #0]
   839cc:	460c      	mov	r4, r1
   839ce:	b110      	cbz	r0, 839d6 <__swsetup_r+0x12>
   839d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839d2:	2b00      	cmp	r3, #0
   839d4:	d038      	beq.n	83a48 <__swsetup_r+0x84>
   839d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   839da:	b293      	uxth	r3, r2
   839dc:	0718      	lsls	r0, r3, #28
   839de:	d50c      	bpl.n	839fa <__swsetup_r+0x36>
   839e0:	6920      	ldr	r0, [r4, #16]
   839e2:	b1a8      	cbz	r0, 83a10 <__swsetup_r+0x4c>
   839e4:	f013 0201 	ands.w	r2, r3, #1
   839e8:	d01e      	beq.n	83a28 <__swsetup_r+0x64>
   839ea:	2200      	movs	r2, #0
   839ec:	6963      	ldr	r3, [r4, #20]
   839ee:	60a2      	str	r2, [r4, #8]
   839f0:	425b      	negs	r3, r3
   839f2:	61a3      	str	r3, [r4, #24]
   839f4:	b1f0      	cbz	r0, 83a34 <__swsetup_r+0x70>
   839f6:	2000      	movs	r0, #0
   839f8:	bd38      	pop	{r3, r4, r5, pc}
   839fa:	06d9      	lsls	r1, r3, #27
   839fc:	d53b      	bpl.n	83a76 <__swsetup_r+0xb2>
   839fe:	0758      	lsls	r0, r3, #29
   83a00:	d425      	bmi.n	83a4e <__swsetup_r+0x8a>
   83a02:	6920      	ldr	r0, [r4, #16]
   83a04:	f042 0308 	orr.w	r3, r2, #8
   83a08:	81a3      	strh	r3, [r4, #12]
   83a0a:	b29b      	uxth	r3, r3
   83a0c:	2800      	cmp	r0, #0
   83a0e:	d1e9      	bne.n	839e4 <__swsetup_r+0x20>
   83a10:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83a14:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83a18:	d0e4      	beq.n	839e4 <__swsetup_r+0x20>
   83a1a:	4628      	mov	r0, r5
   83a1c:	4621      	mov	r1, r4
   83a1e:	f000 fd2b 	bl	84478 <__smakebuf_r>
   83a22:	89a3      	ldrh	r3, [r4, #12]
   83a24:	6920      	ldr	r0, [r4, #16]
   83a26:	e7dd      	b.n	839e4 <__swsetup_r+0x20>
   83a28:	0799      	lsls	r1, r3, #30
   83a2a:	bf58      	it	pl
   83a2c:	6962      	ldrpl	r2, [r4, #20]
   83a2e:	60a2      	str	r2, [r4, #8]
   83a30:	2800      	cmp	r0, #0
   83a32:	d1e0      	bne.n	839f6 <__swsetup_r+0x32>
   83a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a38:	061a      	lsls	r2, r3, #24
   83a3a:	d5dd      	bpl.n	839f8 <__swsetup_r+0x34>
   83a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a40:	81a3      	strh	r3, [r4, #12]
   83a42:	f04f 30ff 	mov.w	r0, #4294967295
   83a46:	bd38      	pop	{r3, r4, r5, pc}
   83a48:	f000 f924 	bl	83c94 <__sinit>
   83a4c:	e7c3      	b.n	839d6 <__swsetup_r+0x12>
   83a4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83a50:	b151      	cbz	r1, 83a68 <__swsetup_r+0xa4>
   83a52:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83a56:	4299      	cmp	r1, r3
   83a58:	d004      	beq.n	83a64 <__swsetup_r+0xa0>
   83a5a:	4628      	mov	r0, r5
   83a5c:	f000 fa40 	bl	83ee0 <_free_r>
   83a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83a64:	2300      	movs	r3, #0
   83a66:	6323      	str	r3, [r4, #48]	; 0x30
   83a68:	2300      	movs	r3, #0
   83a6a:	6920      	ldr	r0, [r4, #16]
   83a6c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83a70:	e884 0009 	stmia.w	r4, {r0, r3}
   83a74:	e7c6      	b.n	83a04 <__swsetup_r+0x40>
   83a76:	2309      	movs	r3, #9
   83a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83a7c:	602b      	str	r3, [r5, #0]
   83a7e:	f04f 30ff 	mov.w	r0, #4294967295
   83a82:	81a2      	strh	r2, [r4, #12]
   83a84:	bd38      	pop	{r3, r4, r5, pc}
   83a86:	bf00      	nop
   83a88:	20070134 	.word	0x20070134

00083a8c <register_fini>:
   83a8c:	4b02      	ldr	r3, [pc, #8]	; (83a98 <register_fini+0xc>)
   83a8e:	b113      	cbz	r3, 83a96 <register_fini+0xa>
   83a90:	4802      	ldr	r0, [pc, #8]	; (83a9c <register_fini+0x10>)
   83a92:	f000 b805 	b.w	83aa0 <atexit>
   83a96:	4770      	bx	lr
   83a98:	00000000 	.word	0x00000000
   83a9c:	00083d0d 	.word	0x00083d0d

00083aa0 <atexit>:
   83aa0:	2300      	movs	r3, #0
   83aa2:	4601      	mov	r1, r0
   83aa4:	461a      	mov	r2, r3
   83aa6:	4618      	mov	r0, r3
   83aa8:	f001 bb56 	b.w	85158 <__register_exitproc>

00083aac <__sflush_r>:
   83aac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ab4:	b29a      	uxth	r2, r3
   83ab6:	460d      	mov	r5, r1
   83ab8:	0711      	lsls	r1, r2, #28
   83aba:	4680      	mov	r8, r0
   83abc:	d43a      	bmi.n	83b34 <__sflush_r+0x88>
   83abe:	686a      	ldr	r2, [r5, #4]
   83ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83ac4:	2a00      	cmp	r2, #0
   83ac6:	81ab      	strh	r3, [r5, #12]
   83ac8:	dd70      	ble.n	83bac <__sflush_r+0x100>
   83aca:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83acc:	2c00      	cmp	r4, #0
   83ace:	d04a      	beq.n	83b66 <__sflush_r+0xba>
   83ad0:	2200      	movs	r2, #0
   83ad2:	b29b      	uxth	r3, r3
   83ad4:	f8d8 6000 	ldr.w	r6, [r8]
   83ad8:	f8c8 2000 	str.w	r2, [r8]
   83adc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83ae0:	d068      	beq.n	83bb4 <__sflush_r+0x108>
   83ae2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83ae4:	075f      	lsls	r7, r3, #29
   83ae6:	d505      	bpl.n	83af4 <__sflush_r+0x48>
   83ae8:	6869      	ldr	r1, [r5, #4]
   83aea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83aec:	1a52      	subs	r2, r2, r1
   83aee:	b10b      	cbz	r3, 83af4 <__sflush_r+0x48>
   83af0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83af2:	1ad2      	subs	r2, r2, r3
   83af4:	2300      	movs	r3, #0
   83af6:	69e9      	ldr	r1, [r5, #28]
   83af8:	4640      	mov	r0, r8
   83afa:	47a0      	blx	r4
   83afc:	1c44      	adds	r4, r0, #1
   83afe:	d03d      	beq.n	83b7c <__sflush_r+0xd0>
   83b00:	2100      	movs	r1, #0
   83b02:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83b06:	692a      	ldr	r2, [r5, #16]
   83b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83b0c:	81ab      	strh	r3, [r5, #12]
   83b0e:	04db      	lsls	r3, r3, #19
   83b10:	6069      	str	r1, [r5, #4]
   83b12:	602a      	str	r2, [r5, #0]
   83b14:	d448      	bmi.n	83ba8 <__sflush_r+0xfc>
   83b16:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83b18:	f8c8 6000 	str.w	r6, [r8]
   83b1c:	b319      	cbz	r1, 83b66 <__sflush_r+0xba>
   83b1e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83b22:	4299      	cmp	r1, r3
   83b24:	d002      	beq.n	83b2c <__sflush_r+0x80>
   83b26:	4640      	mov	r0, r8
   83b28:	f000 f9da 	bl	83ee0 <_free_r>
   83b2c:	2000      	movs	r0, #0
   83b2e:	6328      	str	r0, [r5, #48]	; 0x30
   83b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b34:	692e      	ldr	r6, [r5, #16]
   83b36:	b1b6      	cbz	r6, 83b66 <__sflush_r+0xba>
   83b38:	0791      	lsls	r1, r2, #30
   83b3a:	bf18      	it	ne
   83b3c:	2300      	movne	r3, #0
   83b3e:	682c      	ldr	r4, [r5, #0]
   83b40:	bf08      	it	eq
   83b42:	696b      	ldreq	r3, [r5, #20]
   83b44:	602e      	str	r6, [r5, #0]
   83b46:	1ba4      	subs	r4, r4, r6
   83b48:	60ab      	str	r3, [r5, #8]
   83b4a:	e00a      	b.n	83b62 <__sflush_r+0xb6>
   83b4c:	4623      	mov	r3, r4
   83b4e:	4632      	mov	r2, r6
   83b50:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83b52:	69e9      	ldr	r1, [r5, #28]
   83b54:	4640      	mov	r0, r8
   83b56:	47b8      	blx	r7
   83b58:	2800      	cmp	r0, #0
   83b5a:	eba4 0400 	sub.w	r4, r4, r0
   83b5e:	4406      	add	r6, r0
   83b60:	dd04      	ble.n	83b6c <__sflush_r+0xc0>
   83b62:	2c00      	cmp	r4, #0
   83b64:	dcf2      	bgt.n	83b4c <__sflush_r+0xa0>
   83b66:	2000      	movs	r0, #0
   83b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b6c:	89ab      	ldrh	r3, [r5, #12]
   83b6e:	f04f 30ff 	mov.w	r0, #4294967295
   83b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b76:	81ab      	strh	r3, [r5, #12]
   83b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b7c:	f8d8 4000 	ldr.w	r4, [r8]
   83b80:	2c1d      	cmp	r4, #29
   83b82:	d8f3      	bhi.n	83b6c <__sflush_r+0xc0>
   83b84:	4b16      	ldr	r3, [pc, #88]	; (83be0 <__sflush_r+0x134>)
   83b86:	40e3      	lsrs	r3, r4
   83b88:	43db      	mvns	r3, r3
   83b8a:	f013 0301 	ands.w	r3, r3, #1
   83b8e:	d1ed      	bne.n	83b6c <__sflush_r+0xc0>
   83b90:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83b94:	6929      	ldr	r1, [r5, #16]
   83b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83b9a:	81aa      	strh	r2, [r5, #12]
   83b9c:	04d2      	lsls	r2, r2, #19
   83b9e:	606b      	str	r3, [r5, #4]
   83ba0:	6029      	str	r1, [r5, #0]
   83ba2:	d5b8      	bpl.n	83b16 <__sflush_r+0x6a>
   83ba4:	2c00      	cmp	r4, #0
   83ba6:	d1b6      	bne.n	83b16 <__sflush_r+0x6a>
   83ba8:	6528      	str	r0, [r5, #80]	; 0x50
   83baa:	e7b4      	b.n	83b16 <__sflush_r+0x6a>
   83bac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83bae:	2a00      	cmp	r2, #0
   83bb0:	dc8b      	bgt.n	83aca <__sflush_r+0x1e>
   83bb2:	e7d8      	b.n	83b66 <__sflush_r+0xba>
   83bb4:	2301      	movs	r3, #1
   83bb6:	69e9      	ldr	r1, [r5, #28]
   83bb8:	4640      	mov	r0, r8
   83bba:	47a0      	blx	r4
   83bbc:	1c43      	adds	r3, r0, #1
   83bbe:	4602      	mov	r2, r0
   83bc0:	d002      	beq.n	83bc8 <__sflush_r+0x11c>
   83bc2:	89ab      	ldrh	r3, [r5, #12]
   83bc4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83bc6:	e78d      	b.n	83ae4 <__sflush_r+0x38>
   83bc8:	f8d8 3000 	ldr.w	r3, [r8]
   83bcc:	2b00      	cmp	r3, #0
   83bce:	d0f8      	beq.n	83bc2 <__sflush_r+0x116>
   83bd0:	2b1d      	cmp	r3, #29
   83bd2:	d001      	beq.n	83bd8 <__sflush_r+0x12c>
   83bd4:	2b16      	cmp	r3, #22
   83bd6:	d1c9      	bne.n	83b6c <__sflush_r+0xc0>
   83bd8:	f8c8 6000 	str.w	r6, [r8]
   83bdc:	e7c3      	b.n	83b66 <__sflush_r+0xba>
   83bde:	bf00      	nop
   83be0:	20400001 	.word	0x20400001

00083be4 <_fflush_r>:
   83be4:	b538      	push	{r3, r4, r5, lr}
   83be6:	460d      	mov	r5, r1
   83be8:	4604      	mov	r4, r0
   83bea:	b108      	cbz	r0, 83bf0 <_fflush_r+0xc>
   83bec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83bee:	b1bb      	cbz	r3, 83c20 <_fflush_r+0x3c>
   83bf0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83bf4:	b188      	cbz	r0, 83c1a <_fflush_r+0x36>
   83bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83bf8:	07db      	lsls	r3, r3, #31
   83bfa:	d401      	bmi.n	83c00 <_fflush_r+0x1c>
   83bfc:	0581      	lsls	r1, r0, #22
   83bfe:	d517      	bpl.n	83c30 <_fflush_r+0x4c>
   83c00:	4620      	mov	r0, r4
   83c02:	4629      	mov	r1, r5
   83c04:	f7ff ff52 	bl	83aac <__sflush_r>
   83c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83c0a:	4604      	mov	r4, r0
   83c0c:	07da      	lsls	r2, r3, #31
   83c0e:	d402      	bmi.n	83c16 <_fflush_r+0x32>
   83c10:	89ab      	ldrh	r3, [r5, #12]
   83c12:	059b      	lsls	r3, r3, #22
   83c14:	d507      	bpl.n	83c26 <_fflush_r+0x42>
   83c16:	4620      	mov	r0, r4
   83c18:	bd38      	pop	{r3, r4, r5, pc}
   83c1a:	4604      	mov	r4, r0
   83c1c:	4620      	mov	r0, r4
   83c1e:	bd38      	pop	{r3, r4, r5, pc}
   83c20:	f000 f838 	bl	83c94 <__sinit>
   83c24:	e7e4      	b.n	83bf0 <_fflush_r+0xc>
   83c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83c28:	f000 fbf6 	bl	84418 <__retarget_lock_release_recursive>
   83c2c:	4620      	mov	r0, r4
   83c2e:	bd38      	pop	{r3, r4, r5, pc}
   83c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83c32:	f000 fbef 	bl	84414 <__retarget_lock_acquire_recursive>
   83c36:	e7e3      	b.n	83c00 <_fflush_r+0x1c>

00083c38 <_cleanup_r>:
   83c38:	4901      	ldr	r1, [pc, #4]	; (83c40 <_cleanup_r+0x8>)
   83c3a:	f000 bbb1 	b.w	843a0 <_fwalk_reent>
   83c3e:	bf00      	nop
   83c40:	00085241 	.word	0x00085241

00083c44 <std.isra.0>:
   83c44:	2300      	movs	r3, #0
   83c46:	b510      	push	{r4, lr}
   83c48:	4604      	mov	r4, r0
   83c4a:	8181      	strh	r1, [r0, #12]
   83c4c:	81c2      	strh	r2, [r0, #14]
   83c4e:	6003      	str	r3, [r0, #0]
   83c50:	6043      	str	r3, [r0, #4]
   83c52:	6083      	str	r3, [r0, #8]
   83c54:	6643      	str	r3, [r0, #100]	; 0x64
   83c56:	6103      	str	r3, [r0, #16]
   83c58:	6143      	str	r3, [r0, #20]
   83c5a:	6183      	str	r3, [r0, #24]
   83c5c:	4619      	mov	r1, r3
   83c5e:	2208      	movs	r2, #8
   83c60:	305c      	adds	r0, #92	; 0x5c
   83c62:	f7fe fe9b 	bl	8299c <memset>
   83c66:	4807      	ldr	r0, [pc, #28]	; (83c84 <std.isra.0+0x40>)
   83c68:	4907      	ldr	r1, [pc, #28]	; (83c88 <std.isra.0+0x44>)
   83c6a:	4a08      	ldr	r2, [pc, #32]	; (83c8c <std.isra.0+0x48>)
   83c6c:	4b08      	ldr	r3, [pc, #32]	; (83c90 <std.isra.0+0x4c>)
   83c6e:	6220      	str	r0, [r4, #32]
   83c70:	61e4      	str	r4, [r4, #28]
   83c72:	6261      	str	r1, [r4, #36]	; 0x24
   83c74:	62a2      	str	r2, [r4, #40]	; 0x28
   83c76:	62e3      	str	r3, [r4, #44]	; 0x2c
   83c78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c80:	f000 bbc4 	b.w	8440c <__retarget_lock_init_recursive>
   83c84:	00084f89 	.word	0x00084f89
   83c88:	00084fad 	.word	0x00084fad
   83c8c:	00084fe9 	.word	0x00084fe9
   83c90:	00085009 	.word	0x00085009

00083c94 <__sinit>:
   83c94:	b510      	push	{r4, lr}
   83c96:	4604      	mov	r4, r0
   83c98:	4814      	ldr	r0, [pc, #80]	; (83cec <__sinit+0x58>)
   83c9a:	f000 fbbb 	bl	84414 <__retarget_lock_acquire_recursive>
   83c9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83ca0:	b9fa      	cbnz	r2, 83ce2 <__sinit+0x4e>
   83ca2:	2003      	movs	r0, #3
   83ca4:	4912      	ldr	r1, [pc, #72]	; (83cf0 <__sinit+0x5c>)
   83ca6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83caa:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83cae:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83cb2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83cb6:	63e1      	str	r1, [r4, #60]	; 0x3c
   83cb8:	6860      	ldr	r0, [r4, #4]
   83cba:	2104      	movs	r1, #4
   83cbc:	f7ff ffc2 	bl	83c44 <std.isra.0>
   83cc0:	68a0      	ldr	r0, [r4, #8]
   83cc2:	2201      	movs	r2, #1
   83cc4:	2109      	movs	r1, #9
   83cc6:	f7ff ffbd 	bl	83c44 <std.isra.0>
   83cca:	68e0      	ldr	r0, [r4, #12]
   83ccc:	2202      	movs	r2, #2
   83cce:	2112      	movs	r1, #18
   83cd0:	f7ff ffb8 	bl	83c44 <std.isra.0>
   83cd4:	2301      	movs	r3, #1
   83cd6:	4805      	ldr	r0, [pc, #20]	; (83cec <__sinit+0x58>)
   83cd8:	63a3      	str	r3, [r4, #56]	; 0x38
   83cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83cde:	f000 bb9b 	b.w	84418 <__retarget_lock_release_recursive>
   83ce2:	4802      	ldr	r0, [pc, #8]	; (83cec <__sinit+0x58>)
   83ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83ce8:	f000 bb96 	b.w	84418 <__retarget_lock_release_recursive>
   83cec:	2007c550 	.word	0x2007c550
   83cf0:	00083c39 	.word	0x00083c39

00083cf4 <__sfp_lock_acquire>:
   83cf4:	4801      	ldr	r0, [pc, #4]	; (83cfc <__sfp_lock_acquire+0x8>)
   83cf6:	f000 bb8d 	b.w	84414 <__retarget_lock_acquire_recursive>
   83cfa:	bf00      	nop
   83cfc:	2007c564 	.word	0x2007c564

00083d00 <__sfp_lock_release>:
   83d00:	4801      	ldr	r0, [pc, #4]	; (83d08 <__sfp_lock_release+0x8>)
   83d02:	f000 bb89 	b.w	84418 <__retarget_lock_release_recursive>
   83d06:	bf00      	nop
   83d08:	2007c564 	.word	0x2007c564

00083d0c <__libc_fini_array>:
   83d0c:	b538      	push	{r3, r4, r5, lr}
   83d0e:	4c0a      	ldr	r4, [pc, #40]	; (83d38 <__libc_fini_array+0x2c>)
   83d10:	4d0a      	ldr	r5, [pc, #40]	; (83d3c <__libc_fini_array+0x30>)
   83d12:	1b64      	subs	r4, r4, r5
   83d14:	10a4      	asrs	r4, r4, #2
   83d16:	d00a      	beq.n	83d2e <__libc_fini_array+0x22>
   83d18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83d1c:	3b01      	subs	r3, #1
   83d1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83d22:	3c01      	subs	r4, #1
   83d24:	f855 3904 	ldr.w	r3, [r5], #-4
   83d28:	4798      	blx	r3
   83d2a:	2c00      	cmp	r4, #0
   83d2c:	d1f9      	bne.n	83d22 <__libc_fini_array+0x16>
   83d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83d32:	f001 bdb1 	b.w	85898 <_fini>
   83d36:	bf00      	nop
   83d38:	000858a8 	.word	0x000858a8
   83d3c:	000858a4 	.word	0x000858a4

00083d40 <__fputwc>:
   83d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83d44:	b083      	sub	sp, #12
   83d46:	4607      	mov	r7, r0
   83d48:	4688      	mov	r8, r1
   83d4a:	4614      	mov	r4, r2
   83d4c:	f000 fb50 	bl	843f0 <__locale_mb_cur_max>
   83d50:	2801      	cmp	r0, #1
   83d52:	d033      	beq.n	83dbc <__fputwc+0x7c>
   83d54:	4642      	mov	r2, r8
   83d56:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83d5a:	a901      	add	r1, sp, #4
   83d5c:	4638      	mov	r0, r7
   83d5e:	f001 f9af 	bl	850c0 <_wcrtomb_r>
   83d62:	1c42      	adds	r2, r0, #1
   83d64:	4606      	mov	r6, r0
   83d66:	d022      	beq.n	83dae <__fputwc+0x6e>
   83d68:	b390      	cbz	r0, 83dd0 <__fputwc+0x90>
   83d6a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83d6e:	2500      	movs	r5, #0
   83d70:	f10d 0904 	add.w	r9, sp, #4
   83d74:	e008      	b.n	83d88 <__fputwc+0x48>
   83d76:	6823      	ldr	r3, [r4, #0]
   83d78:	1c5a      	adds	r2, r3, #1
   83d7a:	6022      	str	r2, [r4, #0]
   83d7c:	7019      	strb	r1, [r3, #0]
   83d7e:	3501      	adds	r5, #1
   83d80:	42b5      	cmp	r5, r6
   83d82:	d225      	bcs.n	83dd0 <__fputwc+0x90>
   83d84:	f815 1009 	ldrb.w	r1, [r5, r9]
   83d88:	68a3      	ldr	r3, [r4, #8]
   83d8a:	3b01      	subs	r3, #1
   83d8c:	2b00      	cmp	r3, #0
   83d8e:	60a3      	str	r3, [r4, #8]
   83d90:	daf1      	bge.n	83d76 <__fputwc+0x36>
   83d92:	69a2      	ldr	r2, [r4, #24]
   83d94:	4293      	cmp	r3, r2
   83d96:	db01      	blt.n	83d9c <__fputwc+0x5c>
   83d98:	290a      	cmp	r1, #10
   83d9a:	d1ec      	bne.n	83d76 <__fputwc+0x36>
   83d9c:	4622      	mov	r2, r4
   83d9e:	4638      	mov	r0, r7
   83da0:	f001 f936 	bl	85010 <__swbuf_r>
   83da4:	1c43      	adds	r3, r0, #1
   83da6:	d1ea      	bne.n	83d7e <__fputwc+0x3e>
   83da8:	b003      	add	sp, #12
   83daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83dae:	89a3      	ldrh	r3, [r4, #12]
   83db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83db4:	81a3      	strh	r3, [r4, #12]
   83db6:	b003      	add	sp, #12
   83db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83dbc:	f108 33ff 	add.w	r3, r8, #4294967295
   83dc0:	2bfe      	cmp	r3, #254	; 0xfe
   83dc2:	d8c7      	bhi.n	83d54 <__fputwc+0x14>
   83dc4:	fa5f f188 	uxtb.w	r1, r8
   83dc8:	4606      	mov	r6, r0
   83dca:	f88d 1004 	strb.w	r1, [sp, #4]
   83dce:	e7ce      	b.n	83d6e <__fputwc+0x2e>
   83dd0:	4640      	mov	r0, r8
   83dd2:	b003      	add	sp, #12
   83dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083dd8 <_fputwc_r>:
   83dd8:	b530      	push	{r4, r5, lr}
   83dda:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83ddc:	4614      	mov	r4, r2
   83dde:	f013 0f01 	tst.w	r3, #1
   83de2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83de6:	b083      	sub	sp, #12
   83de8:	4605      	mov	r5, r0
   83dea:	b29a      	uxth	r2, r3
   83dec:	d101      	bne.n	83df2 <_fputwc_r+0x1a>
   83dee:	0590      	lsls	r0, r2, #22
   83df0:	d51c      	bpl.n	83e2c <_fputwc_r+0x54>
   83df2:	0490      	lsls	r0, r2, #18
   83df4:	d406      	bmi.n	83e04 <_fputwc_r+0x2c>
   83df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83e00:	81a3      	strh	r3, [r4, #12]
   83e02:	6662      	str	r2, [r4, #100]	; 0x64
   83e04:	4628      	mov	r0, r5
   83e06:	4622      	mov	r2, r4
   83e08:	f7ff ff9a 	bl	83d40 <__fputwc>
   83e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e0e:	4605      	mov	r5, r0
   83e10:	07da      	lsls	r2, r3, #31
   83e12:	d402      	bmi.n	83e1a <_fputwc_r+0x42>
   83e14:	89a3      	ldrh	r3, [r4, #12]
   83e16:	059b      	lsls	r3, r3, #22
   83e18:	d502      	bpl.n	83e20 <_fputwc_r+0x48>
   83e1a:	4628      	mov	r0, r5
   83e1c:	b003      	add	sp, #12
   83e1e:	bd30      	pop	{r4, r5, pc}
   83e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e22:	f000 faf9 	bl	84418 <__retarget_lock_release_recursive>
   83e26:	4628      	mov	r0, r5
   83e28:	b003      	add	sp, #12
   83e2a:	bd30      	pop	{r4, r5, pc}
   83e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e2e:	9101      	str	r1, [sp, #4]
   83e30:	f000 faf0 	bl	84414 <__retarget_lock_acquire_recursive>
   83e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e38:	9901      	ldr	r1, [sp, #4]
   83e3a:	b29a      	uxth	r2, r3
   83e3c:	e7d9      	b.n	83df2 <_fputwc_r+0x1a>
   83e3e:	bf00      	nop

00083e40 <_malloc_trim_r>:
   83e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e42:	460c      	mov	r4, r1
   83e44:	4f23      	ldr	r7, [pc, #140]	; (83ed4 <_malloc_trim_r+0x94>)
   83e46:	4606      	mov	r6, r0
   83e48:	f000 feca 	bl	84be0 <__malloc_lock>
   83e4c:	68bb      	ldr	r3, [r7, #8]
   83e4e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83e52:	685d      	ldr	r5, [r3, #4]
   83e54:	310f      	adds	r1, #15
   83e56:	f025 0503 	bic.w	r5, r5, #3
   83e5a:	4429      	add	r1, r5
   83e5c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83e60:	f021 010f 	bic.w	r1, r1, #15
   83e64:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83e68:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83e6c:	db07      	blt.n	83e7e <_malloc_trim_r+0x3e>
   83e6e:	2100      	movs	r1, #0
   83e70:	4630      	mov	r0, r6
   83e72:	f001 f877 	bl	84f64 <_sbrk_r>
   83e76:	68bb      	ldr	r3, [r7, #8]
   83e78:	442b      	add	r3, r5
   83e7a:	4298      	cmp	r0, r3
   83e7c:	d004      	beq.n	83e88 <_malloc_trim_r+0x48>
   83e7e:	4630      	mov	r0, r6
   83e80:	f000 feb4 	bl	84bec <__malloc_unlock>
   83e84:	2000      	movs	r0, #0
   83e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e88:	4261      	negs	r1, r4
   83e8a:	4630      	mov	r0, r6
   83e8c:	f001 f86a 	bl	84f64 <_sbrk_r>
   83e90:	3001      	adds	r0, #1
   83e92:	d00d      	beq.n	83eb0 <_malloc_trim_r+0x70>
   83e94:	4b10      	ldr	r3, [pc, #64]	; (83ed8 <_malloc_trim_r+0x98>)
   83e96:	68ba      	ldr	r2, [r7, #8]
   83e98:	6819      	ldr	r1, [r3, #0]
   83e9a:	1b2d      	subs	r5, r5, r4
   83e9c:	f045 0501 	orr.w	r5, r5, #1
   83ea0:	4630      	mov	r0, r6
   83ea2:	1b09      	subs	r1, r1, r4
   83ea4:	6055      	str	r5, [r2, #4]
   83ea6:	6019      	str	r1, [r3, #0]
   83ea8:	f000 fea0 	bl	84bec <__malloc_unlock>
   83eac:	2001      	movs	r0, #1
   83eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83eb0:	2100      	movs	r1, #0
   83eb2:	4630      	mov	r0, r6
   83eb4:	f001 f856 	bl	84f64 <_sbrk_r>
   83eb8:	68ba      	ldr	r2, [r7, #8]
   83eba:	1a83      	subs	r3, r0, r2
   83ebc:	2b0f      	cmp	r3, #15
   83ebe:	ddde      	ble.n	83e7e <_malloc_trim_r+0x3e>
   83ec0:	4c06      	ldr	r4, [pc, #24]	; (83edc <_malloc_trim_r+0x9c>)
   83ec2:	4905      	ldr	r1, [pc, #20]	; (83ed8 <_malloc_trim_r+0x98>)
   83ec4:	6824      	ldr	r4, [r4, #0]
   83ec6:	f043 0301 	orr.w	r3, r3, #1
   83eca:	1b00      	subs	r0, r0, r4
   83ecc:	6053      	str	r3, [r2, #4]
   83ece:	6008      	str	r0, [r1, #0]
   83ed0:	e7d5      	b.n	83e7e <_malloc_trim_r+0x3e>
   83ed2:	bf00      	nop
   83ed4:	200706d0 	.word	0x200706d0
   83ed8:	2007c4c0 	.word	0x2007c4c0
   83edc:	20070ad8 	.word	0x20070ad8

00083ee0 <_free_r>:
   83ee0:	2900      	cmp	r1, #0
   83ee2:	d044      	beq.n	83f6e <_free_r+0x8e>
   83ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ee8:	460d      	mov	r5, r1
   83eea:	4680      	mov	r8, r0
   83eec:	f000 fe78 	bl	84be0 <__malloc_lock>
   83ef0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83ef4:	4969      	ldr	r1, [pc, #420]	; (8409c <_free_r+0x1bc>)
   83ef6:	f1a5 0408 	sub.w	r4, r5, #8
   83efa:	f027 0301 	bic.w	r3, r7, #1
   83efe:	18e2      	adds	r2, r4, r3
   83f00:	688e      	ldr	r6, [r1, #8]
   83f02:	6850      	ldr	r0, [r2, #4]
   83f04:	42b2      	cmp	r2, r6
   83f06:	f020 0003 	bic.w	r0, r0, #3
   83f0a:	d05e      	beq.n	83fca <_free_r+0xea>
   83f0c:	07fe      	lsls	r6, r7, #31
   83f0e:	6050      	str	r0, [r2, #4]
   83f10:	d40b      	bmi.n	83f2a <_free_r+0x4a>
   83f12:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83f16:	f101 0e08 	add.w	lr, r1, #8
   83f1a:	1be4      	subs	r4, r4, r7
   83f1c:	68a5      	ldr	r5, [r4, #8]
   83f1e:	443b      	add	r3, r7
   83f20:	4575      	cmp	r5, lr
   83f22:	d06d      	beq.n	84000 <_free_r+0x120>
   83f24:	68e7      	ldr	r7, [r4, #12]
   83f26:	60ef      	str	r7, [r5, #12]
   83f28:	60bd      	str	r5, [r7, #8]
   83f2a:	1815      	adds	r5, r2, r0
   83f2c:	686d      	ldr	r5, [r5, #4]
   83f2e:	07ed      	lsls	r5, r5, #31
   83f30:	d53e      	bpl.n	83fb0 <_free_r+0xd0>
   83f32:	f043 0201 	orr.w	r2, r3, #1
   83f36:	6062      	str	r2, [r4, #4]
   83f38:	50e3      	str	r3, [r4, r3]
   83f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83f3e:	d217      	bcs.n	83f70 <_free_r+0x90>
   83f40:	2201      	movs	r2, #1
   83f42:	08db      	lsrs	r3, r3, #3
   83f44:	1098      	asrs	r0, r3, #2
   83f46:	684d      	ldr	r5, [r1, #4]
   83f48:	4413      	add	r3, r2
   83f4a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83f4e:	4082      	lsls	r2, r0
   83f50:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83f54:	432a      	orrs	r2, r5
   83f56:	3808      	subs	r0, #8
   83f58:	60e0      	str	r0, [r4, #12]
   83f5a:	60a7      	str	r7, [r4, #8]
   83f5c:	604a      	str	r2, [r1, #4]
   83f5e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83f62:	60fc      	str	r4, [r7, #12]
   83f64:	4640      	mov	r0, r8
   83f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83f6a:	f000 be3f 	b.w	84bec <__malloc_unlock>
   83f6e:	4770      	bx	lr
   83f70:	0a5a      	lsrs	r2, r3, #9
   83f72:	2a04      	cmp	r2, #4
   83f74:	d852      	bhi.n	8401c <_free_r+0x13c>
   83f76:	099a      	lsrs	r2, r3, #6
   83f78:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83f7c:	00ff      	lsls	r7, r7, #3
   83f7e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83f82:	19c8      	adds	r0, r1, r7
   83f84:	59ca      	ldr	r2, [r1, r7]
   83f86:	3808      	subs	r0, #8
   83f88:	4290      	cmp	r0, r2
   83f8a:	d04f      	beq.n	8402c <_free_r+0x14c>
   83f8c:	6851      	ldr	r1, [r2, #4]
   83f8e:	f021 0103 	bic.w	r1, r1, #3
   83f92:	428b      	cmp	r3, r1
   83f94:	d232      	bcs.n	83ffc <_free_r+0x11c>
   83f96:	6892      	ldr	r2, [r2, #8]
   83f98:	4290      	cmp	r0, r2
   83f9a:	d1f7      	bne.n	83f8c <_free_r+0xac>
   83f9c:	68c3      	ldr	r3, [r0, #12]
   83f9e:	60a0      	str	r0, [r4, #8]
   83fa0:	60e3      	str	r3, [r4, #12]
   83fa2:	609c      	str	r4, [r3, #8]
   83fa4:	60c4      	str	r4, [r0, #12]
   83fa6:	4640      	mov	r0, r8
   83fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83fac:	f000 be1e 	b.w	84bec <__malloc_unlock>
   83fb0:	6895      	ldr	r5, [r2, #8]
   83fb2:	4f3b      	ldr	r7, [pc, #236]	; (840a0 <_free_r+0x1c0>)
   83fb4:	4403      	add	r3, r0
   83fb6:	42bd      	cmp	r5, r7
   83fb8:	d040      	beq.n	8403c <_free_r+0x15c>
   83fba:	68d0      	ldr	r0, [r2, #12]
   83fbc:	f043 0201 	orr.w	r2, r3, #1
   83fc0:	60e8      	str	r0, [r5, #12]
   83fc2:	6085      	str	r5, [r0, #8]
   83fc4:	6062      	str	r2, [r4, #4]
   83fc6:	50e3      	str	r3, [r4, r3]
   83fc8:	e7b7      	b.n	83f3a <_free_r+0x5a>
   83fca:	07ff      	lsls	r7, r7, #31
   83fcc:	4403      	add	r3, r0
   83fce:	d407      	bmi.n	83fe0 <_free_r+0x100>
   83fd0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83fd4:	1b64      	subs	r4, r4, r5
   83fd6:	68e2      	ldr	r2, [r4, #12]
   83fd8:	68a0      	ldr	r0, [r4, #8]
   83fda:	442b      	add	r3, r5
   83fdc:	60c2      	str	r2, [r0, #12]
   83fde:	6090      	str	r0, [r2, #8]
   83fe0:	4a30      	ldr	r2, [pc, #192]	; (840a4 <_free_r+0x1c4>)
   83fe2:	f043 0001 	orr.w	r0, r3, #1
   83fe6:	6812      	ldr	r2, [r2, #0]
   83fe8:	6060      	str	r0, [r4, #4]
   83fea:	4293      	cmp	r3, r2
   83fec:	608c      	str	r4, [r1, #8]
   83fee:	d3b9      	bcc.n	83f64 <_free_r+0x84>
   83ff0:	4b2d      	ldr	r3, [pc, #180]	; (840a8 <_free_r+0x1c8>)
   83ff2:	4640      	mov	r0, r8
   83ff4:	6819      	ldr	r1, [r3, #0]
   83ff6:	f7ff ff23 	bl	83e40 <_malloc_trim_r>
   83ffa:	e7b3      	b.n	83f64 <_free_r+0x84>
   83ffc:	4610      	mov	r0, r2
   83ffe:	e7cd      	b.n	83f9c <_free_r+0xbc>
   84000:	1811      	adds	r1, r2, r0
   84002:	6849      	ldr	r1, [r1, #4]
   84004:	07c9      	lsls	r1, r1, #31
   84006:	d444      	bmi.n	84092 <_free_r+0x1b2>
   84008:	6891      	ldr	r1, [r2, #8]
   8400a:	4403      	add	r3, r0
   8400c:	68d2      	ldr	r2, [r2, #12]
   8400e:	f043 0001 	orr.w	r0, r3, #1
   84012:	60ca      	str	r2, [r1, #12]
   84014:	6091      	str	r1, [r2, #8]
   84016:	6060      	str	r0, [r4, #4]
   84018:	50e3      	str	r3, [r4, r3]
   8401a:	e7a3      	b.n	83f64 <_free_r+0x84>
   8401c:	2a14      	cmp	r2, #20
   8401e:	d816      	bhi.n	8404e <_free_r+0x16e>
   84020:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84024:	00ff      	lsls	r7, r7, #3
   84026:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8402a:	e7aa      	b.n	83f82 <_free_r+0xa2>
   8402c:	2301      	movs	r3, #1
   8402e:	10aa      	asrs	r2, r5, #2
   84030:	684d      	ldr	r5, [r1, #4]
   84032:	4093      	lsls	r3, r2
   84034:	432b      	orrs	r3, r5
   84036:	604b      	str	r3, [r1, #4]
   84038:	4603      	mov	r3, r0
   8403a:	e7b0      	b.n	83f9e <_free_r+0xbe>
   8403c:	f043 0201 	orr.w	r2, r3, #1
   84040:	614c      	str	r4, [r1, #20]
   84042:	610c      	str	r4, [r1, #16]
   84044:	60e5      	str	r5, [r4, #12]
   84046:	60a5      	str	r5, [r4, #8]
   84048:	6062      	str	r2, [r4, #4]
   8404a:	50e3      	str	r3, [r4, r3]
   8404c:	e78a      	b.n	83f64 <_free_r+0x84>
   8404e:	2a54      	cmp	r2, #84	; 0x54
   84050:	d806      	bhi.n	84060 <_free_r+0x180>
   84052:	0b1a      	lsrs	r2, r3, #12
   84054:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84058:	00ff      	lsls	r7, r7, #3
   8405a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8405e:	e790      	b.n	83f82 <_free_r+0xa2>
   84060:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84064:	d806      	bhi.n	84074 <_free_r+0x194>
   84066:	0bda      	lsrs	r2, r3, #15
   84068:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8406c:	00ff      	lsls	r7, r7, #3
   8406e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84072:	e786      	b.n	83f82 <_free_r+0xa2>
   84074:	f240 5054 	movw	r0, #1364	; 0x554
   84078:	4282      	cmp	r2, r0
   8407a:	d806      	bhi.n	8408a <_free_r+0x1aa>
   8407c:	0c9a      	lsrs	r2, r3, #18
   8407e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84082:	00ff      	lsls	r7, r7, #3
   84084:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84088:	e77b      	b.n	83f82 <_free_r+0xa2>
   8408a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8408e:	257e      	movs	r5, #126	; 0x7e
   84090:	e777      	b.n	83f82 <_free_r+0xa2>
   84092:	f043 0101 	orr.w	r1, r3, #1
   84096:	6061      	str	r1, [r4, #4]
   84098:	6013      	str	r3, [r2, #0]
   8409a:	e763      	b.n	83f64 <_free_r+0x84>
   8409c:	200706d0 	.word	0x200706d0
   840a0:	200706d8 	.word	0x200706d8
   840a4:	20070adc 	.word	0x20070adc
   840a8:	2007c4f0 	.word	0x2007c4f0

000840ac <__sfvwrite_r>:
   840ac:	6893      	ldr	r3, [r2, #8]
   840ae:	2b00      	cmp	r3, #0
   840b0:	d071      	beq.n	84196 <__sfvwrite_r+0xea>
   840b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840b6:	898b      	ldrh	r3, [r1, #12]
   840b8:	b083      	sub	sp, #12
   840ba:	460c      	mov	r4, r1
   840bc:	0719      	lsls	r1, r3, #28
   840be:	9000      	str	r0, [sp, #0]
   840c0:	4616      	mov	r6, r2
   840c2:	d525      	bpl.n	84110 <__sfvwrite_r+0x64>
   840c4:	6922      	ldr	r2, [r4, #16]
   840c6:	b31a      	cbz	r2, 84110 <__sfvwrite_r+0x64>
   840c8:	f013 0002 	ands.w	r0, r3, #2
   840cc:	6835      	ldr	r5, [r6, #0]
   840ce:	d02b      	beq.n	84128 <__sfvwrite_r+0x7c>
   840d0:	f04f 0900 	mov.w	r9, #0
   840d4:	46b0      	mov	r8, r6
   840d6:	464f      	mov	r7, r9
   840d8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8439c <__sfvwrite_r+0x2f0>
   840dc:	2f00      	cmp	r7, #0
   840de:	d055      	beq.n	8418c <__sfvwrite_r+0xe0>
   840e0:	4557      	cmp	r7, sl
   840e2:	463b      	mov	r3, r7
   840e4:	464a      	mov	r2, r9
   840e6:	bf28      	it	cs
   840e8:	4653      	movcs	r3, sl
   840ea:	69e1      	ldr	r1, [r4, #28]
   840ec:	9800      	ldr	r0, [sp, #0]
   840ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
   840f0:	47b0      	blx	r6
   840f2:	2800      	cmp	r0, #0
   840f4:	dd56      	ble.n	841a4 <__sfvwrite_r+0xf8>
   840f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   840fa:	4481      	add	r9, r0
   840fc:	1a1b      	subs	r3, r3, r0
   840fe:	1a3f      	subs	r7, r7, r0
   84100:	f8c8 3008 	str.w	r3, [r8, #8]
   84104:	2b00      	cmp	r3, #0
   84106:	d1e9      	bne.n	840dc <__sfvwrite_r+0x30>
   84108:	2000      	movs	r0, #0
   8410a:	b003      	add	sp, #12
   8410c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84110:	4621      	mov	r1, r4
   84112:	9800      	ldr	r0, [sp, #0]
   84114:	f7ff fc56 	bl	839c4 <__swsetup_r>
   84118:	2800      	cmp	r0, #0
   8411a:	f040 8135 	bne.w	84388 <__sfvwrite_r+0x2dc>
   8411e:	89a3      	ldrh	r3, [r4, #12]
   84120:	6835      	ldr	r5, [r6, #0]
   84122:	f013 0002 	ands.w	r0, r3, #2
   84126:	d1d3      	bne.n	840d0 <__sfvwrite_r+0x24>
   84128:	f013 0901 	ands.w	r9, r3, #1
   8412c:	d144      	bne.n	841b8 <__sfvwrite_r+0x10c>
   8412e:	464f      	mov	r7, r9
   84130:	9601      	str	r6, [sp, #4]
   84132:	b337      	cbz	r7, 84182 <__sfvwrite_r+0xd6>
   84134:	059a      	lsls	r2, r3, #22
   84136:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8413a:	f140 8085 	bpl.w	84248 <__sfvwrite_r+0x19c>
   8413e:	4547      	cmp	r7, r8
   84140:	46c3      	mov	fp, r8
   84142:	f0c0 80ad 	bcc.w	842a0 <__sfvwrite_r+0x1f4>
   84146:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8414a:	f040 80ae 	bne.w	842aa <__sfvwrite_r+0x1fe>
   8414e:	46ba      	mov	sl, r7
   84150:	6820      	ldr	r0, [r4, #0]
   84152:	465a      	mov	r2, fp
   84154:	4649      	mov	r1, r9
   84156:	f000 fcdf 	bl	84b18 <memmove>
   8415a:	68a2      	ldr	r2, [r4, #8]
   8415c:	6823      	ldr	r3, [r4, #0]
   8415e:	eba2 0208 	sub.w	r2, r2, r8
   84162:	445b      	add	r3, fp
   84164:	60a2      	str	r2, [r4, #8]
   84166:	6023      	str	r3, [r4, #0]
   84168:	9a01      	ldr	r2, [sp, #4]
   8416a:	44d1      	add	r9, sl
   8416c:	6893      	ldr	r3, [r2, #8]
   8416e:	eba7 070a 	sub.w	r7, r7, sl
   84172:	eba3 030a 	sub.w	r3, r3, sl
   84176:	6093      	str	r3, [r2, #8]
   84178:	2b00      	cmp	r3, #0
   8417a:	d0c5      	beq.n	84108 <__sfvwrite_r+0x5c>
   8417c:	89a3      	ldrh	r3, [r4, #12]
   8417e:	2f00      	cmp	r7, #0
   84180:	d1d8      	bne.n	84134 <__sfvwrite_r+0x88>
   84182:	f8d5 9000 	ldr.w	r9, [r5]
   84186:	686f      	ldr	r7, [r5, #4]
   84188:	3508      	adds	r5, #8
   8418a:	e7d2      	b.n	84132 <__sfvwrite_r+0x86>
   8418c:	f8d5 9000 	ldr.w	r9, [r5]
   84190:	686f      	ldr	r7, [r5, #4]
   84192:	3508      	adds	r5, #8
   84194:	e7a2      	b.n	840dc <__sfvwrite_r+0x30>
   84196:	2000      	movs	r0, #0
   84198:	4770      	bx	lr
   8419a:	4621      	mov	r1, r4
   8419c:	9800      	ldr	r0, [sp, #0]
   8419e:	f7ff fd21 	bl	83be4 <_fflush_r>
   841a2:	b378      	cbz	r0, 84204 <__sfvwrite_r+0x158>
   841a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   841a8:	f04f 30ff 	mov.w	r0, #4294967295
   841ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   841b0:	81a3      	strh	r3, [r4, #12]
   841b2:	b003      	add	sp, #12
   841b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841b8:	4681      	mov	r9, r0
   841ba:	4633      	mov	r3, r6
   841bc:	464e      	mov	r6, r9
   841be:	46a8      	mov	r8, r5
   841c0:	469a      	mov	sl, r3
   841c2:	464d      	mov	r5, r9
   841c4:	b356      	cbz	r6, 8421c <__sfvwrite_r+0x170>
   841c6:	2800      	cmp	r0, #0
   841c8:	d032      	beq.n	84230 <__sfvwrite_r+0x184>
   841ca:	45b1      	cmp	r9, r6
   841cc:	46cb      	mov	fp, r9
   841ce:	bf28      	it	cs
   841d0:	46b3      	movcs	fp, r6
   841d2:	6820      	ldr	r0, [r4, #0]
   841d4:	6923      	ldr	r3, [r4, #16]
   841d6:	465f      	mov	r7, fp
   841d8:	4298      	cmp	r0, r3
   841da:	6962      	ldr	r2, [r4, #20]
   841dc:	d904      	bls.n	841e8 <__sfvwrite_r+0x13c>
   841de:	68a3      	ldr	r3, [r4, #8]
   841e0:	4413      	add	r3, r2
   841e2:	459b      	cmp	fp, r3
   841e4:	f300 80a8 	bgt.w	84338 <__sfvwrite_r+0x28c>
   841e8:	4593      	cmp	fp, r2
   841ea:	db4d      	blt.n	84288 <__sfvwrite_r+0x1dc>
   841ec:	4613      	mov	r3, r2
   841ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
   841f0:	462a      	mov	r2, r5
   841f2:	69e1      	ldr	r1, [r4, #28]
   841f4:	9800      	ldr	r0, [sp, #0]
   841f6:	47b8      	blx	r7
   841f8:	1e07      	subs	r7, r0, #0
   841fa:	ddd3      	ble.n	841a4 <__sfvwrite_r+0xf8>
   841fc:	ebb9 0907 	subs.w	r9, r9, r7
   84200:	d0cb      	beq.n	8419a <__sfvwrite_r+0xee>
   84202:	2001      	movs	r0, #1
   84204:	f8da 3008 	ldr.w	r3, [sl, #8]
   84208:	443d      	add	r5, r7
   8420a:	1bdb      	subs	r3, r3, r7
   8420c:	1bf6      	subs	r6, r6, r7
   8420e:	f8ca 3008 	str.w	r3, [sl, #8]
   84212:	2b00      	cmp	r3, #0
   84214:	f43f af78 	beq.w	84108 <__sfvwrite_r+0x5c>
   84218:	2e00      	cmp	r6, #0
   8421a:	d1d4      	bne.n	841c6 <__sfvwrite_r+0x11a>
   8421c:	f108 0308 	add.w	r3, r8, #8
   84220:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84224:	4698      	mov	r8, r3
   84226:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8422a:	3308      	adds	r3, #8
   8422c:	2e00      	cmp	r6, #0
   8422e:	d0f7      	beq.n	84220 <__sfvwrite_r+0x174>
   84230:	4632      	mov	r2, r6
   84232:	210a      	movs	r1, #10
   84234:	4628      	mov	r0, r5
   84236:	f000 fc29 	bl	84a8c <memchr>
   8423a:	2800      	cmp	r0, #0
   8423c:	f000 80a1 	beq.w	84382 <__sfvwrite_r+0x2d6>
   84240:	3001      	adds	r0, #1
   84242:	eba0 0905 	sub.w	r9, r0, r5
   84246:	e7c0      	b.n	841ca <__sfvwrite_r+0x11e>
   84248:	6820      	ldr	r0, [r4, #0]
   8424a:	6923      	ldr	r3, [r4, #16]
   8424c:	4298      	cmp	r0, r3
   8424e:	d802      	bhi.n	84256 <__sfvwrite_r+0x1aa>
   84250:	6963      	ldr	r3, [r4, #20]
   84252:	429f      	cmp	r7, r3
   84254:	d25d      	bcs.n	84312 <__sfvwrite_r+0x266>
   84256:	45b8      	cmp	r8, r7
   84258:	bf28      	it	cs
   8425a:	46b8      	movcs	r8, r7
   8425c:	4649      	mov	r1, r9
   8425e:	4642      	mov	r2, r8
   84260:	f000 fc5a 	bl	84b18 <memmove>
   84264:	68a3      	ldr	r3, [r4, #8]
   84266:	6822      	ldr	r2, [r4, #0]
   84268:	eba3 0308 	sub.w	r3, r3, r8
   8426c:	4442      	add	r2, r8
   8426e:	60a3      	str	r3, [r4, #8]
   84270:	6022      	str	r2, [r4, #0]
   84272:	b10b      	cbz	r3, 84278 <__sfvwrite_r+0x1cc>
   84274:	46c2      	mov	sl, r8
   84276:	e777      	b.n	84168 <__sfvwrite_r+0xbc>
   84278:	4621      	mov	r1, r4
   8427a:	9800      	ldr	r0, [sp, #0]
   8427c:	f7ff fcb2 	bl	83be4 <_fflush_r>
   84280:	2800      	cmp	r0, #0
   84282:	d18f      	bne.n	841a4 <__sfvwrite_r+0xf8>
   84284:	46c2      	mov	sl, r8
   84286:	e76f      	b.n	84168 <__sfvwrite_r+0xbc>
   84288:	465a      	mov	r2, fp
   8428a:	4629      	mov	r1, r5
   8428c:	f000 fc44 	bl	84b18 <memmove>
   84290:	68a2      	ldr	r2, [r4, #8]
   84292:	6823      	ldr	r3, [r4, #0]
   84294:	eba2 020b 	sub.w	r2, r2, fp
   84298:	445b      	add	r3, fp
   8429a:	60a2      	str	r2, [r4, #8]
   8429c:	6023      	str	r3, [r4, #0]
   8429e:	e7ad      	b.n	841fc <__sfvwrite_r+0x150>
   842a0:	46b8      	mov	r8, r7
   842a2:	46ba      	mov	sl, r7
   842a4:	46bb      	mov	fp, r7
   842a6:	6820      	ldr	r0, [r4, #0]
   842a8:	e753      	b.n	84152 <__sfvwrite_r+0xa6>
   842aa:	6962      	ldr	r2, [r4, #20]
   842ac:	6820      	ldr	r0, [r4, #0]
   842ae:	6921      	ldr	r1, [r4, #16]
   842b0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   842b4:	eba0 0a01 	sub.w	sl, r0, r1
   842b8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   842bc:	f10a 0001 	add.w	r0, sl, #1
   842c0:	ea4f 0868 	mov.w	r8, r8, asr #1
   842c4:	4438      	add	r0, r7
   842c6:	4540      	cmp	r0, r8
   842c8:	4642      	mov	r2, r8
   842ca:	bf84      	itt	hi
   842cc:	4680      	movhi	r8, r0
   842ce:	4642      	movhi	r2, r8
   842d0:	055b      	lsls	r3, r3, #21
   842d2:	d544      	bpl.n	8435e <__sfvwrite_r+0x2b2>
   842d4:	4611      	mov	r1, r2
   842d6:	9800      	ldr	r0, [sp, #0]
   842d8:	f000 f920 	bl	8451c <_malloc_r>
   842dc:	4683      	mov	fp, r0
   842de:	2800      	cmp	r0, #0
   842e0:	d055      	beq.n	8438e <__sfvwrite_r+0x2e2>
   842e2:	4652      	mov	r2, sl
   842e4:	6921      	ldr	r1, [r4, #16]
   842e6:	f7fe fae3 	bl	828b0 <memcpy>
   842ea:	89a3      	ldrh	r3, [r4, #12]
   842ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   842f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   842f4:	81a3      	strh	r3, [r4, #12]
   842f6:	eb0b 000a 	add.w	r0, fp, sl
   842fa:	eba8 030a 	sub.w	r3, r8, sl
   842fe:	f8c4 b010 	str.w	fp, [r4, #16]
   84302:	f8c4 8014 	str.w	r8, [r4, #20]
   84306:	6020      	str	r0, [r4, #0]
   84308:	60a3      	str	r3, [r4, #8]
   8430a:	46b8      	mov	r8, r7
   8430c:	46ba      	mov	sl, r7
   8430e:	46bb      	mov	fp, r7
   84310:	e71f      	b.n	84152 <__sfvwrite_r+0xa6>
   84312:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84316:	42ba      	cmp	r2, r7
   84318:	bf28      	it	cs
   8431a:	463a      	movcs	r2, r7
   8431c:	fb92 f2f3 	sdiv	r2, r2, r3
   84320:	69e1      	ldr	r1, [r4, #28]
   84322:	fb03 f302 	mul.w	r3, r3, r2
   84326:	9800      	ldr	r0, [sp, #0]
   84328:	464a      	mov	r2, r9
   8432a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8432c:	47b0      	blx	r6
   8432e:	f1b0 0a00 	subs.w	sl, r0, #0
   84332:	f73f af19 	bgt.w	84168 <__sfvwrite_r+0xbc>
   84336:	e735      	b.n	841a4 <__sfvwrite_r+0xf8>
   84338:	461a      	mov	r2, r3
   8433a:	4629      	mov	r1, r5
   8433c:	9301      	str	r3, [sp, #4]
   8433e:	f000 fbeb 	bl	84b18 <memmove>
   84342:	6822      	ldr	r2, [r4, #0]
   84344:	9b01      	ldr	r3, [sp, #4]
   84346:	4621      	mov	r1, r4
   84348:	441a      	add	r2, r3
   8434a:	6022      	str	r2, [r4, #0]
   8434c:	9800      	ldr	r0, [sp, #0]
   8434e:	f7ff fc49 	bl	83be4 <_fflush_r>
   84352:	9b01      	ldr	r3, [sp, #4]
   84354:	2800      	cmp	r0, #0
   84356:	f47f af25 	bne.w	841a4 <__sfvwrite_r+0xf8>
   8435a:	461f      	mov	r7, r3
   8435c:	e74e      	b.n	841fc <__sfvwrite_r+0x150>
   8435e:	9800      	ldr	r0, [sp, #0]
   84360:	f000 fc4a 	bl	84bf8 <_realloc_r>
   84364:	4683      	mov	fp, r0
   84366:	2800      	cmp	r0, #0
   84368:	d1c5      	bne.n	842f6 <__sfvwrite_r+0x24a>
   8436a:	9d00      	ldr	r5, [sp, #0]
   8436c:	6921      	ldr	r1, [r4, #16]
   8436e:	4628      	mov	r0, r5
   84370:	f7ff fdb6 	bl	83ee0 <_free_r>
   84374:	220c      	movs	r2, #12
   84376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8437a:	602a      	str	r2, [r5, #0]
   8437c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84380:	e712      	b.n	841a8 <__sfvwrite_r+0xfc>
   84382:	f106 0901 	add.w	r9, r6, #1
   84386:	e720      	b.n	841ca <__sfvwrite_r+0x11e>
   84388:	f04f 30ff 	mov.w	r0, #4294967295
   8438c:	e6bd      	b.n	8410a <__sfvwrite_r+0x5e>
   8438e:	220c      	movs	r2, #12
   84390:	9900      	ldr	r1, [sp, #0]
   84392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84396:	600a      	str	r2, [r1, #0]
   84398:	e706      	b.n	841a8 <__sfvwrite_r+0xfc>
   8439a:	bf00      	nop
   8439c:	7ffffc00 	.word	0x7ffffc00

000843a0 <_fwalk_reent>:
   843a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   843a4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   843a8:	d01e      	beq.n	843e8 <_fwalk_reent+0x48>
   843aa:	4688      	mov	r8, r1
   843ac:	4607      	mov	r7, r0
   843ae:	f04f 0900 	mov.w	r9, #0
   843b2:	6875      	ldr	r5, [r6, #4]
   843b4:	68b4      	ldr	r4, [r6, #8]
   843b6:	3d01      	subs	r5, #1
   843b8:	d410      	bmi.n	843dc <_fwalk_reent+0x3c>
   843ba:	89a3      	ldrh	r3, [r4, #12]
   843bc:	3d01      	subs	r5, #1
   843be:	2b01      	cmp	r3, #1
   843c0:	d908      	bls.n	843d4 <_fwalk_reent+0x34>
   843c2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   843c6:	3301      	adds	r3, #1
   843c8:	d004      	beq.n	843d4 <_fwalk_reent+0x34>
   843ca:	4621      	mov	r1, r4
   843cc:	4638      	mov	r0, r7
   843ce:	47c0      	blx	r8
   843d0:	ea49 0900 	orr.w	r9, r9, r0
   843d4:	1c6b      	adds	r3, r5, #1
   843d6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   843da:	d1ee      	bne.n	843ba <_fwalk_reent+0x1a>
   843dc:	6836      	ldr	r6, [r6, #0]
   843de:	2e00      	cmp	r6, #0
   843e0:	d1e7      	bne.n	843b2 <_fwalk_reent+0x12>
   843e2:	4648      	mov	r0, r9
   843e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   843e8:	46b1      	mov	r9, r6
   843ea:	4648      	mov	r0, r9
   843ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000843f0 <__locale_mb_cur_max>:
   843f0:	4b04      	ldr	r3, [pc, #16]	; (84404 <__locale_mb_cur_max+0x14>)
   843f2:	4a05      	ldr	r2, [pc, #20]	; (84408 <__locale_mb_cur_max+0x18>)
   843f4:	681b      	ldr	r3, [r3, #0]
   843f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   843f8:	2b00      	cmp	r3, #0
   843fa:	bf08      	it	eq
   843fc:	4613      	moveq	r3, r2
   843fe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   84402:	4770      	bx	lr
   84404:	20070134 	.word	0x20070134
   84408:	20070564 	.word	0x20070564

0008440c <__retarget_lock_init_recursive>:
   8440c:	4770      	bx	lr
   8440e:	bf00      	nop

00084410 <__retarget_lock_close_recursive>:
   84410:	4770      	bx	lr
   84412:	bf00      	nop

00084414 <__retarget_lock_acquire_recursive>:
   84414:	4770      	bx	lr
   84416:	bf00      	nop

00084418 <__retarget_lock_release_recursive>:
   84418:	4770      	bx	lr
   8441a:	bf00      	nop

0008441c <__swhatbuf_r>:
   8441c:	b570      	push	{r4, r5, r6, lr}
   8441e:	460c      	mov	r4, r1
   84420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84424:	b090      	sub	sp, #64	; 0x40
   84426:	2900      	cmp	r1, #0
   84428:	4615      	mov	r5, r2
   8442a:	461e      	mov	r6, r3
   8442c:	db14      	blt.n	84458 <__swhatbuf_r+0x3c>
   8442e:	aa01      	add	r2, sp, #4
   84430:	f000 ff68 	bl	85304 <_fstat_r>
   84434:	2800      	cmp	r0, #0
   84436:	db0f      	blt.n	84458 <__swhatbuf_r+0x3c>
   84438:	9a02      	ldr	r2, [sp, #8]
   8443a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8443e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   84442:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   84446:	fab2 f282 	clz	r2, r2
   8444a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8444e:	0952      	lsrs	r2, r2, #5
   84450:	6032      	str	r2, [r6, #0]
   84452:	602b      	str	r3, [r5, #0]
   84454:	b010      	add	sp, #64	; 0x40
   84456:	bd70      	pop	{r4, r5, r6, pc}
   84458:	2300      	movs	r3, #0
   8445a:	89a2      	ldrh	r2, [r4, #12]
   8445c:	6033      	str	r3, [r6, #0]
   8445e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   84462:	d004      	beq.n	8446e <__swhatbuf_r+0x52>
   84464:	2240      	movs	r2, #64	; 0x40
   84466:	4618      	mov	r0, r3
   84468:	602a      	str	r2, [r5, #0]
   8446a:	b010      	add	sp, #64	; 0x40
   8446c:	bd70      	pop	{r4, r5, r6, pc}
   8446e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84472:	602b      	str	r3, [r5, #0]
   84474:	b010      	add	sp, #64	; 0x40
   84476:	bd70      	pop	{r4, r5, r6, pc}

00084478 <__smakebuf_r>:
   84478:	898a      	ldrh	r2, [r1, #12]
   8447a:	460b      	mov	r3, r1
   8447c:	0792      	lsls	r2, r2, #30
   8447e:	d506      	bpl.n	8448e <__smakebuf_r+0x16>
   84480:	2101      	movs	r1, #1
   84482:	f103 0243 	add.w	r2, r3, #67	; 0x43
   84486:	6159      	str	r1, [r3, #20]
   84488:	601a      	str	r2, [r3, #0]
   8448a:	611a      	str	r2, [r3, #16]
   8448c:	4770      	bx	lr
   8448e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84490:	b083      	sub	sp, #12
   84492:	ab01      	add	r3, sp, #4
   84494:	466a      	mov	r2, sp
   84496:	460c      	mov	r4, r1
   84498:	4606      	mov	r6, r0
   8449a:	f7ff ffbf 	bl	8441c <__swhatbuf_r>
   8449e:	9900      	ldr	r1, [sp, #0]
   844a0:	4605      	mov	r5, r0
   844a2:	4630      	mov	r0, r6
   844a4:	f000 f83a 	bl	8451c <_malloc_r>
   844a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   844ac:	b1d8      	cbz	r0, 844e6 <__smakebuf_r+0x6e>
   844ae:	e89d 0006 	ldmia.w	sp, {r1, r2}
   844b2:	4f15      	ldr	r7, [pc, #84]	; (84508 <__smakebuf_r+0x90>)
   844b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   844b8:	63f7      	str	r7, [r6, #60]	; 0x3c
   844ba:	81a3      	strh	r3, [r4, #12]
   844bc:	6020      	str	r0, [r4, #0]
   844be:	6120      	str	r0, [r4, #16]
   844c0:	6161      	str	r1, [r4, #20]
   844c2:	b91a      	cbnz	r2, 844cc <__smakebuf_r+0x54>
   844c4:	432b      	orrs	r3, r5
   844c6:	81a3      	strh	r3, [r4, #12]
   844c8:	b003      	add	sp, #12
   844ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   844cc:	4630      	mov	r0, r6
   844ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   844d2:	f000 ff2b 	bl	8532c <_isatty_r>
   844d6:	b1a0      	cbz	r0, 84502 <__smakebuf_r+0x8a>
   844d8:	89a3      	ldrh	r3, [r4, #12]
   844da:	f023 0303 	bic.w	r3, r3, #3
   844de:	f043 0301 	orr.w	r3, r3, #1
   844e2:	b21b      	sxth	r3, r3
   844e4:	e7ee      	b.n	844c4 <__smakebuf_r+0x4c>
   844e6:	059a      	lsls	r2, r3, #22
   844e8:	d4ee      	bmi.n	844c8 <__smakebuf_r+0x50>
   844ea:	2101      	movs	r1, #1
   844ec:	f023 0303 	bic.w	r3, r3, #3
   844f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   844f4:	f043 0302 	orr.w	r3, r3, #2
   844f8:	81a3      	strh	r3, [r4, #12]
   844fa:	6161      	str	r1, [r4, #20]
   844fc:	6022      	str	r2, [r4, #0]
   844fe:	6122      	str	r2, [r4, #16]
   84500:	e7e2      	b.n	844c8 <__smakebuf_r+0x50>
   84502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84506:	e7dd      	b.n	844c4 <__smakebuf_r+0x4c>
   84508:	00083c39 	.word	0x00083c39

0008450c <malloc>:
   8450c:	4b02      	ldr	r3, [pc, #8]	; (84518 <malloc+0xc>)
   8450e:	4601      	mov	r1, r0
   84510:	6818      	ldr	r0, [r3, #0]
   84512:	f000 b803 	b.w	8451c <_malloc_r>
   84516:	bf00      	nop
   84518:	20070134 	.word	0x20070134

0008451c <_malloc_r>:
   8451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84520:	f101 060b 	add.w	r6, r1, #11
   84524:	2e16      	cmp	r6, #22
   84526:	b083      	sub	sp, #12
   84528:	4605      	mov	r5, r0
   8452a:	f240 809e 	bls.w	8466a <_malloc_r+0x14e>
   8452e:	f036 0607 	bics.w	r6, r6, #7
   84532:	f100 80bd 	bmi.w	846b0 <_malloc_r+0x194>
   84536:	42b1      	cmp	r1, r6
   84538:	f200 80ba 	bhi.w	846b0 <_malloc_r+0x194>
   8453c:	f000 fb50 	bl	84be0 <__malloc_lock>
   84540:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84544:	f0c0 8285 	bcc.w	84a52 <_malloc_r+0x536>
   84548:	0a73      	lsrs	r3, r6, #9
   8454a:	f000 80b8 	beq.w	846be <_malloc_r+0x1a2>
   8454e:	2b04      	cmp	r3, #4
   84550:	f200 816c 	bhi.w	8482c <_malloc_r+0x310>
   84554:	09b3      	lsrs	r3, r6, #6
   84556:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8455a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8455e:	00c1      	lsls	r1, r0, #3
   84560:	4fb8      	ldr	r7, [pc, #736]	; (84844 <_malloc_r+0x328>)
   84562:	4439      	add	r1, r7
   84564:	684c      	ldr	r4, [r1, #4]
   84566:	3908      	subs	r1, #8
   84568:	42a1      	cmp	r1, r4
   8456a:	d106      	bne.n	8457a <_malloc_r+0x5e>
   8456c:	e00c      	b.n	84588 <_malloc_r+0x6c>
   8456e:	2a00      	cmp	r2, #0
   84570:	f280 80ab 	bge.w	846ca <_malloc_r+0x1ae>
   84574:	68e4      	ldr	r4, [r4, #12]
   84576:	42a1      	cmp	r1, r4
   84578:	d006      	beq.n	84588 <_malloc_r+0x6c>
   8457a:	6863      	ldr	r3, [r4, #4]
   8457c:	f023 0303 	bic.w	r3, r3, #3
   84580:	1b9a      	subs	r2, r3, r6
   84582:	2a0f      	cmp	r2, #15
   84584:	ddf3      	ble.n	8456e <_malloc_r+0x52>
   84586:	4670      	mov	r0, lr
   84588:	693c      	ldr	r4, [r7, #16]
   8458a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84858 <_malloc_r+0x33c>
   8458e:	4574      	cmp	r4, lr
   84590:	f000 819e 	beq.w	848d0 <_malloc_r+0x3b4>
   84594:	6863      	ldr	r3, [r4, #4]
   84596:	f023 0303 	bic.w	r3, r3, #3
   8459a:	1b9a      	subs	r2, r3, r6
   8459c:	2a0f      	cmp	r2, #15
   8459e:	f300 8183 	bgt.w	848a8 <_malloc_r+0x38c>
   845a2:	2a00      	cmp	r2, #0
   845a4:	f8c7 e014 	str.w	lr, [r7, #20]
   845a8:	f8c7 e010 	str.w	lr, [r7, #16]
   845ac:	f280 8091 	bge.w	846d2 <_malloc_r+0x1b6>
   845b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   845b4:	f080 8154 	bcs.w	84860 <_malloc_r+0x344>
   845b8:	2201      	movs	r2, #1
   845ba:	08db      	lsrs	r3, r3, #3
   845bc:	6879      	ldr	r1, [r7, #4]
   845be:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   845c2:	4413      	add	r3, r2
   845c4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   845c8:	fa02 f20c 	lsl.w	r2, r2, ip
   845cc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   845d0:	430a      	orrs	r2, r1
   845d2:	f1ac 0108 	sub.w	r1, ip, #8
   845d6:	60e1      	str	r1, [r4, #12]
   845d8:	f8c4 8008 	str.w	r8, [r4, #8]
   845dc:	607a      	str	r2, [r7, #4]
   845de:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   845e2:	f8c8 400c 	str.w	r4, [r8, #12]
   845e6:	2401      	movs	r4, #1
   845e8:	1083      	asrs	r3, r0, #2
   845ea:	409c      	lsls	r4, r3
   845ec:	4294      	cmp	r4, r2
   845ee:	d87d      	bhi.n	846ec <_malloc_r+0x1d0>
   845f0:	4214      	tst	r4, r2
   845f2:	d106      	bne.n	84602 <_malloc_r+0xe6>
   845f4:	f020 0003 	bic.w	r0, r0, #3
   845f8:	0064      	lsls	r4, r4, #1
   845fa:	4214      	tst	r4, r2
   845fc:	f100 0004 	add.w	r0, r0, #4
   84600:	d0fa      	beq.n	845f8 <_malloc_r+0xdc>
   84602:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   84606:	46cc      	mov	ip, r9
   84608:	4680      	mov	r8, r0
   8460a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8460e:	459c      	cmp	ip, r3
   84610:	d107      	bne.n	84622 <_malloc_r+0x106>
   84612:	e15f      	b.n	848d4 <_malloc_r+0x3b8>
   84614:	2a00      	cmp	r2, #0
   84616:	f280 816d 	bge.w	848f4 <_malloc_r+0x3d8>
   8461a:	68db      	ldr	r3, [r3, #12]
   8461c:	459c      	cmp	ip, r3
   8461e:	f000 8159 	beq.w	848d4 <_malloc_r+0x3b8>
   84622:	6859      	ldr	r1, [r3, #4]
   84624:	f021 0103 	bic.w	r1, r1, #3
   84628:	1b8a      	subs	r2, r1, r6
   8462a:	2a0f      	cmp	r2, #15
   8462c:	ddf2      	ble.n	84614 <_malloc_r+0xf8>
   8462e:	68dc      	ldr	r4, [r3, #12]
   84630:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84634:	f046 0801 	orr.w	r8, r6, #1
   84638:	4628      	mov	r0, r5
   8463a:	441e      	add	r6, r3
   8463c:	f042 0501 	orr.w	r5, r2, #1
   84640:	f8c3 8004 	str.w	r8, [r3, #4]
   84644:	f8cc 400c 	str.w	r4, [ip, #12]
   84648:	f8c4 c008 	str.w	ip, [r4, #8]
   8464c:	617e      	str	r6, [r7, #20]
   8464e:	613e      	str	r6, [r7, #16]
   84650:	f8c6 e00c 	str.w	lr, [r6, #12]
   84654:	f8c6 e008 	str.w	lr, [r6, #8]
   84658:	6075      	str	r5, [r6, #4]
   8465a:	505a      	str	r2, [r3, r1]
   8465c:	9300      	str	r3, [sp, #0]
   8465e:	f000 fac5 	bl	84bec <__malloc_unlock>
   84662:	9b00      	ldr	r3, [sp, #0]
   84664:	f103 0408 	add.w	r4, r3, #8
   84668:	e01e      	b.n	846a8 <_malloc_r+0x18c>
   8466a:	2910      	cmp	r1, #16
   8466c:	d820      	bhi.n	846b0 <_malloc_r+0x194>
   8466e:	f000 fab7 	bl	84be0 <__malloc_lock>
   84672:	2610      	movs	r6, #16
   84674:	2318      	movs	r3, #24
   84676:	2002      	movs	r0, #2
   84678:	4f72      	ldr	r7, [pc, #456]	; (84844 <_malloc_r+0x328>)
   8467a:	443b      	add	r3, r7
   8467c:	685c      	ldr	r4, [r3, #4]
   8467e:	f1a3 0208 	sub.w	r2, r3, #8
   84682:	4294      	cmp	r4, r2
   84684:	f000 812f 	beq.w	848e6 <_malloc_r+0x3ca>
   84688:	6863      	ldr	r3, [r4, #4]
   8468a:	68e1      	ldr	r1, [r4, #12]
   8468c:	f023 0303 	bic.w	r3, r3, #3
   84690:	4423      	add	r3, r4
   84692:	685a      	ldr	r2, [r3, #4]
   84694:	68a6      	ldr	r6, [r4, #8]
   84696:	f042 0201 	orr.w	r2, r2, #1
   8469a:	60f1      	str	r1, [r6, #12]
   8469c:	4628      	mov	r0, r5
   8469e:	608e      	str	r6, [r1, #8]
   846a0:	605a      	str	r2, [r3, #4]
   846a2:	f000 faa3 	bl	84bec <__malloc_unlock>
   846a6:	3408      	adds	r4, #8
   846a8:	4620      	mov	r0, r4
   846aa:	b003      	add	sp, #12
   846ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846b0:	2400      	movs	r4, #0
   846b2:	230c      	movs	r3, #12
   846b4:	4620      	mov	r0, r4
   846b6:	602b      	str	r3, [r5, #0]
   846b8:	b003      	add	sp, #12
   846ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846be:	2040      	movs	r0, #64	; 0x40
   846c0:	f44f 7100 	mov.w	r1, #512	; 0x200
   846c4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   846c8:	e74a      	b.n	84560 <_malloc_r+0x44>
   846ca:	4423      	add	r3, r4
   846cc:	685a      	ldr	r2, [r3, #4]
   846ce:	68e1      	ldr	r1, [r4, #12]
   846d0:	e7e0      	b.n	84694 <_malloc_r+0x178>
   846d2:	4423      	add	r3, r4
   846d4:	685a      	ldr	r2, [r3, #4]
   846d6:	4628      	mov	r0, r5
   846d8:	f042 0201 	orr.w	r2, r2, #1
   846dc:	605a      	str	r2, [r3, #4]
   846de:	3408      	adds	r4, #8
   846e0:	f000 fa84 	bl	84bec <__malloc_unlock>
   846e4:	4620      	mov	r0, r4
   846e6:	b003      	add	sp, #12
   846e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846ec:	68bc      	ldr	r4, [r7, #8]
   846ee:	6863      	ldr	r3, [r4, #4]
   846f0:	f023 0803 	bic.w	r8, r3, #3
   846f4:	45b0      	cmp	r8, r6
   846f6:	d304      	bcc.n	84702 <_malloc_r+0x1e6>
   846f8:	eba8 0306 	sub.w	r3, r8, r6
   846fc:	2b0f      	cmp	r3, #15
   846fe:	f300 8085 	bgt.w	8480c <_malloc_r+0x2f0>
   84702:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8485c <_malloc_r+0x340>
   84706:	4b50      	ldr	r3, [pc, #320]	; (84848 <_malloc_r+0x32c>)
   84708:	f8d9 2000 	ldr.w	r2, [r9]
   8470c:	681b      	ldr	r3, [r3, #0]
   8470e:	3201      	adds	r2, #1
   84710:	4433      	add	r3, r6
   84712:	eb04 0a08 	add.w	sl, r4, r8
   84716:	f000 8154 	beq.w	849c2 <_malloc_r+0x4a6>
   8471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8471e:	330f      	adds	r3, #15
   84720:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84724:	f02b 0b0f 	bic.w	fp, fp, #15
   84728:	4659      	mov	r1, fp
   8472a:	4628      	mov	r0, r5
   8472c:	f000 fc1a 	bl	84f64 <_sbrk_r>
   84730:	1c41      	adds	r1, r0, #1
   84732:	4602      	mov	r2, r0
   84734:	f000 80fb 	beq.w	8492e <_malloc_r+0x412>
   84738:	4582      	cmp	sl, r0
   8473a:	f200 80f6 	bhi.w	8492a <_malloc_r+0x40e>
   8473e:	4b43      	ldr	r3, [pc, #268]	; (8484c <_malloc_r+0x330>)
   84740:	6819      	ldr	r1, [r3, #0]
   84742:	4459      	add	r1, fp
   84744:	6019      	str	r1, [r3, #0]
   84746:	f000 814c 	beq.w	849e2 <_malloc_r+0x4c6>
   8474a:	f8d9 0000 	ldr.w	r0, [r9]
   8474e:	3001      	adds	r0, #1
   84750:	bf1b      	ittet	ne
   84752:	eba2 0a0a 	subne.w	sl, r2, sl
   84756:	4451      	addne	r1, sl
   84758:	f8c9 2000 	streq.w	r2, [r9]
   8475c:	6019      	strne	r1, [r3, #0]
   8475e:	f012 0107 	ands.w	r1, r2, #7
   84762:	f000 8114 	beq.w	8498e <_malloc_r+0x472>
   84766:	f1c1 0008 	rsb	r0, r1, #8
   8476a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8476e:	4402      	add	r2, r0
   84770:	3108      	adds	r1, #8
   84772:	eb02 090b 	add.w	r9, r2, fp
   84776:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8477a:	eba1 0909 	sub.w	r9, r1, r9
   8477e:	4649      	mov	r1, r9
   84780:	4628      	mov	r0, r5
   84782:	9301      	str	r3, [sp, #4]
   84784:	9200      	str	r2, [sp, #0]
   84786:	f000 fbed 	bl	84f64 <_sbrk_r>
   8478a:	1c43      	adds	r3, r0, #1
   8478c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84790:	f000 8142 	beq.w	84a18 <_malloc_r+0x4fc>
   84794:	1a80      	subs	r0, r0, r2
   84796:	4448      	add	r0, r9
   84798:	f040 0001 	orr.w	r0, r0, #1
   8479c:	6819      	ldr	r1, [r3, #0]
   8479e:	42bc      	cmp	r4, r7
   847a0:	4449      	add	r1, r9
   847a2:	60ba      	str	r2, [r7, #8]
   847a4:	6019      	str	r1, [r3, #0]
   847a6:	6050      	str	r0, [r2, #4]
   847a8:	d017      	beq.n	847da <_malloc_r+0x2be>
   847aa:	f1b8 0f0f 	cmp.w	r8, #15
   847ae:	f240 80fa 	bls.w	849a6 <_malloc_r+0x48a>
   847b2:	f04f 0c05 	mov.w	ip, #5
   847b6:	6862      	ldr	r2, [r4, #4]
   847b8:	f1a8 000c 	sub.w	r0, r8, #12
   847bc:	f020 0007 	bic.w	r0, r0, #7
   847c0:	f002 0201 	and.w	r2, r2, #1
   847c4:	eb04 0e00 	add.w	lr, r4, r0
   847c8:	4302      	orrs	r2, r0
   847ca:	280f      	cmp	r0, #15
   847cc:	6062      	str	r2, [r4, #4]
   847ce:	f8ce c004 	str.w	ip, [lr, #4]
   847d2:	f8ce c008 	str.w	ip, [lr, #8]
   847d6:	f200 8116 	bhi.w	84a06 <_malloc_r+0x4ea>
   847da:	4b1d      	ldr	r3, [pc, #116]	; (84850 <_malloc_r+0x334>)
   847dc:	68bc      	ldr	r4, [r7, #8]
   847de:	681a      	ldr	r2, [r3, #0]
   847e0:	4291      	cmp	r1, r2
   847e2:	bf88      	it	hi
   847e4:	6019      	strhi	r1, [r3, #0]
   847e6:	4b1b      	ldr	r3, [pc, #108]	; (84854 <_malloc_r+0x338>)
   847e8:	681a      	ldr	r2, [r3, #0]
   847ea:	4291      	cmp	r1, r2
   847ec:	6862      	ldr	r2, [r4, #4]
   847ee:	bf88      	it	hi
   847f0:	6019      	strhi	r1, [r3, #0]
   847f2:	f022 0203 	bic.w	r2, r2, #3
   847f6:	4296      	cmp	r6, r2
   847f8:	eba2 0306 	sub.w	r3, r2, r6
   847fc:	d801      	bhi.n	84802 <_malloc_r+0x2e6>
   847fe:	2b0f      	cmp	r3, #15
   84800:	dc04      	bgt.n	8480c <_malloc_r+0x2f0>
   84802:	4628      	mov	r0, r5
   84804:	f000 f9f2 	bl	84bec <__malloc_unlock>
   84808:	2400      	movs	r4, #0
   8480a:	e74d      	b.n	846a8 <_malloc_r+0x18c>
   8480c:	f046 0201 	orr.w	r2, r6, #1
   84810:	f043 0301 	orr.w	r3, r3, #1
   84814:	4426      	add	r6, r4
   84816:	6062      	str	r2, [r4, #4]
   84818:	4628      	mov	r0, r5
   8481a:	60be      	str	r6, [r7, #8]
   8481c:	3408      	adds	r4, #8
   8481e:	6073      	str	r3, [r6, #4]
   84820:	f000 f9e4 	bl	84bec <__malloc_unlock>
   84824:	4620      	mov	r0, r4
   84826:	b003      	add	sp, #12
   84828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8482c:	2b14      	cmp	r3, #20
   8482e:	d970      	bls.n	84912 <_malloc_r+0x3f6>
   84830:	2b54      	cmp	r3, #84	; 0x54
   84832:	f200 80a2 	bhi.w	8497a <_malloc_r+0x45e>
   84836:	0b33      	lsrs	r3, r6, #12
   84838:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8483c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84840:	00c1      	lsls	r1, r0, #3
   84842:	e68d      	b.n	84560 <_malloc_r+0x44>
   84844:	200706d0 	.word	0x200706d0
   84848:	2007c4f0 	.word	0x2007c4f0
   8484c:	2007c4c0 	.word	0x2007c4c0
   84850:	2007c4e8 	.word	0x2007c4e8
   84854:	2007c4ec 	.word	0x2007c4ec
   84858:	200706d8 	.word	0x200706d8
   8485c:	20070ad8 	.word	0x20070ad8
   84860:	0a5a      	lsrs	r2, r3, #9
   84862:	2a04      	cmp	r2, #4
   84864:	d95b      	bls.n	8491e <_malloc_r+0x402>
   84866:	2a14      	cmp	r2, #20
   84868:	f200 80ae 	bhi.w	849c8 <_malloc_r+0x4ac>
   8486c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84870:	00c9      	lsls	r1, r1, #3
   84872:	325b      	adds	r2, #91	; 0x5b
   84874:	eb07 0c01 	add.w	ip, r7, r1
   84878:	5879      	ldr	r1, [r7, r1]
   8487a:	f1ac 0c08 	sub.w	ip, ip, #8
   8487e:	458c      	cmp	ip, r1
   84880:	f000 8088 	beq.w	84994 <_malloc_r+0x478>
   84884:	684a      	ldr	r2, [r1, #4]
   84886:	f022 0203 	bic.w	r2, r2, #3
   8488a:	4293      	cmp	r3, r2
   8488c:	d273      	bcs.n	84976 <_malloc_r+0x45a>
   8488e:	6889      	ldr	r1, [r1, #8]
   84890:	458c      	cmp	ip, r1
   84892:	d1f7      	bne.n	84884 <_malloc_r+0x368>
   84894:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84898:	687a      	ldr	r2, [r7, #4]
   8489a:	60e3      	str	r3, [r4, #12]
   8489c:	f8c4 c008 	str.w	ip, [r4, #8]
   848a0:	609c      	str	r4, [r3, #8]
   848a2:	f8cc 400c 	str.w	r4, [ip, #12]
   848a6:	e69e      	b.n	845e6 <_malloc_r+0xca>
   848a8:	f046 0c01 	orr.w	ip, r6, #1
   848ac:	f042 0101 	orr.w	r1, r2, #1
   848b0:	4426      	add	r6, r4
   848b2:	f8c4 c004 	str.w	ip, [r4, #4]
   848b6:	4628      	mov	r0, r5
   848b8:	617e      	str	r6, [r7, #20]
   848ba:	613e      	str	r6, [r7, #16]
   848bc:	f8c6 e00c 	str.w	lr, [r6, #12]
   848c0:	f8c6 e008 	str.w	lr, [r6, #8]
   848c4:	6071      	str	r1, [r6, #4]
   848c6:	50e2      	str	r2, [r4, r3]
   848c8:	f000 f990 	bl	84bec <__malloc_unlock>
   848cc:	3408      	adds	r4, #8
   848ce:	e6eb      	b.n	846a8 <_malloc_r+0x18c>
   848d0:	687a      	ldr	r2, [r7, #4]
   848d2:	e688      	b.n	845e6 <_malloc_r+0xca>
   848d4:	f108 0801 	add.w	r8, r8, #1
   848d8:	f018 0f03 	tst.w	r8, #3
   848dc:	f10c 0c08 	add.w	ip, ip, #8
   848e0:	f47f ae93 	bne.w	8460a <_malloc_r+0xee>
   848e4:	e02d      	b.n	84942 <_malloc_r+0x426>
   848e6:	68dc      	ldr	r4, [r3, #12]
   848e8:	42a3      	cmp	r3, r4
   848ea:	bf08      	it	eq
   848ec:	3002      	addeq	r0, #2
   848ee:	f43f ae4b 	beq.w	84588 <_malloc_r+0x6c>
   848f2:	e6c9      	b.n	84688 <_malloc_r+0x16c>
   848f4:	461c      	mov	r4, r3
   848f6:	4419      	add	r1, r3
   848f8:	684a      	ldr	r2, [r1, #4]
   848fa:	68db      	ldr	r3, [r3, #12]
   848fc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84900:	f042 0201 	orr.w	r2, r2, #1
   84904:	604a      	str	r2, [r1, #4]
   84906:	4628      	mov	r0, r5
   84908:	60f3      	str	r3, [r6, #12]
   8490a:	609e      	str	r6, [r3, #8]
   8490c:	f000 f96e 	bl	84bec <__malloc_unlock>
   84910:	e6ca      	b.n	846a8 <_malloc_r+0x18c>
   84912:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84916:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8491a:	00c1      	lsls	r1, r0, #3
   8491c:	e620      	b.n	84560 <_malloc_r+0x44>
   8491e:	099a      	lsrs	r2, r3, #6
   84920:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84924:	00c9      	lsls	r1, r1, #3
   84926:	3238      	adds	r2, #56	; 0x38
   84928:	e7a4      	b.n	84874 <_malloc_r+0x358>
   8492a:	42bc      	cmp	r4, r7
   8492c:	d054      	beq.n	849d8 <_malloc_r+0x4bc>
   8492e:	68bc      	ldr	r4, [r7, #8]
   84930:	6862      	ldr	r2, [r4, #4]
   84932:	f022 0203 	bic.w	r2, r2, #3
   84936:	e75e      	b.n	847f6 <_malloc_r+0x2da>
   84938:	f859 3908 	ldr.w	r3, [r9], #-8
   8493c:	4599      	cmp	r9, r3
   8493e:	f040 8086 	bne.w	84a4e <_malloc_r+0x532>
   84942:	f010 0f03 	tst.w	r0, #3
   84946:	f100 30ff 	add.w	r0, r0, #4294967295
   8494a:	d1f5      	bne.n	84938 <_malloc_r+0x41c>
   8494c:	687b      	ldr	r3, [r7, #4]
   8494e:	ea23 0304 	bic.w	r3, r3, r4
   84952:	607b      	str	r3, [r7, #4]
   84954:	0064      	lsls	r4, r4, #1
   84956:	429c      	cmp	r4, r3
   84958:	f63f aec8 	bhi.w	846ec <_malloc_r+0x1d0>
   8495c:	2c00      	cmp	r4, #0
   8495e:	f43f aec5 	beq.w	846ec <_malloc_r+0x1d0>
   84962:	421c      	tst	r4, r3
   84964:	4640      	mov	r0, r8
   84966:	f47f ae4c 	bne.w	84602 <_malloc_r+0xe6>
   8496a:	0064      	lsls	r4, r4, #1
   8496c:	421c      	tst	r4, r3
   8496e:	f100 0004 	add.w	r0, r0, #4
   84972:	d0fa      	beq.n	8496a <_malloc_r+0x44e>
   84974:	e645      	b.n	84602 <_malloc_r+0xe6>
   84976:	468c      	mov	ip, r1
   84978:	e78c      	b.n	84894 <_malloc_r+0x378>
   8497a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8497e:	d815      	bhi.n	849ac <_malloc_r+0x490>
   84980:	0bf3      	lsrs	r3, r6, #15
   84982:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84986:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8498a:	00c1      	lsls	r1, r0, #3
   8498c:	e5e8      	b.n	84560 <_malloc_r+0x44>
   8498e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84992:	e6ee      	b.n	84772 <_malloc_r+0x256>
   84994:	2101      	movs	r1, #1
   84996:	687b      	ldr	r3, [r7, #4]
   84998:	1092      	asrs	r2, r2, #2
   8499a:	fa01 f202 	lsl.w	r2, r1, r2
   8499e:	431a      	orrs	r2, r3
   849a0:	607a      	str	r2, [r7, #4]
   849a2:	4663      	mov	r3, ip
   849a4:	e779      	b.n	8489a <_malloc_r+0x37e>
   849a6:	2301      	movs	r3, #1
   849a8:	6053      	str	r3, [r2, #4]
   849aa:	e72a      	b.n	84802 <_malloc_r+0x2e6>
   849ac:	f240 5254 	movw	r2, #1364	; 0x554
   849b0:	4293      	cmp	r3, r2
   849b2:	d822      	bhi.n	849fa <_malloc_r+0x4de>
   849b4:	0cb3      	lsrs	r3, r6, #18
   849b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   849ba:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   849be:	00c1      	lsls	r1, r0, #3
   849c0:	e5ce      	b.n	84560 <_malloc_r+0x44>
   849c2:	f103 0b10 	add.w	fp, r3, #16
   849c6:	e6af      	b.n	84728 <_malloc_r+0x20c>
   849c8:	2a54      	cmp	r2, #84	; 0x54
   849ca:	d829      	bhi.n	84a20 <_malloc_r+0x504>
   849cc:	0b1a      	lsrs	r2, r3, #12
   849ce:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   849d2:	00c9      	lsls	r1, r1, #3
   849d4:	326e      	adds	r2, #110	; 0x6e
   849d6:	e74d      	b.n	84874 <_malloc_r+0x358>
   849d8:	4b20      	ldr	r3, [pc, #128]	; (84a5c <_malloc_r+0x540>)
   849da:	6819      	ldr	r1, [r3, #0]
   849dc:	4459      	add	r1, fp
   849de:	6019      	str	r1, [r3, #0]
   849e0:	e6b3      	b.n	8474a <_malloc_r+0x22e>
   849e2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   849e6:	2800      	cmp	r0, #0
   849e8:	f47f aeaf 	bne.w	8474a <_malloc_r+0x22e>
   849ec:	eb08 030b 	add.w	r3, r8, fp
   849f0:	68ba      	ldr	r2, [r7, #8]
   849f2:	f043 0301 	orr.w	r3, r3, #1
   849f6:	6053      	str	r3, [r2, #4]
   849f8:	e6ef      	b.n	847da <_malloc_r+0x2be>
   849fa:	207f      	movs	r0, #127	; 0x7f
   849fc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84a00:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84a04:	e5ac      	b.n	84560 <_malloc_r+0x44>
   84a06:	f104 0108 	add.w	r1, r4, #8
   84a0a:	4628      	mov	r0, r5
   84a0c:	9300      	str	r3, [sp, #0]
   84a0e:	f7ff fa67 	bl	83ee0 <_free_r>
   84a12:	9b00      	ldr	r3, [sp, #0]
   84a14:	6819      	ldr	r1, [r3, #0]
   84a16:	e6e0      	b.n	847da <_malloc_r+0x2be>
   84a18:	2001      	movs	r0, #1
   84a1a:	f04f 0900 	mov.w	r9, #0
   84a1e:	e6bd      	b.n	8479c <_malloc_r+0x280>
   84a20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84a24:	d805      	bhi.n	84a32 <_malloc_r+0x516>
   84a26:	0bda      	lsrs	r2, r3, #15
   84a28:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84a2c:	00c9      	lsls	r1, r1, #3
   84a2e:	3277      	adds	r2, #119	; 0x77
   84a30:	e720      	b.n	84874 <_malloc_r+0x358>
   84a32:	f240 5154 	movw	r1, #1364	; 0x554
   84a36:	428a      	cmp	r2, r1
   84a38:	d805      	bhi.n	84a46 <_malloc_r+0x52a>
   84a3a:	0c9a      	lsrs	r2, r3, #18
   84a3c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84a40:	00c9      	lsls	r1, r1, #3
   84a42:	327c      	adds	r2, #124	; 0x7c
   84a44:	e716      	b.n	84874 <_malloc_r+0x358>
   84a46:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84a4a:	227e      	movs	r2, #126	; 0x7e
   84a4c:	e712      	b.n	84874 <_malloc_r+0x358>
   84a4e:	687b      	ldr	r3, [r7, #4]
   84a50:	e780      	b.n	84954 <_malloc_r+0x438>
   84a52:	08f0      	lsrs	r0, r6, #3
   84a54:	f106 0308 	add.w	r3, r6, #8
   84a58:	e60e      	b.n	84678 <_malloc_r+0x15c>
   84a5a:	bf00      	nop
   84a5c:	2007c4c0 	.word	0x2007c4c0

00084a60 <__ascii_mbtowc>:
   84a60:	b082      	sub	sp, #8
   84a62:	b149      	cbz	r1, 84a78 <__ascii_mbtowc+0x18>
   84a64:	b15a      	cbz	r2, 84a7e <__ascii_mbtowc+0x1e>
   84a66:	b16b      	cbz	r3, 84a84 <__ascii_mbtowc+0x24>
   84a68:	7813      	ldrb	r3, [r2, #0]
   84a6a:	600b      	str	r3, [r1, #0]
   84a6c:	7812      	ldrb	r2, [r2, #0]
   84a6e:	1c10      	adds	r0, r2, #0
   84a70:	bf18      	it	ne
   84a72:	2001      	movne	r0, #1
   84a74:	b002      	add	sp, #8
   84a76:	4770      	bx	lr
   84a78:	a901      	add	r1, sp, #4
   84a7a:	2a00      	cmp	r2, #0
   84a7c:	d1f3      	bne.n	84a66 <__ascii_mbtowc+0x6>
   84a7e:	4610      	mov	r0, r2
   84a80:	b002      	add	sp, #8
   84a82:	4770      	bx	lr
   84a84:	f06f 0001 	mvn.w	r0, #1
   84a88:	e7f4      	b.n	84a74 <__ascii_mbtowc+0x14>
   84a8a:	bf00      	nop

00084a8c <memchr>:
   84a8c:	0783      	lsls	r3, r0, #30
   84a8e:	b470      	push	{r4, r5, r6}
   84a90:	b2cd      	uxtb	r5, r1
   84a92:	d03d      	beq.n	84b10 <memchr+0x84>
   84a94:	1e54      	subs	r4, r2, #1
   84a96:	b30a      	cbz	r2, 84adc <memchr+0x50>
   84a98:	7803      	ldrb	r3, [r0, #0]
   84a9a:	42ab      	cmp	r3, r5
   84a9c:	d01f      	beq.n	84ade <memchr+0x52>
   84a9e:	1c43      	adds	r3, r0, #1
   84aa0:	e005      	b.n	84aae <memchr+0x22>
   84aa2:	f114 34ff 	adds.w	r4, r4, #4294967295
   84aa6:	d319      	bcc.n	84adc <memchr+0x50>
   84aa8:	7802      	ldrb	r2, [r0, #0]
   84aaa:	42aa      	cmp	r2, r5
   84aac:	d017      	beq.n	84ade <memchr+0x52>
   84aae:	f013 0f03 	tst.w	r3, #3
   84ab2:	4618      	mov	r0, r3
   84ab4:	f103 0301 	add.w	r3, r3, #1
   84ab8:	d1f3      	bne.n	84aa2 <memchr+0x16>
   84aba:	2c03      	cmp	r4, #3
   84abc:	d811      	bhi.n	84ae2 <memchr+0x56>
   84abe:	b34c      	cbz	r4, 84b14 <memchr+0x88>
   84ac0:	7803      	ldrb	r3, [r0, #0]
   84ac2:	42ab      	cmp	r3, r5
   84ac4:	d00b      	beq.n	84ade <memchr+0x52>
   84ac6:	4404      	add	r4, r0
   84ac8:	1c43      	adds	r3, r0, #1
   84aca:	e002      	b.n	84ad2 <memchr+0x46>
   84acc:	7802      	ldrb	r2, [r0, #0]
   84ace:	42aa      	cmp	r2, r5
   84ad0:	d005      	beq.n	84ade <memchr+0x52>
   84ad2:	429c      	cmp	r4, r3
   84ad4:	4618      	mov	r0, r3
   84ad6:	f103 0301 	add.w	r3, r3, #1
   84ada:	d1f7      	bne.n	84acc <memchr+0x40>
   84adc:	2000      	movs	r0, #0
   84ade:	bc70      	pop	{r4, r5, r6}
   84ae0:	4770      	bx	lr
   84ae2:	0209      	lsls	r1, r1, #8
   84ae4:	b289      	uxth	r1, r1
   84ae6:	4329      	orrs	r1, r5
   84ae8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84aec:	6803      	ldr	r3, [r0, #0]
   84aee:	4606      	mov	r6, r0
   84af0:	404b      	eors	r3, r1
   84af2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84af6:	ea22 0303 	bic.w	r3, r2, r3
   84afa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84afe:	f100 0004 	add.w	r0, r0, #4
   84b02:	d103      	bne.n	84b0c <memchr+0x80>
   84b04:	3c04      	subs	r4, #4
   84b06:	2c03      	cmp	r4, #3
   84b08:	d8f0      	bhi.n	84aec <memchr+0x60>
   84b0a:	e7d8      	b.n	84abe <memchr+0x32>
   84b0c:	4630      	mov	r0, r6
   84b0e:	e7d7      	b.n	84ac0 <memchr+0x34>
   84b10:	4614      	mov	r4, r2
   84b12:	e7d2      	b.n	84aba <memchr+0x2e>
   84b14:	4620      	mov	r0, r4
   84b16:	e7e2      	b.n	84ade <memchr+0x52>

00084b18 <memmove>:
   84b18:	4288      	cmp	r0, r1
   84b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   84b1c:	d90d      	bls.n	84b3a <memmove+0x22>
   84b1e:	188b      	adds	r3, r1, r2
   84b20:	4298      	cmp	r0, r3
   84b22:	d20a      	bcs.n	84b3a <memmove+0x22>
   84b24:	1884      	adds	r4, r0, r2
   84b26:	2a00      	cmp	r2, #0
   84b28:	d051      	beq.n	84bce <memmove+0xb6>
   84b2a:	4622      	mov	r2, r4
   84b2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84b30:	4299      	cmp	r1, r3
   84b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84b36:	d1f9      	bne.n	84b2c <memmove+0x14>
   84b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b3a:	2a0f      	cmp	r2, #15
   84b3c:	d948      	bls.n	84bd0 <memmove+0xb8>
   84b3e:	ea41 0300 	orr.w	r3, r1, r0
   84b42:	079b      	lsls	r3, r3, #30
   84b44:	d146      	bne.n	84bd4 <memmove+0xbc>
   84b46:	4615      	mov	r5, r2
   84b48:	f100 0410 	add.w	r4, r0, #16
   84b4c:	f101 0310 	add.w	r3, r1, #16
   84b50:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84b54:	3d10      	subs	r5, #16
   84b56:	f844 6c10 	str.w	r6, [r4, #-16]
   84b5a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84b5e:	2d0f      	cmp	r5, #15
   84b60:	f844 6c0c 	str.w	r6, [r4, #-12]
   84b64:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84b68:	f104 0410 	add.w	r4, r4, #16
   84b6c:	f844 6c18 	str.w	r6, [r4, #-24]
   84b70:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84b74:	f103 0310 	add.w	r3, r3, #16
   84b78:	f844 6c14 	str.w	r6, [r4, #-20]
   84b7c:	d8e8      	bhi.n	84b50 <memmove+0x38>
   84b7e:	f1a2 0310 	sub.w	r3, r2, #16
   84b82:	f023 030f 	bic.w	r3, r3, #15
   84b86:	f002 0e0f 	and.w	lr, r2, #15
   84b8a:	3310      	adds	r3, #16
   84b8c:	f1be 0f03 	cmp.w	lr, #3
   84b90:	4419      	add	r1, r3
   84b92:	4403      	add	r3, r0
   84b94:	d921      	bls.n	84bda <memmove+0xc2>
   84b96:	460e      	mov	r6, r1
   84b98:	4674      	mov	r4, lr
   84b9a:	1f1d      	subs	r5, r3, #4
   84b9c:	f856 7b04 	ldr.w	r7, [r6], #4
   84ba0:	3c04      	subs	r4, #4
   84ba2:	2c03      	cmp	r4, #3
   84ba4:	f845 7f04 	str.w	r7, [r5, #4]!
   84ba8:	d8f8      	bhi.n	84b9c <memmove+0x84>
   84baa:	f1ae 0404 	sub.w	r4, lr, #4
   84bae:	f024 0403 	bic.w	r4, r4, #3
   84bb2:	3404      	adds	r4, #4
   84bb4:	4421      	add	r1, r4
   84bb6:	4423      	add	r3, r4
   84bb8:	f002 0203 	and.w	r2, r2, #3
   84bbc:	b162      	cbz	r2, 84bd8 <memmove+0xc0>
   84bbe:	3b01      	subs	r3, #1
   84bc0:	440a      	add	r2, r1
   84bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   84bc6:	428a      	cmp	r2, r1
   84bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
   84bcc:	d1f9      	bne.n	84bc2 <memmove+0xaa>
   84bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84bd0:	4603      	mov	r3, r0
   84bd2:	e7f3      	b.n	84bbc <memmove+0xa4>
   84bd4:	4603      	mov	r3, r0
   84bd6:	e7f2      	b.n	84bbe <memmove+0xa6>
   84bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84bda:	4672      	mov	r2, lr
   84bdc:	e7ee      	b.n	84bbc <memmove+0xa4>
   84bde:	bf00      	nop

00084be0 <__malloc_lock>:
   84be0:	4801      	ldr	r0, [pc, #4]	; (84be8 <__malloc_lock+0x8>)
   84be2:	f7ff bc17 	b.w	84414 <__retarget_lock_acquire_recursive>
   84be6:	bf00      	nop
   84be8:	2007c554 	.word	0x2007c554

00084bec <__malloc_unlock>:
   84bec:	4801      	ldr	r0, [pc, #4]	; (84bf4 <__malloc_unlock+0x8>)
   84bee:	f7ff bc13 	b.w	84418 <__retarget_lock_release_recursive>
   84bf2:	bf00      	nop
   84bf4:	2007c554 	.word	0x2007c554

00084bf8 <_realloc_r>:
   84bf8:	2900      	cmp	r1, #0
   84bfa:	f000 8094 	beq.w	84d26 <_realloc_r+0x12e>
   84bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c02:	460c      	mov	r4, r1
   84c04:	4615      	mov	r5, r2
   84c06:	b083      	sub	sp, #12
   84c08:	4680      	mov	r8, r0
   84c0a:	f105 060b 	add.w	r6, r5, #11
   84c0e:	f7ff ffe7 	bl	84be0 <__malloc_lock>
   84c12:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84c16:	2e16      	cmp	r6, #22
   84c18:	f02e 0703 	bic.w	r7, lr, #3
   84c1c:	f1a4 0908 	sub.w	r9, r4, #8
   84c20:	d83c      	bhi.n	84c9c <_realloc_r+0xa4>
   84c22:	2210      	movs	r2, #16
   84c24:	4616      	mov	r6, r2
   84c26:	42b5      	cmp	r5, r6
   84c28:	d83d      	bhi.n	84ca6 <_realloc_r+0xae>
   84c2a:	4297      	cmp	r7, r2
   84c2c:	da43      	bge.n	84cb6 <_realloc_r+0xbe>
   84c2e:	4bc6      	ldr	r3, [pc, #792]	; (84f48 <_realloc_r+0x350>)
   84c30:	eb09 0007 	add.w	r0, r9, r7
   84c34:	6899      	ldr	r1, [r3, #8]
   84c36:	4288      	cmp	r0, r1
   84c38:	f000 80c3 	beq.w	84dc2 <_realloc_r+0x1ca>
   84c3c:	6843      	ldr	r3, [r0, #4]
   84c3e:	f023 0101 	bic.w	r1, r3, #1
   84c42:	4401      	add	r1, r0
   84c44:	6849      	ldr	r1, [r1, #4]
   84c46:	07c9      	lsls	r1, r1, #31
   84c48:	d54d      	bpl.n	84ce6 <_realloc_r+0xee>
   84c4a:	f01e 0f01 	tst.w	lr, #1
   84c4e:	f000 809b 	beq.w	84d88 <_realloc_r+0x190>
   84c52:	4629      	mov	r1, r5
   84c54:	4640      	mov	r0, r8
   84c56:	f7ff fc61 	bl	8451c <_malloc_r>
   84c5a:	4605      	mov	r5, r0
   84c5c:	2800      	cmp	r0, #0
   84c5e:	d03b      	beq.n	84cd8 <_realloc_r+0xe0>
   84c60:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84c64:	f1a0 0208 	sub.w	r2, r0, #8
   84c68:	f023 0301 	bic.w	r3, r3, #1
   84c6c:	444b      	add	r3, r9
   84c6e:	429a      	cmp	r2, r3
   84c70:	f000 812b 	beq.w	84eca <_realloc_r+0x2d2>
   84c74:	1f3a      	subs	r2, r7, #4
   84c76:	2a24      	cmp	r2, #36	; 0x24
   84c78:	f200 8118 	bhi.w	84eac <_realloc_r+0x2b4>
   84c7c:	2a13      	cmp	r2, #19
   84c7e:	f200 80eb 	bhi.w	84e58 <_realloc_r+0x260>
   84c82:	4603      	mov	r3, r0
   84c84:	4622      	mov	r2, r4
   84c86:	6811      	ldr	r1, [r2, #0]
   84c88:	6019      	str	r1, [r3, #0]
   84c8a:	6851      	ldr	r1, [r2, #4]
   84c8c:	6059      	str	r1, [r3, #4]
   84c8e:	6892      	ldr	r2, [r2, #8]
   84c90:	609a      	str	r2, [r3, #8]
   84c92:	4621      	mov	r1, r4
   84c94:	4640      	mov	r0, r8
   84c96:	f7ff f923 	bl	83ee0 <_free_r>
   84c9a:	e01d      	b.n	84cd8 <_realloc_r+0xe0>
   84c9c:	f026 0607 	bic.w	r6, r6, #7
   84ca0:	2e00      	cmp	r6, #0
   84ca2:	4632      	mov	r2, r6
   84ca4:	dabf      	bge.n	84c26 <_realloc_r+0x2e>
   84ca6:	2500      	movs	r5, #0
   84ca8:	230c      	movs	r3, #12
   84caa:	4628      	mov	r0, r5
   84cac:	f8c8 3000 	str.w	r3, [r8]
   84cb0:	b003      	add	sp, #12
   84cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84cb6:	4625      	mov	r5, r4
   84cb8:	1bbb      	subs	r3, r7, r6
   84cba:	2b0f      	cmp	r3, #15
   84cbc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84cc0:	d81d      	bhi.n	84cfe <_realloc_r+0x106>
   84cc2:	f002 0201 	and.w	r2, r2, #1
   84cc6:	433a      	orrs	r2, r7
   84cc8:	eb09 0107 	add.w	r1, r9, r7
   84ccc:	f8c9 2004 	str.w	r2, [r9, #4]
   84cd0:	684b      	ldr	r3, [r1, #4]
   84cd2:	f043 0301 	orr.w	r3, r3, #1
   84cd6:	604b      	str	r3, [r1, #4]
   84cd8:	4640      	mov	r0, r8
   84cda:	f7ff ff87 	bl	84bec <__malloc_unlock>
   84cde:	4628      	mov	r0, r5
   84ce0:	b003      	add	sp, #12
   84ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ce6:	f023 0303 	bic.w	r3, r3, #3
   84cea:	18f9      	adds	r1, r7, r3
   84cec:	4291      	cmp	r1, r2
   84cee:	db1d      	blt.n	84d2c <_realloc_r+0x134>
   84cf0:	68c3      	ldr	r3, [r0, #12]
   84cf2:	6882      	ldr	r2, [r0, #8]
   84cf4:	4625      	mov	r5, r4
   84cf6:	60d3      	str	r3, [r2, #12]
   84cf8:	460f      	mov	r7, r1
   84cfa:	609a      	str	r2, [r3, #8]
   84cfc:	e7dc      	b.n	84cb8 <_realloc_r+0xc0>
   84cfe:	f002 0201 	and.w	r2, r2, #1
   84d02:	eb09 0106 	add.w	r1, r9, r6
   84d06:	f043 0301 	orr.w	r3, r3, #1
   84d0a:	4332      	orrs	r2, r6
   84d0c:	f8c9 2004 	str.w	r2, [r9, #4]
   84d10:	444f      	add	r7, r9
   84d12:	604b      	str	r3, [r1, #4]
   84d14:	687b      	ldr	r3, [r7, #4]
   84d16:	3108      	adds	r1, #8
   84d18:	f043 0301 	orr.w	r3, r3, #1
   84d1c:	607b      	str	r3, [r7, #4]
   84d1e:	4640      	mov	r0, r8
   84d20:	f7ff f8de 	bl	83ee0 <_free_r>
   84d24:	e7d8      	b.n	84cd8 <_realloc_r+0xe0>
   84d26:	4611      	mov	r1, r2
   84d28:	f7ff bbf8 	b.w	8451c <_malloc_r>
   84d2c:	f01e 0f01 	tst.w	lr, #1
   84d30:	d18f      	bne.n	84c52 <_realloc_r+0x5a>
   84d32:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84d36:	eba9 0a01 	sub.w	sl, r9, r1
   84d3a:	f8da 1004 	ldr.w	r1, [sl, #4]
   84d3e:	f021 0103 	bic.w	r1, r1, #3
   84d42:	440b      	add	r3, r1
   84d44:	443b      	add	r3, r7
   84d46:	4293      	cmp	r3, r2
   84d48:	db26      	blt.n	84d98 <_realloc_r+0x1a0>
   84d4a:	4655      	mov	r5, sl
   84d4c:	68c1      	ldr	r1, [r0, #12]
   84d4e:	6880      	ldr	r0, [r0, #8]
   84d50:	1f3a      	subs	r2, r7, #4
   84d52:	60c1      	str	r1, [r0, #12]
   84d54:	6088      	str	r0, [r1, #8]
   84d56:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84d5a:	f8da 100c 	ldr.w	r1, [sl, #12]
   84d5e:	2a24      	cmp	r2, #36	; 0x24
   84d60:	60c1      	str	r1, [r0, #12]
   84d62:	6088      	str	r0, [r1, #8]
   84d64:	d826      	bhi.n	84db4 <_realloc_r+0x1bc>
   84d66:	2a13      	cmp	r2, #19
   84d68:	f240 8081 	bls.w	84e6e <_realloc_r+0x276>
   84d6c:	6821      	ldr	r1, [r4, #0]
   84d6e:	2a1b      	cmp	r2, #27
   84d70:	f8ca 1008 	str.w	r1, [sl, #8]
   84d74:	6861      	ldr	r1, [r4, #4]
   84d76:	f8ca 100c 	str.w	r1, [sl, #12]
   84d7a:	f200 80ad 	bhi.w	84ed8 <_realloc_r+0x2e0>
   84d7e:	f104 0008 	add.w	r0, r4, #8
   84d82:	f10a 0210 	add.w	r2, sl, #16
   84d86:	e074      	b.n	84e72 <_realloc_r+0x27a>
   84d88:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84d8c:	eba9 0a03 	sub.w	sl, r9, r3
   84d90:	f8da 1004 	ldr.w	r1, [sl, #4]
   84d94:	f021 0103 	bic.w	r1, r1, #3
   84d98:	187b      	adds	r3, r7, r1
   84d9a:	4293      	cmp	r3, r2
   84d9c:	f6ff af59 	blt.w	84c52 <_realloc_r+0x5a>
   84da0:	4655      	mov	r5, sl
   84da2:	f8da 100c 	ldr.w	r1, [sl, #12]
   84da6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84daa:	1f3a      	subs	r2, r7, #4
   84dac:	2a24      	cmp	r2, #36	; 0x24
   84dae:	60c1      	str	r1, [r0, #12]
   84db0:	6088      	str	r0, [r1, #8]
   84db2:	d9d8      	bls.n	84d66 <_realloc_r+0x16e>
   84db4:	4621      	mov	r1, r4
   84db6:	4628      	mov	r0, r5
   84db8:	461f      	mov	r7, r3
   84dba:	46d1      	mov	r9, sl
   84dbc:	f7ff feac 	bl	84b18 <memmove>
   84dc0:	e77a      	b.n	84cb8 <_realloc_r+0xc0>
   84dc2:	6841      	ldr	r1, [r0, #4]
   84dc4:	f106 0010 	add.w	r0, r6, #16
   84dc8:	f021 0b03 	bic.w	fp, r1, #3
   84dcc:	44bb      	add	fp, r7
   84dce:	4583      	cmp	fp, r0
   84dd0:	da58      	bge.n	84e84 <_realloc_r+0x28c>
   84dd2:	f01e 0f01 	tst.w	lr, #1
   84dd6:	f47f af3c 	bne.w	84c52 <_realloc_r+0x5a>
   84dda:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84dde:	eba9 0a01 	sub.w	sl, r9, r1
   84de2:	f8da 1004 	ldr.w	r1, [sl, #4]
   84de6:	f021 0103 	bic.w	r1, r1, #3
   84dea:	448b      	add	fp, r1
   84dec:	4558      	cmp	r0, fp
   84dee:	dcd3      	bgt.n	84d98 <_realloc_r+0x1a0>
   84df0:	4655      	mov	r5, sl
   84df2:	f8da 100c 	ldr.w	r1, [sl, #12]
   84df6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84dfa:	1f3a      	subs	r2, r7, #4
   84dfc:	2a24      	cmp	r2, #36	; 0x24
   84dfe:	60c1      	str	r1, [r0, #12]
   84e00:	6088      	str	r0, [r1, #8]
   84e02:	f200 808d 	bhi.w	84f20 <_realloc_r+0x328>
   84e06:	2a13      	cmp	r2, #19
   84e08:	f240 8087 	bls.w	84f1a <_realloc_r+0x322>
   84e0c:	6821      	ldr	r1, [r4, #0]
   84e0e:	2a1b      	cmp	r2, #27
   84e10:	f8ca 1008 	str.w	r1, [sl, #8]
   84e14:	6861      	ldr	r1, [r4, #4]
   84e16:	f8ca 100c 	str.w	r1, [sl, #12]
   84e1a:	f200 8088 	bhi.w	84f2e <_realloc_r+0x336>
   84e1e:	f104 0108 	add.w	r1, r4, #8
   84e22:	f10a 0210 	add.w	r2, sl, #16
   84e26:	6808      	ldr	r0, [r1, #0]
   84e28:	6010      	str	r0, [r2, #0]
   84e2a:	6848      	ldr	r0, [r1, #4]
   84e2c:	6050      	str	r0, [r2, #4]
   84e2e:	6889      	ldr	r1, [r1, #8]
   84e30:	6091      	str	r1, [r2, #8]
   84e32:	ebab 0206 	sub.w	r2, fp, r6
   84e36:	eb0a 0106 	add.w	r1, sl, r6
   84e3a:	f042 0201 	orr.w	r2, r2, #1
   84e3e:	6099      	str	r1, [r3, #8]
   84e40:	604a      	str	r2, [r1, #4]
   84e42:	f8da 3004 	ldr.w	r3, [sl, #4]
   84e46:	4640      	mov	r0, r8
   84e48:	f003 0301 	and.w	r3, r3, #1
   84e4c:	431e      	orrs	r6, r3
   84e4e:	f8ca 6004 	str.w	r6, [sl, #4]
   84e52:	f7ff fecb 	bl	84bec <__malloc_unlock>
   84e56:	e742      	b.n	84cde <_realloc_r+0xe6>
   84e58:	6823      	ldr	r3, [r4, #0]
   84e5a:	2a1b      	cmp	r2, #27
   84e5c:	6003      	str	r3, [r0, #0]
   84e5e:	6863      	ldr	r3, [r4, #4]
   84e60:	6043      	str	r3, [r0, #4]
   84e62:	d827      	bhi.n	84eb4 <_realloc_r+0x2bc>
   84e64:	f100 0308 	add.w	r3, r0, #8
   84e68:	f104 0208 	add.w	r2, r4, #8
   84e6c:	e70b      	b.n	84c86 <_realloc_r+0x8e>
   84e6e:	4620      	mov	r0, r4
   84e70:	462a      	mov	r2, r5
   84e72:	6801      	ldr	r1, [r0, #0]
   84e74:	461f      	mov	r7, r3
   84e76:	6011      	str	r1, [r2, #0]
   84e78:	6841      	ldr	r1, [r0, #4]
   84e7a:	46d1      	mov	r9, sl
   84e7c:	6051      	str	r1, [r2, #4]
   84e7e:	6883      	ldr	r3, [r0, #8]
   84e80:	6093      	str	r3, [r2, #8]
   84e82:	e719      	b.n	84cb8 <_realloc_r+0xc0>
   84e84:	ebab 0b06 	sub.w	fp, fp, r6
   84e88:	eb09 0106 	add.w	r1, r9, r6
   84e8c:	f04b 0201 	orr.w	r2, fp, #1
   84e90:	6099      	str	r1, [r3, #8]
   84e92:	604a      	str	r2, [r1, #4]
   84e94:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84e98:	4640      	mov	r0, r8
   84e9a:	f003 0301 	and.w	r3, r3, #1
   84e9e:	431e      	orrs	r6, r3
   84ea0:	f844 6c04 	str.w	r6, [r4, #-4]
   84ea4:	f7ff fea2 	bl	84bec <__malloc_unlock>
   84ea8:	4625      	mov	r5, r4
   84eaa:	e718      	b.n	84cde <_realloc_r+0xe6>
   84eac:	4621      	mov	r1, r4
   84eae:	f7ff fe33 	bl	84b18 <memmove>
   84eb2:	e6ee      	b.n	84c92 <_realloc_r+0x9a>
   84eb4:	68a3      	ldr	r3, [r4, #8]
   84eb6:	2a24      	cmp	r2, #36	; 0x24
   84eb8:	6083      	str	r3, [r0, #8]
   84eba:	68e3      	ldr	r3, [r4, #12]
   84ebc:	60c3      	str	r3, [r0, #12]
   84ebe:	d018      	beq.n	84ef2 <_realloc_r+0x2fa>
   84ec0:	f100 0310 	add.w	r3, r0, #16
   84ec4:	f104 0210 	add.w	r2, r4, #16
   84ec8:	e6dd      	b.n	84c86 <_realloc_r+0x8e>
   84eca:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84ece:	4625      	mov	r5, r4
   84ed0:	f023 0303 	bic.w	r3, r3, #3
   84ed4:	441f      	add	r7, r3
   84ed6:	e6ef      	b.n	84cb8 <_realloc_r+0xc0>
   84ed8:	68a1      	ldr	r1, [r4, #8]
   84eda:	2a24      	cmp	r2, #36	; 0x24
   84edc:	f8ca 1010 	str.w	r1, [sl, #16]
   84ee0:	68e1      	ldr	r1, [r4, #12]
   84ee2:	f8ca 1014 	str.w	r1, [sl, #20]
   84ee6:	d00d      	beq.n	84f04 <_realloc_r+0x30c>
   84ee8:	f104 0010 	add.w	r0, r4, #16
   84eec:	f10a 0218 	add.w	r2, sl, #24
   84ef0:	e7bf      	b.n	84e72 <_realloc_r+0x27a>
   84ef2:	6922      	ldr	r2, [r4, #16]
   84ef4:	f100 0318 	add.w	r3, r0, #24
   84ef8:	6102      	str	r2, [r0, #16]
   84efa:	6961      	ldr	r1, [r4, #20]
   84efc:	f104 0218 	add.w	r2, r4, #24
   84f00:	6141      	str	r1, [r0, #20]
   84f02:	e6c0      	b.n	84c86 <_realloc_r+0x8e>
   84f04:	6922      	ldr	r2, [r4, #16]
   84f06:	f104 0018 	add.w	r0, r4, #24
   84f0a:	f8ca 2018 	str.w	r2, [sl, #24]
   84f0e:	6961      	ldr	r1, [r4, #20]
   84f10:	f10a 0220 	add.w	r2, sl, #32
   84f14:	f8ca 101c 	str.w	r1, [sl, #28]
   84f18:	e7ab      	b.n	84e72 <_realloc_r+0x27a>
   84f1a:	4621      	mov	r1, r4
   84f1c:	462a      	mov	r2, r5
   84f1e:	e782      	b.n	84e26 <_realloc_r+0x22e>
   84f20:	4621      	mov	r1, r4
   84f22:	4628      	mov	r0, r5
   84f24:	9301      	str	r3, [sp, #4]
   84f26:	f7ff fdf7 	bl	84b18 <memmove>
   84f2a:	9b01      	ldr	r3, [sp, #4]
   84f2c:	e781      	b.n	84e32 <_realloc_r+0x23a>
   84f2e:	68a1      	ldr	r1, [r4, #8]
   84f30:	2a24      	cmp	r2, #36	; 0x24
   84f32:	f8ca 1010 	str.w	r1, [sl, #16]
   84f36:	68e1      	ldr	r1, [r4, #12]
   84f38:	f8ca 1014 	str.w	r1, [sl, #20]
   84f3c:	d006      	beq.n	84f4c <_realloc_r+0x354>
   84f3e:	f104 0110 	add.w	r1, r4, #16
   84f42:	f10a 0218 	add.w	r2, sl, #24
   84f46:	e76e      	b.n	84e26 <_realloc_r+0x22e>
   84f48:	200706d0 	.word	0x200706d0
   84f4c:	6922      	ldr	r2, [r4, #16]
   84f4e:	f104 0118 	add.w	r1, r4, #24
   84f52:	f8ca 2018 	str.w	r2, [sl, #24]
   84f56:	6960      	ldr	r0, [r4, #20]
   84f58:	f10a 0220 	add.w	r2, sl, #32
   84f5c:	f8ca 001c 	str.w	r0, [sl, #28]
   84f60:	e761      	b.n	84e26 <_realloc_r+0x22e>
   84f62:	bf00      	nop

00084f64 <_sbrk_r>:
   84f64:	b538      	push	{r3, r4, r5, lr}
   84f66:	2300      	movs	r3, #0
   84f68:	4c06      	ldr	r4, [pc, #24]	; (84f84 <_sbrk_r+0x20>)
   84f6a:	4605      	mov	r5, r0
   84f6c:	4608      	mov	r0, r1
   84f6e:	6023      	str	r3, [r4, #0]
   84f70:	f7fd fbca 	bl	82708 <_sbrk>
   84f74:	1c43      	adds	r3, r0, #1
   84f76:	d000      	beq.n	84f7a <_sbrk_r+0x16>
   84f78:	bd38      	pop	{r3, r4, r5, pc}
   84f7a:	6823      	ldr	r3, [r4, #0]
   84f7c:	2b00      	cmp	r3, #0
   84f7e:	d0fb      	beq.n	84f78 <_sbrk_r+0x14>
   84f80:	602b      	str	r3, [r5, #0]
   84f82:	bd38      	pop	{r3, r4, r5, pc}
   84f84:	2007c568 	.word	0x2007c568

00084f88 <__sread>:
   84f88:	b510      	push	{r4, lr}
   84f8a:	460c      	mov	r4, r1
   84f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f90:	f000 f9f4 	bl	8537c <_read_r>
   84f94:	2800      	cmp	r0, #0
   84f96:	db03      	blt.n	84fa0 <__sread+0x18>
   84f98:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84f9a:	4403      	add	r3, r0
   84f9c:	6523      	str	r3, [r4, #80]	; 0x50
   84f9e:	bd10      	pop	{r4, pc}
   84fa0:	89a3      	ldrh	r3, [r4, #12]
   84fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84fa6:	81a3      	strh	r3, [r4, #12]
   84fa8:	bd10      	pop	{r4, pc}
   84faa:	bf00      	nop

00084fac <__swrite>:
   84fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84fb0:	460c      	mov	r4, r1
   84fb2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84fb6:	461f      	mov	r7, r3
   84fb8:	05cb      	lsls	r3, r1, #23
   84fba:	4616      	mov	r6, r2
   84fbc:	4605      	mov	r5, r0
   84fbe:	d507      	bpl.n	84fd0 <__swrite+0x24>
   84fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84fc4:	2302      	movs	r3, #2
   84fc6:	2200      	movs	r2, #0
   84fc8:	f000 f9c2 	bl	85350 <_lseek_r>
   84fcc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84fd0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84fd4:	81a1      	strh	r1, [r4, #12]
   84fd6:	463b      	mov	r3, r7
   84fd8:	4632      	mov	r2, r6
   84fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84fde:	4628      	mov	r0, r5
   84fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84fe4:	f000 b8a2 	b.w	8512c <_write_r>

00084fe8 <__sseek>:
   84fe8:	b510      	push	{r4, lr}
   84fea:	460c      	mov	r4, r1
   84fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ff0:	f000 f9ae 	bl	85350 <_lseek_r>
   84ff4:	89a3      	ldrh	r3, [r4, #12]
   84ff6:	1c42      	adds	r2, r0, #1
   84ff8:	bf0e      	itee	eq
   84ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85002:	6520      	strne	r0, [r4, #80]	; 0x50
   85004:	81a3      	strh	r3, [r4, #12]
   85006:	bd10      	pop	{r4, pc}

00085008 <__sclose>:
   85008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8500c:	f000 b906 	b.w	8521c <_close_r>

00085010 <__swbuf_r>:
   85010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85012:	460d      	mov	r5, r1
   85014:	4614      	mov	r4, r2
   85016:	4606      	mov	r6, r0
   85018:	b110      	cbz	r0, 85020 <__swbuf_r+0x10>
   8501a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8501c:	2b00      	cmp	r3, #0
   8501e:	d04b      	beq.n	850b8 <__swbuf_r+0xa8>
   85020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85024:	69a3      	ldr	r3, [r4, #24]
   85026:	b291      	uxth	r1, r2
   85028:	0708      	lsls	r0, r1, #28
   8502a:	60a3      	str	r3, [r4, #8]
   8502c:	d539      	bpl.n	850a2 <__swbuf_r+0x92>
   8502e:	6923      	ldr	r3, [r4, #16]
   85030:	2b00      	cmp	r3, #0
   85032:	d036      	beq.n	850a2 <__swbuf_r+0x92>
   85034:	b2ed      	uxtb	r5, r5
   85036:	0489      	lsls	r1, r1, #18
   85038:	462f      	mov	r7, r5
   8503a:	d515      	bpl.n	85068 <__swbuf_r+0x58>
   8503c:	6822      	ldr	r2, [r4, #0]
   8503e:	6961      	ldr	r1, [r4, #20]
   85040:	1ad3      	subs	r3, r2, r3
   85042:	428b      	cmp	r3, r1
   85044:	da1c      	bge.n	85080 <__swbuf_r+0x70>
   85046:	3301      	adds	r3, #1
   85048:	68a1      	ldr	r1, [r4, #8]
   8504a:	1c50      	adds	r0, r2, #1
   8504c:	3901      	subs	r1, #1
   8504e:	60a1      	str	r1, [r4, #8]
   85050:	6020      	str	r0, [r4, #0]
   85052:	7015      	strb	r5, [r2, #0]
   85054:	6962      	ldr	r2, [r4, #20]
   85056:	429a      	cmp	r2, r3
   85058:	d01a      	beq.n	85090 <__swbuf_r+0x80>
   8505a:	89a3      	ldrh	r3, [r4, #12]
   8505c:	07db      	lsls	r3, r3, #31
   8505e:	d501      	bpl.n	85064 <__swbuf_r+0x54>
   85060:	2d0a      	cmp	r5, #10
   85062:	d015      	beq.n	85090 <__swbuf_r+0x80>
   85064:	4638      	mov	r0, r7
   85066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85068:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8506a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8506e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   85072:	81a2      	strh	r2, [r4, #12]
   85074:	6822      	ldr	r2, [r4, #0]
   85076:	6661      	str	r1, [r4, #100]	; 0x64
   85078:	6961      	ldr	r1, [r4, #20]
   8507a:	1ad3      	subs	r3, r2, r3
   8507c:	428b      	cmp	r3, r1
   8507e:	dbe2      	blt.n	85046 <__swbuf_r+0x36>
   85080:	4621      	mov	r1, r4
   85082:	4630      	mov	r0, r6
   85084:	f7fe fdae 	bl	83be4 <_fflush_r>
   85088:	b940      	cbnz	r0, 8509c <__swbuf_r+0x8c>
   8508a:	2301      	movs	r3, #1
   8508c:	6822      	ldr	r2, [r4, #0]
   8508e:	e7db      	b.n	85048 <__swbuf_r+0x38>
   85090:	4621      	mov	r1, r4
   85092:	4630      	mov	r0, r6
   85094:	f7fe fda6 	bl	83be4 <_fflush_r>
   85098:	2800      	cmp	r0, #0
   8509a:	d0e3      	beq.n	85064 <__swbuf_r+0x54>
   8509c:	f04f 37ff 	mov.w	r7, #4294967295
   850a0:	e7e0      	b.n	85064 <__swbuf_r+0x54>
   850a2:	4621      	mov	r1, r4
   850a4:	4630      	mov	r0, r6
   850a6:	f7fe fc8d 	bl	839c4 <__swsetup_r>
   850aa:	2800      	cmp	r0, #0
   850ac:	d1f6      	bne.n	8509c <__swbuf_r+0x8c>
   850ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   850b2:	6923      	ldr	r3, [r4, #16]
   850b4:	b291      	uxth	r1, r2
   850b6:	e7bd      	b.n	85034 <__swbuf_r+0x24>
   850b8:	f7fe fdec 	bl	83c94 <__sinit>
   850bc:	e7b0      	b.n	85020 <__swbuf_r+0x10>
   850be:	bf00      	nop

000850c0 <_wcrtomb_r>:
   850c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   850c2:	4606      	mov	r6, r0
   850c4:	b085      	sub	sp, #20
   850c6:	461f      	mov	r7, r3
   850c8:	b189      	cbz	r1, 850ee <_wcrtomb_r+0x2e>
   850ca:	4c10      	ldr	r4, [pc, #64]	; (8510c <_wcrtomb_r+0x4c>)
   850cc:	4d10      	ldr	r5, [pc, #64]	; (85110 <_wcrtomb_r+0x50>)
   850ce:	6824      	ldr	r4, [r4, #0]
   850d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
   850d2:	2c00      	cmp	r4, #0
   850d4:	bf08      	it	eq
   850d6:	462c      	moveq	r4, r5
   850d8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   850dc:	47a0      	blx	r4
   850de:	1c43      	adds	r3, r0, #1
   850e0:	d103      	bne.n	850ea <_wcrtomb_r+0x2a>
   850e2:	2200      	movs	r2, #0
   850e4:	238a      	movs	r3, #138	; 0x8a
   850e6:	603a      	str	r2, [r7, #0]
   850e8:	6033      	str	r3, [r6, #0]
   850ea:	b005      	add	sp, #20
   850ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850ee:	460c      	mov	r4, r1
   850f0:	4a06      	ldr	r2, [pc, #24]	; (8510c <_wcrtomb_r+0x4c>)
   850f2:	4d07      	ldr	r5, [pc, #28]	; (85110 <_wcrtomb_r+0x50>)
   850f4:	6811      	ldr	r1, [r2, #0]
   850f6:	4622      	mov	r2, r4
   850f8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   850fa:	a901      	add	r1, sp, #4
   850fc:	2c00      	cmp	r4, #0
   850fe:	bf08      	it	eq
   85100:	462c      	moveq	r4, r5
   85102:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   85106:	47a0      	blx	r4
   85108:	e7e9      	b.n	850de <_wcrtomb_r+0x1e>
   8510a:	bf00      	nop
   8510c:	20070134 	.word	0x20070134
   85110:	20070564 	.word	0x20070564

00085114 <__ascii_wctomb>:
   85114:	b119      	cbz	r1, 8511e <__ascii_wctomb+0xa>
   85116:	2aff      	cmp	r2, #255	; 0xff
   85118:	d803      	bhi.n	85122 <__ascii_wctomb+0xe>
   8511a:	700a      	strb	r2, [r1, #0]
   8511c:	2101      	movs	r1, #1
   8511e:	4608      	mov	r0, r1
   85120:	4770      	bx	lr
   85122:	238a      	movs	r3, #138	; 0x8a
   85124:	f04f 31ff 	mov.w	r1, #4294967295
   85128:	6003      	str	r3, [r0, #0]
   8512a:	e7f8      	b.n	8511e <__ascii_wctomb+0xa>

0008512c <_write_r>:
   8512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8512e:	460e      	mov	r6, r1
   85130:	2500      	movs	r5, #0
   85132:	4c08      	ldr	r4, [pc, #32]	; (85154 <_write_r+0x28>)
   85134:	4611      	mov	r1, r2
   85136:	4607      	mov	r7, r0
   85138:	461a      	mov	r2, r3
   8513a:	4630      	mov	r0, r6
   8513c:	6025      	str	r5, [r4, #0]
   8513e:	f7fb f82d 	bl	8019c <_write>
   85142:	1c43      	adds	r3, r0, #1
   85144:	d000      	beq.n	85148 <_write_r+0x1c>
   85146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85148:	6823      	ldr	r3, [r4, #0]
   8514a:	2b00      	cmp	r3, #0
   8514c:	d0fb      	beq.n	85146 <_write_r+0x1a>
   8514e:	603b      	str	r3, [r7, #0]
   85150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85152:	bf00      	nop
   85154:	2007c568 	.word	0x2007c568

00085158 <__register_exitproc>:
   85158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8515c:	4d2c      	ldr	r5, [pc, #176]	; (85210 <__register_exitproc+0xb8>)
   8515e:	4606      	mov	r6, r0
   85160:	6828      	ldr	r0, [r5, #0]
   85162:	4698      	mov	r8, r3
   85164:	460f      	mov	r7, r1
   85166:	4691      	mov	r9, r2
   85168:	f7ff f954 	bl	84414 <__retarget_lock_acquire_recursive>
   8516c:	4b29      	ldr	r3, [pc, #164]	; (85214 <__register_exitproc+0xbc>)
   8516e:	681c      	ldr	r4, [r3, #0]
   85170:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85174:	2b00      	cmp	r3, #0
   85176:	d03e      	beq.n	851f6 <__register_exitproc+0x9e>
   85178:	685a      	ldr	r2, [r3, #4]
   8517a:	2a1f      	cmp	r2, #31
   8517c:	dc1c      	bgt.n	851b8 <__register_exitproc+0x60>
   8517e:	f102 0e01 	add.w	lr, r2, #1
   85182:	b176      	cbz	r6, 851a2 <__register_exitproc+0x4a>
   85184:	2101      	movs	r1, #1
   85186:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8518a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8518e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85192:	4091      	lsls	r1, r2
   85194:	4308      	orrs	r0, r1
   85196:	2e02      	cmp	r6, #2
   85198:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8519c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   851a0:	d023      	beq.n	851ea <__register_exitproc+0x92>
   851a2:	3202      	adds	r2, #2
   851a4:	f8c3 e004 	str.w	lr, [r3, #4]
   851a8:	6828      	ldr	r0, [r5, #0]
   851aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   851ae:	f7ff f933 	bl	84418 <__retarget_lock_release_recursive>
   851b2:	2000      	movs	r0, #0
   851b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   851b8:	4b17      	ldr	r3, [pc, #92]	; (85218 <__register_exitproc+0xc0>)
   851ba:	b30b      	cbz	r3, 85200 <__register_exitproc+0xa8>
   851bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   851c0:	f7ff f9a4 	bl	8450c <malloc>
   851c4:	4603      	mov	r3, r0
   851c6:	b1d8      	cbz	r0, 85200 <__register_exitproc+0xa8>
   851c8:	2000      	movs	r0, #0
   851ca:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   851ce:	f04f 0e01 	mov.w	lr, #1
   851d2:	6058      	str	r0, [r3, #4]
   851d4:	6019      	str	r1, [r3, #0]
   851d6:	4602      	mov	r2, r0
   851d8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   851dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   851e0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   851e4:	2e00      	cmp	r6, #0
   851e6:	d0dc      	beq.n	851a2 <__register_exitproc+0x4a>
   851e8:	e7cc      	b.n	85184 <__register_exitproc+0x2c>
   851ea:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   851ee:	4301      	orrs	r1, r0
   851f0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   851f4:	e7d5      	b.n	851a2 <__register_exitproc+0x4a>
   851f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   851fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   851fe:	e7bb      	b.n	85178 <__register_exitproc+0x20>
   85200:	6828      	ldr	r0, [r5, #0]
   85202:	f7ff f909 	bl	84418 <__retarget_lock_release_recursive>
   85206:	f04f 30ff 	mov.w	r0, #4294967295
   8520a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8520e:	bf00      	nop
   85210:	20070560 	.word	0x20070560
   85214:	0008571c 	.word	0x0008571c
   85218:	0008450d 	.word	0x0008450d

0008521c <_close_r>:
   8521c:	b538      	push	{r3, r4, r5, lr}
   8521e:	2300      	movs	r3, #0
   85220:	4c06      	ldr	r4, [pc, #24]	; (8523c <_close_r+0x20>)
   85222:	4605      	mov	r5, r0
   85224:	4608      	mov	r0, r1
   85226:	6023      	str	r3, [r4, #0]
   85228:	f7fd fa8a 	bl	82740 <_close>
   8522c:	1c43      	adds	r3, r0, #1
   8522e:	d000      	beq.n	85232 <_close_r+0x16>
   85230:	bd38      	pop	{r3, r4, r5, pc}
   85232:	6823      	ldr	r3, [r4, #0]
   85234:	2b00      	cmp	r3, #0
   85236:	d0fb      	beq.n	85230 <_close_r+0x14>
   85238:	602b      	str	r3, [r5, #0]
   8523a:	bd38      	pop	{r3, r4, r5, pc}
   8523c:	2007c568 	.word	0x2007c568

00085240 <_fclose_r>:
   85240:	b570      	push	{r4, r5, r6, lr}
   85242:	b159      	cbz	r1, 8525c <_fclose_r+0x1c>
   85244:	4605      	mov	r5, r0
   85246:	460c      	mov	r4, r1
   85248:	b110      	cbz	r0, 85250 <_fclose_r+0x10>
   8524a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8524c:	2b00      	cmp	r3, #0
   8524e:	d03c      	beq.n	852ca <_fclose_r+0x8a>
   85250:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85252:	07d8      	lsls	r0, r3, #31
   85254:	d505      	bpl.n	85262 <_fclose_r+0x22>
   85256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8525a:	b92b      	cbnz	r3, 85268 <_fclose_r+0x28>
   8525c:	2600      	movs	r6, #0
   8525e:	4630      	mov	r0, r6
   85260:	bd70      	pop	{r4, r5, r6, pc}
   85262:	89a3      	ldrh	r3, [r4, #12]
   85264:	0599      	lsls	r1, r3, #22
   85266:	d53c      	bpl.n	852e2 <_fclose_r+0xa2>
   85268:	4621      	mov	r1, r4
   8526a:	4628      	mov	r0, r5
   8526c:	f7fe fc1e 	bl	83aac <__sflush_r>
   85270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85272:	4606      	mov	r6, r0
   85274:	b133      	cbz	r3, 85284 <_fclose_r+0x44>
   85276:	69e1      	ldr	r1, [r4, #28]
   85278:	4628      	mov	r0, r5
   8527a:	4798      	blx	r3
   8527c:	2800      	cmp	r0, #0
   8527e:	bfb8      	it	lt
   85280:	f04f 36ff 	movlt.w	r6, #4294967295
   85284:	89a3      	ldrh	r3, [r4, #12]
   85286:	061a      	lsls	r2, r3, #24
   85288:	d422      	bmi.n	852d0 <_fclose_r+0x90>
   8528a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8528c:	b141      	cbz	r1, 852a0 <_fclose_r+0x60>
   8528e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85292:	4299      	cmp	r1, r3
   85294:	d002      	beq.n	8529c <_fclose_r+0x5c>
   85296:	4628      	mov	r0, r5
   85298:	f7fe fe22 	bl	83ee0 <_free_r>
   8529c:	2300      	movs	r3, #0
   8529e:	6323      	str	r3, [r4, #48]	; 0x30
   852a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   852a2:	b121      	cbz	r1, 852ae <_fclose_r+0x6e>
   852a4:	4628      	mov	r0, r5
   852a6:	f7fe fe1b 	bl	83ee0 <_free_r>
   852aa:	2300      	movs	r3, #0
   852ac:	6463      	str	r3, [r4, #68]	; 0x44
   852ae:	f7fe fd21 	bl	83cf4 <__sfp_lock_acquire>
   852b2:	2200      	movs	r2, #0
   852b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   852b6:	81a2      	strh	r2, [r4, #12]
   852b8:	07db      	lsls	r3, r3, #31
   852ba:	d50e      	bpl.n	852da <_fclose_r+0x9a>
   852bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   852be:	f7ff f8a7 	bl	84410 <__retarget_lock_close_recursive>
   852c2:	f7fe fd1d 	bl	83d00 <__sfp_lock_release>
   852c6:	4630      	mov	r0, r6
   852c8:	bd70      	pop	{r4, r5, r6, pc}
   852ca:	f7fe fce3 	bl	83c94 <__sinit>
   852ce:	e7bf      	b.n	85250 <_fclose_r+0x10>
   852d0:	6921      	ldr	r1, [r4, #16]
   852d2:	4628      	mov	r0, r5
   852d4:	f7fe fe04 	bl	83ee0 <_free_r>
   852d8:	e7d7      	b.n	8528a <_fclose_r+0x4a>
   852da:	6da0      	ldr	r0, [r4, #88]	; 0x58
   852dc:	f7ff f89c 	bl	84418 <__retarget_lock_release_recursive>
   852e0:	e7ec      	b.n	852bc <_fclose_r+0x7c>
   852e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   852e4:	f7ff f896 	bl	84414 <__retarget_lock_acquire_recursive>
   852e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   852ec:	2b00      	cmp	r3, #0
   852ee:	d1bb      	bne.n	85268 <_fclose_r+0x28>
   852f0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   852f2:	f016 0601 	ands.w	r6, r6, #1
   852f6:	d1b1      	bne.n	8525c <_fclose_r+0x1c>
   852f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   852fa:	f7ff f88d 	bl	84418 <__retarget_lock_release_recursive>
   852fe:	4630      	mov	r0, r6
   85300:	bd70      	pop	{r4, r5, r6, pc}
   85302:	bf00      	nop

00085304 <_fstat_r>:
   85304:	b570      	push	{r4, r5, r6, lr}
   85306:	460d      	mov	r5, r1
   85308:	2300      	movs	r3, #0
   8530a:	4c07      	ldr	r4, [pc, #28]	; (85328 <_fstat_r+0x24>)
   8530c:	4606      	mov	r6, r0
   8530e:	4611      	mov	r1, r2
   85310:	4628      	mov	r0, r5
   85312:	6023      	str	r3, [r4, #0]
   85314:	f7fd fa17 	bl	82746 <_fstat>
   85318:	1c43      	adds	r3, r0, #1
   8531a:	d000      	beq.n	8531e <_fstat_r+0x1a>
   8531c:	bd70      	pop	{r4, r5, r6, pc}
   8531e:	6823      	ldr	r3, [r4, #0]
   85320:	2b00      	cmp	r3, #0
   85322:	d0fb      	beq.n	8531c <_fstat_r+0x18>
   85324:	6033      	str	r3, [r6, #0]
   85326:	bd70      	pop	{r4, r5, r6, pc}
   85328:	2007c568 	.word	0x2007c568

0008532c <_isatty_r>:
   8532c:	b538      	push	{r3, r4, r5, lr}
   8532e:	2300      	movs	r3, #0
   85330:	4c06      	ldr	r4, [pc, #24]	; (8534c <_isatty_r+0x20>)
   85332:	4605      	mov	r5, r0
   85334:	4608      	mov	r0, r1
   85336:	6023      	str	r3, [r4, #0]
   85338:	f7fd fa0a 	bl	82750 <_isatty>
   8533c:	1c43      	adds	r3, r0, #1
   8533e:	d000      	beq.n	85342 <_isatty_r+0x16>
   85340:	bd38      	pop	{r3, r4, r5, pc}
   85342:	6823      	ldr	r3, [r4, #0]
   85344:	2b00      	cmp	r3, #0
   85346:	d0fb      	beq.n	85340 <_isatty_r+0x14>
   85348:	602b      	str	r3, [r5, #0]
   8534a:	bd38      	pop	{r3, r4, r5, pc}
   8534c:	2007c568 	.word	0x2007c568

00085350 <_lseek_r>:
   85350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85352:	460e      	mov	r6, r1
   85354:	2500      	movs	r5, #0
   85356:	4c08      	ldr	r4, [pc, #32]	; (85378 <_lseek_r+0x28>)
   85358:	4611      	mov	r1, r2
   8535a:	4607      	mov	r7, r0
   8535c:	461a      	mov	r2, r3
   8535e:	4630      	mov	r0, r6
   85360:	6025      	str	r5, [r4, #0]
   85362:	f7fd f9f7 	bl	82754 <_lseek>
   85366:	1c43      	adds	r3, r0, #1
   85368:	d000      	beq.n	8536c <_lseek_r+0x1c>
   8536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8536c:	6823      	ldr	r3, [r4, #0]
   8536e:	2b00      	cmp	r3, #0
   85370:	d0fb      	beq.n	8536a <_lseek_r+0x1a>
   85372:	603b      	str	r3, [r7, #0]
   85374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85376:	bf00      	nop
   85378:	2007c568 	.word	0x2007c568

0008537c <_read_r>:
   8537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8537e:	460e      	mov	r6, r1
   85380:	2500      	movs	r5, #0
   85382:	4c08      	ldr	r4, [pc, #32]	; (853a4 <_read_r+0x28>)
   85384:	4611      	mov	r1, r2
   85386:	4607      	mov	r7, r0
   85388:	461a      	mov	r2, r3
   8538a:	4630      	mov	r0, r6
   8538c:	6025      	str	r5, [r4, #0]
   8538e:	f7fa fee7 	bl	80160 <_read>
   85392:	1c43      	adds	r3, r0, #1
   85394:	d000      	beq.n	85398 <_read_r+0x1c>
   85396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85398:	6823      	ldr	r3, [r4, #0]
   8539a:	2b00      	cmp	r3, #0
   8539c:	d0fb      	beq.n	85396 <_read_r+0x1a>
   8539e:	603b      	str	r3, [r7, #0]
   853a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   853a2:	bf00      	nop
   853a4:	2007c568 	.word	0x2007c568

000853a8 <__aeabi_uldivmod>:
   853a8:	b953      	cbnz	r3, 853c0 <__aeabi_uldivmod+0x18>
   853aa:	b94a      	cbnz	r2, 853c0 <__aeabi_uldivmod+0x18>
   853ac:	2900      	cmp	r1, #0
   853ae:	bf08      	it	eq
   853b0:	2800      	cmpeq	r0, #0
   853b2:	bf1c      	itt	ne
   853b4:	f04f 31ff 	movne.w	r1, #4294967295
   853b8:	f04f 30ff 	movne.w	r0, #4294967295
   853bc:	f000 b97a 	b.w	856b4 <__aeabi_idiv0>
   853c0:	f1ad 0c08 	sub.w	ip, sp, #8
   853c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   853c8:	f000 f806 	bl	853d8 <__udivmoddi4>
   853cc:	f8dd e004 	ldr.w	lr, [sp, #4]
   853d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   853d4:	b004      	add	sp, #16
   853d6:	4770      	bx	lr

000853d8 <__udivmoddi4>:
   853d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   853dc:	468c      	mov	ip, r1
   853de:	460e      	mov	r6, r1
   853e0:	4604      	mov	r4, r0
   853e2:	9d08      	ldr	r5, [sp, #32]
   853e4:	2b00      	cmp	r3, #0
   853e6:	d150      	bne.n	8548a <__udivmoddi4+0xb2>
   853e8:	428a      	cmp	r2, r1
   853ea:	4617      	mov	r7, r2
   853ec:	d96c      	bls.n	854c8 <__udivmoddi4+0xf0>
   853ee:	fab2 fe82 	clz	lr, r2
   853f2:	f1be 0f00 	cmp.w	lr, #0
   853f6:	d00b      	beq.n	85410 <__udivmoddi4+0x38>
   853f8:	f1ce 0c20 	rsb	ip, lr, #32
   853fc:	fa01 f60e 	lsl.w	r6, r1, lr
   85400:	fa20 fc0c 	lsr.w	ip, r0, ip
   85404:	fa02 f70e 	lsl.w	r7, r2, lr
   85408:	ea4c 0c06 	orr.w	ip, ip, r6
   8540c:	fa00 f40e 	lsl.w	r4, r0, lr
   85410:	0c3a      	lsrs	r2, r7, #16
   85412:	fbbc f9f2 	udiv	r9, ip, r2
   85416:	b2bb      	uxth	r3, r7
   85418:	fb02 cc19 	mls	ip, r2, r9, ip
   8541c:	fb09 fa03 	mul.w	sl, r9, r3
   85420:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85424:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   85428:	45b2      	cmp	sl, r6
   8542a:	d90a      	bls.n	85442 <__udivmoddi4+0x6a>
   8542c:	19f6      	adds	r6, r6, r7
   8542e:	f109 31ff 	add.w	r1, r9, #4294967295
   85432:	f080 8125 	bcs.w	85680 <__udivmoddi4+0x2a8>
   85436:	45b2      	cmp	sl, r6
   85438:	f240 8122 	bls.w	85680 <__udivmoddi4+0x2a8>
   8543c:	f1a9 0902 	sub.w	r9, r9, #2
   85440:	443e      	add	r6, r7
   85442:	eba6 060a 	sub.w	r6, r6, sl
   85446:	fbb6 f0f2 	udiv	r0, r6, r2
   8544a:	fb02 6610 	mls	r6, r2, r0, r6
   8544e:	fb00 f303 	mul.w	r3, r0, r3
   85452:	b2a4      	uxth	r4, r4
   85454:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   85458:	42a3      	cmp	r3, r4
   8545a:	d909      	bls.n	85470 <__udivmoddi4+0x98>
   8545c:	19e4      	adds	r4, r4, r7
   8545e:	f100 32ff 	add.w	r2, r0, #4294967295
   85462:	f080 810b 	bcs.w	8567c <__udivmoddi4+0x2a4>
   85466:	42a3      	cmp	r3, r4
   85468:	f240 8108 	bls.w	8567c <__udivmoddi4+0x2a4>
   8546c:	3802      	subs	r0, #2
   8546e:	443c      	add	r4, r7
   85470:	2100      	movs	r1, #0
   85472:	1ae4      	subs	r4, r4, r3
   85474:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85478:	2d00      	cmp	r5, #0
   8547a:	d062      	beq.n	85542 <__udivmoddi4+0x16a>
   8547c:	2300      	movs	r3, #0
   8547e:	fa24 f40e 	lsr.w	r4, r4, lr
   85482:	602c      	str	r4, [r5, #0]
   85484:	606b      	str	r3, [r5, #4]
   85486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8548a:	428b      	cmp	r3, r1
   8548c:	d907      	bls.n	8549e <__udivmoddi4+0xc6>
   8548e:	2d00      	cmp	r5, #0
   85490:	d055      	beq.n	8553e <__udivmoddi4+0x166>
   85492:	2100      	movs	r1, #0
   85494:	e885 0041 	stmia.w	r5, {r0, r6}
   85498:	4608      	mov	r0, r1
   8549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8549e:	fab3 f183 	clz	r1, r3
   854a2:	2900      	cmp	r1, #0
   854a4:	f040 808f 	bne.w	855c6 <__udivmoddi4+0x1ee>
   854a8:	42b3      	cmp	r3, r6
   854aa:	d302      	bcc.n	854b2 <__udivmoddi4+0xda>
   854ac:	4282      	cmp	r2, r0
   854ae:	f200 80fc 	bhi.w	856aa <__udivmoddi4+0x2d2>
   854b2:	1a84      	subs	r4, r0, r2
   854b4:	eb66 0603 	sbc.w	r6, r6, r3
   854b8:	2001      	movs	r0, #1
   854ba:	46b4      	mov	ip, r6
   854bc:	2d00      	cmp	r5, #0
   854be:	d040      	beq.n	85542 <__udivmoddi4+0x16a>
   854c0:	e885 1010 	stmia.w	r5, {r4, ip}
   854c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   854c8:	b912      	cbnz	r2, 854d0 <__udivmoddi4+0xf8>
   854ca:	2701      	movs	r7, #1
   854cc:	fbb7 f7f2 	udiv	r7, r7, r2
   854d0:	fab7 fe87 	clz	lr, r7
   854d4:	f1be 0f00 	cmp.w	lr, #0
   854d8:	d135      	bne.n	85546 <__udivmoddi4+0x16e>
   854da:	2101      	movs	r1, #1
   854dc:	1bf6      	subs	r6, r6, r7
   854de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   854e2:	fa1f f887 	uxth.w	r8, r7
   854e6:	fbb6 f2fc 	udiv	r2, r6, ip
   854ea:	fb0c 6612 	mls	r6, ip, r2, r6
   854ee:	fb08 f002 	mul.w	r0, r8, r2
   854f2:	0c23      	lsrs	r3, r4, #16
   854f4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   854f8:	42b0      	cmp	r0, r6
   854fa:	d907      	bls.n	8550c <__udivmoddi4+0x134>
   854fc:	19f6      	adds	r6, r6, r7
   854fe:	f102 33ff 	add.w	r3, r2, #4294967295
   85502:	d202      	bcs.n	8550a <__udivmoddi4+0x132>
   85504:	42b0      	cmp	r0, r6
   85506:	f200 80d2 	bhi.w	856ae <__udivmoddi4+0x2d6>
   8550a:	461a      	mov	r2, r3
   8550c:	1a36      	subs	r6, r6, r0
   8550e:	fbb6 f0fc 	udiv	r0, r6, ip
   85512:	fb0c 6610 	mls	r6, ip, r0, r6
   85516:	fb08 f800 	mul.w	r8, r8, r0
   8551a:	b2a3      	uxth	r3, r4
   8551c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   85520:	45a0      	cmp	r8, r4
   85522:	d907      	bls.n	85534 <__udivmoddi4+0x15c>
   85524:	19e4      	adds	r4, r4, r7
   85526:	f100 33ff 	add.w	r3, r0, #4294967295
   8552a:	d202      	bcs.n	85532 <__udivmoddi4+0x15a>
   8552c:	45a0      	cmp	r8, r4
   8552e:	f200 80b9 	bhi.w	856a4 <__udivmoddi4+0x2cc>
   85532:	4618      	mov	r0, r3
   85534:	eba4 0408 	sub.w	r4, r4, r8
   85538:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8553c:	e79c      	b.n	85478 <__udivmoddi4+0xa0>
   8553e:	4629      	mov	r1, r5
   85540:	4628      	mov	r0, r5
   85542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85546:	fa07 f70e 	lsl.w	r7, r7, lr
   8554a:	f1ce 0320 	rsb	r3, lr, #32
   8554e:	fa26 f203 	lsr.w	r2, r6, r3
   85552:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85556:	fbb2 f1fc 	udiv	r1, r2, ip
   8555a:	fa1f f887 	uxth.w	r8, r7
   8555e:	fb0c 2211 	mls	r2, ip, r1, r2
   85562:	fa06 f60e 	lsl.w	r6, r6, lr
   85566:	fa20 f303 	lsr.w	r3, r0, r3
   8556a:	fb01 f908 	mul.w	r9, r1, r8
   8556e:	4333      	orrs	r3, r6
   85570:	0c1e      	lsrs	r6, r3, #16
   85572:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85576:	45b1      	cmp	r9, r6
   85578:	fa00 f40e 	lsl.w	r4, r0, lr
   8557c:	d909      	bls.n	85592 <__udivmoddi4+0x1ba>
   8557e:	19f6      	adds	r6, r6, r7
   85580:	f101 32ff 	add.w	r2, r1, #4294967295
   85584:	f080 808c 	bcs.w	856a0 <__udivmoddi4+0x2c8>
   85588:	45b1      	cmp	r9, r6
   8558a:	f240 8089 	bls.w	856a0 <__udivmoddi4+0x2c8>
   8558e:	3902      	subs	r1, #2
   85590:	443e      	add	r6, r7
   85592:	eba6 0609 	sub.w	r6, r6, r9
   85596:	fbb6 f0fc 	udiv	r0, r6, ip
   8559a:	fb0c 6210 	mls	r2, ip, r0, r6
   8559e:	fb00 f908 	mul.w	r9, r0, r8
   855a2:	b29e      	uxth	r6, r3
   855a4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   855a8:	45b1      	cmp	r9, r6
   855aa:	d907      	bls.n	855bc <__udivmoddi4+0x1e4>
   855ac:	19f6      	adds	r6, r6, r7
   855ae:	f100 33ff 	add.w	r3, r0, #4294967295
   855b2:	d271      	bcs.n	85698 <__udivmoddi4+0x2c0>
   855b4:	45b1      	cmp	r9, r6
   855b6:	d96f      	bls.n	85698 <__udivmoddi4+0x2c0>
   855b8:	3802      	subs	r0, #2
   855ba:	443e      	add	r6, r7
   855bc:	eba6 0609 	sub.w	r6, r6, r9
   855c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   855c4:	e78f      	b.n	854e6 <__udivmoddi4+0x10e>
   855c6:	f1c1 0720 	rsb	r7, r1, #32
   855ca:	fa22 f807 	lsr.w	r8, r2, r7
   855ce:	408b      	lsls	r3, r1
   855d0:	ea48 0303 	orr.w	r3, r8, r3
   855d4:	fa26 f407 	lsr.w	r4, r6, r7
   855d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   855dc:	fbb4 f9fe 	udiv	r9, r4, lr
   855e0:	fa1f fc83 	uxth.w	ip, r3
   855e4:	fb0e 4419 	mls	r4, lr, r9, r4
   855e8:	408e      	lsls	r6, r1
   855ea:	fa20 f807 	lsr.w	r8, r0, r7
   855ee:	fb09 fa0c 	mul.w	sl, r9, ip
   855f2:	ea48 0806 	orr.w	r8, r8, r6
   855f6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   855fa:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   855fe:	45a2      	cmp	sl, r4
   85600:	fa02 f201 	lsl.w	r2, r2, r1
   85604:	fa00 f601 	lsl.w	r6, r0, r1
   85608:	d908      	bls.n	8561c <__udivmoddi4+0x244>
   8560a:	18e4      	adds	r4, r4, r3
   8560c:	f109 30ff 	add.w	r0, r9, #4294967295
   85610:	d244      	bcs.n	8569c <__udivmoddi4+0x2c4>
   85612:	45a2      	cmp	sl, r4
   85614:	d942      	bls.n	8569c <__udivmoddi4+0x2c4>
   85616:	f1a9 0902 	sub.w	r9, r9, #2
   8561a:	441c      	add	r4, r3
   8561c:	eba4 040a 	sub.w	r4, r4, sl
   85620:	fbb4 f0fe 	udiv	r0, r4, lr
   85624:	fb0e 4410 	mls	r4, lr, r0, r4
   85628:	fb00 fc0c 	mul.w	ip, r0, ip
   8562c:	fa1f f888 	uxth.w	r8, r8
   85630:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85634:	45a4      	cmp	ip, r4
   85636:	d907      	bls.n	85648 <__udivmoddi4+0x270>
   85638:	18e4      	adds	r4, r4, r3
   8563a:	f100 3eff 	add.w	lr, r0, #4294967295
   8563e:	d229      	bcs.n	85694 <__udivmoddi4+0x2bc>
   85640:	45a4      	cmp	ip, r4
   85642:	d927      	bls.n	85694 <__udivmoddi4+0x2bc>
   85644:	3802      	subs	r0, #2
   85646:	441c      	add	r4, r3
   85648:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8564c:	fba0 8902 	umull	r8, r9, r0, r2
   85650:	eba4 0c0c 	sub.w	ip, r4, ip
   85654:	45cc      	cmp	ip, r9
   85656:	46c2      	mov	sl, r8
   85658:	46ce      	mov	lr, r9
   8565a:	d315      	bcc.n	85688 <__udivmoddi4+0x2b0>
   8565c:	d012      	beq.n	85684 <__udivmoddi4+0x2ac>
   8565e:	b155      	cbz	r5, 85676 <__udivmoddi4+0x29e>
   85660:	ebb6 030a 	subs.w	r3, r6, sl
   85664:	eb6c 060e 	sbc.w	r6, ip, lr
   85668:	fa06 f707 	lsl.w	r7, r6, r7
   8566c:	40cb      	lsrs	r3, r1
   8566e:	431f      	orrs	r7, r3
   85670:	40ce      	lsrs	r6, r1
   85672:	602f      	str	r7, [r5, #0]
   85674:	606e      	str	r6, [r5, #4]
   85676:	2100      	movs	r1, #0
   85678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8567c:	4610      	mov	r0, r2
   8567e:	e6f7      	b.n	85470 <__udivmoddi4+0x98>
   85680:	4689      	mov	r9, r1
   85682:	e6de      	b.n	85442 <__udivmoddi4+0x6a>
   85684:	4546      	cmp	r6, r8
   85686:	d2ea      	bcs.n	8565e <__udivmoddi4+0x286>
   85688:	ebb8 0a02 	subs.w	sl, r8, r2
   8568c:	eb69 0e03 	sbc.w	lr, r9, r3
   85690:	3801      	subs	r0, #1
   85692:	e7e4      	b.n	8565e <__udivmoddi4+0x286>
   85694:	4670      	mov	r0, lr
   85696:	e7d7      	b.n	85648 <__udivmoddi4+0x270>
   85698:	4618      	mov	r0, r3
   8569a:	e78f      	b.n	855bc <__udivmoddi4+0x1e4>
   8569c:	4681      	mov	r9, r0
   8569e:	e7bd      	b.n	8561c <__udivmoddi4+0x244>
   856a0:	4611      	mov	r1, r2
   856a2:	e776      	b.n	85592 <__udivmoddi4+0x1ba>
   856a4:	3802      	subs	r0, #2
   856a6:	443c      	add	r4, r7
   856a8:	e744      	b.n	85534 <__udivmoddi4+0x15c>
   856aa:	4608      	mov	r0, r1
   856ac:	e706      	b.n	854bc <__udivmoddi4+0xe4>
   856ae:	3a02      	subs	r2, #2
   856b0:	443e      	add	r6, r7
   856b2:	e72b      	b.n	8550c <__udivmoddi4+0x134>

000856b4 <__aeabi_idiv0>:
   856b4:	4770      	bx	lr
   856b6:	bf00      	nop
   856b8:	454c4449 	.word	0x454c4449
   856bc:	00000000 	.word	0x00000000
   856c0:	51726d54 	.word	0x51726d54
   856c4:	00000000 	.word	0x00000000
   856c8:	20726d54 	.word	0x20726d54
   856cc:	00637653 	.word	0x00637653
   856d0:	7373654d 	.word	0x7373654d
   856d4:	20656761 	.word	0x20656761
   856d8:	72702031 	.word	0x72702031
   856dc:	20746e69 	.word	0x20746e69
   856e0:	6b736174 	.word	0x6b736174
   856e4:	00000000 	.word	0x00000000
   856e8:	20646156 	.word	0x20646156
   856ec:	21617262 	.word	0x21617262
   856f0:	00000020 	.word	0x00000020
   856f4:	7373654d 	.word	0x7373654d
   856f8:	20656761 	.word	0x20656761
   856fc:	72702032 	.word	0x72702032
   85700:	20746e69 	.word	0x20746e69
   85704:	6b736174 	.word	0x6b736174
   85708:	00000000 	.word	0x00000000
   8570c:	6b63794d 	.word	0x6b63794d
   85710:	6b207465 	.word	0x6b207465
   85714:	65666661 	.word	0x65666661
   85718:	00002021 	.word	0x00002021

0008571c <_global_impure_ptr>:
   8571c:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   8572c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8573c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8574c:	0000296c                                l)..

00085750 <blanks.7217>:
   85750:	20202020 20202020 20202020 20202020                     

00085760 <zeroes.7218>:
   85760:	30303030 30303030 30303030 30303030     0000000000000000
   85770:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00085780 <_ctype_>:
   85780:	20202000 20202020 28282020 20282828     .         ((((( 
   85790:	20202020 20202020 20202020 20202020                     
   857a0:	10108820 10101010 10101010 10101010      ...............
   857b0:	04040410 04040404 10040404 10101010     ................
   857c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   857d0:	01010101 01010101 01010101 10101010     ................
   857e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   857f0:	02020202 02020202 02020202 10101010     ................
   85800:	00000020 00000000 00000000 00000000      ...............
	...

00085884 <_init>:
   85884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85886:	bf00      	nop
   85888:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8588a:	bc08      	pop	{r3}
   8588c:	469e      	mov	lr, r3
   8588e:	4770      	bx	lr

00085890 <__init_array_start>:
   85890:	00083a8d 	.word	0x00083a8d

00085894 <__frame_dummy_init_array_entry>:
   85894:	00080119                                ....

00085898 <_fini>:
   85898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8589a:	bf00      	nop
   8589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8589e:	bc08      	pop	{r3}
   858a0:	469e      	mov	lr, r3
   858a2:	4770      	bx	lr

000858a4 <__fini_array_start>:
   858a4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	2007c544                                D.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00085115 00084a61 00000000 00085780     .Q..aJ.......W..
20070654:	0008577c 000856bc 000856bc 000856bc     |W...V...V...V..
20070664:	000856bc 000856bc 000856bc 000856bc     .V...V...V...V..
20070674:	000856bc 000856bc ffffffff ffffffff     .V...V..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
