
RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002554  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000564  20070000  00082554  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000ba40  20070564  00082ab8  00020564  2**2
                  ALLOC
  3 .stack        00002004  2007bfa4  0008e4f8  00020564  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002058d  2**0
                  CONTENTS, READONLY
  6 .debug_info   000167af  00000000  00000000  000205e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031df  00000000  00000000  00036d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000069e2  00000000  00000000  00039f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000968  00000000  00000000  00040956  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b10  00000000  00000000  000412be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000799b  00000000  00000000  00041dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010d50  00000000  00000000  00049769  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006b8d1  00000000  00000000  0005a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001874  00000000  00000000  000c5d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	a8 df 07 20 35 1f 08 00 31 1f 08 00 31 1f 08 00     ... 5...1...1...
   80010:	31 1f 08 00 31 1f 08 00 31 1f 08 00 00 00 00 00     1...1...1.......
	...
   8002c:	81 02 08 00 31 1f 08 00 00 00 00 00 21 03 08 00     ....1.......!...
   8003c:	69 03 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     i...1...1...1...
   8004c:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...
   8005c:	31 1f 08 00 31 1f 08 00 31 1f 08 00 00 00 00 00     1...1...1.......
   8006c:	d9 1d 08 00 ed 1d 08 00 01 1e 08 00 15 1e 08 00     ................
	...
   80084:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...
   80094:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...
   800a4:	00 00 00 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     ....1...1...1...
   800b4:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...
   800c4:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...
   800d4:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...
   800e4:	31 1f 08 00 31 1f 08 00 31 1f 08 00 31 1f 08 00     1...1...1...1...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070564 	.word	0x20070564
   80110:	00000000 	.word	0x00000000
   80114:	00082554 	.word	0x00082554

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082554 	.word	0x00082554
   80154:	20070568 	.word	0x20070568
   80158:	00082554 	.word	0x00082554
   8015c:	00000000 	.word	0x00000000

00080160 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80160:	f100 0308 	add.w	r3, r0, #8
   80164:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80166:	f04f 32ff 	mov.w	r2, #4294967295
   8016a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8016c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8016e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   80170:	2300      	movs	r3, #0
   80172:	6003      	str	r3, [r0, #0]
   80174:	4770      	bx	lr

00080176 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80176:	2300      	movs	r3, #0
   80178:	6103      	str	r3, [r0, #16]
   8017a:	4770      	bx	lr

0008017c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   8017c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   8017e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   80180:	689a      	ldr	r2, [r3, #8]
   80182:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   80184:	689a      	ldr	r2, [r3, #8]
   80186:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   80188:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8018a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8018c:	6803      	ldr	r3, [r0, #0]
   8018e:	3301      	adds	r3, #1
   80190:	6003      	str	r3, [r0, #0]
   80192:	4770      	bx	lr

00080194 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   80194:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   80196:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80198:	f1b5 3fff 	cmp.w	r5, #4294967295
   8019c:	d002      	beq.n	801a4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8019e:	f100 0208 	add.w	r2, r0, #8
   801a2:	e002      	b.n	801aa <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   801a4:	6902      	ldr	r2, [r0, #16]
   801a6:	e004      	b.n	801b2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   801a8:	461a      	mov	r2, r3
   801aa:	6853      	ldr	r3, [r2, #4]
   801ac:	681c      	ldr	r4, [r3, #0]
   801ae:	42a5      	cmp	r5, r4
   801b0:	d2fa      	bcs.n	801a8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   801b2:	6853      	ldr	r3, [r2, #4]
   801b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   801b6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   801b8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   801ba:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801be:	6803      	ldr	r3, [r0, #0]
   801c0:	3301      	adds	r3, #1
   801c2:	6003      	str	r3, [r0, #0]
}
   801c4:	bc30      	pop	{r4, r5}
   801c6:	4770      	bx	lr

000801c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   801c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   801ca:	6842      	ldr	r2, [r0, #4]
   801cc:	6881      	ldr	r1, [r0, #8]
   801ce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   801d0:	6882      	ldr	r2, [r0, #8]
   801d2:	6841      	ldr	r1, [r0, #4]
   801d4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   801d6:	685a      	ldr	r2, [r3, #4]
   801d8:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   801da:	bf04      	itt	eq
   801dc:	6882      	ldreq	r2, [r0, #8]
   801de:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   801e0:	2200      	movs	r2, #0
   801e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   801e4:	681a      	ldr	r2, [r3, #0]
   801e6:	3a01      	subs	r2, #1
   801e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   801ea:	6818      	ldr	r0, [r3, #0]
}
   801ec:	4770      	bx	lr
	...

000801f0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   801f0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   801f2:	2300      	movs	r3, #0
   801f4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   801f6:	4b0d      	ldr	r3, [pc, #52]	; (8022c <prvTaskExitError+0x3c>)
   801f8:	681b      	ldr	r3, [r3, #0]
   801fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   801fe:	d008      	beq.n	80212 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   80200:	f04f 0340 	mov.w	r3, #64	; 0x40
   80204:	f383 8811 	msr	BASEPRI, r3
   80208:	f3bf 8f6f 	isb	sy
   8020c:	f3bf 8f4f 	dsb	sy
   80210:	e7fe      	b.n	80210 <prvTaskExitError+0x20>
   80212:	f04f 0340 	mov.w	r3, #64	; 0x40
   80216:	f383 8811 	msr	BASEPRI, r3
   8021a:	f3bf 8f6f 	isb	sy
   8021e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   80222:	9b01      	ldr	r3, [sp, #4]
   80224:	2b00      	cmp	r3, #0
   80226:	d0fc      	beq.n	80222 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   80228:	b002      	add	sp, #8
   8022a:	4770      	bx	lr
   8022c:	2007012c 	.word	0x2007012c

00080230 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80230:	4806      	ldr	r0, [pc, #24]	; (8024c <prvPortStartFirstTask+0x1c>)
   80232:	6800      	ldr	r0, [r0, #0]
   80234:	6800      	ldr	r0, [r0, #0]
   80236:	f380 8808 	msr	MSP, r0
   8023a:	b662      	cpsie	i
   8023c:	b661      	cpsie	f
   8023e:	f3bf 8f4f 	dsb	sy
   80242:	f3bf 8f6f 	isb	sy
   80246:	df00      	svc	0
   80248:	bf00      	nop
   8024a:	0000      	.short	0x0000
   8024c:	e000ed08 	.word	0xe000ed08

00080250 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80254:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   80258:	f021 0101 	bic.w	r1, r1, #1
   8025c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   80260:	4b03      	ldr	r3, [pc, #12]	; (80270 <pxPortInitialiseStack+0x20>)
   80262:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   80266:	f840 2c20 	str.w	r2, [r0, #-32]
}
   8026a:	3840      	subs	r0, #64	; 0x40
   8026c:	4770      	bx	lr
   8026e:	bf00      	nop
   80270:	000801f1 	.word	0x000801f1
	...

00080280 <SVC_Handler>:
	__asm volatile (
   80280:	4b07      	ldr	r3, [pc, #28]	; (802a0 <pxCurrentTCBConst2>)
   80282:	6819      	ldr	r1, [r3, #0]
   80284:	6808      	ldr	r0, [r1, #0]
   80286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8028a:	f380 8809 	msr	PSP, r0
   8028e:	f3bf 8f6f 	isb	sy
   80292:	f04f 0000 	mov.w	r0, #0
   80296:	f380 8811 	msr	BASEPRI, r0
   8029a:	f04e 0e0d 	orr.w	lr, lr, #13
   8029e:	4770      	bx	lr

000802a0 <pxCurrentTCBConst2>:
   802a0:	2007bd90 	.word	0x2007bd90
   802a4:	4770      	bx	lr
   802a6:	bf00      	nop

000802a8 <vPortEnterCritical>:
   802a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   802ac:	f383 8811 	msr	BASEPRI, r3
   802b0:	f3bf 8f6f 	isb	sy
   802b4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   802b8:	4a0a      	ldr	r2, [pc, #40]	; (802e4 <vPortEnterCritical+0x3c>)
   802ba:	6813      	ldr	r3, [r2, #0]
   802bc:	3301      	adds	r3, #1
   802be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   802c0:	2b01      	cmp	r3, #1
   802c2:	d10d      	bne.n	802e0 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   802c4:	4b08      	ldr	r3, [pc, #32]	; (802e8 <vPortEnterCritical+0x40>)
   802c6:	681b      	ldr	r3, [r3, #0]
   802c8:	f013 0fff 	tst.w	r3, #255	; 0xff
   802cc:	d008      	beq.n	802e0 <vPortEnterCritical+0x38>
   802ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   802d2:	f383 8811 	msr	BASEPRI, r3
   802d6:	f3bf 8f6f 	isb	sy
   802da:	f3bf 8f4f 	dsb	sy
   802de:	e7fe      	b.n	802de <vPortEnterCritical+0x36>
   802e0:	4770      	bx	lr
   802e2:	bf00      	nop
   802e4:	2007012c 	.word	0x2007012c
   802e8:	e000ed04 	.word	0xe000ed04

000802ec <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   802ec:	4b09      	ldr	r3, [pc, #36]	; (80314 <vPortExitCritical+0x28>)
   802ee:	681b      	ldr	r3, [r3, #0]
   802f0:	b943      	cbnz	r3, 80304 <vPortExitCritical+0x18>
   802f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   802f6:	f383 8811 	msr	BASEPRI, r3
   802fa:	f3bf 8f6f 	isb	sy
   802fe:	f3bf 8f4f 	dsb	sy
   80302:	e7fe      	b.n	80302 <vPortExitCritical+0x16>
	uxCriticalNesting--;
   80304:	3b01      	subs	r3, #1
   80306:	4a03      	ldr	r2, [pc, #12]	; (80314 <vPortExitCritical+0x28>)
   80308:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8030a:	b90b      	cbnz	r3, 80310 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   8030c:	f383 8811 	msr	BASEPRI, r3
   80310:	4770      	bx	lr
   80312:	bf00      	nop
   80314:	2007012c 	.word	0x2007012c
	...

00080320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   80320:	f3ef 8009 	mrs	r0, PSP
   80324:	f3bf 8f6f 	isb	sy
   80328:	4b0d      	ldr	r3, [pc, #52]	; (80360 <pxCurrentTCBConst>)
   8032a:	681a      	ldr	r2, [r3, #0]
   8032c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80330:	6010      	str	r0, [r2, #0]
   80332:	e92d 4008 	stmdb	sp!, {r3, lr}
   80336:	f04f 0040 	mov.w	r0, #64	; 0x40
   8033a:	f380 8811 	msr	BASEPRI, r0
   8033e:	f000 ffff 	bl	81340 <vTaskSwitchContext>
   80342:	f04f 0000 	mov.w	r0, #0
   80346:	f380 8811 	msr	BASEPRI, r0
   8034a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8034e:	6819      	ldr	r1, [r3, #0]
   80350:	6808      	ldr	r0, [r1, #0]
   80352:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80356:	f380 8809 	msr	PSP, r0
   8035a:	f3bf 8f6f 	isb	sy
   8035e:	4770      	bx	lr

00080360 <pxCurrentTCBConst>:
   80360:	2007bd90 	.word	0x2007bd90
   80364:	4770      	bx	lr
   80366:	bf00      	nop

00080368 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   80368:	b508      	push	{r3, lr}
	__asm volatile
   8036a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8036e:	f383 8811 	msr	BASEPRI, r3
   80372:	f3bf 8f6f 	isb	sy
   80376:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   8037a:	4b05      	ldr	r3, [pc, #20]	; (80390 <SysTick_Handler+0x28>)
   8037c:	4798      	blx	r3
   8037e:	b118      	cbz	r0, 80388 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80384:	4b03      	ldr	r3, [pc, #12]	; (80394 <SysTick_Handler+0x2c>)
   80386:	601a      	str	r2, [r3, #0]
	__asm volatile
   80388:	2300      	movs	r3, #0
   8038a:	f383 8811 	msr	BASEPRI, r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	0008104d 	.word	0x0008104d
   80394:	e000ed04 	.word	0xe000ed04

00080398 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   80398:	4b05      	ldr	r3, [pc, #20]	; (803b0 <vPortSetupTimerInterrupt+0x18>)
   8039a:	2200      	movs	r2, #0
   8039c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   8039e:	4905      	ldr	r1, [pc, #20]	; (803b4 <vPortSetupTimerInterrupt+0x1c>)
   803a0:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   803a2:	4905      	ldr	r1, [pc, #20]	; (803b8 <vPortSetupTimerInterrupt+0x20>)
   803a4:	4a05      	ldr	r2, [pc, #20]	; (803bc <vPortSetupTimerInterrupt+0x24>)
   803a6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   803a8:	2207      	movs	r2, #7
   803aa:	601a      	str	r2, [r3, #0]
   803ac:	4770      	bx	lr
   803ae:	bf00      	nop
   803b0:	e000e010 	.word	0xe000e010
   803b4:	e000e018 	.word	0xe000e018
   803b8:	0001481f 	.word	0x0001481f
   803bc:	e000e014 	.word	0xe000e014

000803c0 <xPortStartScheduler>:
{
   803c0:	b510      	push	{r4, lr}
   803c2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   803c4:	4b29      	ldr	r3, [pc, #164]	; (8046c <xPortStartScheduler+0xac>)
   803c6:	781a      	ldrb	r2, [r3, #0]
   803c8:	b2d2      	uxtb	r2, r2
   803ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   803cc:	22ff      	movs	r2, #255	; 0xff
   803ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   803d0:	781b      	ldrb	r3, [r3, #0]
   803d2:	b2db      	uxtb	r3, r3
   803d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   803d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   803dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   803e0:	4a23      	ldr	r2, [pc, #140]	; (80470 <xPortStartScheduler+0xb0>)
   803e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   803e4:	2207      	movs	r2, #7
   803e6:	4b23      	ldr	r3, [pc, #140]	; (80474 <xPortStartScheduler+0xb4>)
   803e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   803ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   803ee:	f013 0f80 	tst.w	r3, #128	; 0x80
   803f2:	d012      	beq.n	8041a <xPortStartScheduler+0x5a>
   803f4:	2306      	movs	r3, #6
   803f6:	e000      	b.n	803fa <xPortStartScheduler+0x3a>
   803f8:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   803fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   803fe:	0052      	lsls	r2, r2, #1
   80400:	b2d2      	uxtb	r2, r2
   80402:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   80406:	f89d 2003 	ldrb.w	r2, [sp, #3]
   8040a:	1e59      	subs	r1, r3, #1
   8040c:	f012 0f80 	tst.w	r2, #128	; 0x80
   80410:	d1f2      	bne.n	803f8 <xPortStartScheduler+0x38>
   80412:	4a18      	ldr	r2, [pc, #96]	; (80474 <xPortStartScheduler+0xb4>)
   80414:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   80416:	2b03      	cmp	r3, #3
   80418:	d008      	beq.n	8042c <xPortStartScheduler+0x6c>
	__asm volatile
   8041a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8041e:	f383 8811 	msr	BASEPRI, r3
   80422:	f3bf 8f6f 	isb	sy
   80426:	f3bf 8f4f 	dsb	sy
   8042a:	e7fe      	b.n	8042a <xPortStartScheduler+0x6a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8042c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   8042e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80432:	4a10      	ldr	r2, [pc, #64]	; (80474 <xPortStartScheduler+0xb4>)
   80434:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   80436:	9b01      	ldr	r3, [sp, #4]
   80438:	b2db      	uxtb	r3, r3
   8043a:	4a0c      	ldr	r2, [pc, #48]	; (8046c <xPortStartScheduler+0xac>)
   8043c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8043e:	4b0e      	ldr	r3, [pc, #56]	; (80478 <xPortStartScheduler+0xb8>)
   80440:	681a      	ldr	r2, [r3, #0]
   80442:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   80446:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80448:	681a      	ldr	r2, [r3, #0]
   8044a:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
   8044e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80450:	4b0a      	ldr	r3, [pc, #40]	; (8047c <xPortStartScheduler+0xbc>)
   80452:	4798      	blx	r3
	uxCriticalNesting = 0;
   80454:	2400      	movs	r4, #0
   80456:	4b0a      	ldr	r3, [pc, #40]	; (80480 <xPortStartScheduler+0xc0>)
   80458:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   8045a:	4b0a      	ldr	r3, [pc, #40]	; (80484 <xPortStartScheduler+0xc4>)
   8045c:	4798      	blx	r3
	vTaskSwitchContext();
   8045e:	4b0a      	ldr	r3, [pc, #40]	; (80488 <xPortStartScheduler+0xc8>)
   80460:	4798      	blx	r3
	prvTaskExitError();
   80462:	4b0a      	ldr	r3, [pc, #40]	; (8048c <xPortStartScheduler+0xcc>)
   80464:	4798      	blx	r3
}
   80466:	4620      	mov	r0, r4
   80468:	b002      	add	sp, #8
   8046a:	bd10      	pop	{r4, pc}
   8046c:	e000e400 	.word	0xe000e400
   80470:	20070580 	.word	0x20070580
   80474:	20070584 	.word	0x20070584
   80478:	e000ed20 	.word	0xe000ed20
   8047c:	00080399 	.word	0x00080399
   80480:	2007012c 	.word	0x2007012c
   80484:	00080231 	.word	0x00080231
   80488:	00081341 	.word	0x00081341
   8048c:	000801f1 	.word	0x000801f1

00080490 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   80490:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   80494:	2b0f      	cmp	r3, #15
   80496:	d90f      	bls.n	804b8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   80498:	4a10      	ldr	r2, [pc, #64]	; (804dc <vPortValidateInterruptPriority+0x4c>)
   8049a:	5c9b      	ldrb	r3, [r3, r2]
   8049c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   8049e:	4a10      	ldr	r2, [pc, #64]	; (804e0 <vPortValidateInterruptPriority+0x50>)
   804a0:	7812      	ldrb	r2, [r2, #0]
   804a2:	429a      	cmp	r2, r3
   804a4:	d908      	bls.n	804b8 <vPortValidateInterruptPriority+0x28>
   804a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   804aa:	f383 8811 	msr	BASEPRI, r3
   804ae:	f3bf 8f6f 	isb	sy
   804b2:	f3bf 8f4f 	dsb	sy
   804b6:	e7fe      	b.n	804b6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   804b8:	4b0a      	ldr	r3, [pc, #40]	; (804e4 <vPortValidateInterruptPriority+0x54>)
   804ba:	681b      	ldr	r3, [r3, #0]
   804bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   804c0:	4a09      	ldr	r2, [pc, #36]	; (804e8 <vPortValidateInterruptPriority+0x58>)
   804c2:	6812      	ldr	r2, [r2, #0]
   804c4:	4293      	cmp	r3, r2
   804c6:	d908      	bls.n	804da <vPortValidateInterruptPriority+0x4a>
   804c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   804cc:	f383 8811 	msr	BASEPRI, r3
   804d0:	f3bf 8f6f 	isb	sy
   804d4:	f3bf 8f4f 	dsb	sy
   804d8:	e7fe      	b.n	804d8 <vPortValidateInterruptPriority+0x48>
   804da:	4770      	bx	lr
   804dc:	e000e3f0 	.word	0xe000e3f0
   804e0:	20070580 	.word	0x20070580
   804e4:	e000ed0c 	.word	0xe000ed0c
   804e8:	20070584 	.word	0x20070584

000804ec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   804ec:	b538      	push	{r3, r4, r5, lr}
   804ee:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   804f0:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   804f4:	bf1c      	itt	ne
   804f6:	f020 0407 	bicne.w	r4, r0, #7
   804fa:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   804fc:	4b10      	ldr	r3, [pc, #64]	; (80540 <pvPortMalloc+0x54>)
   804fe:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   80500:	4b10      	ldr	r3, [pc, #64]	; (80544 <pvPortMalloc+0x58>)
   80502:	681b      	ldr	r3, [r3, #0]
   80504:	b18b      	cbz	r3, 8052a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   80506:	4b10      	ldr	r3, [pc, #64]	; (80548 <pvPortMalloc+0x5c>)
   80508:	681b      	ldr	r3, [r3, #0]
   8050a:	441c      	add	r4, r3
   8050c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
   80510:	4294      	cmp	r4, r2
   80512:	d810      	bhi.n	80536 <pvPortMalloc+0x4a>
   80514:	42a3      	cmp	r3, r4
   80516:	d210      	bcs.n	8053a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   80518:	4a0a      	ldr	r2, [pc, #40]	; (80544 <pvPortMalloc+0x58>)
   8051a:	6815      	ldr	r5, [r2, #0]
   8051c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   8051e:	4b0a      	ldr	r3, [pc, #40]	; (80548 <pvPortMalloc+0x5c>)
   80520:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   80522:	4b0a      	ldr	r3, [pc, #40]	; (8054c <pvPortMalloc+0x60>)
   80524:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80526:	4628      	mov	r0, r5
   80528:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   8052a:	4b09      	ldr	r3, [pc, #36]	; (80550 <pvPortMalloc+0x64>)
   8052c:	f023 0307 	bic.w	r3, r3, #7
   80530:	4a04      	ldr	r2, [pc, #16]	; (80544 <pvPortMalloc+0x58>)
   80532:	6013      	str	r3, [r2, #0]
   80534:	e7e7      	b.n	80506 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
   80536:	2500      	movs	r5, #0
   80538:	e7f3      	b.n	80522 <pvPortMalloc+0x36>
   8053a:	2500      	movs	r5, #0
   8053c:	e7f1      	b.n	80522 <pvPortMalloc+0x36>
   8053e:	bf00      	nop
   80540:	00081031 	.word	0x00081031
   80544:	20070588 	.word	0x20070588
   80548:	2007bd8c 	.word	0x2007bd8c
   8054c:	00081181 	.word	0x00081181
   80550:	20070594 	.word	0x20070594

00080554 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   80554:	b140      	cbz	r0, 80568 <vPortFree+0x14>
   80556:	f04f 0340 	mov.w	r3, #64	; 0x40
   8055a:	f383 8811 	msr	BASEPRI, r3
   8055e:	f3bf 8f6f 	isb	sy
   80562:	f3bf 8f4f 	dsb	sy
   80566:	e7fe      	b.n	80566 <vPortFree+0x12>
   80568:	4770      	bx	lr
	...

0008056c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   8056c:	b510      	push	{r4, lr}
   8056e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80570:	4b04      	ldr	r3, [pc, #16]	; (80584 <prvIsQueueEmpty+0x18>)
   80572:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   80574:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80576:	4b04      	ldr	r3, [pc, #16]	; (80588 <prvIsQueueEmpty+0x1c>)
   80578:	4798      	blx	r3

	return xReturn;
}
   8057a:	fab4 f084 	clz	r0, r4
   8057e:	0940      	lsrs	r0, r0, #5
   80580:	bd10      	pop	{r4, pc}
   80582:	bf00      	nop
   80584:	000802a9 	.word	0x000802a9
   80588:	000802ed 	.word	0x000802ed

0008058c <prvCopyDataToQueue>:
{
   8058c:	b570      	push	{r4, r5, r6, lr}
   8058e:	4604      	mov	r4, r0
   80590:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80592:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   80594:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80596:	b952      	cbnz	r2, 805ae <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80598:	6803      	ldr	r3, [r0, #0]
   8059a:	2b00      	cmp	r3, #0
   8059c:	d12a      	bne.n	805f4 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   8059e:	6840      	ldr	r0, [r0, #4]
   805a0:	4b18      	ldr	r3, [pc, #96]	; (80604 <prvCopyDataToQueue+0x78>)
   805a2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   805a4:	2300      	movs	r3, #0
   805a6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   805a8:	3501      	adds	r5, #1
   805aa:	63a5      	str	r5, [r4, #56]	; 0x38
}
   805ac:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   805ae:	b96e      	cbnz	r6, 805cc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   805b0:	6880      	ldr	r0, [r0, #8]
   805b2:	4b15      	ldr	r3, [pc, #84]	; (80608 <prvCopyDataToQueue+0x7c>)
   805b4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   805b6:	68a3      	ldr	r3, [r4, #8]
   805b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   805ba:	4413      	add	r3, r2
   805bc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   805be:	6862      	ldr	r2, [r4, #4]
   805c0:	4293      	cmp	r3, r2
   805c2:	d319      	bcc.n	805f8 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   805c4:	6823      	ldr	r3, [r4, #0]
   805c6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   805c8:	2000      	movs	r0, #0
   805ca:	e7ed      	b.n	805a8 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   805cc:	68c0      	ldr	r0, [r0, #12]
   805ce:	4b0e      	ldr	r3, [pc, #56]	; (80608 <prvCopyDataToQueue+0x7c>)
   805d0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   805d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   805d4:	425b      	negs	r3, r3
   805d6:	68e2      	ldr	r2, [r4, #12]
   805d8:	441a      	add	r2, r3
   805da:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   805dc:	6821      	ldr	r1, [r4, #0]
   805de:	428a      	cmp	r2, r1
   805e0:	d202      	bcs.n	805e8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   805e2:	6862      	ldr	r2, [r4, #4]
   805e4:	4413      	add	r3, r2
   805e6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   805e8:	2e02      	cmp	r6, #2
   805ea:	d107      	bne.n	805fc <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   805ec:	b145      	cbz	r5, 80600 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
   805ee:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   805f0:	2000      	movs	r0, #0
   805f2:	e7d9      	b.n	805a8 <prvCopyDataToQueue+0x1c>
   805f4:	2000      	movs	r0, #0
   805f6:	e7d7      	b.n	805a8 <prvCopyDataToQueue+0x1c>
   805f8:	2000      	movs	r0, #0
   805fa:	e7d5      	b.n	805a8 <prvCopyDataToQueue+0x1c>
   805fc:	2000      	movs	r0, #0
   805fe:	e7d3      	b.n	805a8 <prvCopyDataToQueue+0x1c>
   80600:	2000      	movs	r0, #0
   80602:	e7d1      	b.n	805a8 <prvCopyDataToQueue+0x1c>
   80604:	000815b1 	.word	0x000815b1
   80608:	00082251 	.word	0x00082251

0008060c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   8060c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   8060e:	b172      	cbz	r2, 8062e <prvCopyDataFromQueue+0x22>
{
   80610:	b510      	push	{r4, lr}
   80612:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   80614:	68c4      	ldr	r4, [r0, #12]
   80616:	4414      	add	r4, r2
   80618:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   8061a:	6840      	ldr	r0, [r0, #4]
   8061c:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   8061e:	bf24      	itt	cs
   80620:	6818      	ldrcs	r0, [r3, #0]
   80622:	60d8      	strcs	r0, [r3, #12]
   80624:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   80626:	68d9      	ldr	r1, [r3, #12]
   80628:	4b01      	ldr	r3, [pc, #4]	; (80630 <prvCopyDataFromQueue+0x24>)
   8062a:	4798      	blx	r3
   8062c:	bd10      	pop	{r4, pc}
   8062e:	4770      	bx	lr
   80630:	00082251 	.word	0x00082251

00080634 <prvUnlockQueue>:
{
   80634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80638:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   8063a:	4b20      	ldr	r3, [pc, #128]	; (806bc <prvUnlockQueue+0x88>)
   8063c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   8063e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   80642:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80644:	2c00      	cmp	r4, #0
   80646:	dd12      	ble.n	8066e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80648:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   8064a:	b183      	cbz	r3, 8066e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8064c:	f105 0724 	add.w	r7, r5, #36	; 0x24
   80650:	4e1b      	ldr	r6, [pc, #108]	; (806c0 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   80652:	f8df 8074 	ldr.w	r8, [pc, #116]	; 806c8 <prvUnlockQueue+0x94>
   80656:	e004      	b.n	80662 <prvUnlockQueue+0x2e>
   80658:	3c01      	subs	r4, #1
   8065a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   8065c:	b13c      	cbz	r4, 8066e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8065e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80660:	b12b      	cbz	r3, 8066e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80662:	4638      	mov	r0, r7
   80664:	47b0      	blx	r6
   80666:	2800      	cmp	r0, #0
   80668:	d0f6      	beq.n	80658 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   8066a:	47c0      	blx	r8
   8066c:	e7f4      	b.n	80658 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   8066e:	23ff      	movs	r3, #255	; 0xff
   80670:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   80674:	4b13      	ldr	r3, [pc, #76]	; (806c4 <prvUnlockQueue+0x90>)
   80676:	4798      	blx	r3
	taskENTER_CRITICAL();
   80678:	4b10      	ldr	r3, [pc, #64]	; (806bc <prvUnlockQueue+0x88>)
   8067a:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   8067c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   80680:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   80682:	2c00      	cmp	r4, #0
   80684:	dd12      	ble.n	806ac <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80686:	692b      	ldr	r3, [r5, #16]
   80688:	b183      	cbz	r3, 806ac <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8068a:	f105 0710 	add.w	r7, r5, #16
   8068e:	4e0c      	ldr	r6, [pc, #48]	; (806c0 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   80690:	f8df 8034 	ldr.w	r8, [pc, #52]	; 806c8 <prvUnlockQueue+0x94>
   80694:	e004      	b.n	806a0 <prvUnlockQueue+0x6c>
   80696:	3c01      	subs	r4, #1
   80698:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   8069a:	b13c      	cbz	r4, 806ac <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8069c:	692b      	ldr	r3, [r5, #16]
   8069e:	b12b      	cbz	r3, 806ac <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   806a0:	4638      	mov	r0, r7
   806a2:	47b0      	blx	r6
   806a4:	2800      	cmp	r0, #0
   806a6:	d0f6      	beq.n	80696 <prvUnlockQueue+0x62>
					vTaskMissedYield();
   806a8:	47c0      	blx	r8
   806aa:	e7f4      	b.n	80696 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   806ac:	23ff      	movs	r3, #255	; 0xff
   806ae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   806b2:	4b04      	ldr	r3, [pc, #16]	; (806c4 <prvUnlockQueue+0x90>)
   806b4:	4798      	blx	r3
   806b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806ba:	bf00      	nop
   806bc:	000802a9 	.word	0x000802a9
   806c0:	00081451 	.word	0x00081451
   806c4:	000802ed 	.word	0x000802ed
   806c8:	00081585 	.word	0x00081585

000806cc <xQueueGenericReset>:
{
   806cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   806ce:	b330      	cbz	r0, 8071e <xQueueGenericReset+0x52>
   806d0:	4604      	mov	r4, r0
   806d2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
   806d4:	4b1c      	ldr	r3, [pc, #112]	; (80748 <xQueueGenericReset+0x7c>)
   806d6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   806d8:	6822      	ldr	r2, [r4, #0]
   806da:	6c21      	ldr	r1, [r4, #64]	; 0x40
   806dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   806de:	fb03 f301 	mul.w	r3, r3, r1
   806e2:	18d0      	adds	r0, r2, r3
   806e4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   806e6:	2000      	movs	r0, #0
   806e8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   806ea:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   806ec:	1a5b      	subs	r3, r3, r1
   806ee:	4413      	add	r3, r2
   806f0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   806f2:	23ff      	movs	r3, #255	; 0xff
   806f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   806f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   806fc:	b9c5      	cbnz	r5, 80730 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   806fe:	6923      	ldr	r3, [r4, #16]
   80700:	b1eb      	cbz	r3, 8073e <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80702:	f104 0010 	add.w	r0, r4, #16
   80706:	4b11      	ldr	r3, [pc, #68]	; (8074c <xQueueGenericReset+0x80>)
   80708:	4798      	blx	r3
   8070a:	b1c0      	cbz	r0, 8073e <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
   8070c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80710:	4b0f      	ldr	r3, [pc, #60]	; (80750 <xQueueGenericReset+0x84>)
   80712:	601a      	str	r2, [r3, #0]
   80714:	f3bf 8f4f 	dsb	sy
   80718:	f3bf 8f6f 	isb	sy
   8071c:	e00f      	b.n	8073e <xQueueGenericReset+0x72>
   8071e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80722:	f383 8811 	msr	BASEPRI, r3
   80726:	f3bf 8f6f 	isb	sy
   8072a:	f3bf 8f4f 	dsb	sy
   8072e:	e7fe      	b.n	8072e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80730:	f104 0010 	add.w	r0, r4, #16
   80734:	4d07      	ldr	r5, [pc, #28]	; (80754 <xQueueGenericReset+0x88>)
   80736:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80738:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8073c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
   8073e:	4b06      	ldr	r3, [pc, #24]	; (80758 <xQueueGenericReset+0x8c>)
   80740:	4798      	blx	r3
}
   80742:	2001      	movs	r0, #1
   80744:	bd38      	pop	{r3, r4, r5, pc}
   80746:	bf00      	nop
   80748:	000802a9 	.word	0x000802a9
   8074c:	00081451 	.word	0x00081451
   80750:	e000ed04 	.word	0xe000ed04
   80754:	00080161 	.word	0x00080161
   80758:	000802ed 	.word	0x000802ed

0008075c <xQueueGenericCreate>:
	{
   8075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   8075e:	b940      	cbnz	r0, 80772 <xQueueGenericCreate+0x16>
   80760:	f04f 0340 	mov.w	r3, #64	; 0x40
   80764:	f383 8811 	msr	BASEPRI, r3
   80768:	f3bf 8f6f 	isb	sy
   8076c:	f3bf 8f4f 	dsb	sy
   80770:	e7fe      	b.n	80770 <xQueueGenericCreate+0x14>
   80772:	4606      	mov	r6, r0
   80774:	4617      	mov	r7, r2
   80776:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80778:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   8077c:	3050      	adds	r0, #80	; 0x50
   8077e:	4b0a      	ldr	r3, [pc, #40]	; (807a8 <xQueueGenericCreate+0x4c>)
   80780:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80782:	4604      	mov	r4, r0
   80784:	b168      	cbz	r0, 807a2 <xQueueGenericCreate+0x46>
	if( uxItemSize == ( UBaseType_t ) 0 )
   80786:	b11d      	cbz	r5, 80790 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   80788:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   8078c:	6003      	str	r3, [r0, #0]
   8078e:	e000      	b.n	80792 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   80790:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   80792:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   80794:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   80796:	2101      	movs	r1, #1
   80798:	4620      	mov	r0, r4
   8079a:	4b04      	ldr	r3, [pc, #16]	; (807ac <xQueueGenericCreate+0x50>)
   8079c:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   8079e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   807a2:	4620      	mov	r0, r4
   807a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807a6:	bf00      	nop
   807a8:	000804ed 	.word	0x000804ed
   807ac:	000806cd 	.word	0x000806cd

000807b0 <xQueueGenericSend>:
{
   807b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807b4:	b085      	sub	sp, #20
   807b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   807b8:	b198      	cbz	r0, 807e2 <xQueueGenericSend+0x32>
   807ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   807bc:	b1d1      	cbz	r1, 807f4 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   807be:	2b02      	cmp	r3, #2
   807c0:	d024      	beq.n	8080c <xQueueGenericSend+0x5c>
   807c2:	461e      	mov	r6, r3
   807c4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   807c6:	4b5b      	ldr	r3, [pc, #364]	; (80934 <xQueueGenericSend+0x184>)
   807c8:	4798      	blx	r3
   807ca:	bb58      	cbnz	r0, 80824 <xQueueGenericSend+0x74>
   807cc:	9b01      	ldr	r3, [sp, #4]
   807ce:	b38b      	cbz	r3, 80834 <xQueueGenericSend+0x84>
   807d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   807d4:	f383 8811 	msr	BASEPRI, r3
   807d8:	f3bf 8f6f 	isb	sy
   807dc:	f3bf 8f4f 	dsb	sy
   807e0:	e7fe      	b.n	807e0 <xQueueGenericSend+0x30>
   807e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   807e6:	f383 8811 	msr	BASEPRI, r3
   807ea:	f3bf 8f6f 	isb	sy
   807ee:	f3bf 8f4f 	dsb	sy
   807f2:	e7fe      	b.n	807f2 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   807f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   807f6:	2a00      	cmp	r2, #0
   807f8:	d0e1      	beq.n	807be <xQueueGenericSend+0xe>
   807fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   807fe:	f383 8811 	msr	BASEPRI, r3
   80802:	f3bf 8f6f 	isb	sy
   80806:	f3bf 8f4f 	dsb	sy
   8080a:	e7fe      	b.n	8080a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8080c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   8080e:	2a01      	cmp	r2, #1
   80810:	d0d7      	beq.n	807c2 <xQueueGenericSend+0x12>
   80812:	f04f 0340 	mov.w	r3, #64	; 0x40
   80816:	f383 8811 	msr	BASEPRI, r3
   8081a:	f3bf 8f6f 	isb	sy
   8081e:	f3bf 8f4f 	dsb	sy
   80822:	e7fe      	b.n	80822 <xQueueGenericSend+0x72>
   80824:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   80826:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8095c <xQueueGenericSend+0x1ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
   8082a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80960 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   8082e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80940 <xQueueGenericSend+0x190>
   80832:	e030      	b.n	80896 <xQueueGenericSend+0xe6>
   80834:	2500      	movs	r5, #0
   80836:	e7f6      	b.n	80826 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80838:	4632      	mov	r2, r6
   8083a:	4639      	mov	r1, r7
   8083c:	4620      	mov	r0, r4
   8083e:	4b3e      	ldr	r3, [pc, #248]	; (80938 <xQueueGenericSend+0x188>)
   80840:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80842:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80844:	b193      	cbz	r3, 8086c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80846:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8084a:	4b3c      	ldr	r3, [pc, #240]	; (8093c <xQueueGenericSend+0x18c>)
   8084c:	4798      	blx	r3
   8084e:	b138      	cbz	r0, 80860 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
   80850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80854:	4b3a      	ldr	r3, [pc, #232]	; (80940 <xQueueGenericSend+0x190>)
   80856:	601a      	str	r2, [r3, #0]
   80858:	f3bf 8f4f 	dsb	sy
   8085c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80860:	4b38      	ldr	r3, [pc, #224]	; (80944 <xQueueGenericSend+0x194>)
   80862:	4798      	blx	r3
				return pdPASS;
   80864:	2001      	movs	r0, #1
}
   80866:	b005      	add	sp, #20
   80868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if( xYieldRequired != pdFALSE )
   8086c:	2800      	cmp	r0, #0
   8086e:	d0f7      	beq.n	80860 <xQueueGenericSend+0xb0>
						queueYIELD_IF_USING_PREEMPTION();
   80870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80874:	4b32      	ldr	r3, [pc, #200]	; (80940 <xQueueGenericSend+0x190>)
   80876:	601a      	str	r2, [r3, #0]
   80878:	f3bf 8f4f 	dsb	sy
   8087c:	f3bf 8f6f 	isb	sy
   80880:	e7ee      	b.n	80860 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
   80882:	4b30      	ldr	r3, [pc, #192]	; (80944 <xQueueGenericSend+0x194>)
   80884:	4798      	blx	r3
					return errQUEUE_FULL;
   80886:	2000      	movs	r0, #0
   80888:	e7ed      	b.n	80866 <xQueueGenericSend+0xb6>
				prvUnlockQueue( pxQueue );
   8088a:	4620      	mov	r0, r4
   8088c:	4b2e      	ldr	r3, [pc, #184]	; (80948 <xQueueGenericSend+0x198>)
   8088e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80890:	4b2e      	ldr	r3, [pc, #184]	; (8094c <xQueueGenericSend+0x19c>)
   80892:	4798      	blx	r3
   80894:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   80896:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80898:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8089a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8089c:	429a      	cmp	r2, r3
   8089e:	d3cb      	bcc.n	80838 <xQueueGenericSend+0x88>
   808a0:	2e02      	cmp	r6, #2
   808a2:	d0c9      	beq.n	80838 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
   808a4:	9b01      	ldr	r3, [sp, #4]
   808a6:	2b00      	cmp	r3, #0
   808a8:	d0eb      	beq.n	80882 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   808aa:	b90d      	cbnz	r5, 808b0 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
   808ac:	a802      	add	r0, sp, #8
   808ae:	47d0      	blx	sl
		taskEXIT_CRITICAL();
   808b0:	4b24      	ldr	r3, [pc, #144]	; (80944 <xQueueGenericSend+0x194>)
   808b2:	4798      	blx	r3
		vTaskSuspendAll();
   808b4:	4b26      	ldr	r3, [pc, #152]	; (80950 <xQueueGenericSend+0x1a0>)
   808b6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   808b8:	47c0      	blx	r8
   808ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   808be:	b25b      	sxtb	r3, r3
   808c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   808c4:	bf04      	itt	eq
   808c6:	2300      	moveq	r3, #0
   808c8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   808cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   808d0:	b25b      	sxtb	r3, r3
   808d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   808d6:	bf04      	itt	eq
   808d8:	2300      	moveq	r3, #0
   808da:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   808de:	4b19      	ldr	r3, [pc, #100]	; (80944 <xQueueGenericSend+0x194>)
   808e0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   808e2:	a901      	add	r1, sp, #4
   808e4:	a802      	add	r0, sp, #8
   808e6:	4b1b      	ldr	r3, [pc, #108]	; (80954 <xQueueGenericSend+0x1a4>)
   808e8:	4798      	blx	r3
   808ea:	b9e0      	cbnz	r0, 80926 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   808ec:	47c0      	blx	r8
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   808ee:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   808f2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   808f4:	4b13      	ldr	r3, [pc, #76]	; (80944 <xQueueGenericSend+0x194>)
   808f6:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   808f8:	45ab      	cmp	fp, r5
   808fa:	d1c6      	bne.n	8088a <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   808fc:	9901      	ldr	r1, [sp, #4]
   808fe:	f104 0010 	add.w	r0, r4, #16
   80902:	4b15      	ldr	r3, [pc, #84]	; (80958 <xQueueGenericSend+0x1a8>)
   80904:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80906:	4620      	mov	r0, r4
   80908:	4b0f      	ldr	r3, [pc, #60]	; (80948 <xQueueGenericSend+0x198>)
   8090a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8090c:	4b0f      	ldr	r3, [pc, #60]	; (8094c <xQueueGenericSend+0x19c>)
   8090e:	4798      	blx	r3
   80910:	2800      	cmp	r0, #0
   80912:	d1bf      	bne.n	80894 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
   80914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80918:	f8c9 3000 	str.w	r3, [r9]
   8091c:	f3bf 8f4f 	dsb	sy
   80920:	f3bf 8f6f 	isb	sy
   80924:	e7b6      	b.n	80894 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
   80926:	4620      	mov	r0, r4
   80928:	4b07      	ldr	r3, [pc, #28]	; (80948 <xQueueGenericSend+0x198>)
   8092a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8092c:	4b07      	ldr	r3, [pc, #28]	; (8094c <xQueueGenericSend+0x19c>)
   8092e:	4798      	blx	r3
			return errQUEUE_FULL;
   80930:	2000      	movs	r0, #0
   80932:	e798      	b.n	80866 <xQueueGenericSend+0xb6>
   80934:	00081591 	.word	0x00081591
   80938:	0008058d 	.word	0x0008058d
   8093c:	00081451 	.word	0x00081451
   80940:	e000ed04 	.word	0xe000ed04
   80944:	000802ed 	.word	0x000802ed
   80948:	00080635 	.word	0x00080635
   8094c:	00081181 	.word	0x00081181
   80950:	00081031 	.word	0x00081031
   80954:	000814f9 	.word	0x000814f9
   80958:	000813d5 	.word	0x000813d5
   8095c:	000802a9 	.word	0x000802a9
   80960:	000814e1 	.word	0x000814e1

00080964 <xQueueGenericSendFromISR>:
{
   80964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
   80968:	2800      	cmp	r0, #0
   8096a:	d037      	beq.n	809dc <xQueueGenericSendFromISR+0x78>
   8096c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8096e:	2900      	cmp	r1, #0
   80970:	d03d      	beq.n	809ee <xQueueGenericSendFromISR+0x8a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80972:	2b02      	cmp	r3, #2
   80974:	d047      	beq.n	80a06 <xQueueGenericSendFromISR+0xa2>
   80976:	461f      	mov	r7, r3
   80978:	4690      	mov	r8, r2
   8097a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8097c:	4b2f      	ldr	r3, [pc, #188]	; (80a3c <xQueueGenericSendFromISR+0xd8>)
   8097e:	4798      	blx	r3
	__asm volatile
   80980:	f3ef 8611 	mrs	r6, BASEPRI
   80984:	f04f 0340 	mov.w	r3, #64	; 0x40
   80988:	f383 8811 	msr	BASEPRI, r3
   8098c:	f3bf 8f6f 	isb	sy
   80990:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80998:	429a      	cmp	r2, r3
   8099a:	d301      	bcc.n	809a0 <xQueueGenericSendFromISR+0x3c>
   8099c:	2f02      	cmp	r7, #2
   8099e:	d144      	bne.n	80a2a <xQueueGenericSendFromISR+0xc6>
			const int8_t cTxLock = pxQueue->cTxLock;
   809a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   809a4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   809a6:	463a      	mov	r2, r7
   809a8:	4649      	mov	r1, r9
   809aa:	4620      	mov	r0, r4
   809ac:	4b24      	ldr	r3, [pc, #144]	; (80a40 <xQueueGenericSendFromISR+0xdc>)
   809ae:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   809b0:	f1b5 3fff 	cmp.w	r5, #4294967295
   809b4:	d133      	bne.n	80a1e <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   809b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   809b8:	2b00      	cmp	r3, #0
   809ba:	d038      	beq.n	80a2e <xQueueGenericSendFromISR+0xca>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   809bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   809c0:	4b20      	ldr	r3, [pc, #128]	; (80a44 <xQueueGenericSendFromISR+0xe0>)
   809c2:	4798      	blx	r3
   809c4:	2800      	cmp	r0, #0
   809c6:	d034      	beq.n	80a32 <xQueueGenericSendFromISR+0xce>
							if( pxHigherPriorityTaskWoken != NULL )
   809c8:	f1b8 0f00 	cmp.w	r8, #0
   809cc:	d033      	beq.n	80a36 <xQueueGenericSendFromISR+0xd2>
								*pxHigherPriorityTaskWoken = pdTRUE;
   809ce:	2001      	movs	r0, #1
   809d0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
   809d4:	f386 8811 	msr	BASEPRI, r6
}
   809d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
   809dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   809e0:	f383 8811 	msr	BASEPRI, r3
   809e4:	f3bf 8f6f 	isb	sy
   809e8:	f3bf 8f4f 	dsb	sy
   809ec:	e7fe      	b.n	809ec <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   809ee:	6c00      	ldr	r0, [r0, #64]	; 0x40
   809f0:	2800      	cmp	r0, #0
   809f2:	d0be      	beq.n	80972 <xQueueGenericSendFromISR+0xe>
   809f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   809f8:	f383 8811 	msr	BASEPRI, r3
   809fc:	f3bf 8f6f 	isb	sy
   80a00:	f3bf 8f4f 	dsb	sy
   80a04:	e7fe      	b.n	80a04 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80a06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80a08:	2801      	cmp	r0, #1
   80a0a:	d0b4      	beq.n	80976 <xQueueGenericSendFromISR+0x12>
   80a0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a10:	f383 8811 	msr	BASEPRI, r3
   80a14:	f3bf 8f6f 	isb	sy
   80a18:	f3bf 8f4f 	dsb	sy
   80a1c:	e7fe      	b.n	80a1c <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   80a1e:	1c6b      	adds	r3, r5, #1
   80a20:	b25b      	sxtb	r3, r3
   80a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   80a26:	2001      	movs	r0, #1
   80a28:	e7d4      	b.n	809d4 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
   80a2a:	2000      	movs	r0, #0
   80a2c:	e7d2      	b.n	809d4 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
   80a2e:	2001      	movs	r0, #1
   80a30:	e7d0      	b.n	809d4 <xQueueGenericSendFromISR+0x70>
   80a32:	2001      	movs	r0, #1
   80a34:	e7ce      	b.n	809d4 <xQueueGenericSendFromISR+0x70>
   80a36:	2001      	movs	r0, #1
   80a38:	e7cc      	b.n	809d4 <xQueueGenericSendFromISR+0x70>
   80a3a:	bf00      	nop
   80a3c:	00080491 	.word	0x00080491
   80a40:	0008058d 	.word	0x0008058d
   80a44:	00081451 	.word	0x00081451

00080a48 <xQueueReceive>:
{
   80a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80a4c:	b084      	sub	sp, #16
   80a4e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   80a50:	b180      	cbz	r0, 80a74 <xQueueReceive+0x2c>
   80a52:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80a54:	b1b9      	cbz	r1, 80a86 <xQueueReceive+0x3e>
   80a56:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80a58:	4b50      	ldr	r3, [pc, #320]	; (80b9c <xQueueReceive+0x154>)
   80a5a:	4798      	blx	r3
   80a5c:	b9f8      	cbnz	r0, 80a9e <xQueueReceive+0x56>
   80a5e:	9b01      	ldr	r3, [sp, #4]
   80a60:	b32b      	cbz	r3, 80aae <xQueueReceive+0x66>
   80a62:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a66:	f383 8811 	msr	BASEPRI, r3
   80a6a:	f3bf 8f6f 	isb	sy
   80a6e:	f3bf 8f4f 	dsb	sy
   80a72:	e7fe      	b.n	80a72 <xQueueReceive+0x2a>
   80a74:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a78:	f383 8811 	msr	BASEPRI, r3
   80a7c:	f3bf 8f6f 	isb	sy
   80a80:	f3bf 8f4f 	dsb	sy
   80a84:	e7fe      	b.n	80a84 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80a86:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a88:	2b00      	cmp	r3, #0
   80a8a:	d0e4      	beq.n	80a56 <xQueueReceive+0xe>
   80a8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a90:	f383 8811 	msr	BASEPRI, r3
   80a94:	f3bf 8f6f 	isb	sy
   80a98:	f3bf 8f4f 	dsb	sy
   80a9c:	e7fe      	b.n	80a9c <xQueueReceive+0x54>
   80a9e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80aa0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80bc8 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80aa4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80bcc <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
   80aa8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80ba8 <xQueueReceive+0x160>
   80aac:	e029      	b.n	80b02 <xQueueReceive+0xba>
   80aae:	2700      	movs	r7, #0
   80ab0:	e7f6      	b.n	80aa0 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80ab2:	4631      	mov	r1, r6
   80ab4:	4620      	mov	r0, r4
   80ab6:	4b3a      	ldr	r3, [pc, #232]	; (80ba0 <xQueueReceive+0x158>)
   80ab8:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   80aba:	3d01      	subs	r5, #1
   80abc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80abe:	6923      	ldr	r3, [r4, #16]
   80ac0:	b163      	cbz	r3, 80adc <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80ac2:	f104 0010 	add.w	r0, r4, #16
   80ac6:	4b37      	ldr	r3, [pc, #220]	; (80ba4 <xQueueReceive+0x15c>)
   80ac8:	4798      	blx	r3
   80aca:	b138      	cbz	r0, 80adc <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
   80acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80ad0:	4b35      	ldr	r3, [pc, #212]	; (80ba8 <xQueueReceive+0x160>)
   80ad2:	601a      	str	r2, [r3, #0]
   80ad4:	f3bf 8f4f 	dsb	sy
   80ad8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80adc:	4b33      	ldr	r3, [pc, #204]	; (80bac <xQueueReceive+0x164>)
   80ade:	4798      	blx	r3
				return pdPASS;
   80ae0:	2001      	movs	r0, #1
}
   80ae2:	b004      	add	sp, #16
   80ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
   80ae8:	4b30      	ldr	r3, [pc, #192]	; (80bac <xQueueReceive+0x164>)
   80aea:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80aec:	2000      	movs	r0, #0
   80aee:	e7f8      	b.n	80ae2 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80af0:	a802      	add	r0, sp, #8
   80af2:	47d0      	blx	sl
   80af4:	e00e      	b.n	80b14 <xQueueReceive+0xcc>
				prvUnlockQueue( pxQueue );
   80af6:	4620      	mov	r0, r4
   80af8:	4b2d      	ldr	r3, [pc, #180]	; (80bb0 <xQueueReceive+0x168>)
   80afa:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80afc:	4b2d      	ldr	r3, [pc, #180]	; (80bb4 <xQueueReceive+0x16c>)
   80afe:	4798      	blx	r3
   80b00:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80b02:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80b04:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   80b06:	2d00      	cmp	r5, #0
   80b08:	d1d3      	bne.n	80ab2 <xQueueReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
   80b0a:	9b01      	ldr	r3, [sp, #4]
   80b0c:	2b00      	cmp	r3, #0
   80b0e:	d0eb      	beq.n	80ae8 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   80b10:	2f00      	cmp	r7, #0
   80b12:	d0ed      	beq.n	80af0 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
   80b14:	4b25      	ldr	r3, [pc, #148]	; (80bac <xQueueReceive+0x164>)
   80b16:	4798      	blx	r3
		vTaskSuspendAll();
   80b18:	4b27      	ldr	r3, [pc, #156]	; (80bb8 <xQueueReceive+0x170>)
   80b1a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80b1c:	47c0      	blx	r8
   80b1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80b22:	b25b      	sxtb	r3, r3
   80b24:	f1b3 3fff 	cmp.w	r3, #4294967295
   80b28:	bf04      	itt	eq
   80b2a:	2300      	moveq	r3, #0
   80b2c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80b30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80b34:	b25b      	sxtb	r3, r3
   80b36:	f1b3 3fff 	cmp.w	r3, #4294967295
   80b3a:	bf04      	itt	eq
   80b3c:	2300      	moveq	r3, #0
   80b3e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80b42:	4b1a      	ldr	r3, [pc, #104]	; (80bac <xQueueReceive+0x164>)
   80b44:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80b46:	a901      	add	r1, sp, #4
   80b48:	a802      	add	r0, sp, #8
   80b4a:	4b1c      	ldr	r3, [pc, #112]	; (80bbc <xQueueReceive+0x174>)
   80b4c:	4798      	blx	r3
   80b4e:	b9c8      	cbnz	r0, 80b84 <xQueueReceive+0x13c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80b50:	4620      	mov	r0, r4
   80b52:	4b1b      	ldr	r3, [pc, #108]	; (80bc0 <xQueueReceive+0x178>)
   80b54:	4798      	blx	r3
   80b56:	2800      	cmp	r0, #0
   80b58:	d0cd      	beq.n	80af6 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80b5a:	9901      	ldr	r1, [sp, #4]
   80b5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b60:	4b18      	ldr	r3, [pc, #96]	; (80bc4 <xQueueReceive+0x17c>)
   80b62:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80b64:	4620      	mov	r0, r4
   80b66:	4b12      	ldr	r3, [pc, #72]	; (80bb0 <xQueueReceive+0x168>)
   80b68:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80b6a:	4b12      	ldr	r3, [pc, #72]	; (80bb4 <xQueueReceive+0x16c>)
   80b6c:	4798      	blx	r3
   80b6e:	2800      	cmp	r0, #0
   80b70:	d1c6      	bne.n	80b00 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
   80b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80b76:	f8c9 3000 	str.w	r3, [r9]
   80b7a:	f3bf 8f4f 	dsb	sy
   80b7e:	f3bf 8f6f 	isb	sy
   80b82:	e7bd      	b.n	80b00 <xQueueReceive+0xb8>
			prvUnlockQueue( pxQueue );
   80b84:	4620      	mov	r0, r4
   80b86:	4b0a      	ldr	r3, [pc, #40]	; (80bb0 <xQueueReceive+0x168>)
   80b88:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80b8a:	4b0a      	ldr	r3, [pc, #40]	; (80bb4 <xQueueReceive+0x16c>)
   80b8c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80b8e:	4620      	mov	r0, r4
   80b90:	4b0b      	ldr	r3, [pc, #44]	; (80bc0 <xQueueReceive+0x178>)
   80b92:	4798      	blx	r3
   80b94:	2800      	cmp	r0, #0
   80b96:	d0b3      	beq.n	80b00 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
   80b98:	2000      	movs	r0, #0
   80b9a:	e7a2      	b.n	80ae2 <xQueueReceive+0x9a>
   80b9c:	00081591 	.word	0x00081591
   80ba0:	0008060d 	.word	0x0008060d
   80ba4:	00081451 	.word	0x00081451
   80ba8:	e000ed04 	.word	0xe000ed04
   80bac:	000802ed 	.word	0x000802ed
   80bb0:	00080635 	.word	0x00080635
   80bb4:	00081181 	.word	0x00081181
   80bb8:	00081031 	.word	0x00081031
   80bbc:	000814f9 	.word	0x000814f9
   80bc0:	0008056d 	.word	0x0008056d
   80bc4:	000813d5 	.word	0x000813d5
   80bc8:	000802a9 	.word	0x000802a9
   80bcc:	000814e1 	.word	0x000814e1

00080bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   80bd0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   80bd2:	4b0a      	ldr	r3, [pc, #40]	; (80bfc <vQueueAddToRegistry+0x2c>)
   80bd4:	681b      	ldr	r3, [r3, #0]
   80bd6:	b14b      	cbz	r3, 80bec <vQueueAddToRegistry+0x1c>
   80bd8:	2301      	movs	r3, #1
   80bda:	4c08      	ldr	r4, [pc, #32]	; (80bfc <vQueueAddToRegistry+0x2c>)
   80bdc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   80be0:	b12a      	cbz	r2, 80bee <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   80be2:	3301      	adds	r3, #1
   80be4:	2b08      	cmp	r3, #8
   80be6:	d1f9      	bne.n	80bdc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   80be8:	bc10      	pop	{r4}
   80bea:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   80bec:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   80bee:	4a03      	ldr	r2, [pc, #12]	; (80bfc <vQueueAddToRegistry+0x2c>)
   80bf0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   80bf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   80bf8:	6058      	str	r0, [r3, #4]
				break;
   80bfa:	e7f5      	b.n	80be8 <vQueueAddToRegistry+0x18>
   80bfc:	2007bf40 	.word	0x2007bf40

00080c00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   80c00:	b570      	push	{r4, r5, r6, lr}
   80c02:	4604      	mov	r4, r0
   80c04:	460d      	mov	r5, r1
   80c06:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80c08:	4b11      	ldr	r3, [pc, #68]	; (80c50 <vQueueWaitForMessageRestricted+0x50>)
   80c0a:	4798      	blx	r3
   80c0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80c10:	b25b      	sxtb	r3, r3
   80c12:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c16:	bf04      	itt	eq
   80c18:	2300      	moveq	r3, #0
   80c1a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80c1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80c22:	b25b      	sxtb	r3, r3
   80c24:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c28:	bf04      	itt	eq
   80c2a:	2300      	moveq	r3, #0
   80c2c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80c30:	4b08      	ldr	r3, [pc, #32]	; (80c54 <vQueueWaitForMessageRestricted+0x54>)
   80c32:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   80c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80c36:	b11b      	cbz	r3, 80c40 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   80c38:	4620      	mov	r0, r4
   80c3a:	4b07      	ldr	r3, [pc, #28]	; (80c58 <vQueueWaitForMessageRestricted+0x58>)
   80c3c:	4798      	blx	r3
   80c3e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   80c40:	4632      	mov	r2, r6
   80c42:	4629      	mov	r1, r5
   80c44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c48:	4b04      	ldr	r3, [pc, #16]	; (80c5c <vQueueWaitForMessageRestricted+0x5c>)
   80c4a:	4798      	blx	r3
   80c4c:	e7f4      	b.n	80c38 <vQueueWaitForMessageRestricted+0x38>
   80c4e:	bf00      	nop
   80c50:	000802a9 	.word	0x000802a9
   80c54:	000802ed 	.word	0x000802ed
   80c58:	00080635 	.word	0x00080635
   80c5c:	0008140d 	.word	0x0008140d

00080c60 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80c60:	4b08      	ldr	r3, [pc, #32]	; (80c84 <prvResetNextTaskUnblockTime+0x24>)
   80c62:	681b      	ldr	r3, [r3, #0]
   80c64:	681b      	ldr	r3, [r3, #0]
   80c66:	b13b      	cbz	r3, 80c78 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80c68:	4b06      	ldr	r3, [pc, #24]	; (80c84 <prvResetNextTaskUnblockTime+0x24>)
   80c6a:	681b      	ldr	r3, [r3, #0]
   80c6c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   80c6e:	68db      	ldr	r3, [r3, #12]
   80c70:	685a      	ldr	r2, [r3, #4]
   80c72:	4b05      	ldr	r3, [pc, #20]	; (80c88 <prvResetNextTaskUnblockTime+0x28>)
   80c74:	601a      	str	r2, [r3, #0]
   80c76:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   80c78:	f04f 32ff 	mov.w	r2, #4294967295
   80c7c:	4b02      	ldr	r3, [pc, #8]	; (80c88 <prvResetNextTaskUnblockTime+0x28>)
   80c7e:	601a      	str	r2, [r3, #0]
   80c80:	4770      	bx	lr
   80c82:	bf00      	nop
   80c84:	2007bd94 	.word	0x2007bd94
   80c88:	2007be44 	.word	0x2007be44

00080c8c <prvIdleTask>:
{
   80c8c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   80c8e:	4d16      	ldr	r5, [pc, #88]	; (80ce8 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   80c90:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80d00 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   80c94:	4f15      	ldr	r7, [pc, #84]	; (80cec <prvIdleTask+0x60>)
				taskYIELD();
   80c96:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80d04 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   80c9a:	682b      	ldr	r3, [r5, #0]
   80c9c:	b1bb      	cbz	r3, 80cce <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   80c9e:	4e14      	ldr	r6, [pc, #80]	; (80cf0 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   80ca0:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   80ca2:	68fb      	ldr	r3, [r7, #12]
   80ca4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   80ca6:	1d20      	adds	r0, r4, #4
   80ca8:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   80caa:	4a12      	ldr	r2, [pc, #72]	; (80cf4 <prvIdleTask+0x68>)
   80cac:	6813      	ldr	r3, [r2, #0]
   80cae:	3b01      	subs	r3, #1
   80cb0:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   80cb2:	682b      	ldr	r3, [r5, #0]
   80cb4:	3b01      	subs	r3, #1
   80cb6:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   80cb8:	4b0f      	ldr	r3, [pc, #60]	; (80cf8 <prvIdleTask+0x6c>)
   80cba:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   80cbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   80cbe:	f8df a048 	ldr.w	sl, [pc, #72]	; 80d08 <prvIdleTask+0x7c>
   80cc2:	47d0      	blx	sl
			vPortFree( pxTCB );
   80cc4:	4620      	mov	r0, r4
   80cc6:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   80cc8:	682b      	ldr	r3, [r5, #0]
   80cca:	2b00      	cmp	r3, #0
   80ccc:	d1e8      	bne.n	80ca0 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   80cce:	4b0b      	ldr	r3, [pc, #44]	; (80cfc <prvIdleTask+0x70>)
   80cd0:	681b      	ldr	r3, [r3, #0]
   80cd2:	2b01      	cmp	r3, #1
   80cd4:	d9e1      	bls.n	80c9a <prvIdleTask+0xe>
				taskYIELD();
   80cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80cda:	f8c9 3000 	str.w	r3, [r9]
   80cde:	f3bf 8f4f 	dsb	sy
   80ce2:	f3bf 8f6f 	isb	sy
   80ce6:	e7d8      	b.n	80c9a <prvIdleTask+0xe>
   80ce8:	2007be04 	.word	0x2007be04
   80cec:	2007be78 	.word	0x2007be78
   80cf0:	000801c9 	.word	0x000801c9
   80cf4:	2007be00 	.word	0x2007be00
   80cf8:	000802ed 	.word	0x000802ed
   80cfc:	2007bd9c 	.word	0x2007bd9c
   80d00:	000802a9 	.word	0x000802a9
   80d04:	e000ed04 	.word	0xe000ed04
   80d08:	00080555 	.word	0x00080555

00080d0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   80d0c:	b570      	push	{r4, r5, r6, lr}
   80d0e:	4604      	mov	r4, r0
   80d10:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   80d12:	4b1d      	ldr	r3, [pc, #116]	; (80d88 <prvAddCurrentTaskToDelayedList+0x7c>)
   80d14:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   80d16:	4b1d      	ldr	r3, [pc, #116]	; (80d8c <prvAddCurrentTaskToDelayedList+0x80>)
   80d18:	6818      	ldr	r0, [r3, #0]
   80d1a:	3004      	adds	r0, #4
   80d1c:	4b1c      	ldr	r3, [pc, #112]	; (80d90 <prvAddCurrentTaskToDelayedList+0x84>)
   80d1e:	4798      	blx	r3
   80d20:	b948      	cbnz	r0, 80d36 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   80d22:	4b1a      	ldr	r3, [pc, #104]	; (80d8c <prvAddCurrentTaskToDelayedList+0x80>)
   80d24:	681a      	ldr	r2, [r3, #0]
   80d26:	491b      	ldr	r1, [pc, #108]	; (80d94 <prvAddCurrentTaskToDelayedList+0x88>)
   80d28:	680b      	ldr	r3, [r1, #0]
   80d2a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   80d2c:	2201      	movs	r2, #1
   80d2e:	4082      	lsls	r2, r0
   80d30:	ea23 0302 	bic.w	r3, r3, r2
   80d34:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   80d36:	f1b4 3fff 	cmp.w	r4, #4294967295
   80d3a:	d013      	beq.n	80d64 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   80d3c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   80d3e:	4b13      	ldr	r3, [pc, #76]	; (80d8c <prvAddCurrentTaskToDelayedList+0x80>)
   80d40:	681b      	ldr	r3, [r3, #0]
   80d42:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   80d44:	42a5      	cmp	r5, r4
   80d46:	d816      	bhi.n	80d76 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   80d48:	4b13      	ldr	r3, [pc, #76]	; (80d98 <prvAddCurrentTaskToDelayedList+0x8c>)
   80d4a:	6818      	ldr	r0, [r3, #0]
   80d4c:	4b0f      	ldr	r3, [pc, #60]	; (80d8c <prvAddCurrentTaskToDelayedList+0x80>)
   80d4e:	6819      	ldr	r1, [r3, #0]
   80d50:	3104      	adds	r1, #4
   80d52:	4b12      	ldr	r3, [pc, #72]	; (80d9c <prvAddCurrentTaskToDelayedList+0x90>)
   80d54:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   80d56:	4b12      	ldr	r3, [pc, #72]	; (80da0 <prvAddCurrentTaskToDelayedList+0x94>)
   80d58:	681b      	ldr	r3, [r3, #0]
   80d5a:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   80d5c:	bf3c      	itt	cc
   80d5e:	4b10      	ldrcc	r3, [pc, #64]	; (80da0 <prvAddCurrentTaskToDelayedList+0x94>)
   80d60:	601c      	strcc	r4, [r3, #0]
   80d62:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   80d64:	2e00      	cmp	r6, #0
   80d66:	d0e9      	beq.n	80d3c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   80d68:	4b08      	ldr	r3, [pc, #32]	; (80d8c <prvAddCurrentTaskToDelayedList+0x80>)
   80d6a:	6819      	ldr	r1, [r3, #0]
   80d6c:	3104      	adds	r1, #4
   80d6e:	480d      	ldr	r0, [pc, #52]	; (80da4 <prvAddCurrentTaskToDelayedList+0x98>)
   80d70:	4b0d      	ldr	r3, [pc, #52]	; (80da8 <prvAddCurrentTaskToDelayedList+0x9c>)
   80d72:	4798      	blx	r3
   80d74:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   80d76:	4b0d      	ldr	r3, [pc, #52]	; (80dac <prvAddCurrentTaskToDelayedList+0xa0>)
   80d78:	6818      	ldr	r0, [r3, #0]
   80d7a:	4b04      	ldr	r3, [pc, #16]	; (80d8c <prvAddCurrentTaskToDelayedList+0x80>)
   80d7c:	6819      	ldr	r1, [r3, #0]
   80d7e:	3104      	adds	r1, #4
   80d80:	4b06      	ldr	r3, [pc, #24]	; (80d9c <prvAddCurrentTaskToDelayedList+0x90>)
   80d82:	4798      	blx	r3
   80d84:	bd70      	pop	{r4, r5, r6, pc}
   80d86:	bf00      	nop
   80d88:	2007be8c 	.word	0x2007be8c
   80d8c:	2007bd90 	.word	0x2007bd90
   80d90:	000801c9 	.word	0x000801c9
   80d94:	2007be14 	.word	0x2007be14
   80d98:	2007bd94 	.word	0x2007bd94
   80d9c:	00080195 	.word	0x00080195
   80da0:	2007be44 	.word	0x2007be44
   80da4:	2007be64 	.word	0x2007be64
   80da8:	0008017d 	.word	0x0008017d
   80dac:	2007bd98 	.word	0x2007bd98

00080db0 <xTaskCreate>:
	{
   80db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80db4:	b083      	sub	sp, #12
   80db6:	4683      	mov	fp, r0
   80db8:	460d      	mov	r5, r1
   80dba:	9301      	str	r3, [sp, #4]
   80dbc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80dc0:	0096      	lsls	r6, r2, #2
   80dc2:	4630      	mov	r0, r6
   80dc4:	4b60      	ldr	r3, [pc, #384]	; (80f48 <xTaskCreate+0x198>)
   80dc6:	4798      	blx	r3
			if( pxStack != NULL )
   80dc8:	2800      	cmp	r0, #0
   80dca:	f000 808d 	beq.w	80ee8 <xTaskCreate+0x138>
   80dce:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   80dd0:	2060      	movs	r0, #96	; 0x60
   80dd2:	4b5d      	ldr	r3, [pc, #372]	; (80f48 <xTaskCreate+0x198>)
   80dd4:	4798      	blx	r3
				if( pxNewTCB != NULL )
   80dd6:	4604      	mov	r4, r0
   80dd8:	2800      	cmp	r0, #0
   80dda:	f000 8082 	beq.w	80ee2 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
   80dde:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   80de0:	4632      	mov	r2, r6
   80de2:	21a5      	movs	r1, #165	; 0xa5
   80de4:	4638      	mov	r0, r7
   80de6:	4b59      	ldr	r3, [pc, #356]	; (80f4c <xTaskCreate+0x19c>)
   80de8:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   80dea:	3e04      	subs	r6, #4
   80dec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80dee:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   80df0:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   80df4:	782b      	ldrb	r3, [r5, #0]
   80df6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   80dfa:	782b      	ldrb	r3, [r5, #0]
   80dfc:	b163      	cbz	r3, 80e18 <xTaskCreate+0x68>
   80dfe:	462b      	mov	r3, r5
   80e00:	f104 0234 	add.w	r2, r4, #52	; 0x34
   80e04:	f105 0113 	add.w	r1, r5, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   80e08:	7858      	ldrb	r0, [r3, #1]
   80e0a:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   80e0e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   80e12:	b108      	cbz	r0, 80e18 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   80e14:	428b      	cmp	r3, r1
   80e16:	d1f7      	bne.n	80e08 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   80e18:	2700      	movs	r7, #0
   80e1a:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
   80e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   80e20:	2d04      	cmp	r5, #4
   80e22:	bf28      	it	cs
   80e24:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   80e26:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   80e28:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
   80e2a:	6567      	str	r7, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   80e2c:	f104 0804 	add.w	r8, r4, #4
   80e30:	4640      	mov	r0, r8
   80e32:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80fa0 <xTaskCreate+0x1f0>
   80e36:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   80e38:	f104 0018 	add.w	r0, r4, #24
   80e3c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   80e3e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80e40:	f1c5 0505 	rsb	r5, r5, #5
   80e44:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   80e46:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   80e48:	65a7      	str	r7, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   80e4a:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80e4e:	9a01      	ldr	r2, [sp, #4]
   80e50:	4659      	mov	r1, fp
   80e52:	4630      	mov	r0, r6
   80e54:	4b3e      	ldr	r3, [pc, #248]	; (80f50 <xTaskCreate+0x1a0>)
   80e56:	4798      	blx	r3
   80e58:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   80e5a:	f1ba 0f00 	cmp.w	sl, #0
   80e5e:	d001      	beq.n	80e64 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   80e60:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   80e64:	4b3b      	ldr	r3, [pc, #236]	; (80f54 <xTaskCreate+0x1a4>)
   80e66:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   80e68:	4a3b      	ldr	r2, [pc, #236]	; (80f58 <xTaskCreate+0x1a8>)
   80e6a:	6813      	ldr	r3, [r2, #0]
   80e6c:	3301      	adds	r3, #1
   80e6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   80e70:	4b3a      	ldr	r3, [pc, #232]	; (80f5c <xTaskCreate+0x1ac>)
   80e72:	681b      	ldr	r3, [r3, #0]
   80e74:	2b00      	cmp	r3, #0
   80e76:	d03a      	beq.n	80eee <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
   80e78:	4b39      	ldr	r3, [pc, #228]	; (80f60 <xTaskCreate+0x1b0>)
   80e7a:	681b      	ldr	r3, [r3, #0]
   80e7c:	b93b      	cbnz	r3, 80e8e <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   80e7e:	4b37      	ldr	r3, [pc, #220]	; (80f5c <xTaskCreate+0x1ac>)
   80e80:	681b      	ldr	r3, [r3, #0]
   80e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   80e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80e86:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   80e88:	bf9c      	itt	ls
   80e8a:	4b34      	ldrls	r3, [pc, #208]	; (80f5c <xTaskCreate+0x1ac>)
   80e8c:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   80e8e:	4a35      	ldr	r2, [pc, #212]	; (80f64 <xTaskCreate+0x1b4>)
   80e90:	6813      	ldr	r3, [r2, #0]
   80e92:	3301      	adds	r3, #1
   80e94:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   80e96:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
   80e98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80e9a:	4a33      	ldr	r2, [pc, #204]	; (80f68 <xTaskCreate+0x1b8>)
   80e9c:	6811      	ldr	r1, [r2, #0]
   80e9e:	2301      	movs	r3, #1
   80ea0:	4083      	lsls	r3, r0
   80ea2:	430b      	orrs	r3, r1
   80ea4:	6013      	str	r3, [r2, #0]
   80ea6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80eaa:	4641      	mov	r1, r8
   80eac:	4b2f      	ldr	r3, [pc, #188]	; (80f6c <xTaskCreate+0x1bc>)
   80eae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80eb2:	4b2f      	ldr	r3, [pc, #188]	; (80f70 <xTaskCreate+0x1c0>)
   80eb4:	4798      	blx	r3
	taskEXIT_CRITICAL();
   80eb6:	4b2f      	ldr	r3, [pc, #188]	; (80f74 <xTaskCreate+0x1c4>)
   80eb8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   80eba:	4b29      	ldr	r3, [pc, #164]	; (80f60 <xTaskCreate+0x1b0>)
   80ebc:	681b      	ldr	r3, [r3, #0]
   80ebe:	2b00      	cmp	r3, #0
   80ec0:	d03b      	beq.n	80f3a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   80ec2:	4b26      	ldr	r3, [pc, #152]	; (80f5c <xTaskCreate+0x1ac>)
   80ec4:	681b      	ldr	r3, [r3, #0]
   80ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   80ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80eca:	429a      	cmp	r2, r3
   80ecc:	d239      	bcs.n	80f42 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
   80ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80ed2:	4b29      	ldr	r3, [pc, #164]	; (80f78 <xTaskCreate+0x1c8>)
   80ed4:	601a      	str	r2, [r3, #0]
   80ed6:	f3bf 8f4f 	dsb	sy
   80eda:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   80ede:	2001      	movs	r0, #1
   80ee0:	e02c      	b.n	80f3c <xTaskCreate+0x18c>
					vPortFree( pxStack );
   80ee2:	4638      	mov	r0, r7
   80ee4:	4b25      	ldr	r3, [pc, #148]	; (80f7c <xTaskCreate+0x1cc>)
   80ee6:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80ee8:	f04f 30ff 	mov.w	r0, #4294967295
   80eec:	e026      	b.n	80f3c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
   80eee:	4b1b      	ldr	r3, [pc, #108]	; (80f5c <xTaskCreate+0x1ac>)
   80ef0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   80ef2:	6813      	ldr	r3, [r2, #0]
   80ef4:	2b01      	cmp	r3, #1
   80ef6:	d1ca      	bne.n	80e8e <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   80ef8:	4e1c      	ldr	r6, [pc, #112]	; (80f6c <xTaskCreate+0x1bc>)
   80efa:	4630      	mov	r0, r6
   80efc:	4d20      	ldr	r5, [pc, #128]	; (80f80 <xTaskCreate+0x1d0>)
   80efe:	47a8      	blx	r5
   80f00:	f106 0014 	add.w	r0, r6, #20
   80f04:	47a8      	blx	r5
   80f06:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80f0a:	47a8      	blx	r5
   80f0c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80f10:	47a8      	blx	r5
   80f12:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80f16:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   80f18:	4f1a      	ldr	r7, [pc, #104]	; (80f84 <xTaskCreate+0x1d4>)
   80f1a:	4638      	mov	r0, r7
   80f1c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   80f1e:	4e1a      	ldr	r6, [pc, #104]	; (80f88 <xTaskCreate+0x1d8>)
   80f20:	4630      	mov	r0, r6
   80f22:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   80f24:	4819      	ldr	r0, [pc, #100]	; (80f8c <xTaskCreate+0x1dc>)
   80f26:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   80f28:	4819      	ldr	r0, [pc, #100]	; (80f90 <xTaskCreate+0x1e0>)
   80f2a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   80f2c:	4819      	ldr	r0, [pc, #100]	; (80f94 <xTaskCreate+0x1e4>)
   80f2e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   80f30:	4b19      	ldr	r3, [pc, #100]	; (80f98 <xTaskCreate+0x1e8>)
   80f32:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80f34:	4b19      	ldr	r3, [pc, #100]	; (80f9c <xTaskCreate+0x1ec>)
   80f36:	601e      	str	r6, [r3, #0]
   80f38:	e7a9      	b.n	80e8e <xTaskCreate+0xde>
			xReturn = pdPASS;
   80f3a:	2001      	movs	r0, #1
	}
   80f3c:	b003      	add	sp, #12
   80f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   80f42:	2001      	movs	r0, #1
		return xReturn;
   80f44:	e7fa      	b.n	80f3c <xTaskCreate+0x18c>
   80f46:	bf00      	nop
   80f48:	000804ed 	.word	0x000804ed
   80f4c:	0008233d 	.word	0x0008233d
   80f50:	00080251 	.word	0x00080251
   80f54:	000802a9 	.word	0x000802a9
   80f58:	2007be00 	.word	0x2007be00
   80f5c:	2007bd90 	.word	0x2007bd90
   80f60:	2007be60 	.word	0x2007be60
   80f64:	2007be10 	.word	0x2007be10
   80f68:	2007be14 	.word	0x2007be14
   80f6c:	2007bd9c 	.word	0x2007bd9c
   80f70:	0008017d 	.word	0x0008017d
   80f74:	000802ed 	.word	0x000802ed
   80f78:	e000ed04 	.word	0xe000ed04
   80f7c:	00080555 	.word	0x00080555
   80f80:	00080161 	.word	0x00080161
   80f84:	2007be18 	.word	0x2007be18
   80f88:	2007be2c 	.word	0x2007be2c
   80f8c:	2007be4c 	.word	0x2007be4c
   80f90:	2007be78 	.word	0x2007be78
   80f94:	2007be64 	.word	0x2007be64
   80f98:	2007bd94 	.word	0x2007bd94
   80f9c:	2007bd98 	.word	0x2007bd98
   80fa0:	00080177 	.word	0x00080177

00080fa4 <vTaskStartScheduler>:
{
   80fa4:	b510      	push	{r4, lr}
   80fa6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   80fa8:	4b18      	ldr	r3, [pc, #96]	; (8100c <vTaskStartScheduler+0x68>)
   80faa:	9301      	str	r3, [sp, #4]
   80fac:	2300      	movs	r3, #0
   80fae:	9300      	str	r3, [sp, #0]
   80fb0:	2282      	movs	r2, #130	; 0x82
   80fb2:	4917      	ldr	r1, [pc, #92]	; (81010 <vTaskStartScheduler+0x6c>)
   80fb4:	4817      	ldr	r0, [pc, #92]	; (81014 <vTaskStartScheduler+0x70>)
   80fb6:	4c18      	ldr	r4, [pc, #96]	; (81018 <vTaskStartScheduler+0x74>)
   80fb8:	47a0      	blx	r4
		if( xReturn == pdPASS )
   80fba:	2801      	cmp	r0, #1
   80fbc:	d004      	beq.n	80fc8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   80fbe:	f1b0 3fff 	cmp.w	r0, #4294967295
   80fc2:	d01a      	beq.n	80ffa <vTaskStartScheduler+0x56>
}
   80fc4:	b002      	add	sp, #8
   80fc6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   80fc8:	4b14      	ldr	r3, [pc, #80]	; (8101c <vTaskStartScheduler+0x78>)
   80fca:	4798      	blx	r3
	if( xReturn == pdPASS )
   80fcc:	2801      	cmp	r0, #1
   80fce:	d1f6      	bne.n	80fbe <vTaskStartScheduler+0x1a>
   80fd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80fd4:	f383 8811 	msr	BASEPRI, r3
   80fd8:	f3bf 8f6f 	isb	sy
   80fdc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   80fe0:	f04f 32ff 	mov.w	r2, #4294967295
   80fe4:	4b0e      	ldr	r3, [pc, #56]	; (81020 <vTaskStartScheduler+0x7c>)
   80fe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   80fe8:	2201      	movs	r2, #1
   80fea:	4b0e      	ldr	r3, [pc, #56]	; (81024 <vTaskStartScheduler+0x80>)
   80fec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   80fee:	2200      	movs	r2, #0
   80ff0:	4b0d      	ldr	r3, [pc, #52]	; (81028 <vTaskStartScheduler+0x84>)
   80ff2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   80ff4:	4b0d      	ldr	r3, [pc, #52]	; (8102c <vTaskStartScheduler+0x88>)
   80ff6:	4798      	blx	r3
   80ff8:	e7e4      	b.n	80fc4 <vTaskStartScheduler+0x20>
   80ffa:	f04f 0340 	mov.w	r3, #64	; 0x40
   80ffe:	f383 8811 	msr	BASEPRI, r3
   81002:	f3bf 8f6f 	isb	sy
   81006:	f3bf 8f4f 	dsb	sy
   8100a:	e7fe      	b.n	8100a <vTaskStartScheduler+0x66>
   8100c:	2007be40 	.word	0x2007be40
   81010:	000824f8 	.word	0x000824f8
   81014:	00080c8d 	.word	0x00080c8d
   81018:	00080db1 	.word	0x00080db1
   8101c:	00081729 	.word	0x00081729
   81020:	2007be44 	.word	0x2007be44
   81024:	2007be60 	.word	0x2007be60
   81028:	2007be8c 	.word	0x2007be8c
   8102c:	000803c1 	.word	0x000803c1

00081030 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   81030:	4a02      	ldr	r2, [pc, #8]	; (8103c <vTaskSuspendAll+0xc>)
   81032:	6813      	ldr	r3, [r2, #0]
   81034:	3301      	adds	r3, #1
   81036:	6013      	str	r3, [r2, #0]
   81038:	4770      	bx	lr
   8103a:	bf00      	nop
   8103c:	2007be0c 	.word	0x2007be0c

00081040 <xTaskGetTickCount>:
		xTicks = xTickCount;
   81040:	4b01      	ldr	r3, [pc, #4]	; (81048 <xTaskGetTickCount+0x8>)
   81042:	6818      	ldr	r0, [r3, #0]
}
   81044:	4770      	bx	lr
   81046:	bf00      	nop
   81048:	2007be8c 	.word	0x2007be8c

0008104c <xTaskIncrementTick>:
{
   8104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81050:	4b3d      	ldr	r3, [pc, #244]	; (81148 <xTaskIncrementTick+0xfc>)
   81052:	681b      	ldr	r3, [r3, #0]
   81054:	2b00      	cmp	r3, #0
   81056:	d169      	bne.n	8112c <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   81058:	4b3c      	ldr	r3, [pc, #240]	; (8114c <xTaskIncrementTick+0x100>)
   8105a:	681d      	ldr	r5, [r3, #0]
   8105c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   8105e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   81060:	b9c5      	cbnz	r5, 81094 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
   81062:	4b3b      	ldr	r3, [pc, #236]	; (81150 <xTaskIncrementTick+0x104>)
   81064:	681b      	ldr	r3, [r3, #0]
   81066:	681b      	ldr	r3, [r3, #0]
   81068:	b143      	cbz	r3, 8107c <xTaskIncrementTick+0x30>
   8106a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8106e:	f383 8811 	msr	BASEPRI, r3
   81072:	f3bf 8f6f 	isb	sy
   81076:	f3bf 8f4f 	dsb	sy
   8107a:	e7fe      	b.n	8107a <xTaskIncrementTick+0x2e>
   8107c:	4a34      	ldr	r2, [pc, #208]	; (81150 <xTaskIncrementTick+0x104>)
   8107e:	6811      	ldr	r1, [r2, #0]
   81080:	4b34      	ldr	r3, [pc, #208]	; (81154 <xTaskIncrementTick+0x108>)
   81082:	6818      	ldr	r0, [r3, #0]
   81084:	6010      	str	r0, [r2, #0]
   81086:	6019      	str	r1, [r3, #0]
   81088:	4a33      	ldr	r2, [pc, #204]	; (81158 <xTaskIncrementTick+0x10c>)
   8108a:	6813      	ldr	r3, [r2, #0]
   8108c:	3301      	adds	r3, #1
   8108e:	6013      	str	r3, [r2, #0]
   81090:	4b32      	ldr	r3, [pc, #200]	; (8115c <xTaskIncrementTick+0x110>)
   81092:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   81094:	4b32      	ldr	r3, [pc, #200]	; (81160 <xTaskIncrementTick+0x114>)
   81096:	681b      	ldr	r3, [r3, #0]
   81098:	429d      	cmp	r5, r3
   8109a:	d20c      	bcs.n	810b6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
   8109c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8109e:	4b31      	ldr	r3, [pc, #196]	; (81164 <xTaskIncrementTick+0x118>)
   810a0:	681b      	ldr	r3, [r3, #0]
   810a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   810a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   810a8:	009b      	lsls	r3, r3, #2
   810aa:	4a2f      	ldr	r2, [pc, #188]	; (81168 <xTaskIncrementTick+0x11c>)
   810ac:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   810ae:	2b02      	cmp	r3, #2
   810b0:	bf28      	it	cs
   810b2:	2401      	movcs	r4, #1
   810b4:	e03f      	b.n	81136 <xTaskIncrementTick+0xea>
   810b6:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   810b8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 81150 <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   810bc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8117c <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
   810c0:	4f2a      	ldr	r7, [pc, #168]	; (8116c <xTaskIncrementTick+0x120>)
   810c2:	e01f      	b.n	81104 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   810c4:	f04f 32ff 	mov.w	r2, #4294967295
   810c8:	4b25      	ldr	r3, [pc, #148]	; (81160 <xTaskIncrementTick+0x114>)
   810ca:	601a      	str	r2, [r3, #0]
					break;
   810cc:	e7e7      	b.n	8109e <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
   810ce:	4a24      	ldr	r2, [pc, #144]	; (81160 <xTaskIncrementTick+0x114>)
   810d0:	6013      	str	r3, [r2, #0]
						break;
   810d2:	e7e4      	b.n	8109e <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   810d4:	f106 0018 	add.w	r0, r6, #24
   810d8:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   810da:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   810dc:	683a      	ldr	r2, [r7, #0]
   810de:	2301      	movs	r3, #1
   810e0:	4083      	lsls	r3, r0
   810e2:	4313      	orrs	r3, r2
   810e4:	603b      	str	r3, [r7, #0]
   810e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   810ea:	4651      	mov	r1, sl
   810ec:	4b1e      	ldr	r3, [pc, #120]	; (81168 <xTaskIncrementTick+0x11c>)
   810ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   810f2:	4b1f      	ldr	r3, [pc, #124]	; (81170 <xTaskIncrementTick+0x124>)
   810f4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   810f6:	4b1b      	ldr	r3, [pc, #108]	; (81164 <xTaskIncrementTick+0x118>)
   810f8:	681b      	ldr	r3, [r3, #0]
   810fa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   810fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   810fe:	429a      	cmp	r2, r3
   81100:	bf28      	it	cs
   81102:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81104:	f8d9 3000 	ldr.w	r3, [r9]
   81108:	681b      	ldr	r3, [r3, #0]
   8110a:	2b00      	cmp	r3, #0
   8110c:	d0da      	beq.n	810c4 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8110e:	f8d9 3000 	ldr.w	r3, [r9]
   81112:	68db      	ldr	r3, [r3, #12]
   81114:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   81116:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   81118:	429d      	cmp	r5, r3
   8111a:	d3d8      	bcc.n	810ce <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   8111c:	f106 0a04 	add.w	sl, r6, #4
   81120:	4650      	mov	r0, sl
   81122:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81124:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   81126:	2b00      	cmp	r3, #0
   81128:	d1d4      	bne.n	810d4 <xTaskIncrementTick+0x88>
   8112a:	e7d6      	b.n	810da <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
   8112c:	4a11      	ldr	r2, [pc, #68]	; (81174 <xTaskIncrementTick+0x128>)
   8112e:	6813      	ldr	r3, [r2, #0]
   81130:	3301      	adds	r3, #1
   81132:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   81134:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   81136:	4b10      	ldr	r3, [pc, #64]	; (81178 <xTaskIncrementTick+0x12c>)
   81138:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   8113a:	2b00      	cmp	r3, #0
}
   8113c:	bf0c      	ite	eq
   8113e:	4620      	moveq	r0, r4
   81140:	2001      	movne	r0, #1
   81142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81146:	bf00      	nop
   81148:	2007be0c 	.word	0x2007be0c
   8114c:	2007be8c 	.word	0x2007be8c
   81150:	2007bd94 	.word	0x2007bd94
   81154:	2007bd98 	.word	0x2007bd98
   81158:	2007be48 	.word	0x2007be48
   8115c:	00080c61 	.word	0x00080c61
   81160:	2007be44 	.word	0x2007be44
   81164:	2007bd90 	.word	0x2007bd90
   81168:	2007bd9c 	.word	0x2007bd9c
   8116c:	2007be14 	.word	0x2007be14
   81170:	0008017d 	.word	0x0008017d
   81174:	2007be08 	.word	0x2007be08
   81178:	2007be90 	.word	0x2007be90
   8117c:	000801c9 	.word	0x000801c9

00081180 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   81180:	4b35      	ldr	r3, [pc, #212]	; (81258 <xTaskResumeAll+0xd8>)
   81182:	681b      	ldr	r3, [r3, #0]
   81184:	b943      	cbnz	r3, 81198 <xTaskResumeAll+0x18>
   81186:	f04f 0340 	mov.w	r3, #64	; 0x40
   8118a:	f383 8811 	msr	BASEPRI, r3
   8118e:	f3bf 8f6f 	isb	sy
   81192:	f3bf 8f4f 	dsb	sy
   81196:	e7fe      	b.n	81196 <xTaskResumeAll+0x16>
{
   81198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
   8119c:	4b2f      	ldr	r3, [pc, #188]	; (8125c <xTaskResumeAll+0xdc>)
   8119e:	4798      	blx	r3
		--uxSchedulerSuspended;
   811a0:	4b2d      	ldr	r3, [pc, #180]	; (81258 <xTaskResumeAll+0xd8>)
   811a2:	681a      	ldr	r2, [r3, #0]
   811a4:	3a01      	subs	r2, #1
   811a6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   811a8:	681b      	ldr	r3, [r3, #0]
   811aa:	2b00      	cmp	r3, #0
   811ac:	d150      	bne.n	81250 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   811ae:	4b2c      	ldr	r3, [pc, #176]	; (81260 <xTaskResumeAll+0xe0>)
   811b0:	681b      	ldr	r3, [r3, #0]
   811b2:	b92b      	cbnz	r3, 811c0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
   811b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   811b6:	4b2b      	ldr	r3, [pc, #172]	; (81264 <xTaskResumeAll+0xe4>)
   811b8:	4798      	blx	r3
}
   811ba:	4620      	mov	r0, r4
   811bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811c0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   811c2:	4f29      	ldr	r7, [pc, #164]	; (81268 <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   811c4:	4e29      	ldr	r6, [pc, #164]	; (8126c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
   811c6:	4d2a      	ldr	r5, [pc, #168]	; (81270 <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   811c8:	683b      	ldr	r3, [r7, #0]
   811ca:	b303      	cbz	r3, 8120e <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   811cc:	68fb      	ldr	r3, [r7, #12]
   811ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   811d0:	f104 0018 	add.w	r0, r4, #24
   811d4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   811d6:	f104 0804 	add.w	r8, r4, #4
   811da:	4640      	mov	r0, r8
   811dc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   811de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   811e0:	682a      	ldr	r2, [r5, #0]
   811e2:	2301      	movs	r3, #1
   811e4:	4083      	lsls	r3, r0
   811e6:	4313      	orrs	r3, r2
   811e8:	602b      	str	r3, [r5, #0]
   811ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811ee:	4641      	mov	r1, r8
   811f0:	4b20      	ldr	r3, [pc, #128]	; (81274 <xTaskResumeAll+0xf4>)
   811f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811f6:	4b20      	ldr	r3, [pc, #128]	; (81278 <xTaskResumeAll+0xf8>)
   811f8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   811fa:	4b20      	ldr	r3, [pc, #128]	; (8127c <xTaskResumeAll+0xfc>)
   811fc:	681b      	ldr	r3, [r3, #0]
   811fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81202:	429a      	cmp	r2, r3
   81204:	d3e0      	bcc.n	811c8 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
   81206:	2201      	movs	r2, #1
   81208:	4b1d      	ldr	r3, [pc, #116]	; (81280 <xTaskResumeAll+0x100>)
   8120a:	601a      	str	r2, [r3, #0]
   8120c:	e7dc      	b.n	811c8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
   8120e:	b10c      	cbz	r4, 81214 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
   81210:	4b1c      	ldr	r3, [pc, #112]	; (81284 <xTaskResumeAll+0x104>)
   81212:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   81214:	4b1c      	ldr	r3, [pc, #112]	; (81288 <xTaskResumeAll+0x108>)
   81216:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   81218:	b16c      	cbz	r4, 81236 <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
   8121a:	4f1c      	ldr	r7, [pc, #112]	; (8128c <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   8121c:	4e18      	ldr	r6, [pc, #96]	; (81280 <xTaskResumeAll+0x100>)
   8121e:	2501      	movs	r5, #1
   81220:	e001      	b.n	81226 <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   81222:	3c01      	subs	r4, #1
   81224:	d004      	beq.n	81230 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   81226:	47b8      	blx	r7
   81228:	2800      	cmp	r0, #0
   8122a:	d0fa      	beq.n	81222 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
   8122c:	6035      	str	r5, [r6, #0]
   8122e:	e7f8      	b.n	81222 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
   81230:	2200      	movs	r2, #0
   81232:	4b15      	ldr	r3, [pc, #84]	; (81288 <xTaskResumeAll+0x108>)
   81234:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   81236:	4b12      	ldr	r3, [pc, #72]	; (81280 <xTaskResumeAll+0x100>)
   81238:	681b      	ldr	r3, [r3, #0]
   8123a:	b15b      	cbz	r3, 81254 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
   8123c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81240:	4b13      	ldr	r3, [pc, #76]	; (81290 <xTaskResumeAll+0x110>)
   81242:	601a      	str	r2, [r3, #0]
   81244:	f3bf 8f4f 	dsb	sy
   81248:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   8124c:	2401      	movs	r4, #1
   8124e:	e7b2      	b.n	811b6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
   81250:	2400      	movs	r4, #0
   81252:	e7b0      	b.n	811b6 <xTaskResumeAll+0x36>
   81254:	2400      	movs	r4, #0
   81256:	e7ae      	b.n	811b6 <xTaskResumeAll+0x36>
   81258:	2007be0c 	.word	0x2007be0c
   8125c:	000802a9 	.word	0x000802a9
   81260:	2007be00 	.word	0x2007be00
   81264:	000802ed 	.word	0x000802ed
   81268:	2007be4c 	.word	0x2007be4c
   8126c:	000801c9 	.word	0x000801c9
   81270:	2007be14 	.word	0x2007be14
   81274:	2007bd9c 	.word	0x2007bd9c
   81278:	0008017d 	.word	0x0008017d
   8127c:	2007bd90 	.word	0x2007bd90
   81280:	2007be90 	.word	0x2007be90
   81284:	00080c61 	.word	0x00080c61
   81288:	2007be08 	.word	0x2007be08
   8128c:	0008104d 	.word	0x0008104d
   81290:	e000ed04 	.word	0xe000ed04

00081294 <vTaskDelayUntil>:
	{
   81294:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   81296:	b150      	cbz	r0, 812ae <vTaskDelayUntil+0x1a>
   81298:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   8129a:	b989      	cbnz	r1, 812c0 <vTaskDelayUntil+0x2c>
   8129c:	f04f 0340 	mov.w	r3, #64	; 0x40
   812a0:	f383 8811 	msr	BASEPRI, r3
   812a4:	f3bf 8f6f 	isb	sy
   812a8:	f3bf 8f4f 	dsb	sy
   812ac:	e7fe      	b.n	812ac <vTaskDelayUntil+0x18>
   812ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   812b2:	f383 8811 	msr	BASEPRI, r3
   812b6:	f3bf 8f6f 	isb	sy
   812ba:	f3bf 8f4f 	dsb	sy
   812be:	e7fe      	b.n	812be <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
   812c0:	4b19      	ldr	r3, [pc, #100]	; (81328 <vTaskDelayUntil+0x94>)
   812c2:	681b      	ldr	r3, [r3, #0]
   812c4:	b143      	cbz	r3, 812d8 <vTaskDelayUntil+0x44>
   812c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   812ca:	f383 8811 	msr	BASEPRI, r3
   812ce:	f3bf 8f6f 	isb	sy
   812d2:	f3bf 8f4f 	dsb	sy
   812d6:	e7fe      	b.n	812d6 <vTaskDelayUntil+0x42>
   812d8:	460c      	mov	r4, r1
		vTaskSuspendAll();
   812da:	4b14      	ldr	r3, [pc, #80]	; (8132c <vTaskDelayUntil+0x98>)
   812dc:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
   812de:	4b14      	ldr	r3, [pc, #80]	; (81330 <vTaskDelayUntil+0x9c>)
   812e0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   812e2:	682a      	ldr	r2, [r5, #0]
   812e4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
   812e6:	4290      	cmp	r0, r2
   812e8:	d214      	bcs.n	81314 <vTaskDelayUntil+0x80>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   812ea:	42a2      	cmp	r2, r4
   812ec:	d916      	bls.n	8131c <vTaskDelayUntil+0x88>
			*pxPreviousWakeTime = xTimeToWake;
   812ee:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   812f0:	42a0      	cmp	r0, r4
   812f2:	d203      	bcs.n	812fc <vTaskDelayUntil+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   812f4:	2100      	movs	r1, #0
   812f6:	1a20      	subs	r0, r4, r0
   812f8:	4b0e      	ldr	r3, [pc, #56]	; (81334 <vTaskDelayUntil+0xa0>)
   812fa:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
   812fc:	4b0e      	ldr	r3, [pc, #56]	; (81338 <vTaskDelayUntil+0xa4>)
   812fe:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81300:	b980      	cbnz	r0, 81324 <vTaskDelayUntil+0x90>
			portYIELD_WITHIN_API();
   81302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81306:	4b0d      	ldr	r3, [pc, #52]	; (8133c <vTaskDelayUntil+0xa8>)
   81308:	601a      	str	r2, [r3, #0]
   8130a:	f3bf 8f4f 	dsb	sy
   8130e:	f3bf 8f6f 	isb	sy
	}
   81312:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   81314:	42a2      	cmp	r2, r4
   81316:	d803      	bhi.n	81320 <vTaskDelayUntil+0x8c>
   81318:	42a0      	cmp	r0, r4
   8131a:	d301      	bcc.n	81320 <vTaskDelayUntil+0x8c>
			*pxPreviousWakeTime = xTimeToWake;
   8131c:	602c      	str	r4, [r5, #0]
   8131e:	e7ed      	b.n	812fc <vTaskDelayUntil+0x68>
   81320:	602c      	str	r4, [r5, #0]
   81322:	e7e7      	b.n	812f4 <vTaskDelayUntil+0x60>
   81324:	bd38      	pop	{r3, r4, r5, pc}
   81326:	bf00      	nop
   81328:	2007be0c 	.word	0x2007be0c
   8132c:	00081031 	.word	0x00081031
   81330:	2007be8c 	.word	0x2007be8c
   81334:	00080d0d 	.word	0x00080d0d
   81338:	00081181 	.word	0x00081181
   8133c:	e000ed04 	.word	0xe000ed04

00081340 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   81340:	4b1f      	ldr	r3, [pc, #124]	; (813c0 <vTaskSwitchContext+0x80>)
   81342:	681b      	ldr	r3, [r3, #0]
   81344:	b9c3      	cbnz	r3, 81378 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
   81346:	2200      	movs	r2, #0
   81348:	4b1e      	ldr	r3, [pc, #120]	; (813c4 <vTaskSwitchContext+0x84>)
   8134a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8134c:	4b1e      	ldr	r3, [pc, #120]	; (813c8 <vTaskSwitchContext+0x88>)
   8134e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   81350:	fab3 f383 	clz	r3, r3
   81354:	b2db      	uxtb	r3, r3
   81356:	f1c3 031f 	rsb	r3, r3, #31
   8135a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   8135e:	0092      	lsls	r2, r2, #2
   81360:	491a      	ldr	r1, [pc, #104]	; (813cc <vTaskSwitchContext+0x8c>)
   81362:	588a      	ldr	r2, [r1, r2]
   81364:	b962      	cbnz	r2, 81380 <vTaskSwitchContext+0x40>
	__asm volatile
   81366:	f04f 0340 	mov.w	r3, #64	; 0x40
   8136a:	f383 8811 	msr	BASEPRI, r3
   8136e:	f3bf 8f6f 	isb	sy
   81372:	f3bf 8f4f 	dsb	sy
   81376:	e7fe      	b.n	81376 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
   81378:	2201      	movs	r2, #1
   8137a:	4b12      	ldr	r3, [pc, #72]	; (813c4 <vTaskSwitchContext+0x84>)
   8137c:	601a      	str	r2, [r3, #0]
   8137e:	4770      	bx	lr
{
   81380:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81382:	4a12      	ldr	r2, [pc, #72]	; (813cc <vTaskSwitchContext+0x8c>)
   81384:	0099      	lsls	r1, r3, #2
   81386:	18c8      	adds	r0, r1, r3
   81388:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   8138c:	6844      	ldr	r4, [r0, #4]
   8138e:	6864      	ldr	r4, [r4, #4]
   81390:	6044      	str	r4, [r0, #4]
   81392:	4419      	add	r1, r3
   81394:	4602      	mov	r2, r0
   81396:	3208      	adds	r2, #8
   81398:	4294      	cmp	r4, r2
   8139a:	d00a      	beq.n	813b2 <vTaskSwitchContext+0x72>
   8139c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813a0:	4a0a      	ldr	r2, [pc, #40]	; (813cc <vTaskSwitchContext+0x8c>)
   813a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   813a6:	685b      	ldr	r3, [r3, #4]
   813a8:	68da      	ldr	r2, [r3, #12]
   813aa:	4b09      	ldr	r3, [pc, #36]	; (813d0 <vTaskSwitchContext+0x90>)
   813ac:	601a      	str	r2, [r3, #0]
}
   813ae:	bc10      	pop	{r4}
   813b0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   813b2:	6860      	ldr	r0, [r4, #4]
   813b4:	4a05      	ldr	r2, [pc, #20]	; (813cc <vTaskSwitchContext+0x8c>)
   813b6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   813ba:	6050      	str	r0, [r2, #4]
   813bc:	e7ee      	b.n	8139c <vTaskSwitchContext+0x5c>
   813be:	bf00      	nop
   813c0:	2007be0c 	.word	0x2007be0c
   813c4:	2007be90 	.word	0x2007be90
   813c8:	2007be14 	.word	0x2007be14
   813cc:	2007bd9c 	.word	0x2007bd9c
   813d0:	2007bd90 	.word	0x2007bd90

000813d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   813d4:	b940      	cbnz	r0, 813e8 <vTaskPlaceOnEventList+0x14>
   813d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   813da:	f383 8811 	msr	BASEPRI, r3
   813de:	f3bf 8f6f 	isb	sy
   813e2:	f3bf 8f4f 	dsb	sy
   813e6:	e7fe      	b.n	813e6 <vTaskPlaceOnEventList+0x12>
{
   813e8:	b510      	push	{r4, lr}
   813ea:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   813ec:	4b04      	ldr	r3, [pc, #16]	; (81400 <vTaskPlaceOnEventList+0x2c>)
   813ee:	6819      	ldr	r1, [r3, #0]
   813f0:	3118      	adds	r1, #24
   813f2:	4b04      	ldr	r3, [pc, #16]	; (81404 <vTaskPlaceOnEventList+0x30>)
   813f4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   813f6:	2101      	movs	r1, #1
   813f8:	4620      	mov	r0, r4
   813fa:	4b03      	ldr	r3, [pc, #12]	; (81408 <vTaskPlaceOnEventList+0x34>)
   813fc:	4798      	blx	r3
   813fe:	bd10      	pop	{r4, pc}
   81400:	2007bd90 	.word	0x2007bd90
   81404:	00080195 	.word	0x00080195
   81408:	00080d0d 	.word	0x00080d0d

0008140c <vTaskPlaceOnEventListRestricted>:
	{
   8140c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   8140e:	b178      	cbz	r0, 81430 <vTaskPlaceOnEventListRestricted+0x24>
   81410:	4614      	mov	r4, r2
   81412:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81414:	4b0b      	ldr	r3, [pc, #44]	; (81444 <vTaskPlaceOnEventListRestricted+0x38>)
   81416:	6819      	ldr	r1, [r3, #0]
   81418:	3118      	adds	r1, #24
   8141a:	4b0b      	ldr	r3, [pc, #44]	; (81448 <vTaskPlaceOnEventListRestricted+0x3c>)
   8141c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   8141e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   81420:	4621      	mov	r1, r4
   81422:	bf0c      	ite	eq
   81424:	4628      	moveq	r0, r5
   81426:	f04f 30ff 	movne.w	r0, #4294967295
   8142a:	4b08      	ldr	r3, [pc, #32]	; (8144c <vTaskPlaceOnEventListRestricted+0x40>)
   8142c:	4798      	blx	r3
   8142e:	bd38      	pop	{r3, r4, r5, pc}
   81430:	f04f 0340 	mov.w	r3, #64	; 0x40
   81434:	f383 8811 	msr	BASEPRI, r3
   81438:	f3bf 8f6f 	isb	sy
   8143c:	f3bf 8f4f 	dsb	sy
   81440:	e7fe      	b.n	81440 <vTaskPlaceOnEventListRestricted+0x34>
   81442:	bf00      	nop
   81444:	2007bd90 	.word	0x2007bd90
   81448:	0008017d 	.word	0x0008017d
   8144c:	00080d0d 	.word	0x00080d0d

00081450 <xTaskRemoveFromEventList>:
{
   81450:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81452:	68c3      	ldr	r3, [r0, #12]
   81454:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81456:	b32c      	cbz	r4, 814a4 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81458:	f104 0518 	add.w	r5, r4, #24
   8145c:	4628      	mov	r0, r5
   8145e:	4b18      	ldr	r3, [pc, #96]	; (814c0 <xTaskRemoveFromEventList+0x70>)
   81460:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81462:	4b18      	ldr	r3, [pc, #96]	; (814c4 <xTaskRemoveFromEventList+0x74>)
   81464:	681b      	ldr	r3, [r3, #0]
   81466:	bb33      	cbnz	r3, 814b6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   81468:	1d25      	adds	r5, r4, #4
   8146a:	4628      	mov	r0, r5
   8146c:	4b14      	ldr	r3, [pc, #80]	; (814c0 <xTaskRemoveFromEventList+0x70>)
   8146e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   81470:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81472:	4a15      	ldr	r2, [pc, #84]	; (814c8 <xTaskRemoveFromEventList+0x78>)
   81474:	6811      	ldr	r1, [r2, #0]
   81476:	2301      	movs	r3, #1
   81478:	4083      	lsls	r3, r0
   8147a:	430b      	orrs	r3, r1
   8147c:	6013      	str	r3, [r2, #0]
   8147e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81482:	4629      	mov	r1, r5
   81484:	4b11      	ldr	r3, [pc, #68]	; (814cc <xTaskRemoveFromEventList+0x7c>)
   81486:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8148a:	4b11      	ldr	r3, [pc, #68]	; (814d0 <xTaskRemoveFromEventList+0x80>)
   8148c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   8148e:	4b11      	ldr	r3, [pc, #68]	; (814d4 <xTaskRemoveFromEventList+0x84>)
   81490:	681b      	ldr	r3, [r3, #0]
   81492:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81496:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   81498:	bf83      	ittte	hi
   8149a:	2001      	movhi	r0, #1
   8149c:	4b0e      	ldrhi	r3, [pc, #56]	; (814d8 <xTaskRemoveFromEventList+0x88>)
   8149e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   814a0:	2000      	movls	r0, #0
}
   814a2:	bd38      	pop	{r3, r4, r5, pc}
   814a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   814a8:	f383 8811 	msr	BASEPRI, r3
   814ac:	f3bf 8f6f 	isb	sy
   814b0:	f3bf 8f4f 	dsb	sy
   814b4:	e7fe      	b.n	814b4 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   814b6:	4629      	mov	r1, r5
   814b8:	4808      	ldr	r0, [pc, #32]	; (814dc <xTaskRemoveFromEventList+0x8c>)
   814ba:	4b05      	ldr	r3, [pc, #20]	; (814d0 <xTaskRemoveFromEventList+0x80>)
   814bc:	4798      	blx	r3
   814be:	e7e6      	b.n	8148e <xTaskRemoveFromEventList+0x3e>
   814c0:	000801c9 	.word	0x000801c9
   814c4:	2007be0c 	.word	0x2007be0c
   814c8:	2007be14 	.word	0x2007be14
   814cc:	2007bd9c 	.word	0x2007bd9c
   814d0:	0008017d 	.word	0x0008017d
   814d4:	2007bd90 	.word	0x2007bd90
   814d8:	2007be90 	.word	0x2007be90
   814dc:	2007be4c 	.word	0x2007be4c

000814e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   814e0:	4b03      	ldr	r3, [pc, #12]	; (814f0 <vTaskInternalSetTimeOutState+0x10>)
   814e2:	681b      	ldr	r3, [r3, #0]
   814e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   814e6:	4b03      	ldr	r3, [pc, #12]	; (814f4 <vTaskInternalSetTimeOutState+0x14>)
   814e8:	681b      	ldr	r3, [r3, #0]
   814ea:	6043      	str	r3, [r0, #4]
   814ec:	4770      	bx	lr
   814ee:	bf00      	nop
   814f0:	2007be48 	.word	0x2007be48
   814f4:	2007be8c 	.word	0x2007be8c

000814f8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   814f8:	b1e8      	cbz	r0, 81536 <xTaskCheckForTimeOut+0x3e>
{
   814fa:	b570      	push	{r4, r5, r6, lr}
   814fc:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
   814fe:	b319      	cbz	r1, 81548 <xTaskCheckForTimeOut+0x50>
   81500:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
   81502:	4b1b      	ldr	r3, [pc, #108]	; (81570 <xTaskCheckForTimeOut+0x78>)
   81504:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   81506:	4b1b      	ldr	r3, [pc, #108]	; (81574 <xTaskCheckForTimeOut+0x7c>)
   81508:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   8150a:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   8150c:	6823      	ldr	r3, [r4, #0]
   8150e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81512:	d029      	beq.n	81568 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   81514:	4818      	ldr	r0, [pc, #96]	; (81578 <xTaskCheckForTimeOut+0x80>)
   81516:	6800      	ldr	r0, [r0, #0]
   81518:	682e      	ldr	r6, [r5, #0]
   8151a:	4286      	cmp	r6, r0
   8151c:	d001      	beq.n	81522 <xTaskCheckForTimeOut+0x2a>
   8151e:	428a      	cmp	r2, r1
   81520:	d224      	bcs.n	8156c <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81522:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   81524:	429a      	cmp	r2, r3
   81526:	d318      	bcc.n	8155a <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
   81528:	2300      	movs	r3, #0
   8152a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   8152c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   8152e:	4b13      	ldr	r3, [pc, #76]	; (8157c <xTaskCheckForTimeOut+0x84>)
   81530:	4798      	blx	r3
}
   81532:	4620      	mov	r0, r4
   81534:	bd70      	pop	{r4, r5, r6, pc}
   81536:	f04f 0340 	mov.w	r3, #64	; 0x40
   8153a:	f383 8811 	msr	BASEPRI, r3
   8153e:	f3bf 8f6f 	isb	sy
   81542:	f3bf 8f4f 	dsb	sy
   81546:	e7fe      	b.n	81546 <xTaskCheckForTimeOut+0x4e>
   81548:	f04f 0340 	mov.w	r3, #64	; 0x40
   8154c:	f383 8811 	msr	BASEPRI, r3
   81550:	f3bf 8f6f 	isb	sy
   81554:	f3bf 8f4f 	dsb	sy
   81558:	e7fe      	b.n	81558 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   8155a:	1a9b      	subs	r3, r3, r2
   8155c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   8155e:	4628      	mov	r0, r5
   81560:	4b07      	ldr	r3, [pc, #28]	; (81580 <xTaskCheckForTimeOut+0x88>)
   81562:	4798      	blx	r3
			xReturn = pdFALSE;
   81564:	2400      	movs	r4, #0
   81566:	e7e2      	b.n	8152e <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   81568:	2400      	movs	r4, #0
   8156a:	e7e0      	b.n	8152e <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   8156c:	2401      	movs	r4, #1
   8156e:	e7de      	b.n	8152e <xTaskCheckForTimeOut+0x36>
   81570:	000802a9 	.word	0x000802a9
   81574:	2007be8c 	.word	0x2007be8c
   81578:	2007be48 	.word	0x2007be48
   8157c:	000802ed 	.word	0x000802ed
   81580:	000814e1 	.word	0x000814e1

00081584 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   81584:	2201      	movs	r2, #1
   81586:	4b01      	ldr	r3, [pc, #4]	; (8158c <vTaskMissedYield+0x8>)
   81588:	601a      	str	r2, [r3, #0]
   8158a:	4770      	bx	lr
   8158c:	2007be90 	.word	0x2007be90

00081590 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   81590:	4b05      	ldr	r3, [pc, #20]	; (815a8 <xTaskGetSchedulerState+0x18>)
   81592:	681b      	ldr	r3, [r3, #0]
   81594:	b133      	cbz	r3, 815a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81596:	4b05      	ldr	r3, [pc, #20]	; (815ac <xTaskGetSchedulerState+0x1c>)
   81598:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   8159a:	2b00      	cmp	r3, #0
   8159c:	bf0c      	ite	eq
   8159e:	2002      	moveq	r0, #2
   815a0:	2000      	movne	r0, #0
   815a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   815a4:	2001      	movs	r0, #1
	}
   815a6:	4770      	bx	lr
   815a8:	2007be60 	.word	0x2007be60
   815ac:	2007be0c 	.word	0x2007be0c

000815b0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   815b0:	2800      	cmp	r0, #0
   815b2:	d04a      	beq.n	8164a <xTaskPriorityDisinherit+0x9a>
	{
   815b4:	b538      	push	{r3, r4, r5, lr}
   815b6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   815b8:	4a27      	ldr	r2, [pc, #156]	; (81658 <xTaskPriorityDisinherit+0xa8>)
   815ba:	6812      	ldr	r2, [r2, #0]
   815bc:	4290      	cmp	r0, r2
   815be:	d008      	beq.n	815d2 <xTaskPriorityDisinherit+0x22>
   815c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   815c4:	f383 8811 	msr	BASEPRI, r3
   815c8:	f3bf 8f6f 	isb	sy
   815cc:	f3bf 8f4f 	dsb	sy
   815d0:	e7fe      	b.n	815d0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
   815d2:	6d42      	ldr	r2, [r0, #84]	; 0x54
   815d4:	b942      	cbnz	r2, 815e8 <xTaskPriorityDisinherit+0x38>
   815d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   815da:	f383 8811 	msr	BASEPRI, r3
   815de:	f3bf 8f6f 	isb	sy
   815e2:	f3bf 8f4f 	dsb	sy
   815e6:	e7fe      	b.n	815e6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
   815e8:	3a01      	subs	r2, #1
   815ea:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   815ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   815ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
   815f0:	4288      	cmp	r0, r1
   815f2:	d02c      	beq.n	8164e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   815f4:	2a00      	cmp	r2, #0
   815f6:	d12c      	bne.n	81652 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   815f8:	1d25      	adds	r5, r4, #4
   815fa:	4628      	mov	r0, r5
   815fc:	4b17      	ldr	r3, [pc, #92]	; (8165c <xTaskPriorityDisinherit+0xac>)
   815fe:	4798      	blx	r3
   81600:	b968      	cbnz	r0, 8161e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81602:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81604:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81608:	009b      	lsls	r3, r3, #2
   8160a:	4a15      	ldr	r2, [pc, #84]	; (81660 <xTaskPriorityDisinherit+0xb0>)
   8160c:	58d3      	ldr	r3, [r2, r3]
   8160e:	b933      	cbnz	r3, 8161e <xTaskPriorityDisinherit+0x6e>
   81610:	4814      	ldr	r0, [pc, #80]	; (81664 <xTaskPriorityDisinherit+0xb4>)
   81612:	6803      	ldr	r3, [r0, #0]
   81614:	2201      	movs	r2, #1
   81616:	408a      	lsls	r2, r1
   81618:	ea23 0302 	bic.w	r3, r3, r2
   8161c:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   8161e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   81620:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81622:	f1c0 0305 	rsb	r3, r0, #5
   81626:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   81628:	4a0e      	ldr	r2, [pc, #56]	; (81664 <xTaskPriorityDisinherit+0xb4>)
   8162a:	6811      	ldr	r1, [r2, #0]
   8162c:	2401      	movs	r4, #1
   8162e:	fa04 f300 	lsl.w	r3, r4, r0
   81632:	430b      	orrs	r3, r1
   81634:	6013      	str	r3, [r2, #0]
   81636:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8163a:	4629      	mov	r1, r5
   8163c:	4b08      	ldr	r3, [pc, #32]	; (81660 <xTaskPriorityDisinherit+0xb0>)
   8163e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81642:	4b09      	ldr	r3, [pc, #36]	; (81668 <xTaskPriorityDisinherit+0xb8>)
   81644:	4798      	blx	r3
					xReturn = pdTRUE;
   81646:	4620      	mov	r0, r4
   81648:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   8164a:	2000      	movs	r0, #0
   8164c:	4770      	bx	lr
   8164e:	2000      	movs	r0, #0
   81650:	bd38      	pop	{r3, r4, r5, pc}
   81652:	2000      	movs	r0, #0
	}
   81654:	bd38      	pop	{r3, r4, r5, pc}
   81656:	bf00      	nop
   81658:	2007bd90 	.word	0x2007bd90
   8165c:	000801c9 	.word	0x000801c9
   81660:	2007bd9c 	.word	0x2007bd9c
   81664:	2007be14 	.word	0x2007be14
   81668:	0008017d 	.word	0x0008017d

0008166c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   8166c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8166e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81670:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81672:	4291      	cmp	r1, r2
   81674:	d80c      	bhi.n	81690 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81676:	1ad2      	subs	r2, r2, r3
   81678:	6983      	ldr	r3, [r0, #24]
   8167a:	429a      	cmp	r2, r3
   8167c:	d301      	bcc.n	81682 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8167e:	2001      	movs	r0, #1
   81680:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81682:	1d01      	adds	r1, r0, #4
   81684:	4b09      	ldr	r3, [pc, #36]	; (816ac <prvInsertTimerInActiveList+0x40>)
   81686:	6818      	ldr	r0, [r3, #0]
   81688:	4b09      	ldr	r3, [pc, #36]	; (816b0 <prvInsertTimerInActiveList+0x44>)
   8168a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   8168c:	2000      	movs	r0, #0
   8168e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81690:	429a      	cmp	r2, r3
   81692:	d201      	bcs.n	81698 <prvInsertTimerInActiveList+0x2c>
   81694:	4299      	cmp	r1, r3
   81696:	d206      	bcs.n	816a6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81698:	1d01      	adds	r1, r0, #4
   8169a:	4b06      	ldr	r3, [pc, #24]	; (816b4 <prvInsertTimerInActiveList+0x48>)
   8169c:	6818      	ldr	r0, [r3, #0]
   8169e:	4b04      	ldr	r3, [pc, #16]	; (816b0 <prvInsertTimerInActiveList+0x44>)
   816a0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   816a2:	2000      	movs	r0, #0
   816a4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   816a6:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   816a8:	bd08      	pop	{r3, pc}
   816aa:	bf00      	nop
   816ac:	2007be98 	.word	0x2007be98
   816b0:	00080195 	.word	0x00080195
   816b4:	2007be94 	.word	0x2007be94

000816b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   816b8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   816ba:	4b10      	ldr	r3, [pc, #64]	; (816fc <prvCheckForValidListAndQueue+0x44>)
   816bc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   816be:	4b10      	ldr	r3, [pc, #64]	; (81700 <prvCheckForValidListAndQueue+0x48>)
   816c0:	681b      	ldr	r3, [r3, #0]
   816c2:	b113      	cbz	r3, 816ca <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   816c4:	4b0f      	ldr	r3, [pc, #60]	; (81704 <prvCheckForValidListAndQueue+0x4c>)
   816c6:	4798      	blx	r3
   816c8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   816ca:	4d0f      	ldr	r5, [pc, #60]	; (81708 <prvCheckForValidListAndQueue+0x50>)
   816cc:	4628      	mov	r0, r5
   816ce:	4e0f      	ldr	r6, [pc, #60]	; (8170c <prvCheckForValidListAndQueue+0x54>)
   816d0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   816d2:	4c0f      	ldr	r4, [pc, #60]	; (81710 <prvCheckForValidListAndQueue+0x58>)
   816d4:	4620      	mov	r0, r4
   816d6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   816d8:	4b0e      	ldr	r3, [pc, #56]	; (81714 <prvCheckForValidListAndQueue+0x5c>)
   816da:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   816dc:	4b0e      	ldr	r3, [pc, #56]	; (81718 <prvCheckForValidListAndQueue+0x60>)
   816de:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   816e0:	2200      	movs	r2, #0
   816e2:	2110      	movs	r1, #16
   816e4:	2005      	movs	r0, #5
   816e6:	4b0d      	ldr	r3, [pc, #52]	; (8171c <prvCheckForValidListAndQueue+0x64>)
   816e8:	4798      	blx	r3
   816ea:	4b05      	ldr	r3, [pc, #20]	; (81700 <prvCheckForValidListAndQueue+0x48>)
   816ec:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   816ee:	2800      	cmp	r0, #0
   816f0:	d0e8      	beq.n	816c4 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   816f2:	490b      	ldr	r1, [pc, #44]	; (81720 <prvCheckForValidListAndQueue+0x68>)
   816f4:	4b0b      	ldr	r3, [pc, #44]	; (81724 <prvCheckForValidListAndQueue+0x6c>)
   816f6:	4798      	blx	r3
   816f8:	e7e4      	b.n	816c4 <prvCheckForValidListAndQueue+0xc>
   816fa:	bf00      	nop
   816fc:	000802a9 	.word	0x000802a9
   81700:	2007bec8 	.word	0x2007bec8
   81704:	000802ed 	.word	0x000802ed
   81708:	2007be9c 	.word	0x2007be9c
   8170c:	00080161 	.word	0x00080161
   81710:	2007beb0 	.word	0x2007beb0
   81714:	2007be94 	.word	0x2007be94
   81718:	2007be98 	.word	0x2007be98
   8171c:	0008075d 	.word	0x0008075d
   81720:	00082500 	.word	0x00082500
   81724:	00080bd1 	.word	0x00080bd1

00081728 <xTimerCreateTimerTask>:
{
   81728:	b510      	push	{r4, lr}
   8172a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   8172c:	4b0d      	ldr	r3, [pc, #52]	; (81764 <xTimerCreateTimerTask+0x3c>)
   8172e:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81730:	4b0d      	ldr	r3, [pc, #52]	; (81768 <xTimerCreateTimerTask+0x40>)
   81732:	681b      	ldr	r3, [r3, #0]
   81734:	b16b      	cbz	r3, 81752 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
   81736:	4b0d      	ldr	r3, [pc, #52]	; (8176c <xTimerCreateTimerTask+0x44>)
   81738:	9301      	str	r3, [sp, #4]
   8173a:	2304      	movs	r3, #4
   8173c:	9300      	str	r3, [sp, #0]
   8173e:	2300      	movs	r3, #0
   81740:	f44f 7282 	mov.w	r2, #260	; 0x104
   81744:	490a      	ldr	r1, [pc, #40]	; (81770 <xTimerCreateTimerTask+0x48>)
   81746:	480b      	ldr	r0, [pc, #44]	; (81774 <xTimerCreateTimerTask+0x4c>)
   81748:	4c0b      	ldr	r4, [pc, #44]	; (81778 <xTimerCreateTimerTask+0x50>)
   8174a:	47a0      	blx	r4
	configASSERT( xReturn );
   8174c:	b108      	cbz	r0, 81752 <xTimerCreateTimerTask+0x2a>
}
   8174e:	b002      	add	sp, #8
   81750:	bd10      	pop	{r4, pc}
   81752:	f04f 0340 	mov.w	r3, #64	; 0x40
   81756:	f383 8811 	msr	BASEPRI, r3
   8175a:	f3bf 8f6f 	isb	sy
   8175e:	f3bf 8f4f 	dsb	sy
   81762:	e7fe      	b.n	81762 <xTimerCreateTimerTask+0x3a>
   81764:	000816b9 	.word	0x000816b9
   81768:	2007bec8 	.word	0x2007bec8
   8176c:	2007becc 	.word	0x2007becc
   81770:	00082508 	.word	0x00082508
   81774:	0008189d 	.word	0x0008189d
   81778:	00080db1 	.word	0x00080db1

0008177c <xTimerGenericCommand>:
	configASSERT( xTimer );
   8177c:	b1d8      	cbz	r0, 817b6 <xTimerGenericCommand+0x3a>
{
   8177e:	b530      	push	{r4, r5, lr}
   81780:	b085      	sub	sp, #20
   81782:	4615      	mov	r5, r2
   81784:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
   81786:	4a14      	ldr	r2, [pc, #80]	; (817d8 <xTimerGenericCommand+0x5c>)
   81788:	6810      	ldr	r0, [r2, #0]
   8178a:	b310      	cbz	r0, 817d2 <xTimerGenericCommand+0x56>
   8178c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
   8178e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   81790:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   81792:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   81794:	2905      	cmp	r1, #5
   81796:	dc17      	bgt.n	817c8 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81798:	4b10      	ldr	r3, [pc, #64]	; (817dc <xTimerGenericCommand+0x60>)
   8179a:	4798      	blx	r3
   8179c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   8179e:	f04f 0300 	mov.w	r3, #0
   817a2:	bf0c      	ite	eq
   817a4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   817a6:	461a      	movne	r2, r3
   817a8:	4669      	mov	r1, sp
   817aa:	480b      	ldr	r0, [pc, #44]	; (817d8 <xTimerGenericCommand+0x5c>)
   817ac:	6800      	ldr	r0, [r0, #0]
   817ae:	4c0c      	ldr	r4, [pc, #48]	; (817e0 <xTimerGenericCommand+0x64>)
   817b0:	47a0      	blx	r4
}
   817b2:	b005      	add	sp, #20
   817b4:	bd30      	pop	{r4, r5, pc}
   817b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   817ba:	f383 8811 	msr	BASEPRI, r3
   817be:	f3bf 8f6f 	isb	sy
   817c2:	f3bf 8f4f 	dsb	sy
   817c6:	e7fe      	b.n	817c6 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   817c8:	2300      	movs	r3, #0
   817ca:	4669      	mov	r1, sp
   817cc:	4c05      	ldr	r4, [pc, #20]	; (817e4 <xTimerGenericCommand+0x68>)
   817ce:	47a0      	blx	r4
   817d0:	e7ef      	b.n	817b2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
   817d2:	2000      	movs	r0, #0
	return xReturn;
   817d4:	e7ed      	b.n	817b2 <xTimerGenericCommand+0x36>
   817d6:	bf00      	nop
   817d8:	2007bec8 	.word	0x2007bec8
   817dc:	00081591 	.word	0x00081591
   817e0:	000807b1 	.word	0x000807b1
   817e4:	00080965 	.word	0x00080965

000817e8 <prvSampleTimeNow>:
{
   817e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   817ec:	b082      	sub	sp, #8
   817ee:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   817f0:	4b23      	ldr	r3, [pc, #140]	; (81880 <prvSampleTimeNow+0x98>)
   817f2:	4798      	blx	r3
   817f4:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   817f6:	4b23      	ldr	r3, [pc, #140]	; (81884 <prvSampleTimeNow+0x9c>)
   817f8:	681b      	ldr	r3, [r3, #0]
   817fa:	4298      	cmp	r0, r3
   817fc:	d319      	bcc.n	81832 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
   817fe:	2300      	movs	r3, #0
   81800:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   81804:	4b1f      	ldr	r3, [pc, #124]	; (81884 <prvSampleTimeNow+0x9c>)
   81806:	601f      	str	r7, [r3, #0]
}
   81808:	4638      	mov	r0, r7
   8180a:	b002      	add	sp, #8
   8180c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81810:	2100      	movs	r1, #0
   81812:	9100      	str	r1, [sp, #0]
   81814:	460b      	mov	r3, r1
   81816:	4652      	mov	r2, sl
   81818:	4620      	mov	r0, r4
   8181a:	4c1b      	ldr	r4, [pc, #108]	; (81888 <prvSampleTimeNow+0xa0>)
   8181c:	47a0      	blx	r4
				configASSERT( xResult );
   8181e:	b950      	cbnz	r0, 81836 <prvSampleTimeNow+0x4e>
   81820:	f04f 0340 	mov.w	r3, #64	; 0x40
   81824:	f383 8811 	msr	BASEPRI, r3
   81828:	f3bf 8f6f 	isb	sy
   8182c:	f3bf 8f4f 	dsb	sy
   81830:	e7fe      	b.n	81830 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81832:	4d16      	ldr	r5, [pc, #88]	; (8188c <prvSampleTimeNow+0xa4>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81834:	4e16      	ldr	r6, [pc, #88]	; (81890 <prvSampleTimeNow+0xa8>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81836:	682b      	ldr	r3, [r5, #0]
   81838:	681a      	ldr	r2, [r3, #0]
   8183a:	b1c2      	cbz	r2, 8186e <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8183c:	68db      	ldr	r3, [r3, #12]
   8183e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81842:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81844:	f104 0904 	add.w	r9, r4, #4
   81848:	4648      	mov	r0, r9
   8184a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8184c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8184e:	4620      	mov	r0, r4
   81850:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81852:	69e3      	ldr	r3, [r4, #28]
   81854:	2b01      	cmp	r3, #1
   81856:	d1ee      	bne.n	81836 <prvSampleTimeNow+0x4e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81858:	69a3      	ldr	r3, [r4, #24]
   8185a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   8185c:	459a      	cmp	sl, r3
   8185e:	d2d7      	bcs.n	81810 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81860:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81862:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81864:	4649      	mov	r1, r9
   81866:	6828      	ldr	r0, [r5, #0]
   81868:	4b0a      	ldr	r3, [pc, #40]	; (81894 <prvSampleTimeNow+0xac>)
   8186a:	4798      	blx	r3
   8186c:	e7e3      	b.n	81836 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList = pxOverflowTimerList;
   8186e:	4a0a      	ldr	r2, [pc, #40]	; (81898 <prvSampleTimeNow+0xb0>)
   81870:	6810      	ldr	r0, [r2, #0]
   81872:	4906      	ldr	r1, [pc, #24]	; (8188c <prvSampleTimeNow+0xa4>)
   81874:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81876:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81878:	2301      	movs	r3, #1
   8187a:	f8c8 3000 	str.w	r3, [r8]
   8187e:	e7c1      	b.n	81804 <prvSampleTimeNow+0x1c>
   81880:	00081041 	.word	0x00081041
   81884:	2007bec4 	.word	0x2007bec4
   81888:	0008177d 	.word	0x0008177d
   8188c:	2007be94 	.word	0x2007be94
   81890:	000801c9 	.word	0x000801c9
   81894:	00080195 	.word	0x00080195
   81898:	2007be98 	.word	0x2007be98

0008189c <prvTimerTask>:
{
   8189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   818a0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   818a2:	4e70      	ldr	r6, [pc, #448]	; (81a64 <prvTimerTask+0x1c8>)
			( void ) xTaskResumeAll();
   818a4:	4f70      	ldr	r7, [pc, #448]	; (81a68 <prvTimerTask+0x1cc>)
					portYIELD_WITHIN_API();
   818a6:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 81a90 <prvTimerTask+0x1f4>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   818aa:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 81a94 <prvTimerTask+0x1f8>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   818ae:	6833      	ldr	r3, [r6, #0]
   818b0:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   818b2:	b172      	cbz	r2, 818d2 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   818b4:	68db      	ldr	r3, [r3, #12]
   818b6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   818b8:	4b6c      	ldr	r3, [pc, #432]	; (81a6c <prvTimerTask+0x1d0>)
   818ba:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   818bc:	a804      	add	r0, sp, #16
   818be:	4b6c      	ldr	r3, [pc, #432]	; (81a70 <prvTimerTask+0x1d4>)
   818c0:	4798      	blx	r3
   818c2:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   818c4:	9b04      	ldr	r3, [sp, #16]
   818c6:	2b00      	cmp	r3, #0
   818c8:	d152      	bne.n	81970 <prvTimerTask+0xd4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   818ca:	42a0      	cmp	r0, r4
   818cc:	d223      	bcs.n	81916 <prvTimerTask+0x7a>
   818ce:	2200      	movs	r2, #0
   818d0:	e00f      	b.n	818f2 <prvTimerTask+0x56>
	vTaskSuspendAll();
   818d2:	4b66      	ldr	r3, [pc, #408]	; (81a6c <prvTimerTask+0x1d0>)
   818d4:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   818d6:	a804      	add	r0, sp, #16
   818d8:	4b65      	ldr	r3, [pc, #404]	; (81a70 <prvTimerTask+0x1d4>)
   818da:	4798      	blx	r3
   818dc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   818de:	9b04      	ldr	r3, [sp, #16]
   818e0:	2b00      	cmp	r3, #0
   818e2:	d145      	bne.n	81970 <prvTimerTask+0xd4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   818e4:	4b63      	ldr	r3, [pc, #396]	; (81a74 <prvTimerTask+0x1d8>)
   818e6:	681b      	ldr	r3, [r3, #0]
   818e8:	681a      	ldr	r2, [r3, #0]
   818ea:	fab2 f282 	clz	r2, r2
   818ee:	0952      	lsrs	r2, r2, #5
   818f0:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   818f2:	1b61      	subs	r1, r4, r5
   818f4:	4b60      	ldr	r3, [pc, #384]	; (81a78 <prvTimerTask+0x1dc>)
   818f6:	6818      	ldr	r0, [r3, #0]
   818f8:	4b60      	ldr	r3, [pc, #384]	; (81a7c <prvTimerTask+0x1e0>)
   818fa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   818fc:	47b8      	blx	r7
   818fe:	b938      	cbnz	r0, 81910 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
   81900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81904:	f8c9 3000 	str.w	r3, [r9]
   81908:	f3bf 8f4f 	dsb	sy
   8190c:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81910:	4d59      	ldr	r5, [pc, #356]	; (81a78 <prvTimerTask+0x1dc>)
   81912:	4c5b      	ldr	r4, [pc, #364]	; (81a80 <prvTimerTask+0x1e4>)
   81914:	e035      	b.n	81982 <prvTimerTask+0xe6>
				( void ) xTaskResumeAll();
   81916:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81918:	6833      	ldr	r3, [r6, #0]
   8191a:	68db      	ldr	r3, [r3, #12]
   8191c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81920:	f10a 0004 	add.w	r0, sl, #4
   81924:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81926:	f8da 301c 	ldr.w	r3, [sl, #28]
   8192a:	2b01      	cmp	r3, #1
   8192c:	d004      	beq.n	81938 <prvTimerTask+0x9c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8192e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   81932:	4650      	mov	r0, sl
   81934:	4798      	blx	r3
   81936:	e7eb      	b.n	81910 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   81938:	f8da 1018 	ldr.w	r1, [sl, #24]
   8193c:	4623      	mov	r3, r4
   8193e:	462a      	mov	r2, r5
   81940:	4421      	add	r1, r4
   81942:	4650      	mov	r0, sl
   81944:	4d4f      	ldr	r5, [pc, #316]	; (81a84 <prvTimerTask+0x1e8>)
   81946:	47a8      	blx	r5
   81948:	2800      	cmp	r0, #0
   8194a:	d0f0      	beq.n	8192e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8194c:	2100      	movs	r1, #0
   8194e:	9100      	str	r1, [sp, #0]
   81950:	460b      	mov	r3, r1
   81952:	4622      	mov	r2, r4
   81954:	4650      	mov	r0, sl
   81956:	4c4c      	ldr	r4, [pc, #304]	; (81a88 <prvTimerTask+0x1ec>)
   81958:	47a0      	blx	r4
			configASSERT( xResult );
   8195a:	2800      	cmp	r0, #0
   8195c:	d1e7      	bne.n	8192e <prvTimerTask+0x92>
   8195e:	f04f 0340 	mov.w	r3, #64	; 0x40
   81962:	f383 8811 	msr	BASEPRI, r3
   81966:	f3bf 8f6f 	isb	sy
   8196a:	f3bf 8f4f 	dsb	sy
   8196e:	e7fe      	b.n	8196e <prvTimerTask+0xd2>
			( void ) xTaskResumeAll();
   81970:	47b8      	blx	r7
   81972:	e7cd      	b.n	81910 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   81974:	9907      	ldr	r1, [sp, #28]
   81976:	9806      	ldr	r0, [sp, #24]
   81978:	9b05      	ldr	r3, [sp, #20]
   8197a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   8197c:	9b04      	ldr	r3, [sp, #16]
   8197e:	2b00      	cmp	r3, #0
   81980:	da08      	bge.n	81994 <prvTimerTask+0xf8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81982:	2200      	movs	r2, #0
   81984:	a904      	add	r1, sp, #16
   81986:	6828      	ldr	r0, [r5, #0]
   81988:	47a0      	blx	r4
   8198a:	2800      	cmp	r0, #0
   8198c:	d08f      	beq.n	818ae <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   8198e:	9b04      	ldr	r3, [sp, #16]
   81990:	2b00      	cmp	r3, #0
   81992:	dbef      	blt.n	81974 <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   81994:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   81998:	f8da 3014 	ldr.w	r3, [sl, #20]
   8199c:	b113      	cbz	r3, 819a4 <prvTimerTask+0x108>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8199e:	f10a 0004 	add.w	r0, sl, #4
   819a2:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   819a4:	a803      	add	r0, sp, #12
   819a6:	4b32      	ldr	r3, [pc, #200]	; (81a70 <prvTimerTask+0x1d4>)
   819a8:	4798      	blx	r3
			switch( xMessage.xMessageID )
   819aa:	9b04      	ldr	r3, [sp, #16]
   819ac:	2b09      	cmp	r3, #9
   819ae:	d8e8      	bhi.n	81982 <prvTimerTask+0xe6>
   819b0:	a201      	add	r2, pc, #4	; (adr r2, 819b8 <prvTimerTask+0x11c>)
   819b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819b6:	bf00      	nop
   819b8:	000819e1 	.word	0x000819e1
   819bc:	000819e1 	.word	0x000819e1
   819c0:	000819e1 	.word	0x000819e1
   819c4:	00081983 	.word	0x00081983
   819c8:	00081a33 	.word	0x00081a33
   819cc:	00081a5b 	.word	0x00081a5b
   819d0:	000819e1 	.word	0x000819e1
   819d4:	000819e1 	.word	0x000819e1
   819d8:	00081983 	.word	0x00081983
   819dc:	00081a33 	.word	0x00081a33
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   819e0:	9c05      	ldr	r4, [sp, #20]
   819e2:	f8da 1018 	ldr.w	r1, [sl, #24]
   819e6:	4623      	mov	r3, r4
   819e8:	4602      	mov	r2, r0
   819ea:	4421      	add	r1, r4
   819ec:	4650      	mov	r0, sl
   819ee:	4c25      	ldr	r4, [pc, #148]	; (81a84 <prvTimerTask+0x1e8>)
   819f0:	47a0      	blx	r4
   819f2:	2800      	cmp	r0, #0
   819f4:	d08d      	beq.n	81912 <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   819f6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   819fa:	4650      	mov	r0, sl
   819fc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   819fe:	f8da 301c 	ldr.w	r3, [sl, #28]
   81a02:	2b01      	cmp	r3, #1
   81a04:	d185      	bne.n	81912 <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81a06:	f8da 2018 	ldr.w	r2, [sl, #24]
   81a0a:	2100      	movs	r1, #0
   81a0c:	9100      	str	r1, [sp, #0]
   81a0e:	460b      	mov	r3, r1
   81a10:	9805      	ldr	r0, [sp, #20]
   81a12:	4402      	add	r2, r0
   81a14:	4650      	mov	r0, sl
   81a16:	4c1c      	ldr	r4, [pc, #112]	; (81a88 <prvTimerTask+0x1ec>)
   81a18:	47a0      	blx	r4
							configASSERT( xResult );
   81a1a:	2800      	cmp	r0, #0
   81a1c:	f47f af79 	bne.w	81912 <prvTimerTask+0x76>
   81a20:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a24:	f383 8811 	msr	BASEPRI, r3
   81a28:	f3bf 8f6f 	isb	sy
   81a2c:	f3bf 8f4f 	dsb	sy
   81a30:	e7fe      	b.n	81a30 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   81a32:	9905      	ldr	r1, [sp, #20]
   81a34:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81a38:	b131      	cbz	r1, 81a48 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81a3a:	4603      	mov	r3, r0
   81a3c:	4602      	mov	r2, r0
   81a3e:	4401      	add	r1, r0
   81a40:	4650      	mov	r0, sl
   81a42:	4c10      	ldr	r4, [pc, #64]	; (81a84 <prvTimerTask+0x1e8>)
   81a44:	47a0      	blx	r4
   81a46:	e764      	b.n	81912 <prvTimerTask+0x76>
   81a48:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a4c:	f383 8811 	msr	BASEPRI, r3
   81a50:	f3bf 8f6f 	isb	sy
   81a54:	f3bf 8f4f 	dsb	sy
   81a58:	e7fe      	b.n	81a58 <prvTimerTask+0x1bc>
						vPortFree( pxTimer );
   81a5a:	4650      	mov	r0, sl
   81a5c:	4b0b      	ldr	r3, [pc, #44]	; (81a8c <prvTimerTask+0x1f0>)
   81a5e:	4798      	blx	r3
   81a60:	e757      	b.n	81912 <prvTimerTask+0x76>
   81a62:	bf00      	nop
   81a64:	2007be94 	.word	0x2007be94
   81a68:	00081181 	.word	0x00081181
   81a6c:	00081031 	.word	0x00081031
   81a70:	000817e9 	.word	0x000817e9
   81a74:	2007be98 	.word	0x2007be98
   81a78:	2007bec8 	.word	0x2007bec8
   81a7c:	00080c01 	.word	0x00080c01
   81a80:	00080a49 	.word	0x00080a49
   81a84:	0008166d 	.word	0x0008166d
   81a88:	0008177d 	.word	0x0008177d
   81a8c:	00080555 	.word	0x00080555
   81a90:	e000ed04 	.word	0xe000ed04
   81a94:	000801c9 	.word	0x000801c9

00081a98 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81a98:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81a9a:	480e      	ldr	r0, [pc, #56]	; (81ad4 <sysclk_init+0x3c>)
   81a9c:	4b0e      	ldr	r3, [pc, #56]	; (81ad8 <sysclk_init+0x40>)
   81a9e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81aa0:	213e      	movs	r1, #62	; 0x3e
   81aa2:	2000      	movs	r0, #0
   81aa4:	4b0d      	ldr	r3, [pc, #52]	; (81adc <sysclk_init+0x44>)
   81aa6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81aa8:	4c0d      	ldr	r4, [pc, #52]	; (81ae0 <sysclk_init+0x48>)
   81aaa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81aac:	2800      	cmp	r0, #0
   81aae:	d0fc      	beq.n	81aaa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81ab0:	4b0c      	ldr	r3, [pc, #48]	; (81ae4 <sysclk_init+0x4c>)
   81ab2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81ab4:	4a0c      	ldr	r2, [pc, #48]	; (81ae8 <sysclk_init+0x50>)
   81ab6:	4b0d      	ldr	r3, [pc, #52]	; (81aec <sysclk_init+0x54>)
   81ab8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81aba:	4c0d      	ldr	r4, [pc, #52]	; (81af0 <sysclk_init+0x58>)
   81abc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81abe:	2800      	cmp	r0, #0
   81ac0:	d0fc      	beq.n	81abc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81ac2:	2010      	movs	r0, #16
   81ac4:	4b0b      	ldr	r3, [pc, #44]	; (81af4 <sysclk_init+0x5c>)
   81ac6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81ac8:	4b0b      	ldr	r3, [pc, #44]	; (81af8 <sysclk_init+0x60>)
   81aca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81acc:	4801      	ldr	r0, [pc, #4]	; (81ad4 <sysclk_init+0x3c>)
   81ace:	4b02      	ldr	r3, [pc, #8]	; (81ad8 <sysclk_init+0x40>)
   81ad0:	4798      	blx	r3
   81ad2:	bd10      	pop	{r4, pc}
   81ad4:	0501bd00 	.word	0x0501bd00
   81ad8:	200700a5 	.word	0x200700a5
   81adc:	00081e8d 	.word	0x00081e8d
   81ae0:	00081ee1 	.word	0x00081ee1
   81ae4:	00081ef1 	.word	0x00081ef1
   81ae8:	200d3f01 	.word	0x200d3f01
   81aec:	400e0600 	.word	0x400e0600
   81af0:	00081f01 	.word	0x00081f01
   81af4:	00081e29 	.word	0x00081e29
   81af8:	00081fcd 	.word	0x00081fcd

00081afc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81afc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81afe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81b02:	4b16      	ldr	r3, [pc, #88]	; (81b5c <board_init+0x60>)
   81b04:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81b06:	200b      	movs	r0, #11
   81b08:	4c15      	ldr	r4, [pc, #84]	; (81b60 <board_init+0x64>)
   81b0a:	47a0      	blx	r4
   81b0c:	200c      	movs	r0, #12
   81b0e:	47a0      	blx	r4
   81b10:	200d      	movs	r0, #13
   81b12:	47a0      	blx	r4
   81b14:	200e      	movs	r0, #14
   81b16:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81b18:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81b1c:	203b      	movs	r0, #59	; 0x3b
   81b1e:	4c11      	ldr	r4, [pc, #68]	; (81b64 <board_init+0x68>)
   81b20:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81b22:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81b26:	2055      	movs	r0, #85	; 0x55
   81b28:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81b2a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81b2e:	2056      	movs	r0, #86	; 0x56
   81b30:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81b32:	490d      	ldr	r1, [pc, #52]	; (81b68 <board_init+0x6c>)
   81b34:	2068      	movs	r0, #104	; 0x68
   81b36:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81b38:	490c      	ldr	r1, [pc, #48]	; (81b6c <board_init+0x70>)
   81b3a:	205c      	movs	r0, #92	; 0x5c
   81b3c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81b3e:	4a0c      	ldr	r2, [pc, #48]	; (81b70 <board_init+0x74>)
   81b40:	f44f 7140 	mov.w	r1, #768	; 0x300
   81b44:	480b      	ldr	r0, [pc, #44]	; (81b74 <board_init+0x78>)
   81b46:	4b0c      	ldr	r3, [pc, #48]	; (81b78 <board_init+0x7c>)
   81b48:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81b4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b4e:	202b      	movs	r0, #43	; 0x2b
   81b50:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81b52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b56:	202a      	movs	r0, #42	; 0x2a
   81b58:	47a0      	blx	r4
   81b5a:	bd10      	pop	{r4, pc}
   81b5c:	400e1a50 	.word	0x400e1a50
   81b60:	00081f11 	.word	0x00081f11
   81b64:	00081c1d 	.word	0x00081c1d
   81b68:	28000079 	.word	0x28000079
   81b6c:	28000001 	.word	0x28000001
   81b70:	08000001 	.word	0x08000001
   81b74:	400e0e00 	.word	0x400e0e00
   81b78:	00081ced 	.word	0x00081ced

00081b7c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81b7c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81b7e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81b82:	d016      	beq.n	81bb2 <pio_set_peripheral+0x36>
   81b84:	d80b      	bhi.n	81b9e <pio_set_peripheral+0x22>
   81b86:	b149      	cbz	r1, 81b9c <pio_set_peripheral+0x20>
   81b88:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81b8c:	d105      	bne.n	81b9a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81b8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81b90:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81b92:	400b      	ands	r3, r1
   81b94:	ea23 0302 	bic.w	r3, r3, r2
   81b98:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81b9a:	6042      	str	r2, [r0, #4]
   81b9c:	4770      	bx	lr
	switch (ul_type) {
   81b9e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81ba2:	d0fb      	beq.n	81b9c <pio_set_peripheral+0x20>
   81ba4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81ba8:	d0f8      	beq.n	81b9c <pio_set_peripheral+0x20>
   81baa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81bae:	d1f4      	bne.n	81b9a <pio_set_peripheral+0x1e>
   81bb0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81bb2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81bb4:	4313      	orrs	r3, r2
   81bb6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81bb8:	e7ef      	b.n	81b9a <pio_set_peripheral+0x1e>

00081bba <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81bba:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81bbc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81bc0:	bf14      	ite	ne
   81bc2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81bc4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81bc6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81bca:	bf14      	ite	ne
   81bcc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81bce:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81bd0:	f012 0f02 	tst.w	r2, #2
   81bd4:	d107      	bne.n	81be6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81bd6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81bda:	bf18      	it	ne
   81bdc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81be0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81be2:	6001      	str	r1, [r0, #0]
   81be4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81be6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81bea:	e7f9      	b.n	81be0 <pio_set_input+0x26>

00081bec <pio_set_output>:
{
   81bec:	b410      	push	{r4}
   81bee:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81bf0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81bf2:	b944      	cbnz	r4, 81c06 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81bf4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81bf6:	b143      	cbz	r3, 81c0a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81bf8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81bfa:	b942      	cbnz	r2, 81c0e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81bfc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81bfe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81c00:	6001      	str	r1, [r0, #0]
}
   81c02:	bc10      	pop	{r4}
   81c04:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81c06:	6641      	str	r1, [r0, #100]	; 0x64
   81c08:	e7f5      	b.n	81bf6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81c0a:	6541      	str	r1, [r0, #84]	; 0x54
   81c0c:	e7f5      	b.n	81bfa <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81c0e:	6301      	str	r1, [r0, #48]	; 0x30
   81c10:	e7f5      	b.n	81bfe <pio_set_output+0x12>

00081c12 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81c12:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81c14:	4770      	bx	lr

00081c16 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81c16:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81c18:	4770      	bx	lr
	...

00081c1c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81c1c:	b570      	push	{r4, r5, r6, lr}
   81c1e:	b082      	sub	sp, #8
   81c20:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81c22:	0943      	lsrs	r3, r0, #5
   81c24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81c28:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81c2c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81c2e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81c32:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81c36:	d031      	beq.n	81c9c <pio_configure_pin+0x80>
   81c38:	d816      	bhi.n	81c68 <pio_configure_pin+0x4c>
   81c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81c3e:	d01b      	beq.n	81c78 <pio_configure_pin+0x5c>
   81c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c44:	d116      	bne.n	81c74 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81c46:	f000 001f 	and.w	r0, r0, #31
   81c4a:	2601      	movs	r6, #1
   81c4c:	4086      	lsls	r6, r0
   81c4e:	4632      	mov	r2, r6
   81c50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81c54:	4620      	mov	r0, r4
   81c56:	4b22      	ldr	r3, [pc, #136]	; (81ce0 <pio_configure_pin+0xc4>)
   81c58:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81c5a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81c5e:	bf14      	ite	ne
   81c60:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81c62:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81c64:	2001      	movs	r0, #1
   81c66:	e017      	b.n	81c98 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81c6c:	d021      	beq.n	81cb2 <pio_configure_pin+0x96>
   81c6e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81c72:	d01e      	beq.n	81cb2 <pio_configure_pin+0x96>
		return 0;
   81c74:	2000      	movs	r0, #0
   81c76:	e00f      	b.n	81c98 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81c78:	f000 001f 	and.w	r0, r0, #31
   81c7c:	2601      	movs	r6, #1
   81c7e:	4086      	lsls	r6, r0
   81c80:	4632      	mov	r2, r6
   81c82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c86:	4620      	mov	r0, r4
   81c88:	4b15      	ldr	r3, [pc, #84]	; (81ce0 <pio_configure_pin+0xc4>)
   81c8a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81c8c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81c90:	bf14      	ite	ne
   81c92:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81c94:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81c96:	2001      	movs	r0, #1
}
   81c98:	b002      	add	sp, #8
   81c9a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81c9c:	f000 011f 	and.w	r1, r0, #31
   81ca0:	2601      	movs	r6, #1
   81ca2:	462a      	mov	r2, r5
   81ca4:	fa06 f101 	lsl.w	r1, r6, r1
   81ca8:	4620      	mov	r0, r4
   81caa:	4b0e      	ldr	r3, [pc, #56]	; (81ce4 <pio_configure_pin+0xc8>)
   81cac:	4798      	blx	r3
	return 1;
   81cae:	4630      	mov	r0, r6
		break;
   81cb0:	e7f2      	b.n	81c98 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81cb2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81cb6:	f000 011f 	and.w	r1, r0, #31
   81cba:	2601      	movs	r6, #1
   81cbc:	ea05 0306 	and.w	r3, r5, r6
   81cc0:	9300      	str	r3, [sp, #0]
   81cc2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81cc6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81cca:	bf14      	ite	ne
   81ccc:	2200      	movne	r2, #0
   81cce:	2201      	moveq	r2, #1
   81cd0:	fa06 f101 	lsl.w	r1, r6, r1
   81cd4:	4620      	mov	r0, r4
   81cd6:	4c04      	ldr	r4, [pc, #16]	; (81ce8 <pio_configure_pin+0xcc>)
   81cd8:	47a0      	blx	r4
	return 1;
   81cda:	4630      	mov	r0, r6
		break;
   81cdc:	e7dc      	b.n	81c98 <pio_configure_pin+0x7c>
   81cde:	bf00      	nop
   81ce0:	00081b7d 	.word	0x00081b7d
   81ce4:	00081bbb 	.word	0x00081bbb
   81ce8:	00081bed 	.word	0x00081bed

00081cec <pio_configure_pin_group>:
{
   81cec:	b570      	push	{r4, r5, r6, lr}
   81cee:	b082      	sub	sp, #8
   81cf0:	4605      	mov	r5, r0
   81cf2:	460e      	mov	r6, r1
   81cf4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81cf6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81cfa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81cfe:	d027      	beq.n	81d50 <pio_configure_pin_group+0x64>
   81d00:	d811      	bhi.n	81d26 <pio_configure_pin_group+0x3a>
   81d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81d06:	d016      	beq.n	81d36 <pio_configure_pin_group+0x4a>
   81d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81d0c:	d111      	bne.n	81d32 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81d0e:	460a      	mov	r2, r1
   81d10:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81d14:	4b19      	ldr	r3, [pc, #100]	; (81d7c <pio_configure_pin_group+0x90>)
   81d16:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81d18:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81d1c:	bf14      	ite	ne
   81d1e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81d20:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81d22:	2001      	movs	r0, #1
   81d24:	e012      	b.n	81d4c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81d26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81d2a:	d015      	beq.n	81d58 <pio_configure_pin_group+0x6c>
   81d2c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81d30:	d012      	beq.n	81d58 <pio_configure_pin_group+0x6c>
		return 0;
   81d32:	2000      	movs	r0, #0
   81d34:	e00a      	b.n	81d4c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81d36:	460a      	mov	r2, r1
   81d38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d3c:	4b0f      	ldr	r3, [pc, #60]	; (81d7c <pio_configure_pin_group+0x90>)
   81d3e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81d40:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81d44:	bf14      	ite	ne
   81d46:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81d48:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81d4a:	2001      	movs	r0, #1
}
   81d4c:	b002      	add	sp, #8
   81d4e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81d50:	4b0b      	ldr	r3, [pc, #44]	; (81d80 <pio_configure_pin_group+0x94>)
   81d52:	4798      	blx	r3
	return 1;
   81d54:	2001      	movs	r0, #1
		break;
   81d56:	e7f9      	b.n	81d4c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81d58:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81d5c:	f004 0301 	and.w	r3, r4, #1
   81d60:	9300      	str	r3, [sp, #0]
   81d62:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81d66:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81d6a:	bf14      	ite	ne
   81d6c:	2200      	movne	r2, #0
   81d6e:	2201      	moveq	r2, #1
   81d70:	4631      	mov	r1, r6
   81d72:	4628      	mov	r0, r5
   81d74:	4c03      	ldr	r4, [pc, #12]	; (81d84 <pio_configure_pin_group+0x98>)
   81d76:	47a0      	blx	r4
	return 1;
   81d78:	2001      	movs	r0, #1
		break;
   81d7a:	e7e7      	b.n	81d4c <pio_configure_pin_group+0x60>
   81d7c:	00081b7d 	.word	0x00081b7d
   81d80:	00081bbb 	.word	0x00081bbb
   81d84:	00081bed 	.word	0x00081bed

00081d88 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d8c:	4604      	mov	r4, r0
   81d8e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81d90:	4b0e      	ldr	r3, [pc, #56]	; (81dcc <pio_handler_process+0x44>)
   81d92:	4798      	blx	r3
   81d94:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81d96:	4620      	mov	r0, r4
   81d98:	4b0d      	ldr	r3, [pc, #52]	; (81dd0 <pio_handler_process+0x48>)
   81d9a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81d9c:	4005      	ands	r5, r0
   81d9e:	d013      	beq.n	81dc8 <pio_handler_process+0x40>
   81da0:	4c0c      	ldr	r4, [pc, #48]	; (81dd4 <pio_handler_process+0x4c>)
   81da2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81da6:	e003      	b.n	81db0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81da8:	42b4      	cmp	r4, r6
   81daa:	d00d      	beq.n	81dc8 <pio_handler_process+0x40>
   81dac:	3410      	adds	r4, #16
		while (status != 0) {
   81dae:	b15d      	cbz	r5, 81dc8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81db0:	6820      	ldr	r0, [r4, #0]
   81db2:	4540      	cmp	r0, r8
   81db4:	d1f8      	bne.n	81da8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81db6:	6861      	ldr	r1, [r4, #4]
   81db8:	4229      	tst	r1, r5
   81dba:	d0f5      	beq.n	81da8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81dbc:	68e3      	ldr	r3, [r4, #12]
   81dbe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81dc0:	6863      	ldr	r3, [r4, #4]
   81dc2:	ea25 0503 	bic.w	r5, r5, r3
   81dc6:	e7ef      	b.n	81da8 <pio_handler_process+0x20>
   81dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81dcc:	00081c13 	.word	0x00081c13
   81dd0:	00081c17 	.word	0x00081c17
   81dd4:	2007bed0 	.word	0x2007bed0

00081dd8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81dd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81dda:	210b      	movs	r1, #11
   81ddc:	4801      	ldr	r0, [pc, #4]	; (81de4 <PIOA_Handler+0xc>)
   81dde:	4b02      	ldr	r3, [pc, #8]	; (81de8 <PIOA_Handler+0x10>)
   81de0:	4798      	blx	r3
   81de2:	bd08      	pop	{r3, pc}
   81de4:	400e0e00 	.word	0x400e0e00
   81de8:	00081d89 	.word	0x00081d89

00081dec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81dec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81dee:	210c      	movs	r1, #12
   81df0:	4801      	ldr	r0, [pc, #4]	; (81df8 <PIOB_Handler+0xc>)
   81df2:	4b02      	ldr	r3, [pc, #8]	; (81dfc <PIOB_Handler+0x10>)
   81df4:	4798      	blx	r3
   81df6:	bd08      	pop	{r3, pc}
   81df8:	400e1000 	.word	0x400e1000
   81dfc:	00081d89 	.word	0x00081d89

00081e00 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81e00:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81e02:	210d      	movs	r1, #13
   81e04:	4801      	ldr	r0, [pc, #4]	; (81e0c <PIOC_Handler+0xc>)
   81e06:	4b02      	ldr	r3, [pc, #8]	; (81e10 <PIOC_Handler+0x10>)
   81e08:	4798      	blx	r3
   81e0a:	bd08      	pop	{r3, pc}
   81e0c:	400e1200 	.word	0x400e1200
   81e10:	00081d89 	.word	0x00081d89

00081e14 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81e14:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81e16:	210e      	movs	r1, #14
   81e18:	4801      	ldr	r0, [pc, #4]	; (81e20 <PIOD_Handler+0xc>)
   81e1a:	4b02      	ldr	r3, [pc, #8]	; (81e24 <PIOD_Handler+0x10>)
   81e1c:	4798      	blx	r3
   81e1e:	bd08      	pop	{r3, pc}
   81e20:	400e1400 	.word	0x400e1400
   81e24:	00081d89 	.word	0x00081d89

00081e28 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81e28:	4a17      	ldr	r2, [pc, #92]	; (81e88 <pmc_switch_mck_to_pllack+0x60>)
   81e2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81e30:	4318      	orrs	r0, r3
   81e32:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e34:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e36:	f013 0f08 	tst.w	r3, #8
   81e3a:	d10a      	bne.n	81e52 <pmc_switch_mck_to_pllack+0x2a>
   81e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e40:	4911      	ldr	r1, [pc, #68]	; (81e88 <pmc_switch_mck_to_pllack+0x60>)
   81e42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81e44:	f012 0f08 	tst.w	r2, #8
   81e48:	d103      	bne.n	81e52 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e4a:	3b01      	subs	r3, #1
   81e4c:	d1f9      	bne.n	81e42 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81e4e:	2001      	movs	r0, #1
   81e50:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81e52:	4a0d      	ldr	r2, [pc, #52]	; (81e88 <pmc_switch_mck_to_pllack+0x60>)
   81e54:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81e56:	f023 0303 	bic.w	r3, r3, #3
   81e5a:	f043 0302 	orr.w	r3, r3, #2
   81e5e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e60:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e62:	f013 0f08 	tst.w	r3, #8
   81e66:	d10a      	bne.n	81e7e <pmc_switch_mck_to_pllack+0x56>
   81e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e6c:	4906      	ldr	r1, [pc, #24]	; (81e88 <pmc_switch_mck_to_pllack+0x60>)
   81e6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81e70:	f012 0f08 	tst.w	r2, #8
   81e74:	d105      	bne.n	81e82 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e76:	3b01      	subs	r3, #1
   81e78:	d1f9      	bne.n	81e6e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81e7a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81e7c:	4770      	bx	lr
	return 0;
   81e7e:	2000      	movs	r0, #0
   81e80:	4770      	bx	lr
   81e82:	2000      	movs	r0, #0
   81e84:	4770      	bx	lr
   81e86:	bf00      	nop
   81e88:	400e0600 	.word	0x400e0600

00081e8c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81e8c:	b9c8      	cbnz	r0, 81ec2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81e8e:	4a11      	ldr	r2, [pc, #68]	; (81ed4 <pmc_switch_mainck_to_xtal+0x48>)
   81e90:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81e92:	0209      	lsls	r1, r1, #8
   81e94:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81e96:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81e9a:	f023 0303 	bic.w	r3, r3, #3
   81e9e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81ea2:	f043 0301 	orr.w	r3, r3, #1
   81ea6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81ea8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81eaa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81eac:	f013 0f01 	tst.w	r3, #1
   81eb0:	d0fb      	beq.n	81eaa <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81eb2:	4a08      	ldr	r2, [pc, #32]	; (81ed4 <pmc_switch_mainck_to_xtal+0x48>)
   81eb4:	6a13      	ldr	r3, [r2, #32]
   81eb6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81ebe:	6213      	str	r3, [r2, #32]
   81ec0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81ec2:	4904      	ldr	r1, [pc, #16]	; (81ed4 <pmc_switch_mainck_to_xtal+0x48>)
   81ec4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81ec6:	4a04      	ldr	r2, [pc, #16]	; (81ed8 <pmc_switch_mainck_to_xtal+0x4c>)
   81ec8:	401a      	ands	r2, r3
   81eca:	4b04      	ldr	r3, [pc, #16]	; (81edc <pmc_switch_mainck_to_xtal+0x50>)
   81ecc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81ece:	620b      	str	r3, [r1, #32]
   81ed0:	4770      	bx	lr
   81ed2:	bf00      	nop
   81ed4:	400e0600 	.word	0x400e0600
   81ed8:	fec8fffc 	.word	0xfec8fffc
   81edc:	01370002 	.word	0x01370002

00081ee0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81ee0:	4b02      	ldr	r3, [pc, #8]	; (81eec <pmc_osc_is_ready_mainck+0xc>)
   81ee2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81ee4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81ee8:	4770      	bx	lr
   81eea:	bf00      	nop
   81eec:	400e0600 	.word	0x400e0600

00081ef0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81ef4:	4b01      	ldr	r3, [pc, #4]	; (81efc <pmc_disable_pllack+0xc>)
   81ef6:	629a      	str	r2, [r3, #40]	; 0x28
   81ef8:	4770      	bx	lr
   81efa:	bf00      	nop
   81efc:	400e0600 	.word	0x400e0600

00081f00 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81f00:	4b02      	ldr	r3, [pc, #8]	; (81f0c <pmc_is_locked_pllack+0xc>)
   81f02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81f04:	f000 0002 	and.w	r0, r0, #2
   81f08:	4770      	bx	lr
   81f0a:	bf00      	nop
   81f0c:	400e0600 	.word	0x400e0600

00081f10 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   81f10:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81f14:	4b05      	ldr	r3, [pc, #20]	; (81f2c <pmc_enable_periph_clk+0x1c>)
   81f16:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   81f1a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   81f1e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   81f22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   81f26:	2000      	movs	r0, #0
   81f28:	4770      	bx	lr
   81f2a:	bf00      	nop
   81f2c:	400e0600 	.word	0x400e0600

00081f30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81f30:	e7fe      	b.n	81f30 <Dummy_Handler>
	...

00081f34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81f34:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81f36:	4b1c      	ldr	r3, [pc, #112]	; (81fa8 <Reset_Handler+0x74>)
   81f38:	4a1c      	ldr	r2, [pc, #112]	; (81fac <Reset_Handler+0x78>)
   81f3a:	429a      	cmp	r2, r3
   81f3c:	d010      	beq.n	81f60 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81f3e:	4b1c      	ldr	r3, [pc, #112]	; (81fb0 <Reset_Handler+0x7c>)
   81f40:	4a19      	ldr	r2, [pc, #100]	; (81fa8 <Reset_Handler+0x74>)
   81f42:	429a      	cmp	r2, r3
   81f44:	d20c      	bcs.n	81f60 <Reset_Handler+0x2c>
   81f46:	3b01      	subs	r3, #1
   81f48:	1a9b      	subs	r3, r3, r2
   81f4a:	f023 0303 	bic.w	r3, r3, #3
   81f4e:	3304      	adds	r3, #4
   81f50:	4413      	add	r3, r2
   81f52:	4916      	ldr	r1, [pc, #88]	; (81fac <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81f54:	f851 0b04 	ldr.w	r0, [r1], #4
   81f58:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81f5c:	429a      	cmp	r2, r3
   81f5e:	d1f9      	bne.n	81f54 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81f60:	4b14      	ldr	r3, [pc, #80]	; (81fb4 <Reset_Handler+0x80>)
   81f62:	4a15      	ldr	r2, [pc, #84]	; (81fb8 <Reset_Handler+0x84>)
   81f64:	429a      	cmp	r2, r3
   81f66:	d20a      	bcs.n	81f7e <Reset_Handler+0x4a>
   81f68:	3b01      	subs	r3, #1
   81f6a:	1a9b      	subs	r3, r3, r2
   81f6c:	f023 0303 	bic.w	r3, r3, #3
   81f70:	3304      	adds	r3, #4
   81f72:	4413      	add	r3, r2
		*pDest++ = 0;
   81f74:	2100      	movs	r1, #0
   81f76:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81f7a:	4293      	cmp	r3, r2
   81f7c:	d1fb      	bne.n	81f76 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81f7e:	4b0f      	ldr	r3, [pc, #60]	; (81fbc <Reset_Handler+0x88>)
   81f80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81f84:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81f88:	490d      	ldr	r1, [pc, #52]	; (81fc0 <Reset_Handler+0x8c>)
   81f8a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81f8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81f94:	d203      	bcs.n	81f9e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81f96:	688b      	ldr	r3, [r1, #8]
   81f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81f9c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81f9e:	4b09      	ldr	r3, [pc, #36]	; (81fc4 <Reset_Handler+0x90>)
   81fa0:	4798      	blx	r3

	/* Branch to main function */
	main();
   81fa2:	4b09      	ldr	r3, [pc, #36]	; (81fc8 <Reset_Handler+0x94>)
   81fa4:	4798      	blx	r3
   81fa6:	e7fe      	b.n	81fa6 <Reset_Handler+0x72>
   81fa8:	20070000 	.word	0x20070000
   81fac:	00082554 	.word	0x00082554
   81fb0:	20070564 	.word	0x20070564
   81fb4:	2007bfa4 	.word	0x2007bfa4
   81fb8:	20070564 	.word	0x20070564
   81fbc:	00080000 	.word	0x00080000
   81fc0:	e000ed00 	.word	0xe000ed00
   81fc4:	00082201 	.word	0x00082201
   81fc8:	000821c9 	.word	0x000821c9

00081fcc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81fcc:	4b3d      	ldr	r3, [pc, #244]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   81fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81fd0:	f003 0303 	and.w	r3, r3, #3
   81fd4:	2b03      	cmp	r3, #3
   81fd6:	d80e      	bhi.n	81ff6 <SystemCoreClockUpdate+0x2a>
   81fd8:	e8df f003 	tbb	[pc, r3]
   81fdc:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81fe0:	4b39      	ldr	r3, [pc, #228]	; (820c8 <SystemCoreClockUpdate+0xfc>)
   81fe2:	695b      	ldr	r3, [r3, #20]
   81fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81fe8:	bf14      	ite	ne
   81fea:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81fee:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81ff2:	4b36      	ldr	r3, [pc, #216]	; (820cc <SystemCoreClockUpdate+0x100>)
   81ff4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81ff6:	4b33      	ldr	r3, [pc, #204]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   81ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ffe:	2b70      	cmp	r3, #112	; 0x70
   82000:	d057      	beq.n	820b2 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82002:	4b30      	ldr	r3, [pc, #192]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   82004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82006:	4931      	ldr	r1, [pc, #196]	; (820cc <SystemCoreClockUpdate+0x100>)
   82008:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8200c:	680b      	ldr	r3, [r1, #0]
   8200e:	40d3      	lsrs	r3, r2
   82010:	600b      	str	r3, [r1, #0]
   82012:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82014:	4b2b      	ldr	r3, [pc, #172]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   82016:	6a1b      	ldr	r3, [r3, #32]
   82018:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8201c:	d003      	beq.n	82026 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8201e:	4a2c      	ldr	r2, [pc, #176]	; (820d0 <SystemCoreClockUpdate+0x104>)
   82020:	4b2a      	ldr	r3, [pc, #168]	; (820cc <SystemCoreClockUpdate+0x100>)
   82022:	601a      	str	r2, [r3, #0]
   82024:	e7e7      	b.n	81ff6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82026:	4a2b      	ldr	r2, [pc, #172]	; (820d4 <SystemCoreClockUpdate+0x108>)
   82028:	4b28      	ldr	r3, [pc, #160]	; (820cc <SystemCoreClockUpdate+0x100>)
   8202a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8202c:	4b25      	ldr	r3, [pc, #148]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   8202e:	6a1b      	ldr	r3, [r3, #32]
   82030:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82034:	2b10      	cmp	r3, #16
   82036:	d005      	beq.n	82044 <SystemCoreClockUpdate+0x78>
   82038:	2b20      	cmp	r3, #32
   8203a:	d1dc      	bne.n	81ff6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8203c:	4a24      	ldr	r2, [pc, #144]	; (820d0 <SystemCoreClockUpdate+0x104>)
   8203e:	4b23      	ldr	r3, [pc, #140]	; (820cc <SystemCoreClockUpdate+0x100>)
   82040:	601a      	str	r2, [r3, #0]
				break;
   82042:	e7d8      	b.n	81ff6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82044:	4a24      	ldr	r2, [pc, #144]	; (820d8 <SystemCoreClockUpdate+0x10c>)
   82046:	4b21      	ldr	r3, [pc, #132]	; (820cc <SystemCoreClockUpdate+0x100>)
   82048:	601a      	str	r2, [r3, #0]
				break;
   8204a:	e7d4      	b.n	81ff6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8204c:	4b1d      	ldr	r3, [pc, #116]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   8204e:	6a1b      	ldr	r3, [r3, #32]
   82050:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82054:	d00c      	beq.n	82070 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82056:	4a1e      	ldr	r2, [pc, #120]	; (820d0 <SystemCoreClockUpdate+0x104>)
   82058:	4b1c      	ldr	r3, [pc, #112]	; (820cc <SystemCoreClockUpdate+0x100>)
   8205a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8205c:	4b19      	ldr	r3, [pc, #100]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   8205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82060:	f003 0303 	and.w	r3, r3, #3
   82064:	2b02      	cmp	r3, #2
   82066:	d016      	beq.n	82096 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82068:	4a1c      	ldr	r2, [pc, #112]	; (820dc <SystemCoreClockUpdate+0x110>)
   8206a:	4b18      	ldr	r3, [pc, #96]	; (820cc <SystemCoreClockUpdate+0x100>)
   8206c:	601a      	str	r2, [r3, #0]
   8206e:	e7c2      	b.n	81ff6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82070:	4a18      	ldr	r2, [pc, #96]	; (820d4 <SystemCoreClockUpdate+0x108>)
   82072:	4b16      	ldr	r3, [pc, #88]	; (820cc <SystemCoreClockUpdate+0x100>)
   82074:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82076:	4b13      	ldr	r3, [pc, #76]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   82078:	6a1b      	ldr	r3, [r3, #32]
   8207a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8207e:	2b10      	cmp	r3, #16
   82080:	d005      	beq.n	8208e <SystemCoreClockUpdate+0xc2>
   82082:	2b20      	cmp	r3, #32
   82084:	d1ea      	bne.n	8205c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82086:	4a12      	ldr	r2, [pc, #72]	; (820d0 <SystemCoreClockUpdate+0x104>)
   82088:	4b10      	ldr	r3, [pc, #64]	; (820cc <SystemCoreClockUpdate+0x100>)
   8208a:	601a      	str	r2, [r3, #0]
				break;
   8208c:	e7e6      	b.n	8205c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8208e:	4a12      	ldr	r2, [pc, #72]	; (820d8 <SystemCoreClockUpdate+0x10c>)
   82090:	4b0e      	ldr	r3, [pc, #56]	; (820cc <SystemCoreClockUpdate+0x100>)
   82092:	601a      	str	r2, [r3, #0]
				break;
   82094:	e7e2      	b.n	8205c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82096:	4a0b      	ldr	r2, [pc, #44]	; (820c4 <SystemCoreClockUpdate+0xf8>)
   82098:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8209a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8209c:	480b      	ldr	r0, [pc, #44]	; (820cc <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8209e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   820a2:	6803      	ldr	r3, [r0, #0]
   820a4:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   820a8:	b2d2      	uxtb	r2, r2
   820aa:	fbb3 f3f2 	udiv	r3, r3, r2
   820ae:	6003      	str	r3, [r0, #0]
   820b0:	e7a1      	b.n	81ff6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   820b2:	4a06      	ldr	r2, [pc, #24]	; (820cc <SystemCoreClockUpdate+0x100>)
   820b4:	6813      	ldr	r3, [r2, #0]
   820b6:	490a      	ldr	r1, [pc, #40]	; (820e0 <SystemCoreClockUpdate+0x114>)
   820b8:	fba1 1303 	umull	r1, r3, r1, r3
   820bc:	085b      	lsrs	r3, r3, #1
   820be:	6013      	str	r3, [r2, #0]
   820c0:	4770      	bx	lr
   820c2:	bf00      	nop
   820c4:	400e0600 	.word	0x400e0600
   820c8:	400e1a10 	.word	0x400e1a10
   820cc:	20070130 	.word	0x20070130
   820d0:	00b71b00 	.word	0x00b71b00
   820d4:	003d0900 	.word	0x003d0900
   820d8:	007a1200 	.word	0x007a1200
   820dc:	0e4e1c00 	.word	0x0e4e1c00
   820e0:	aaaaaaab 	.word	0xaaaaaaab

000820e4 <init_diode>:



void init_diode() {
		/* Initialize LED0 on Port B Pin 27*/
		PIOB->PIO_PER = 1 << 27;		/* Pin Enable Register (PER) */
   820e4:	4b03      	ldr	r3, [pc, #12]	; (820f4 <init_diode+0x10>)
   820e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   820ea:	601a      	str	r2, [r3, #0]
		PIOB->PIO_OER = 1 << 27;		/* Output Enable Register (OER) */
   820ec:	611a      	str	r2, [r3, #16]
		PIOB->PIO_OWER = 1 << 27;		/* Output Write Enable Register (OWER) */
   820ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   820f2:	4770      	bx	lr
   820f4:	400e1000 	.word	0x400e1000

000820f8 <set_diode>:
}
	
void set_diode() {					/* Used by led_on */
	PIOB->PIO_SODR = 1 << 27;		/* Turn off via Set Output Data Register (SODR)*/
   820f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   820fc:	4b01      	ldr	r3, [pc, #4]	; (82104 <set_diode+0xc>)
   820fe:	631a      	str	r2, [r3, #48]	; 0x30
   82100:	4770      	bx	lr
   82102:	bf00      	nop
   82104:	400e1000 	.word	0x400e1000

00082108 <clear_diode>:
}
	
void clear_diode() {					/* Used by led_off */
	PIOB->PIO_CODR = 1 << 27;		/* Turn off via Clear Output Data Register (CODR) */
   82108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8210c:	4b01      	ldr	r3, [pc, #4]	; (82114 <clear_diode+0xc>)
   8210e:	635a      	str	r2, [r3, #52]	; 0x34
   82110:	4770      	bx	lr
   82112:	bf00      	nop
   82114:	400e1000 	.word	0x400e1000

00082118 <vTaskLed_off>:

/* Create prototype */
void vTaskLed_off(void*);


void vTaskLed_off( void *pvParameters ) {
   82118:	b500      	push	{lr}
   8211a:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
   8211c:	4b06      	ldr	r3, [pc, #24]	; (82138 <vTaskLed_off+0x20>)
   8211e:	4798      	blx	r3
   82120:	ac02      	add	r4, sp, #8
   82122:	f844 0d04 	str.w	r0, [r4, #-4]!
	for(;;) {
		clear_diode();
   82126:	4e05      	ldr	r6, [pc, #20]	; (8213c <vTaskLed_off+0x24>)
		vTaskDelayUntil(&xLastWakeTime, LED_OFF_PERIOD_MS / portTICK_RATE_MS);
   82128:	4d05      	ldr	r5, [pc, #20]	; (82140 <vTaskLed_off+0x28>)
		clear_diode();
   8212a:	47b0      	blx	r6
		vTaskDelayUntil(&xLastWakeTime, LED_OFF_PERIOD_MS / portTICK_RATE_MS);
   8212c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   82130:	4620      	mov	r0, r4
   82132:	47a8      	blx	r5
   82134:	e7f9      	b.n	8212a <vTaskLed_off+0x12>
   82136:	bf00      	nop
   82138:	00081041 	.word	0x00081041
   8213c:	00082109 	.word	0x00082109
   82140:	00081295 	.word	0x00081295

00082144 <init_led_off>:
	}
}

void init_led_off( ) {
   82144:	b510      	push	{r4, lr}
   82146:	b082      	sub	sp, #8

	/* Create task */
	xTaskCreate(
   82148:	2300      	movs	r3, #0
   8214a:	9301      	str	r3, [sp, #4]
   8214c:	2202      	movs	r2, #2
   8214e:	9200      	str	r2, [sp, #0]
   82150:	22fa      	movs	r2, #250	; 0xfa
   82152:	4903      	ldr	r1, [pc, #12]	; (82160 <init_led_off+0x1c>)
   82154:	4803      	ldr	r0, [pc, #12]	; (82164 <init_led_off+0x20>)
   82156:	4c04      	ldr	r4, [pc, #16]	; (82168 <init_led_off+0x24>)
   82158:	47a0      	blx	r4
	250,				/* Stack size in words, not bytes. */								// What's this?
	NULL,				/* Parameter passed into the task. */
	2,					/* Priority at which the task is created. */
	NULL 				/* Used to pass out the created task's handle. */
	);
   8215a:	b002      	add	sp, #8
   8215c:	bd10      	pop	{r4, pc}
   8215e:	bf00      	nop
   82160:	00082510 	.word	0x00082510
   82164:	00082119 	.word	0x00082119
   82168:	00080db1 	.word	0x00080db1

0008216c <vTaskLed_on>:
#include <diode.h>

/* Create prototype */
void vTaskLed_on(void*);																			// Why is this needed?

void vTaskLed_on( void *pvParameters ) {
   8216c:	b500      	push	{lr}
   8216e:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
   82170:	4b08      	ldr	r3, [pc, #32]	; (82194 <vTaskLed_on+0x28>)
   82172:	4798      	blx	r3
   82174:	ab02      	add	r3, sp, #8
   82176:	f843 0d04 	str.w	r0, [r3, #-4]!
	vTaskDelayUntil(&xLastWakeTime, 8000 / portTICK_RATE_MS);
   8217a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   8217e:	4618      	mov	r0, r3
   82180:	4b05      	ldr	r3, [pc, #20]	; (82198 <vTaskLed_on+0x2c>)
   82182:	4798      	blx	r3
	for(;;) {
		set_diode();
   82184:	4d05      	ldr	r5, [pc, #20]	; (8219c <vTaskLed_on+0x30>)
		vTaskDelayUntil(&xLastWakeTime, LED_ON_PERIOD_MS / portTICK_RATE_MS);
   82186:	4c04      	ldr	r4, [pc, #16]	; (82198 <vTaskLed_on+0x2c>)
		set_diode();
   82188:	47a8      	blx	r5
		vTaskDelayUntil(&xLastWakeTime, LED_ON_PERIOD_MS / portTICK_RATE_MS);
   8218a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   8218e:	a801      	add	r0, sp, #4
   82190:	47a0      	blx	r4
   82192:	e7f9      	b.n	82188 <vTaskLed_on+0x1c>
   82194:	00081041 	.word	0x00081041
   82198:	00081295 	.word	0x00081295
   8219c:	000820f9 	.word	0x000820f9

000821a0 <init_led_on>:
	}
}

void init_led_on( )
{
   821a0:	b510      	push	{r4, lr}
   821a2:	b082      	sub	sp, #8

	/* Create task */
	xTaskCreate(
   821a4:	2300      	movs	r3, #0
   821a6:	9301      	str	r3, [sp, #4]
   821a8:	2201      	movs	r2, #1
   821aa:	9200      	str	r2, [sp, #0]
   821ac:	22fa      	movs	r2, #250	; 0xfa
   821ae:	4903      	ldr	r1, [pc, #12]	; (821bc <init_led_on+0x1c>)
   821b0:	4803      	ldr	r0, [pc, #12]	; (821c0 <init_led_on+0x20>)
   821b2:	4c04      	ldr	r4, [pc, #16]	; (821c4 <init_led_on+0x24>)
   821b4:	47a0      	blx	r4
	250,				/* Stack size in words, not bytes. */								// What's this?
	NULL,				/* Parameter passed into the task. */
	1,					/* Priority at which the task is created. */
	NULL 				/* Used to pass out the created task's handle. */
	);
   821b6:	b002      	add	sp, #8
   821b8:	bd10      	pop	{r4, pc}
   821ba:	bf00      	nop
   821bc:	00082520 	.word	0x00082520
   821c0:	0008216d 	.word	0x0008216d
   821c4:	00080db1 	.word	0x00080db1

000821c8 <main>:
#include <led_off.h>
#include <led_on.h>
#include <diode.h>

int main (void)
{
   821c8:	b508      	push	{r3, lr}
	/* System clock initialization */
	sysclk_init();
   821ca:	4b07      	ldr	r3, [pc, #28]	; (821e8 <main+0x20>)
   821cc:	4798      	blx	r3
	
	/* Board peripherals initialization */
	board_init();
   821ce:	4b07      	ldr	r3, [pc, #28]	; (821ec <main+0x24>)
   821d0:	4798      	blx	r3
	
	/* Init amber LED diode */
	init_diode();
   821d2:	4b07      	ldr	r3, [pc, #28]	; (821f0 <main+0x28>)
   821d4:	4798      	blx	r3
	
	/* Init tasks */
	init_led_off(); // Changing order doesn't do shit probably
   821d6:	4b07      	ldr	r3, [pc, #28]	; (821f4 <main+0x2c>)
   821d8:	4798      	blx	r3
	init_led_on();
   821da:	4b07      	ldr	r3, [pc, #28]	; (821f8 <main+0x30>)
   821dc:	4798      	blx	r3


	
	/* Start scheduler */
	vTaskStartScheduler();
   821de:	4b07      	ldr	r3, [pc, #28]	; (821fc <main+0x34>)
   821e0:	4798      	blx	r3
	
	/* Should never reach here ... */
	return 1;
}
   821e2:	2001      	movs	r0, #1
   821e4:	bd08      	pop	{r3, pc}
   821e6:	bf00      	nop
   821e8:	00081a99 	.word	0x00081a99
   821ec:	00081afd 	.word	0x00081afd
   821f0:	000820e5 	.word	0x000820e5
   821f4:	00082145 	.word	0x00082145
   821f8:	000821a1 	.word	0x000821a1
   821fc:	00080fa5 	.word	0x00080fa5

00082200 <__libc_init_array>:
   82200:	b570      	push	{r4, r5, r6, lr}
   82202:	4e0f      	ldr	r6, [pc, #60]	; (82240 <__libc_init_array+0x40>)
   82204:	4d0f      	ldr	r5, [pc, #60]	; (82244 <__libc_init_array+0x44>)
   82206:	1b76      	subs	r6, r6, r5
   82208:	10b6      	asrs	r6, r6, #2
   8220a:	bf18      	it	ne
   8220c:	2400      	movne	r4, #0
   8220e:	d005      	beq.n	8221c <__libc_init_array+0x1c>
   82210:	3401      	adds	r4, #1
   82212:	f855 3b04 	ldr.w	r3, [r5], #4
   82216:	4798      	blx	r3
   82218:	42a6      	cmp	r6, r4
   8221a:	d1f9      	bne.n	82210 <__libc_init_array+0x10>
   8221c:	4e0a      	ldr	r6, [pc, #40]	; (82248 <__libc_init_array+0x48>)
   8221e:	4d0b      	ldr	r5, [pc, #44]	; (8224c <__libc_init_array+0x4c>)
   82220:	f000 f986 	bl	82530 <_init>
   82224:	1b76      	subs	r6, r6, r5
   82226:	10b6      	asrs	r6, r6, #2
   82228:	bf18      	it	ne
   8222a:	2400      	movne	r4, #0
   8222c:	d006      	beq.n	8223c <__libc_init_array+0x3c>
   8222e:	3401      	adds	r4, #1
   82230:	f855 3b04 	ldr.w	r3, [r5], #4
   82234:	4798      	blx	r3
   82236:	42a6      	cmp	r6, r4
   82238:	d1f9      	bne.n	8222e <__libc_init_array+0x2e>
   8223a:	bd70      	pop	{r4, r5, r6, pc}
   8223c:	bd70      	pop	{r4, r5, r6, pc}
   8223e:	bf00      	nop
   82240:	0008253c 	.word	0x0008253c
   82244:	0008253c 	.word	0x0008253c
   82248:	00082544 	.word	0x00082544
   8224c:	0008253c 	.word	0x0008253c

00082250 <memcpy>:
   82250:	4684      	mov	ip, r0
   82252:	ea41 0300 	orr.w	r3, r1, r0
   82256:	f013 0303 	ands.w	r3, r3, #3
   8225a:	d149      	bne.n	822f0 <memcpy+0xa0>
   8225c:	3a40      	subs	r2, #64	; 0x40
   8225e:	d323      	bcc.n	822a8 <memcpy+0x58>
   82260:	680b      	ldr	r3, [r1, #0]
   82262:	6003      	str	r3, [r0, #0]
   82264:	684b      	ldr	r3, [r1, #4]
   82266:	6043      	str	r3, [r0, #4]
   82268:	688b      	ldr	r3, [r1, #8]
   8226a:	6083      	str	r3, [r0, #8]
   8226c:	68cb      	ldr	r3, [r1, #12]
   8226e:	60c3      	str	r3, [r0, #12]
   82270:	690b      	ldr	r3, [r1, #16]
   82272:	6103      	str	r3, [r0, #16]
   82274:	694b      	ldr	r3, [r1, #20]
   82276:	6143      	str	r3, [r0, #20]
   82278:	698b      	ldr	r3, [r1, #24]
   8227a:	6183      	str	r3, [r0, #24]
   8227c:	69cb      	ldr	r3, [r1, #28]
   8227e:	61c3      	str	r3, [r0, #28]
   82280:	6a0b      	ldr	r3, [r1, #32]
   82282:	6203      	str	r3, [r0, #32]
   82284:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82286:	6243      	str	r3, [r0, #36]	; 0x24
   82288:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8228a:	6283      	str	r3, [r0, #40]	; 0x28
   8228c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8228e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82290:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82292:	6303      	str	r3, [r0, #48]	; 0x30
   82294:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82296:	6343      	str	r3, [r0, #52]	; 0x34
   82298:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8229a:	6383      	str	r3, [r0, #56]	; 0x38
   8229c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8229e:	63c3      	str	r3, [r0, #60]	; 0x3c
   822a0:	3040      	adds	r0, #64	; 0x40
   822a2:	3140      	adds	r1, #64	; 0x40
   822a4:	3a40      	subs	r2, #64	; 0x40
   822a6:	d2db      	bcs.n	82260 <memcpy+0x10>
   822a8:	3230      	adds	r2, #48	; 0x30
   822aa:	d30b      	bcc.n	822c4 <memcpy+0x74>
   822ac:	680b      	ldr	r3, [r1, #0]
   822ae:	6003      	str	r3, [r0, #0]
   822b0:	684b      	ldr	r3, [r1, #4]
   822b2:	6043      	str	r3, [r0, #4]
   822b4:	688b      	ldr	r3, [r1, #8]
   822b6:	6083      	str	r3, [r0, #8]
   822b8:	68cb      	ldr	r3, [r1, #12]
   822ba:	60c3      	str	r3, [r0, #12]
   822bc:	3010      	adds	r0, #16
   822be:	3110      	adds	r1, #16
   822c0:	3a10      	subs	r2, #16
   822c2:	d2f3      	bcs.n	822ac <memcpy+0x5c>
   822c4:	320c      	adds	r2, #12
   822c6:	d305      	bcc.n	822d4 <memcpy+0x84>
   822c8:	f851 3b04 	ldr.w	r3, [r1], #4
   822cc:	f840 3b04 	str.w	r3, [r0], #4
   822d0:	3a04      	subs	r2, #4
   822d2:	d2f9      	bcs.n	822c8 <memcpy+0x78>
   822d4:	3204      	adds	r2, #4
   822d6:	d008      	beq.n	822ea <memcpy+0x9a>
   822d8:	07d2      	lsls	r2, r2, #31
   822da:	bf1c      	itt	ne
   822dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   822e0:	f800 3b01 	strbne.w	r3, [r0], #1
   822e4:	d301      	bcc.n	822ea <memcpy+0x9a>
   822e6:	880b      	ldrh	r3, [r1, #0]
   822e8:	8003      	strh	r3, [r0, #0]
   822ea:	4660      	mov	r0, ip
   822ec:	4770      	bx	lr
   822ee:	bf00      	nop
   822f0:	2a08      	cmp	r2, #8
   822f2:	d313      	bcc.n	8231c <memcpy+0xcc>
   822f4:	078b      	lsls	r3, r1, #30
   822f6:	d0b1      	beq.n	8225c <memcpy+0xc>
   822f8:	f010 0303 	ands.w	r3, r0, #3
   822fc:	d0ae      	beq.n	8225c <memcpy+0xc>
   822fe:	f1c3 0304 	rsb	r3, r3, #4
   82302:	1ad2      	subs	r2, r2, r3
   82304:	07db      	lsls	r3, r3, #31
   82306:	bf1c      	itt	ne
   82308:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8230c:	f800 3b01 	strbne.w	r3, [r0], #1
   82310:	d3a4      	bcc.n	8225c <memcpy+0xc>
   82312:	f831 3b02 	ldrh.w	r3, [r1], #2
   82316:	f820 3b02 	strh.w	r3, [r0], #2
   8231a:	e79f      	b.n	8225c <memcpy+0xc>
   8231c:	3a04      	subs	r2, #4
   8231e:	d3d9      	bcc.n	822d4 <memcpy+0x84>
   82320:	3a01      	subs	r2, #1
   82322:	f811 3b01 	ldrb.w	r3, [r1], #1
   82326:	f800 3b01 	strb.w	r3, [r0], #1
   8232a:	d2f9      	bcs.n	82320 <memcpy+0xd0>
   8232c:	780b      	ldrb	r3, [r1, #0]
   8232e:	7003      	strb	r3, [r0, #0]
   82330:	784b      	ldrb	r3, [r1, #1]
   82332:	7043      	strb	r3, [r0, #1]
   82334:	788b      	ldrb	r3, [r1, #2]
   82336:	7083      	strb	r3, [r0, #2]
   82338:	4660      	mov	r0, ip
   8233a:	4770      	bx	lr

0008233c <memset>:
   8233c:	b470      	push	{r4, r5, r6}
   8233e:	0786      	lsls	r6, r0, #30
   82340:	d046      	beq.n	823d0 <memset+0x94>
   82342:	1e54      	subs	r4, r2, #1
   82344:	2a00      	cmp	r2, #0
   82346:	d041      	beq.n	823cc <memset+0x90>
   82348:	b2ca      	uxtb	r2, r1
   8234a:	4603      	mov	r3, r0
   8234c:	e002      	b.n	82354 <memset+0x18>
   8234e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82352:	d33b      	bcc.n	823cc <memset+0x90>
   82354:	f803 2b01 	strb.w	r2, [r3], #1
   82358:	079d      	lsls	r5, r3, #30
   8235a:	d1f8      	bne.n	8234e <memset+0x12>
   8235c:	2c03      	cmp	r4, #3
   8235e:	d92e      	bls.n	823be <memset+0x82>
   82360:	b2cd      	uxtb	r5, r1
   82362:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82366:	2c0f      	cmp	r4, #15
   82368:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8236c:	d919      	bls.n	823a2 <memset+0x66>
   8236e:	4626      	mov	r6, r4
   82370:	f103 0210 	add.w	r2, r3, #16
   82374:	3e10      	subs	r6, #16
   82376:	2e0f      	cmp	r6, #15
   82378:	f842 5c10 	str.w	r5, [r2, #-16]
   8237c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82380:	f842 5c08 	str.w	r5, [r2, #-8]
   82384:	f842 5c04 	str.w	r5, [r2, #-4]
   82388:	f102 0210 	add.w	r2, r2, #16
   8238c:	d8f2      	bhi.n	82374 <memset+0x38>
   8238e:	f1a4 0210 	sub.w	r2, r4, #16
   82392:	f022 020f 	bic.w	r2, r2, #15
   82396:	f004 040f 	and.w	r4, r4, #15
   8239a:	3210      	adds	r2, #16
   8239c:	2c03      	cmp	r4, #3
   8239e:	4413      	add	r3, r2
   823a0:	d90d      	bls.n	823be <memset+0x82>
   823a2:	461e      	mov	r6, r3
   823a4:	4622      	mov	r2, r4
   823a6:	3a04      	subs	r2, #4
   823a8:	2a03      	cmp	r2, #3
   823aa:	f846 5b04 	str.w	r5, [r6], #4
   823ae:	d8fa      	bhi.n	823a6 <memset+0x6a>
   823b0:	1f22      	subs	r2, r4, #4
   823b2:	f022 0203 	bic.w	r2, r2, #3
   823b6:	3204      	adds	r2, #4
   823b8:	4413      	add	r3, r2
   823ba:	f004 0403 	and.w	r4, r4, #3
   823be:	b12c      	cbz	r4, 823cc <memset+0x90>
   823c0:	b2c9      	uxtb	r1, r1
   823c2:	441c      	add	r4, r3
   823c4:	f803 1b01 	strb.w	r1, [r3], #1
   823c8:	429c      	cmp	r4, r3
   823ca:	d1fb      	bne.n	823c4 <memset+0x88>
   823cc:	bc70      	pop	{r4, r5, r6}
   823ce:	4770      	bx	lr
   823d0:	4614      	mov	r4, r2
   823d2:	4603      	mov	r3, r0
   823d4:	e7c2      	b.n	8235c <memset+0x20>
   823d6:	bf00      	nop

000823d8 <register_fini>:
   823d8:	4b02      	ldr	r3, [pc, #8]	; (823e4 <register_fini+0xc>)
   823da:	b113      	cbz	r3, 823e2 <register_fini+0xa>
   823dc:	4802      	ldr	r0, [pc, #8]	; (823e8 <register_fini+0x10>)
   823de:	f000 b805 	b.w	823ec <atexit>
   823e2:	4770      	bx	lr
   823e4:	00000000 	.word	0x00000000
   823e8:	000823f9 	.word	0x000823f9

000823ec <atexit>:
   823ec:	2300      	movs	r3, #0
   823ee:	4601      	mov	r1, r0
   823f0:	461a      	mov	r2, r3
   823f2:	4618      	mov	r0, r3
   823f4:	f000 b81e 	b.w	82434 <__register_exitproc>

000823f8 <__libc_fini_array>:
   823f8:	b538      	push	{r3, r4, r5, lr}
   823fa:	4c0a      	ldr	r4, [pc, #40]	; (82424 <__libc_fini_array+0x2c>)
   823fc:	4d0a      	ldr	r5, [pc, #40]	; (82428 <__libc_fini_array+0x30>)
   823fe:	1b64      	subs	r4, r4, r5
   82400:	10a4      	asrs	r4, r4, #2
   82402:	d00a      	beq.n	8241a <__libc_fini_array+0x22>
   82404:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82408:	3b01      	subs	r3, #1
   8240a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8240e:	3c01      	subs	r4, #1
   82410:	f855 3904 	ldr.w	r3, [r5], #-4
   82414:	4798      	blx	r3
   82416:	2c00      	cmp	r4, #0
   82418:	d1f9      	bne.n	8240e <__libc_fini_array+0x16>
   8241a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8241e:	f000 b891 	b.w	82544 <_fini>
   82422:	bf00      	nop
   82424:	00082554 	.word	0x00082554
   82428:	00082550 	.word	0x00082550

0008242c <__retarget_lock_acquire_recursive>:
   8242c:	4770      	bx	lr
   8242e:	bf00      	nop

00082430 <__retarget_lock_release_recursive>:
   82430:	4770      	bx	lr
   82432:	bf00      	nop

00082434 <__register_exitproc>:
   82434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82438:	4d2c      	ldr	r5, [pc, #176]	; (824ec <__register_exitproc+0xb8>)
   8243a:	4606      	mov	r6, r0
   8243c:	6828      	ldr	r0, [r5, #0]
   8243e:	4698      	mov	r8, r3
   82440:	460f      	mov	r7, r1
   82442:	4691      	mov	r9, r2
   82444:	f7ff fff2 	bl	8242c <__retarget_lock_acquire_recursive>
   82448:	4b29      	ldr	r3, [pc, #164]	; (824f0 <__register_exitproc+0xbc>)
   8244a:	681c      	ldr	r4, [r3, #0]
   8244c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   82450:	2b00      	cmp	r3, #0
   82452:	d03e      	beq.n	824d2 <__register_exitproc+0x9e>
   82454:	685a      	ldr	r2, [r3, #4]
   82456:	2a1f      	cmp	r2, #31
   82458:	dc1c      	bgt.n	82494 <__register_exitproc+0x60>
   8245a:	f102 0e01 	add.w	lr, r2, #1
   8245e:	b176      	cbz	r6, 8247e <__register_exitproc+0x4a>
   82460:	2101      	movs	r1, #1
   82462:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   82466:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8246a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8246e:	4091      	lsls	r1, r2
   82470:	4308      	orrs	r0, r1
   82472:	2e02      	cmp	r6, #2
   82474:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82478:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8247c:	d023      	beq.n	824c6 <__register_exitproc+0x92>
   8247e:	3202      	adds	r2, #2
   82480:	f8c3 e004 	str.w	lr, [r3, #4]
   82484:	6828      	ldr	r0, [r5, #0]
   82486:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8248a:	f7ff ffd1 	bl	82430 <__retarget_lock_release_recursive>
   8248e:	2000      	movs	r0, #0
   82490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82494:	4b17      	ldr	r3, [pc, #92]	; (824f4 <__register_exitproc+0xc0>)
   82496:	b30b      	cbz	r3, 824dc <__register_exitproc+0xa8>
   82498:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8249c:	f3af 8000 	nop.w
   824a0:	4603      	mov	r3, r0
   824a2:	b1d8      	cbz	r0, 824dc <__register_exitproc+0xa8>
   824a4:	2000      	movs	r0, #0
   824a6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   824aa:	f04f 0e01 	mov.w	lr, #1
   824ae:	6058      	str	r0, [r3, #4]
   824b0:	6019      	str	r1, [r3, #0]
   824b2:	4602      	mov	r2, r0
   824b4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   824b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   824bc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   824c0:	2e00      	cmp	r6, #0
   824c2:	d0dc      	beq.n	8247e <__register_exitproc+0x4a>
   824c4:	e7cc      	b.n	82460 <__register_exitproc+0x2c>
   824c6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   824ca:	4301      	orrs	r1, r0
   824cc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   824d0:	e7d5      	b.n	8247e <__register_exitproc+0x4a>
   824d2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   824d6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   824da:	e7bb      	b.n	82454 <__register_exitproc+0x20>
   824dc:	6828      	ldr	r0, [r5, #0]
   824de:	f7ff ffa7 	bl	82430 <__retarget_lock_release_recursive>
   824e2:	f04f 30ff 	mov.w	r0, #4294967295
   824e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   824ea:	bf00      	nop
   824ec:	20070560 	.word	0x20070560
   824f0:	0008252c 	.word	0x0008252c
   824f4:	00000000 	.word	0x00000000
   824f8:	454c4449 	.word	0x454c4449
   824fc:	00000000 	.word	0x00000000
   82500:	51726d54 	.word	0x51726d54
   82504:	00000000 	.word	0x00000000
   82508:	20726d54 	.word	0x20726d54
   8250c:	00637653 	.word	0x00637653
   82510:	5f64654c 	.word	0x5f64654c
   82514:	2066666f 	.word	0x2066666f
   82518:	6b736154 	.word	0x6b736154
   8251c:	00000000 	.word	0x00000000
   82520:	5f64654c 	.word	0x5f64654c
   82524:	54206e6f 	.word	0x54206e6f
   82528:	006b7361 	.word	0x006b7361

0008252c <_global_impure_ptr>:
   8252c:	20070138                                8.. 

00082530 <_init>:
   82530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82532:	bf00      	nop
   82534:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82536:	bc08      	pop	{r3}
   82538:	469e      	mov	lr, r3
   8253a:	4770      	bx	lr

0008253c <__init_array_start>:
   8253c:	000823d9 	.word	0x000823d9

00082540 <__frame_dummy_init_array_entry>:
   82540:	00080119                                ....

00082544 <_fini>:
   82544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82546:	bf00      	nop
   82548:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8254a:	bc08      	pop	{r3}
   8254c:	469e      	mov	lr, r3
   8254e:	4770      	bx	lr

00082550 <__fini_array_start>:
   82550:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	2007bf80                                ... 
