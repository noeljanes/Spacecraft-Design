
RTOS5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057dc  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000857dc  000857dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  000857e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000ba94  20070ae0  000862c4  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  2007c574  00091d58  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001da31  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004244  00000000  00000000  0003e593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000085cf  00000000  00000000  000427d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000dc0  00000000  00000000  0004ada6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f18  00000000  00000000  0004bb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bd8c  00000000  00000000  0004ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014a19  00000000  00000000  0006880a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006d163  00000000  00000000  0007d223  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002d6c  00000000  00000000  000ea388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	78 e5 07 20 55 25 08 00 51 25 08 00 51 25 08 00     x.. U%..Q%..Q%..
   80010:	51 25 08 00 51 25 08 00 51 25 08 00 00 00 00 00     Q%..Q%..Q%......
	...
   8002c:	a1 08 08 00 51 25 08 00 00 00 00 00 41 09 08 00     ....Q%......A...
   8003c:	89 09 08 00 51 25 08 00 51 25 08 00 51 25 08 00     ....Q%..Q%..Q%..
   8004c:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..
   8005c:	51 25 08 00 f5 02 08 00 51 25 08 00 00 00 00 00     Q%......Q%......
   8006c:	f9 23 08 00 0d 24 08 00 21 24 08 00 35 24 08 00     .#...$..!$..5$..
	...
   80084:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..
   80094:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..
   800a4:	00 00 00 00 51 25 08 00 51 25 08 00 51 25 08 00     ....Q%..Q%..Q%..
   800b4:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..
   800c4:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..
   800d4:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..
   800e4:	51 25 08 00 51 25 08 00 51 25 08 00 51 25 08 00     Q%..Q%..Q%..Q%..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	000857e4 	.word	0x000857e4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000857e4 	.word	0x000857e4
   80154:	20070ae4 	.word	0x20070ae4
   80158:	000857e4 	.word	0x000857e4
   8015c:	00000000 	.word	0x00000000

00080160 <vTaskTC>:


/** 
 * TC task function, interprets received data from UART and converts the character received to a number
 */
void vTaskTC( void *pvParameters ) {
   80160:	b508      	push	{r3, lr}
	if ( xQueueReceive( xCommandQueue , &blink_cmd , portTICK_PERIOD_MS) == pdTRUE ) {
   80162:	2201      	movs	r2, #1
   80164:	490d      	ldr	r1, [pc, #52]	; (8019c <vTaskTC+0x3c>)
   80166:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <vTaskTC+0x40>)
   80168:	6818      	ldr	r0, [r3, #0]
   8016a:	4b0e      	ldr	r3, [pc, #56]	; (801a4 <vTaskTC+0x44>)
   8016c:	4798      	blx	r3
   8016e:	2801      	cmp	r0, #1
   80170:	d000      	beq.n	80174 <vTaskTC+0x14>
   80172:	bd08      	pop	{r3, pc}

		switch (blink_cmd) {
   80174:	4b09      	ldr	r3, [pc, #36]	; (8019c <vTaskTC+0x3c>)
   80176:	781b      	ldrb	r3, [r3, #0]
   80178:	2b62      	cmp	r3, #98	; 0x62
   8017a:	d007      	beq.n	8018c <vTaskTC+0x2c>
   8017c:	2b63      	cmp	r3, #99	; 0x63
   8017e:	d009      	beq.n	80194 <vTaskTC+0x34>
   80180:	2b61      	cmp	r3, #97	; 0x61
   80182:	d1f6      	bne.n	80172 <vTaskTC+0x12>

			case 'a':
				set_cmd('0');
   80184:	2030      	movs	r0, #48	; 0x30
   80186:	4b08      	ldr	r3, [pc, #32]	; (801a8 <vTaskTC+0x48>)
   80188:	4798      	blx	r3
				break;
   8018a:	bd08      	pop	{r3, pc}
			case 'b':
				set_cmd('1');
   8018c:	2031      	movs	r0, #49	; 0x31
   8018e:	4b06      	ldr	r3, [pc, #24]	; (801a8 <vTaskTC+0x48>)
   80190:	4798      	blx	r3
				break;
   80192:	bd08      	pop	{r3, pc}
			case 'c':
				set_cmd('2');
   80194:	2032      	movs	r0, #50	; 0x32
   80196:	4b04      	ldr	r3, [pc, #16]	; (801a8 <vTaskTC+0x48>)
   80198:	4798      	blx	r3
				break;
		}
	}
}
   8019a:	e7ea      	b.n	80172 <vTaskTC+0x12>
   8019c:	20070afd 	.word	0x20070afd
   801a0:	2007c4f4 	.word	0x2007c4f4
   801a4:	00081069 	.word	0x00081069
   801a8:	0008069d 	.word	0x0008069d

000801ac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   801ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   801ae:	b083      	sub	sp, #12
   801b0:	4604      	mov	r4, r0
   801b2:	460d      	mov	r5, r1
	uint32_t val = 0;
   801b4:	2300      	movs	r3, #0
   801b6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801b8:	4b20      	ldr	r3, [pc, #128]	; (8023c <usart_serial_getchar+0x90>)
   801ba:	4298      	cmp	r0, r3
   801bc:	d00d      	beq.n	801da <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801be:	4b20      	ldr	r3, [pc, #128]	; (80240 <usart_serial_getchar+0x94>)
   801c0:	4298      	cmp	r0, r3
   801c2:	d012      	beq.n	801ea <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801c4:	4b1f      	ldr	r3, [pc, #124]	; (80244 <usart_serial_getchar+0x98>)
   801c6:	4298      	cmp	r0, r3
   801c8:	d019      	beq.n	801fe <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801ca:	4b1f      	ldr	r3, [pc, #124]	; (80248 <usart_serial_getchar+0x9c>)
   801cc:	429c      	cmp	r4, r3
   801ce:	d020      	beq.n	80212 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801d0:	4b1e      	ldr	r3, [pc, #120]	; (8024c <usart_serial_getchar+0xa0>)
   801d2:	429c      	cmp	r4, r3
   801d4:	d027      	beq.n	80226 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   801d6:	b003      	add	sp, #12
   801d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   801da:	461f      	mov	r7, r3
   801dc:	4e1c      	ldr	r6, [pc, #112]	; (80250 <usart_serial_getchar+0xa4>)
   801de:	4629      	mov	r1, r5
   801e0:	4638      	mov	r0, r7
   801e2:	47b0      	blx	r6
   801e4:	2800      	cmp	r0, #0
   801e6:	d1fa      	bne.n	801de <usart_serial_getchar+0x32>
   801e8:	e7ef      	b.n	801ca <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   801ea:	461f      	mov	r7, r3
   801ec:	4e19      	ldr	r6, [pc, #100]	; (80254 <usart_serial_getchar+0xa8>)
   801ee:	a901      	add	r1, sp, #4
   801f0:	4638      	mov	r0, r7
   801f2:	47b0      	blx	r6
   801f4:	2800      	cmp	r0, #0
   801f6:	d1fa      	bne.n	801ee <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801f8:	9b01      	ldr	r3, [sp, #4]
   801fa:	702b      	strb	r3, [r5, #0]
   801fc:	e7e8      	b.n	801d0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   801fe:	461e      	mov	r6, r3
   80200:	4c14      	ldr	r4, [pc, #80]	; (80254 <usart_serial_getchar+0xa8>)
   80202:	a901      	add	r1, sp, #4
   80204:	4630      	mov	r0, r6
   80206:	47a0      	blx	r4
   80208:	2800      	cmp	r0, #0
   8020a:	d1fa      	bne.n	80202 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8020c:	9b01      	ldr	r3, [sp, #4]
   8020e:	702b      	strb	r3, [r5, #0]
   80210:	e7e1      	b.n	801d6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80212:	461e      	mov	r6, r3
   80214:	4c0f      	ldr	r4, [pc, #60]	; (80254 <usart_serial_getchar+0xa8>)
   80216:	a901      	add	r1, sp, #4
   80218:	4630      	mov	r0, r6
   8021a:	47a0      	blx	r4
   8021c:	2800      	cmp	r0, #0
   8021e:	d1fa      	bne.n	80216 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80220:	9b01      	ldr	r3, [sp, #4]
   80222:	702b      	strb	r3, [r5, #0]
   80224:	e7d7      	b.n	801d6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80226:	461e      	mov	r6, r3
   80228:	4c0a      	ldr	r4, [pc, #40]	; (80254 <usart_serial_getchar+0xa8>)
   8022a:	a901      	add	r1, sp, #4
   8022c:	4630      	mov	r0, r6
   8022e:	47a0      	blx	r4
   80230:	2800      	cmp	r0, #0
   80232:	d1fa      	bne.n	8022a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80234:	9b01      	ldr	r3, [sp, #4]
   80236:	702b      	strb	r3, [r5, #0]
}
   80238:	e7cd      	b.n	801d6 <usart_serial_getchar+0x2a>
   8023a:	bf00      	nop
   8023c:	400e0800 	.word	0x400e0800
   80240:	40098000 	.word	0x40098000
   80244:	4009c000 	.word	0x4009c000
   80248:	400a0000 	.word	0x400a0000
   8024c:	400a4000 	.word	0x400a4000
   80250:	00080777 	.word	0x00080777
   80254:	000804a5 	.word	0x000804a5

00080258 <usart_serial_putchar>:
{
   80258:	b570      	push	{r4, r5, r6, lr}
   8025a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   8025c:	4b1e      	ldr	r3, [pc, #120]	; (802d8 <usart_serial_putchar+0x80>)
   8025e:	4298      	cmp	r0, r3
   80260:	d00d      	beq.n	8027e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80262:	4b1e      	ldr	r3, [pc, #120]	; (802dc <usart_serial_putchar+0x84>)
   80264:	4298      	cmp	r0, r3
   80266:	d013      	beq.n	80290 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80268:	4b1d      	ldr	r3, [pc, #116]	; (802e0 <usart_serial_putchar+0x88>)
   8026a:	4298      	cmp	r0, r3
   8026c:	d019      	beq.n	802a2 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8026e:	4b1d      	ldr	r3, [pc, #116]	; (802e4 <usart_serial_putchar+0x8c>)
   80270:	4298      	cmp	r0, r3
   80272:	d01f      	beq.n	802b4 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80274:	4b1c      	ldr	r3, [pc, #112]	; (802e8 <usart_serial_putchar+0x90>)
   80276:	4298      	cmp	r0, r3
   80278:	d025      	beq.n	802c6 <usart_serial_putchar+0x6e>
	return 0;
   8027a:	2000      	movs	r0, #0
}
   8027c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8027e:	461e      	mov	r6, r3
   80280:	4d1a      	ldr	r5, [pc, #104]	; (802ec <usart_serial_putchar+0x94>)
   80282:	4621      	mov	r1, r4
   80284:	4630      	mov	r0, r6
   80286:	47a8      	blx	r5
   80288:	2800      	cmp	r0, #0
   8028a:	d1fa      	bne.n	80282 <usart_serial_putchar+0x2a>
		return 1;
   8028c:	2001      	movs	r0, #1
   8028e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80290:	461e      	mov	r6, r3
   80292:	4d17      	ldr	r5, [pc, #92]	; (802f0 <usart_serial_putchar+0x98>)
   80294:	4621      	mov	r1, r4
   80296:	4630      	mov	r0, r6
   80298:	47a8      	blx	r5
   8029a:	2800      	cmp	r0, #0
   8029c:	d1fa      	bne.n	80294 <usart_serial_putchar+0x3c>
		return 1;
   8029e:	2001      	movs	r0, #1
   802a0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   802a2:	461e      	mov	r6, r3
   802a4:	4d12      	ldr	r5, [pc, #72]	; (802f0 <usart_serial_putchar+0x98>)
   802a6:	4621      	mov	r1, r4
   802a8:	4630      	mov	r0, r6
   802aa:	47a8      	blx	r5
   802ac:	2800      	cmp	r0, #0
   802ae:	d1fa      	bne.n	802a6 <usart_serial_putchar+0x4e>
		return 1;
   802b0:	2001      	movs	r0, #1
   802b2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   802b4:	461e      	mov	r6, r3
   802b6:	4d0e      	ldr	r5, [pc, #56]	; (802f0 <usart_serial_putchar+0x98>)
   802b8:	4621      	mov	r1, r4
   802ba:	4630      	mov	r0, r6
   802bc:	47a8      	blx	r5
   802be:	2800      	cmp	r0, #0
   802c0:	d1fa      	bne.n	802b8 <usart_serial_putchar+0x60>
		return 1;
   802c2:	2001      	movs	r0, #1
   802c4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   802c6:	461e      	mov	r6, r3
   802c8:	4d09      	ldr	r5, [pc, #36]	; (802f0 <usart_serial_putchar+0x98>)
   802ca:	4621      	mov	r1, r4
   802cc:	4630      	mov	r0, r6
   802ce:	47a8      	blx	r5
   802d0:	2800      	cmp	r0, #0
   802d2:	d1fa      	bne.n	802ca <usart_serial_putchar+0x72>
		return 1;
   802d4:	2001      	movs	r0, #1
   802d6:	bd70      	pop	{r4, r5, r6, pc}
   802d8:	400e0800 	.word	0x400e0800
   802dc:	40098000 	.word	0x40098000
   802e0:	4009c000 	.word	0x4009c000
   802e4:	400a0000 	.word	0x400a0000
   802e8:	400a4000 	.word	0x400a4000
   802ec:	00080767 	.word	0x00080767
   802f0:	00080491 	.word	0x00080491

000802f4 <UART_Handler>:
void UART_Handler( ){
	
	
	/* The UART interrupt is triggered both for RX and TX, therefore
	   we have to see if RXRDY is set in the UART status register */
	if((CONF_UART->UART_SR & UART_SR_RXRDY) == UART_SR_RXRDY) {
   802f4:	4b08      	ldr	r3, [pc, #32]	; (80318 <UART_Handler+0x24>)
   802f6:	695b      	ldr	r3, [r3, #20]
   802f8:	f013 0f01 	tst.w	r3, #1
   802fc:	d100      	bne.n	80300 <UART_Handler+0xc>
   802fe:	4770      	bx	lr
void UART_Handler( ){
   80300:	b510      	push	{r4, lr}
		//..... /*your code here*/
		
		/* Assigns the value received to a TC_message and adds it to the end of the queue */
		
		TC_message = (unsigned char) CONF_UART->UART_SR;
   80302:	4b05      	ldr	r3, [pc, #20]	; (80318 <UART_Handler+0x24>)
   80304:	695b      	ldr	r3, [r3, #20]
   80306:	4905      	ldr	r1, [pc, #20]	; (8031c <UART_Handler+0x28>)
   80308:	700b      	strb	r3, [r1, #0]
		xQueueSendToBackFromISR(xCommandQueue, (void*) & TC_message, NULL);
   8030a:	2300      	movs	r3, #0
   8030c:	461a      	mov	r2, r3
   8030e:	4804      	ldr	r0, [pc, #16]	; (80320 <UART_Handler+0x2c>)
   80310:	6800      	ldr	r0, [r0, #0]
   80312:	4c04      	ldr	r4, [pc, #16]	; (80324 <UART_Handler+0x30>)
   80314:	47a0      	blx	r4
   80316:	bd10      	pop	{r4, pc}
   80318:	400e0800 	.word	0x400e0800
   8031c:	20070afc 	.word	0x20070afc
   80320:	2007c4f4 	.word	0x2007c4f4
   80324:	00080f85 	.word	0x00080f85

00080328 <init_tc>:

/** 
 * Initializes UART console, UART interrupt, command queue
 * and creates TC task 
 */
void init_tc( ) {
   80328:	b570      	push	{r4, r5, r6, lr}
   8032a:	b086      	sub	sp, #24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8032c:	4c21      	ldr	r4, [pc, #132]	; (803b4 <init_tc+0x8c>)
   8032e:	4b22      	ldr	r3, [pc, #136]	; (803b8 <init_tc+0x90>)
   80330:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80332:	4a22      	ldr	r2, [pc, #136]	; (803bc <init_tc+0x94>)
   80334:	4b22      	ldr	r3, [pc, #136]	; (803c0 <init_tc+0x98>)
   80336:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80338:	4a22      	ldr	r2, [pc, #136]	; (803c4 <init_tc+0x9c>)
   8033a:	4b23      	ldr	r3, [pc, #140]	; (803c8 <init_tc+0xa0>)
   8033c:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8033e:	4b23      	ldr	r3, [pc, #140]	; (803cc <init_tc+0xa4>)
   80340:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
   80342:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80346:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
   80348:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8034c:	9305      	str	r3, [sp, #20]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8034e:	2008      	movs	r0, #8
   80350:	4b1f      	ldr	r3, [pc, #124]	; (803d0 <init_tc+0xa8>)
   80352:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
   80354:	a903      	add	r1, sp, #12
   80356:	4620      	mov	r0, r4
   80358:	4b1e      	ldr	r3, [pc, #120]	; (803d4 <init_tc+0xac>)
   8035a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8035c:	4e1e      	ldr	r6, [pc, #120]	; (803d8 <init_tc+0xb0>)
   8035e:	6833      	ldr	r3, [r6, #0]
   80360:	2100      	movs	r1, #0
   80362:	6898      	ldr	r0, [r3, #8]
   80364:	4d1d      	ldr	r5, [pc, #116]	; (803dc <init_tc+0xb4>)
   80366:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80368:	6833      	ldr	r3, [r6, #0]
   8036a:	2100      	movs	r1, #0
   8036c:	6858      	ldr	r0, [r3, #4]
   8036e:	47a8      	blx	r5
	
	/* redirect printf / scanf function calls to UART */
	stdio_serial_init(CONF_UART, &usart_serial_options);
	
    /* Enable UART Interrupt for RX ready */
	uart_enable_interrupt( CONF_UART, UART_IER_RXRDY );
   80370:	2101      	movs	r1, #1
   80372:	4620      	mov	r0, r4
   80374:	4b1a      	ldr	r3, [pc, #104]	; (803e0 <init_tc+0xb8>)
   80376:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80378:	4b1a      	ldr	r3, [pc, #104]	; (803e4 <init_tc+0xbc>)
   8037a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8037e:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80380:	2250      	movs	r2, #80	; 0x50
   80382:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
	 * configMAX_SYSCALL_INTERRUPT_PRIORITY 
	*/
	NVIC_SetPriority(CONF_UART_ID, configMAX_PRIORITIES);

	/* Create a queue capable of containing 3 characters */
	xCommandQueue = xQueueCreate( 4 , sizeof( char ));
   80386:	2200      	movs	r2, #0
   80388:	2101      	movs	r1, #1
   8038a:	2004      	movs	r0, #4
   8038c:	4b16      	ldr	r3, [pc, #88]	; (803e8 <init_tc+0xc0>)
   8038e:	4798      	blx	r3
   80390:	4b16      	ldr	r3, [pc, #88]	; (803ec <init_tc+0xc4>)
   80392:	6018      	str	r0, [r3, #0]

	if (xCommandQueue == NULL ) {
   80394:	b150      	cbz	r0, 803ac <init_tc+0x84>
		printf("Queue doesn't exist");
	}

	xTaskCreate(
   80396:	2300      	movs	r3, #0
   80398:	9301      	str	r3, [sp, #4]
   8039a:	2203      	movs	r2, #3
   8039c:	9200      	str	r2, [sp, #0]
   8039e:	22fa      	movs	r2, #250	; 0xfa
   803a0:	4913      	ldr	r1, [pc, #76]	; (803f0 <init_tc+0xc8>)
   803a2:	4814      	ldr	r0, [pc, #80]	; (803f4 <init_tc+0xcc>)
   803a4:	4c14      	ldr	r4, [pc, #80]	; (803f8 <init_tc+0xd0>)
   803a6:	47a0      	blx	r4
		NULL 			/* Used to pass out the created task's handle. */

	);
	

   803a8:	b006      	add	sp, #24
   803aa:	bd70      	pop	{r4, r5, r6, pc}
		printf("Queue doesn't exist");
   803ac:	4813      	ldr	r0, [pc, #76]	; (803fc <init_tc+0xd4>)
   803ae:	4b14      	ldr	r3, [pc, #80]	; (80400 <init_tc+0xd8>)
   803b0:	4798      	blx	r3
   803b2:	e7f0      	b.n	80396 <init_tc+0x6e>
   803b4:	400e0800 	.word	0x400e0800
   803b8:	2007c500 	.word	0x2007c500
   803bc:	00080259 	.word	0x00080259
   803c0:	2007c4fc 	.word	0x2007c4fc
   803c4:	000801ad 	.word	0x000801ad
   803c8:	2007c4f8 	.word	0x2007c4f8
   803cc:	0501bd00 	.word	0x0501bd00
   803d0:	00082531 	.word	0x00082531
   803d4:	0008072d 	.word	0x0008072d
   803d8:	20070134 	.word	0x20070134
   803dc:	0008298d 	.word	0x0008298d
   803e0:	00080763 	.word	0x00080763
   803e4:	e000e100 	.word	0xe000e100
   803e8:	00080d7d 	.word	0x00080d7d
   803ec:	2007c4f4 	.word	0x2007c4f4
   803f0:	00085620 	.word	0x00085620
   803f4:	00080161 	.word	0x00080161
   803f8:	000813d1 	.word	0x000813d1
   803fc:	0008560c 	.word	0x0008560c
   80400:	000827dd 	.word	0x000827dd

00080404 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80408:	b980      	cbnz	r0, 8042c <_read+0x28>
   8040a:	460c      	mov	r4, r1
   8040c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8040e:	2a00      	cmp	r2, #0
   80410:	dd0f      	ble.n	80432 <_read+0x2e>
   80412:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80414:	4e08      	ldr	r6, [pc, #32]	; (80438 <_read+0x34>)
   80416:	4d09      	ldr	r5, [pc, #36]	; (8043c <_read+0x38>)
   80418:	6830      	ldr	r0, [r6, #0]
   8041a:	4621      	mov	r1, r4
   8041c:	682b      	ldr	r3, [r5, #0]
   8041e:	4798      	blx	r3
		ptr++;
   80420:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80422:	42bc      	cmp	r4, r7
   80424:	d1f8      	bne.n	80418 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80426:	4640      	mov	r0, r8
   80428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8042c:	f04f 38ff 	mov.w	r8, #4294967295
   80430:	e7f9      	b.n	80426 <_read+0x22>
	for (; len > 0; --len) {
   80432:	4680      	mov	r8, r0
   80434:	e7f7      	b.n	80426 <_read+0x22>
   80436:	bf00      	nop
   80438:	2007c500 	.word	0x2007c500
   8043c:	2007c4f8 	.word	0x2007c4f8

00080440 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80440:	3801      	subs	r0, #1
   80442:	2802      	cmp	r0, #2
   80444:	d815      	bhi.n	80472 <_write+0x32>
{
   80446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8044a:	460e      	mov	r6, r1
   8044c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8044e:	b19a      	cbz	r2, 80478 <_write+0x38>
   80450:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80452:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8048c <_write+0x4c>
   80456:	4f0c      	ldr	r7, [pc, #48]	; (80488 <_write+0x48>)
   80458:	f8d8 0000 	ldr.w	r0, [r8]
   8045c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80460:	683b      	ldr	r3, [r7, #0]
   80462:	4798      	blx	r3
   80464:	2800      	cmp	r0, #0
   80466:	db0a      	blt.n	8047e <_write+0x3e>
   80468:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8046a:	3c01      	subs	r4, #1
   8046c:	d1f4      	bne.n	80458 <_write+0x18>
   8046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80472:	f04f 30ff 	mov.w	r0, #4294967295
   80476:	4770      	bx	lr
	for (; len != 0; --len) {
   80478:	4610      	mov	r0, r2
   8047a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8047e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80486:	bf00      	nop
   80488:	2007c4fc 	.word	0x2007c4fc
   8048c:	2007c500 	.word	0x2007c500

00080490 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80490:	6943      	ldr	r3, [r0, #20]
   80492:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80496:	bf1d      	ittte	ne
   80498:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8049c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8049e:	2000      	movne	r0, #0
		return 1;
   804a0:	2001      	moveq	r0, #1
}
   804a2:	4770      	bx	lr

000804a4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   804a4:	6943      	ldr	r3, [r0, #20]
   804a6:	f013 0f01 	tst.w	r3, #1
   804aa:	d005      	beq.n	804b8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   804ac:	6983      	ldr	r3, [r0, #24]
   804ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   804b2:	600b      	str	r3, [r1, #0]

	return 0;
   804b4:	2000      	movs	r0, #0
   804b6:	4770      	bx	lr
		return 1;
   804b8:	2001      	movs	r0, #1
}
   804ba:	4770      	bx	lr

000804bc <blink>:

/* Prototypes */
void blink(void);
int delay;		/* The blinking delay in ms */

void blink() {
   804bc:	b500      	push	{lr}
   804be:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
   804c0:	4b11      	ldr	r3, [pc, #68]	; (80508 <blink+0x4c>)
   804c2:	4798      	blx	r3
   804c4:	9001      	str	r0, [sp, #4]
	
	for( ;; ) {
				
		switch(get_cmd()) {		/* Get the current command from command_po and set the blinking frequency accordingly */
   804c6:	4e11      	ldr	r6, [pc, #68]	; (8050c <blink+0x50>)
			case '0':
				delay = 500;
				break;
				
			case '1':
				delay = 100;
   804c8:	4d11      	ldr	r5, [pc, #68]	; (80510 <blink+0x54>)
				delay = 50;
				break;
		}
		
		/* See if pin 27 in Output Data Status Register (ODSR) is set */
		if((PIOB->PIO_ODSR & (1 << 27)) > 0)
   804ca:	4c12      	ldr	r4, [pc, #72]	; (80514 <blink+0x58>)
   804cc:	e00e      	b.n	804ec <blink+0x30>
				delay = 500;
   804ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   804d2:	602b      	str	r3, [r5, #0]
		if((PIOB->PIO_ODSR & (1 << 27)) > 0)
   804d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   804d6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		{
			/* If pin 27 is active -> turn off via Clear Output Data Register (CODR) */
			PIOB->PIO_CODR = 1 << 27;
   804da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   804de:	bf14      	ite	ne
   804e0:	6363      	strne	r3, [r4, #52]	; 0x34
			} else {
			/* If pin 27 is not active -> turn off via Set Output Data Register (SODR) */
			PIOB->PIO_SODR = 1 << 27;
   804e2:	6323      	streq	r3, [r4, #48]	; 0x30
		}
		
		/*vTaskDelay( BLINK_PERIOD_MS / portTICK_RATE_MS );*/ /* This was old code */
		vTaskDelayUntil(&xLastWakeTime, delay / portTICK_RATE_MS); /* Improved by using absolute instead of relative timing*/
   804e4:	6829      	ldr	r1, [r5, #0]
   804e6:	a801      	add	r0, sp, #4
   804e8:	4b0b      	ldr	r3, [pc, #44]	; (80518 <blink+0x5c>)
   804ea:	4798      	blx	r3
		switch(get_cmd()) {		/* Get the current command from command_po and set the blinking frequency accordingly */
   804ec:	47b0      	blx	r6
   804ee:	2831      	cmp	r0, #49	; 0x31
   804f0:	d004      	beq.n	804fc <blink+0x40>
   804f2:	2832      	cmp	r0, #50	; 0x32
   804f4:	d005      	beq.n	80502 <blink+0x46>
   804f6:	2830      	cmp	r0, #48	; 0x30
   804f8:	d1ec      	bne.n	804d4 <blink+0x18>
   804fa:	e7e8      	b.n	804ce <blink+0x12>
				delay = 100;
   804fc:	2364      	movs	r3, #100	; 0x64
   804fe:	602b      	str	r3, [r5, #0]
				break;
   80500:	e7e8      	b.n	804d4 <blink+0x18>
				delay = 50;
   80502:	2332      	movs	r3, #50	; 0x32
   80504:	602b      	str	r3, [r5, #0]
				break;
   80506:	e7e5      	b.n	804d4 <blink+0x18>
   80508:	00081661 	.word	0x00081661
   8050c:	000806a9 	.word	0x000806a9
   80510:	2007c504 	.word	0x2007c504
   80514:	400e1000 	.word	0x400e1000
   80518:	000818b5 	.word	0x000818b5

0008051c <init_blink>:
}



void init_blink( )
{
   8051c:	b510      	push	{r4, lr}
   8051e:	b082      	sub	sp, #8
	/* Initialize LED0 on Port B Pin 27*/
	PIOB->PIO_PER = 1 << 27;		/* Pin Enable Register (PER) */
   80520:	4b08      	ldr	r3, [pc, #32]	; (80544 <init_blink+0x28>)
   80522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80526:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER = 1 << 27;		/* Output Enable Register (OER) */
   80528:	611a      	str	r2, [r3, #16]
	PIOB->PIO_OWER = 1 << 27;		/* Output Write Enable Register (OWER) */
   8052a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
		/* Create task */
		xTaskCreate(
   8052e:	2300      	movs	r3, #0
   80530:	9301      	str	r3, [sp, #4]
   80532:	2201      	movs	r2, #1
   80534:	9200      	str	r2, [sp, #0]
   80536:	22fa      	movs	r2, #250	; 0xfa
   80538:	4903      	ldr	r1, [pc, #12]	; (80548 <init_blink+0x2c>)
   8053a:	4804      	ldr	r0, [pc, #16]	; (8054c <init_blink+0x30>)
   8053c:	4c04      	ldr	r4, [pc, #16]	; (80550 <init_blink+0x34>)
   8053e:	47a0      	blx	r4
		250,				/* Stack size in words, not bytes. */
		NULL,				/* Parameter passed into the task. */
		1,					/* Priority at which the task is created. */
		NULL 				/* Used to pass out the created task's handle. */
		);
}
   80540:	b002      	add	sp, #8
   80542:	bd10      	pop	{r4, pc}
   80544:	400e1000 	.word	0x400e1000
   80548:	0008562c 	.word	0x0008562c
   8054c:	000804bd 	.word	0x000804bd
   80550:	000813d1 	.word	0x000813d1

00080554 <usart_serial_getchar>:
{
   80554:	b5f0      	push	{r4, r5, r6, r7, lr}
   80556:	b083      	sub	sp, #12
   80558:	4604      	mov	r4, r0
   8055a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8055c:	2300      	movs	r3, #0
   8055e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80560:	4b20      	ldr	r3, [pc, #128]	; (805e4 <usart_serial_getchar+0x90>)
   80562:	4298      	cmp	r0, r3
   80564:	d00d      	beq.n	80582 <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80566:	4b20      	ldr	r3, [pc, #128]	; (805e8 <usart_serial_getchar+0x94>)
   80568:	4298      	cmp	r0, r3
   8056a:	d012      	beq.n	80592 <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   8056c:	4b1f      	ldr	r3, [pc, #124]	; (805ec <usart_serial_getchar+0x98>)
   8056e:	4298      	cmp	r0, r3
   80570:	d019      	beq.n	805a6 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   80572:	4b1f      	ldr	r3, [pc, #124]	; (805f0 <usart_serial_getchar+0x9c>)
   80574:	429c      	cmp	r4, r3
   80576:	d020      	beq.n	805ba <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   80578:	4b1e      	ldr	r3, [pc, #120]	; (805f4 <usart_serial_getchar+0xa0>)
   8057a:	429c      	cmp	r4, r3
   8057c:	d027      	beq.n	805ce <usart_serial_getchar+0x7a>
}
   8057e:	b003      	add	sp, #12
   80580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80582:	461f      	mov	r7, r3
   80584:	4e1c      	ldr	r6, [pc, #112]	; (805f8 <usart_serial_getchar+0xa4>)
   80586:	4629      	mov	r1, r5
   80588:	4638      	mov	r0, r7
   8058a:	47b0      	blx	r6
   8058c:	2800      	cmp	r0, #0
   8058e:	d1fa      	bne.n	80586 <usart_serial_getchar+0x32>
   80590:	e7ef      	b.n	80572 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80592:	461f      	mov	r7, r3
   80594:	4e19      	ldr	r6, [pc, #100]	; (805fc <usart_serial_getchar+0xa8>)
   80596:	a901      	add	r1, sp, #4
   80598:	4638      	mov	r0, r7
   8059a:	47b0      	blx	r6
   8059c:	2800      	cmp	r0, #0
   8059e:	d1fa      	bne.n	80596 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   805a0:	9b01      	ldr	r3, [sp, #4]
   805a2:	702b      	strb	r3, [r5, #0]
   805a4:	e7e8      	b.n	80578 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   805a6:	461e      	mov	r6, r3
   805a8:	4c14      	ldr	r4, [pc, #80]	; (805fc <usart_serial_getchar+0xa8>)
   805aa:	a901      	add	r1, sp, #4
   805ac:	4630      	mov	r0, r6
   805ae:	47a0      	blx	r4
   805b0:	2800      	cmp	r0, #0
   805b2:	d1fa      	bne.n	805aa <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   805b4:	9b01      	ldr	r3, [sp, #4]
   805b6:	702b      	strb	r3, [r5, #0]
   805b8:	e7e1      	b.n	8057e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805ba:	461e      	mov	r6, r3
   805bc:	4c0f      	ldr	r4, [pc, #60]	; (805fc <usart_serial_getchar+0xa8>)
   805be:	a901      	add	r1, sp, #4
   805c0:	4630      	mov	r0, r6
   805c2:	47a0      	blx	r4
   805c4:	2800      	cmp	r0, #0
   805c6:	d1fa      	bne.n	805be <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   805c8:	9b01      	ldr	r3, [sp, #4]
   805ca:	702b      	strb	r3, [r5, #0]
   805cc:	e7d7      	b.n	8057e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805ce:	461e      	mov	r6, r3
   805d0:	4c0a      	ldr	r4, [pc, #40]	; (805fc <usart_serial_getchar+0xa8>)
   805d2:	a901      	add	r1, sp, #4
   805d4:	4630      	mov	r0, r6
   805d6:	47a0      	blx	r4
   805d8:	2800      	cmp	r0, #0
   805da:	d1fa      	bne.n	805d2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   805dc:	9b01      	ldr	r3, [sp, #4]
   805de:	702b      	strb	r3, [r5, #0]
}
   805e0:	e7cd      	b.n	8057e <usart_serial_getchar+0x2a>
   805e2:	bf00      	nop
   805e4:	400e0800 	.word	0x400e0800
   805e8:	40098000 	.word	0x40098000
   805ec:	4009c000 	.word	0x4009c000
   805f0:	400a0000 	.word	0x400a0000
   805f4:	400a4000 	.word	0x400a4000
   805f8:	00080777 	.word	0x00080777
   805fc:	000804a5 	.word	0x000804a5

00080600 <usart_serial_putchar>:
{
   80600:	b570      	push	{r4, r5, r6, lr}
   80602:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80604:	4b1e      	ldr	r3, [pc, #120]	; (80680 <usart_serial_putchar+0x80>)
   80606:	4298      	cmp	r0, r3
   80608:	d00d      	beq.n	80626 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8060a:	4b1e      	ldr	r3, [pc, #120]	; (80684 <usart_serial_putchar+0x84>)
   8060c:	4298      	cmp	r0, r3
   8060e:	d013      	beq.n	80638 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80610:	4b1d      	ldr	r3, [pc, #116]	; (80688 <usart_serial_putchar+0x88>)
   80612:	4298      	cmp	r0, r3
   80614:	d019      	beq.n	8064a <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80616:	4b1d      	ldr	r3, [pc, #116]	; (8068c <usart_serial_putchar+0x8c>)
   80618:	4298      	cmp	r0, r3
   8061a:	d01f      	beq.n	8065c <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8061c:	4b1c      	ldr	r3, [pc, #112]	; (80690 <usart_serial_putchar+0x90>)
   8061e:	4298      	cmp	r0, r3
   80620:	d025      	beq.n	8066e <usart_serial_putchar+0x6e>
	return 0;
   80622:	2000      	movs	r0, #0
}
   80624:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80626:	461e      	mov	r6, r3
   80628:	4d1a      	ldr	r5, [pc, #104]	; (80694 <usart_serial_putchar+0x94>)
   8062a:	4621      	mov	r1, r4
   8062c:	4630      	mov	r0, r6
   8062e:	47a8      	blx	r5
   80630:	2800      	cmp	r0, #0
   80632:	d1fa      	bne.n	8062a <usart_serial_putchar+0x2a>
		return 1;
   80634:	2001      	movs	r0, #1
   80636:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80638:	461e      	mov	r6, r3
   8063a:	4d17      	ldr	r5, [pc, #92]	; (80698 <usart_serial_putchar+0x98>)
   8063c:	4621      	mov	r1, r4
   8063e:	4630      	mov	r0, r6
   80640:	47a8      	blx	r5
   80642:	2800      	cmp	r0, #0
   80644:	d1fa      	bne.n	8063c <usart_serial_putchar+0x3c>
		return 1;
   80646:	2001      	movs	r0, #1
   80648:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8064a:	461e      	mov	r6, r3
   8064c:	4d12      	ldr	r5, [pc, #72]	; (80698 <usart_serial_putchar+0x98>)
   8064e:	4621      	mov	r1, r4
   80650:	4630      	mov	r0, r6
   80652:	47a8      	blx	r5
   80654:	2800      	cmp	r0, #0
   80656:	d1fa      	bne.n	8064e <usart_serial_putchar+0x4e>
		return 1;
   80658:	2001      	movs	r0, #1
   8065a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8065c:	461e      	mov	r6, r3
   8065e:	4d0e      	ldr	r5, [pc, #56]	; (80698 <usart_serial_putchar+0x98>)
   80660:	4621      	mov	r1, r4
   80662:	4630      	mov	r0, r6
   80664:	47a8      	blx	r5
   80666:	2800      	cmp	r0, #0
   80668:	d1fa      	bne.n	80660 <usart_serial_putchar+0x60>
		return 1;
   8066a:	2001      	movs	r0, #1
   8066c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8066e:	461e      	mov	r6, r3
   80670:	4d09      	ldr	r5, [pc, #36]	; (80698 <usart_serial_putchar+0x98>)
   80672:	4621      	mov	r1, r4
   80674:	4630      	mov	r0, r6
   80676:	47a8      	blx	r5
   80678:	2800      	cmp	r0, #0
   8067a:	d1fa      	bne.n	80672 <usart_serial_putchar+0x72>
		return 1;
   8067c:	2001      	movs	r0, #1
   8067e:	bd70      	pop	{r4, r5, r6, pc}
   80680:	400e0800 	.word	0x400e0800
   80684:	40098000 	.word	0x40098000
   80688:	4009c000 	.word	0x4009c000
   8068c:	400a0000 	.word	0x400a0000
   80690:	400a4000 	.word	0x400a4000
   80694:	00080767 	.word	0x00080767
   80698:	00080491 	.word	0x00080491

0008069c <set_cmd>:
#include <blink.h>


unsigned char cmd;
void set_cmd ( unsigned char c) {	/* This method sets the current command to a specified value */
	cmd = c;
   8069c:	4b01      	ldr	r3, [pc, #4]	; (806a4 <set_cmd+0x8>)
   8069e:	7018      	strb	r0, [r3, #0]
   806a0:	4770      	bx	lr
   806a2:	bf00      	nop
   806a4:	2007c508 	.word	0x2007c508

000806a8 <get_cmd>:
}

unsigned char get_cmd() {			/* other objects can call this method to read the current command */
	return cmd;
}
   806a8:	4b01      	ldr	r3, [pc, #4]	; (806b0 <get_cmd+0x8>)
   806aa:	7818      	ldrb	r0, [r3, #0]
   806ac:	4770      	bx	lr
   806ae:	bf00      	nop
   806b0:	2007c508 	.word	0x2007c508

000806b4 <init_cmd>:

void init_cmd()
{
   806b4:	b530      	push	{r4, r5, lr}
   806b6:	b085      	sub	sp, #20
	stdio_base = (void *)usart;
   806b8:	4c11      	ldr	r4, [pc, #68]	; (80700 <init_cmd+0x4c>)
   806ba:	4b12      	ldr	r3, [pc, #72]	; (80704 <init_cmd+0x50>)
   806bc:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   806be:	4a12      	ldr	r2, [pc, #72]	; (80708 <init_cmd+0x54>)
   806c0:	4b12      	ldr	r3, [pc, #72]	; (8070c <init_cmd+0x58>)
   806c2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   806c4:	4a12      	ldr	r2, [pc, #72]	; (80710 <init_cmd+0x5c>)
   806c6:	4b13      	ldr	r3, [pc, #76]	; (80714 <init_cmd+0x60>)
   806c8:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   806ca:	4b13      	ldr	r3, [pc, #76]	; (80718 <init_cmd+0x64>)
   806cc:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   806ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   806d2:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   806d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806d8:	9303      	str	r3, [sp, #12]
   806da:	2008      	movs	r0, #8
   806dc:	4b0f      	ldr	r3, [pc, #60]	; (8071c <init_cmd+0x68>)
   806de:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
   806e0:	a901      	add	r1, sp, #4
   806e2:	4620      	mov	r0, r4
   806e4:	4b0e      	ldr	r3, [pc, #56]	; (80720 <init_cmd+0x6c>)
   806e6:	4798      	blx	r3
	setbuf(stdout, NULL);
   806e8:	4d0e      	ldr	r5, [pc, #56]	; (80724 <init_cmd+0x70>)
   806ea:	682b      	ldr	r3, [r5, #0]
   806ec:	2100      	movs	r1, #0
   806ee:	6898      	ldr	r0, [r3, #8]
   806f0:	4c0d      	ldr	r4, [pc, #52]	; (80728 <init_cmd+0x74>)
   806f2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   806f4:	682b      	ldr	r3, [r5, #0]
   806f6:	2100      	movs	r1, #0
   806f8:	6858      	ldr	r0, [r3, #4]
   806fa:	47a0      	blx	r4
	};
	
	stdio_serial_init(CONF_UART, &usart_serial_options);
	

}
   806fc:	b005      	add	sp, #20
   806fe:	bd30      	pop	{r4, r5, pc}
   80700:	400e0800 	.word	0x400e0800
   80704:	2007c500 	.word	0x2007c500
   80708:	00080601 	.word	0x00080601
   8070c:	2007c4fc 	.word	0x2007c4fc
   80710:	00080555 	.word	0x00080555
   80714:	2007c4f8 	.word	0x2007c4f8
   80718:	0501bd00 	.word	0x0501bd00
   8071c:	00082531 	.word	0x00082531
   80720:	0008072d 	.word	0x0008072d
   80724:	20070134 	.word	0x20070134
   80728:	0008298d 	.word	0x0008298d

0008072c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8072c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8072e:	23ac      	movs	r3, #172	; 0xac
   80730:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80732:	680b      	ldr	r3, [r1, #0]
   80734:	684a      	ldr	r2, [r1, #4]
   80736:	fbb3 f3f2 	udiv	r3, r3, r2
   8073a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8073c:	1e5c      	subs	r4, r3, #1
   8073e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80742:	4294      	cmp	r4, r2
   80744:	d80b      	bhi.n	8075e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80746:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80748:	688b      	ldr	r3, [r1, #8]
   8074a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8074c:	f240 2302 	movw	r3, #514	; 0x202
   80750:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80754:	2350      	movs	r3, #80	; 0x50
   80756:	6003      	str	r3, [r0, #0]

	return 0;
   80758:	2000      	movs	r0, #0
}
   8075a:	bc10      	pop	{r4}
   8075c:	4770      	bx	lr
		return 1;
   8075e:	2001      	movs	r0, #1
   80760:	e7fb      	b.n	8075a <uart_init+0x2e>

00080762 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   80762:	6081      	str	r1, [r0, #8]
   80764:	4770      	bx	lr

00080766 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80766:	6943      	ldr	r3, [r0, #20]
   80768:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8076c:	bf1a      	itte	ne
   8076e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80770:	2000      	movne	r0, #0
		return 1;
   80772:	2001      	moveq	r0, #1
}
   80774:	4770      	bx	lr

00080776 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80776:	6943      	ldr	r3, [r0, #20]
   80778:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8077c:	bf1d      	ittte	ne
   8077e:	6983      	ldrne	r3, [r0, #24]
   80780:	700b      	strbne	r3, [r1, #0]
	return 0;
   80782:	2000      	movne	r0, #0
		return 1;
   80784:	2001      	moveq	r0, #1
}
   80786:	4770      	bx	lr

00080788 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80788:	f100 0308 	add.w	r3, r0, #8
   8078c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8078e:	f04f 32ff 	mov.w	r2, #4294967295
   80792:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80794:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80796:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   80798:	2300      	movs	r3, #0
   8079a:	6003      	str	r3, [r0, #0]
   8079c:	4770      	bx	lr

0008079e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8079e:	2300      	movs	r3, #0
   807a0:	6103      	str	r3, [r0, #16]
   807a2:	4770      	bx	lr

000807a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   807a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   807a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   807a8:	689a      	ldr	r2, [r3, #8]
   807aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   807ac:	689a      	ldr	r2, [r3, #8]
   807ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   807b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807b2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807b4:	6803      	ldr	r3, [r0, #0]
   807b6:	3301      	adds	r3, #1
   807b8:	6003      	str	r3, [r0, #0]
   807ba:	4770      	bx	lr

000807bc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   807bc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   807be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   807c0:	f1b5 3fff 	cmp.w	r5, #4294967295
   807c4:	d002      	beq.n	807cc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   807c6:	f100 0208 	add.w	r2, r0, #8
   807ca:	e002      	b.n	807d2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   807cc:	6902      	ldr	r2, [r0, #16]
   807ce:	e004      	b.n	807da <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   807d0:	461a      	mov	r2, r3
   807d2:	6853      	ldr	r3, [r2, #4]
   807d4:	681c      	ldr	r4, [r3, #0]
   807d6:	42a5      	cmp	r5, r4
   807d8:	d2fa      	bcs.n	807d0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   807da:	6853      	ldr	r3, [r2, #4]
   807dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   807de:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   807e0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   807e2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807e6:	6803      	ldr	r3, [r0, #0]
   807e8:	3301      	adds	r3, #1
   807ea:	6003      	str	r3, [r0, #0]
}
   807ec:	bc30      	pop	{r4, r5}
   807ee:	4770      	bx	lr

000807f0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   807f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   807f2:	6842      	ldr	r2, [r0, #4]
   807f4:	6881      	ldr	r1, [r0, #8]
   807f6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   807f8:	6882      	ldr	r2, [r0, #8]
   807fa:	6841      	ldr	r1, [r0, #4]
   807fc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   807fe:	685a      	ldr	r2, [r3, #4]
   80800:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80802:	bf04      	itt	eq
   80804:	6882      	ldreq	r2, [r0, #8]
   80806:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   80808:	2200      	movs	r2, #0
   8080a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8080c:	681a      	ldr	r2, [r3, #0]
   8080e:	3a01      	subs	r2, #1
   80810:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80812:	6818      	ldr	r0, [r3, #0]
}
   80814:	4770      	bx	lr
	...

00080818 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   80818:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   8081a:	2300      	movs	r3, #0
   8081c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   8081e:	4b0d      	ldr	r3, [pc, #52]	; (80854 <prvTaskExitError+0x3c>)
   80820:	681b      	ldr	r3, [r3, #0]
   80822:	f1b3 3fff 	cmp.w	r3, #4294967295
   80826:	d008      	beq.n	8083a <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   80828:	f04f 0340 	mov.w	r3, #64	; 0x40
   8082c:	f383 8811 	msr	BASEPRI, r3
   80830:	f3bf 8f6f 	isb	sy
   80834:	f3bf 8f4f 	dsb	sy
   80838:	e7fe      	b.n	80838 <prvTaskExitError+0x20>
   8083a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8083e:	f383 8811 	msr	BASEPRI, r3
   80842:	f3bf 8f6f 	isb	sy
   80846:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   8084a:	9b01      	ldr	r3, [sp, #4]
   8084c:	2b00      	cmp	r3, #0
   8084e:	d0fc      	beq.n	8084a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   80850:	b002      	add	sp, #8
   80852:	4770      	bx	lr
   80854:	2007012c 	.word	0x2007012c

00080858 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80858:	4806      	ldr	r0, [pc, #24]	; (80874 <prvPortStartFirstTask+0x1c>)
   8085a:	6800      	ldr	r0, [r0, #0]
   8085c:	6800      	ldr	r0, [r0, #0]
   8085e:	f380 8808 	msr	MSP, r0
   80862:	b662      	cpsie	i
   80864:	b661      	cpsie	f
   80866:	f3bf 8f4f 	dsb	sy
   8086a:	f3bf 8f6f 	isb	sy
   8086e:	df00      	svc	0
   80870:	bf00      	nop
   80872:	0000      	.short	0x0000
   80874:	e000ed08 	.word	0xe000ed08

00080878 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   8087c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   80880:	f021 0101 	bic.w	r1, r1, #1
   80884:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   80888:	4b03      	ldr	r3, [pc, #12]	; (80898 <pxPortInitialiseStack+0x20>)
   8088a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   8088e:	f840 2c20 	str.w	r2, [r0, #-32]
}
   80892:	3840      	subs	r0, #64	; 0x40
   80894:	4770      	bx	lr
   80896:	bf00      	nop
   80898:	00080819 	.word	0x00080819
   8089c:	00000000 	.word	0x00000000

000808a0 <SVC_Handler>:
	__asm volatile (
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <pxCurrentTCBConst2>)
   808a2:	6819      	ldr	r1, [r3, #0]
   808a4:	6808      	ldr	r0, [r1, #0]
   808a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808aa:	f380 8809 	msr	PSP, r0
   808ae:	f3bf 8f6f 	isb	sy
   808b2:	f04f 0000 	mov.w	r0, #0
   808b6:	f380 8811 	msr	BASEPRI, r0
   808ba:	f04e 0e0d 	orr.w	lr, lr, #13
   808be:	4770      	bx	lr

000808c0 <pxCurrentTCBConst2>:
   808c0:	2007c30c 	.word	0x2007c30c
   808c4:	4770      	bx	lr
   808c6:	bf00      	nop

000808c8 <vPortEnterCritical>:
   808c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   808cc:	f383 8811 	msr	BASEPRI, r3
   808d0:	f3bf 8f6f 	isb	sy
   808d4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   808d8:	4a0a      	ldr	r2, [pc, #40]	; (80904 <vPortEnterCritical+0x3c>)
   808da:	6813      	ldr	r3, [r2, #0]
   808dc:	3301      	adds	r3, #1
   808de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   808e0:	2b01      	cmp	r3, #1
   808e2:	d10d      	bne.n	80900 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   808e4:	4b08      	ldr	r3, [pc, #32]	; (80908 <vPortEnterCritical+0x40>)
   808e6:	681b      	ldr	r3, [r3, #0]
   808e8:	f013 0fff 	tst.w	r3, #255	; 0xff
   808ec:	d008      	beq.n	80900 <vPortEnterCritical+0x38>
   808ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   808f2:	f383 8811 	msr	BASEPRI, r3
   808f6:	f3bf 8f6f 	isb	sy
   808fa:	f3bf 8f4f 	dsb	sy
   808fe:	e7fe      	b.n	808fe <vPortEnterCritical+0x36>
   80900:	4770      	bx	lr
   80902:	bf00      	nop
   80904:	2007012c 	.word	0x2007012c
   80908:	e000ed04 	.word	0xe000ed04

0008090c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   8090c:	4b09      	ldr	r3, [pc, #36]	; (80934 <vPortExitCritical+0x28>)
   8090e:	681b      	ldr	r3, [r3, #0]
   80910:	b943      	cbnz	r3, 80924 <vPortExitCritical+0x18>
   80912:	f04f 0340 	mov.w	r3, #64	; 0x40
   80916:	f383 8811 	msr	BASEPRI, r3
   8091a:	f3bf 8f6f 	isb	sy
   8091e:	f3bf 8f4f 	dsb	sy
   80922:	e7fe      	b.n	80922 <vPortExitCritical+0x16>
	uxCriticalNesting--;
   80924:	3b01      	subs	r3, #1
   80926:	4a03      	ldr	r2, [pc, #12]	; (80934 <vPortExitCritical+0x28>)
   80928:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8092a:	b90b      	cbnz	r3, 80930 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   8092c:	f383 8811 	msr	BASEPRI, r3
   80930:	4770      	bx	lr
   80932:	bf00      	nop
   80934:	2007012c 	.word	0x2007012c
	...

00080940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   80940:	f3ef 8009 	mrs	r0, PSP
   80944:	f3bf 8f6f 	isb	sy
   80948:	4b0d      	ldr	r3, [pc, #52]	; (80980 <pxCurrentTCBConst>)
   8094a:	681a      	ldr	r2, [r3, #0]
   8094c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80950:	6010      	str	r0, [r2, #0]
   80952:	e92d 4008 	stmdb	sp!, {r3, lr}
   80956:	f04f 0040 	mov.w	r0, #64	; 0x40
   8095a:	f380 8811 	msr	BASEPRI, r0
   8095e:	f000 ffff 	bl	81960 <vTaskSwitchContext>
   80962:	f04f 0000 	mov.w	r0, #0
   80966:	f380 8811 	msr	BASEPRI, r0
   8096a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8096e:	6819      	ldr	r1, [r3, #0]
   80970:	6808      	ldr	r0, [r1, #0]
   80972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80976:	f380 8809 	msr	PSP, r0
   8097a:	f3bf 8f6f 	isb	sy
   8097e:	4770      	bx	lr

00080980 <pxCurrentTCBConst>:
   80980:	2007c30c 	.word	0x2007c30c
   80984:	4770      	bx	lr
   80986:	bf00      	nop

00080988 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   80988:	b508      	push	{r3, lr}
	__asm volatile
   8098a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8098e:	f383 8811 	msr	BASEPRI, r3
   80992:	f3bf 8f6f 	isb	sy
   80996:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   8099a:	4b05      	ldr	r3, [pc, #20]	; (809b0 <SysTick_Handler+0x28>)
   8099c:	4798      	blx	r3
   8099e:	b118      	cbz	r0, 809a8 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   809a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   809a4:	4b03      	ldr	r3, [pc, #12]	; (809b4 <SysTick_Handler+0x2c>)
   809a6:	601a      	str	r2, [r3, #0]
	__asm volatile
   809a8:	2300      	movs	r3, #0
   809aa:	f383 8811 	msr	BASEPRI, r3
   809ae:	bd08      	pop	{r3, pc}
   809b0:	0008166d 	.word	0x0008166d
   809b4:	e000ed04 	.word	0xe000ed04

000809b8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   809b8:	4b05      	ldr	r3, [pc, #20]	; (809d0 <vPortSetupTimerInterrupt+0x18>)
   809ba:	2200      	movs	r2, #0
   809bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   809be:	4905      	ldr	r1, [pc, #20]	; (809d4 <vPortSetupTimerInterrupt+0x1c>)
   809c0:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   809c2:	4905      	ldr	r1, [pc, #20]	; (809d8 <vPortSetupTimerInterrupt+0x20>)
   809c4:	4a05      	ldr	r2, [pc, #20]	; (809dc <vPortSetupTimerInterrupt+0x24>)
   809c6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   809c8:	2207      	movs	r2, #7
   809ca:	601a      	str	r2, [r3, #0]
   809cc:	4770      	bx	lr
   809ce:	bf00      	nop
   809d0:	e000e010 	.word	0xe000e010
   809d4:	e000e018 	.word	0xe000e018
   809d8:	0001481f 	.word	0x0001481f
   809dc:	e000e014 	.word	0xe000e014

000809e0 <xPortStartScheduler>:
{
   809e0:	b510      	push	{r4, lr}
   809e2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   809e4:	4b29      	ldr	r3, [pc, #164]	; (80a8c <xPortStartScheduler+0xac>)
   809e6:	781a      	ldrb	r2, [r3, #0]
   809e8:	b2d2      	uxtb	r2, r2
   809ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   809ec:	22ff      	movs	r2, #255	; 0xff
   809ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   809f0:	781b      	ldrb	r3, [r3, #0]
   809f2:	b2db      	uxtb	r3, r3
   809f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   809f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   809fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   80a00:	4a23      	ldr	r2, [pc, #140]	; (80a90 <xPortStartScheduler+0xb0>)
   80a02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   80a04:	2207      	movs	r2, #7
   80a06:	4b23      	ldr	r3, [pc, #140]	; (80a94 <xPortStartScheduler+0xb4>)
   80a08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   80a0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   80a0e:	f013 0f80 	tst.w	r3, #128	; 0x80
   80a12:	d012      	beq.n	80a3a <xPortStartScheduler+0x5a>
   80a14:	2306      	movs	r3, #6
   80a16:	e000      	b.n	80a1a <xPortStartScheduler+0x3a>
   80a18:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   80a1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   80a1e:	0052      	lsls	r2, r2, #1
   80a20:	b2d2      	uxtb	r2, r2
   80a22:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   80a26:	f89d 2003 	ldrb.w	r2, [sp, #3]
   80a2a:	1e59      	subs	r1, r3, #1
   80a2c:	f012 0f80 	tst.w	r2, #128	; 0x80
   80a30:	d1f2      	bne.n	80a18 <xPortStartScheduler+0x38>
   80a32:	4a18      	ldr	r2, [pc, #96]	; (80a94 <xPortStartScheduler+0xb4>)
   80a34:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   80a36:	2b03      	cmp	r3, #3
   80a38:	d008      	beq.n	80a4c <xPortStartScheduler+0x6c>
	__asm volatile
   80a3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a3e:	f383 8811 	msr	BASEPRI, r3
   80a42:	f3bf 8f6f 	isb	sy
   80a46:	f3bf 8f4f 	dsb	sy
   80a4a:	e7fe      	b.n	80a4a <xPortStartScheduler+0x6a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   80a4c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   80a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80a52:	4a10      	ldr	r2, [pc, #64]	; (80a94 <xPortStartScheduler+0xb4>)
   80a54:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   80a56:	9b01      	ldr	r3, [sp, #4]
   80a58:	b2db      	uxtb	r3, r3
   80a5a:	4a0c      	ldr	r2, [pc, #48]	; (80a8c <xPortStartScheduler+0xac>)
   80a5c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80a5e:	4b0e      	ldr	r3, [pc, #56]	; (80a98 <xPortStartScheduler+0xb8>)
   80a60:	681a      	ldr	r2, [r3, #0]
   80a62:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   80a66:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80a68:	681a      	ldr	r2, [r3, #0]
   80a6a:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
   80a6e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80a70:	4b0a      	ldr	r3, [pc, #40]	; (80a9c <xPortStartScheduler+0xbc>)
   80a72:	4798      	blx	r3
	uxCriticalNesting = 0;
   80a74:	2400      	movs	r4, #0
   80a76:	4b0a      	ldr	r3, [pc, #40]	; (80aa0 <xPortStartScheduler+0xc0>)
   80a78:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   80a7a:	4b0a      	ldr	r3, [pc, #40]	; (80aa4 <xPortStartScheduler+0xc4>)
   80a7c:	4798      	blx	r3
	vTaskSwitchContext();
   80a7e:	4b0a      	ldr	r3, [pc, #40]	; (80aa8 <xPortStartScheduler+0xc8>)
   80a80:	4798      	blx	r3
	prvTaskExitError();
   80a82:	4b0a      	ldr	r3, [pc, #40]	; (80aac <xPortStartScheduler+0xcc>)
   80a84:	4798      	blx	r3
}
   80a86:	4620      	mov	r0, r4
   80a88:	b002      	add	sp, #8
   80a8a:	bd10      	pop	{r4, pc}
   80a8c:	e000e400 	.word	0xe000e400
   80a90:	20070afe 	.word	0x20070afe
   80a94:	20070b00 	.word	0x20070b00
   80a98:	e000ed20 	.word	0xe000ed20
   80a9c:	000809b9 	.word	0x000809b9
   80aa0:	2007012c 	.word	0x2007012c
   80aa4:	00080859 	.word	0x00080859
   80aa8:	00081961 	.word	0x00081961
   80aac:	00080819 	.word	0x00080819

00080ab0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   80ab0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   80ab4:	2b0f      	cmp	r3, #15
   80ab6:	d90f      	bls.n	80ad8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   80ab8:	4a10      	ldr	r2, [pc, #64]	; (80afc <vPortValidateInterruptPriority+0x4c>)
   80aba:	5c9b      	ldrb	r3, [r3, r2]
   80abc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   80abe:	4a10      	ldr	r2, [pc, #64]	; (80b00 <vPortValidateInterruptPriority+0x50>)
   80ac0:	7812      	ldrb	r2, [r2, #0]
   80ac2:	429a      	cmp	r2, r3
   80ac4:	d908      	bls.n	80ad8 <vPortValidateInterruptPriority+0x28>
   80ac6:	f04f 0340 	mov.w	r3, #64	; 0x40
   80aca:	f383 8811 	msr	BASEPRI, r3
   80ace:	f3bf 8f6f 	isb	sy
   80ad2:	f3bf 8f4f 	dsb	sy
   80ad6:	e7fe      	b.n	80ad6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   80ad8:	4b0a      	ldr	r3, [pc, #40]	; (80b04 <vPortValidateInterruptPriority+0x54>)
   80ada:	681b      	ldr	r3, [r3, #0]
   80adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80ae0:	4a09      	ldr	r2, [pc, #36]	; (80b08 <vPortValidateInterruptPriority+0x58>)
   80ae2:	6812      	ldr	r2, [r2, #0]
   80ae4:	4293      	cmp	r3, r2
   80ae6:	d908      	bls.n	80afa <vPortValidateInterruptPriority+0x4a>
   80ae8:	f04f 0340 	mov.w	r3, #64	; 0x40
   80aec:	f383 8811 	msr	BASEPRI, r3
   80af0:	f3bf 8f6f 	isb	sy
   80af4:	f3bf 8f4f 	dsb	sy
   80af8:	e7fe      	b.n	80af8 <vPortValidateInterruptPriority+0x48>
   80afa:	4770      	bx	lr
   80afc:	e000e3f0 	.word	0xe000e3f0
   80b00:	20070afe 	.word	0x20070afe
   80b04:	e000ed0c 	.word	0xe000ed0c
   80b08:	20070b00 	.word	0x20070b00

00080b0c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80b0c:	b538      	push	{r3, r4, r5, lr}
   80b0e:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80b10:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80b14:	bf1c      	itt	ne
   80b16:	f020 0407 	bicne.w	r4, r0, #7
   80b1a:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   80b1c:	4b10      	ldr	r3, [pc, #64]	; (80b60 <pvPortMalloc+0x54>)
   80b1e:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   80b20:	4b10      	ldr	r3, [pc, #64]	; (80b64 <pvPortMalloc+0x58>)
   80b22:	681b      	ldr	r3, [r3, #0]
   80b24:	b18b      	cbz	r3, 80b4a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   80b26:	4b10      	ldr	r3, [pc, #64]	; (80b68 <pvPortMalloc+0x5c>)
   80b28:	681b      	ldr	r3, [r3, #0]
   80b2a:	441c      	add	r4, r3
   80b2c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
   80b30:	4294      	cmp	r4, r2
   80b32:	d810      	bhi.n	80b56 <pvPortMalloc+0x4a>
   80b34:	42a3      	cmp	r3, r4
   80b36:	d210      	bcs.n	80b5a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   80b38:	4a0a      	ldr	r2, [pc, #40]	; (80b64 <pvPortMalloc+0x58>)
   80b3a:	6815      	ldr	r5, [r2, #0]
   80b3c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   80b3e:	4b0a      	ldr	r3, [pc, #40]	; (80b68 <pvPortMalloc+0x5c>)
   80b40:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   80b42:	4b0a      	ldr	r3, [pc, #40]	; (80b6c <pvPortMalloc+0x60>)
   80b44:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80b46:	4628      	mov	r0, r5
   80b48:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   80b4a:	4b09      	ldr	r3, [pc, #36]	; (80b70 <pvPortMalloc+0x64>)
   80b4c:	f023 0307 	bic.w	r3, r3, #7
   80b50:	4a04      	ldr	r2, [pc, #16]	; (80b64 <pvPortMalloc+0x58>)
   80b52:	6013      	str	r3, [r2, #0]
   80b54:	e7e7      	b.n	80b26 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
   80b56:	2500      	movs	r5, #0
   80b58:	e7f3      	b.n	80b42 <pvPortMalloc+0x36>
   80b5a:	2500      	movs	r5, #0
   80b5c:	e7f1      	b.n	80b42 <pvPortMalloc+0x36>
   80b5e:	bf00      	nop
   80b60:	00081651 	.word	0x00081651
   80b64:	20070b04 	.word	0x20070b04
   80b68:	2007c308 	.word	0x2007c308
   80b6c:	000817a1 	.word	0x000817a1
   80b70:	20070b10 	.word	0x20070b10

00080b74 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   80b74:	b140      	cbz	r0, 80b88 <vPortFree+0x14>
   80b76:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b7a:	f383 8811 	msr	BASEPRI, r3
   80b7e:	f3bf 8f6f 	isb	sy
   80b82:	f3bf 8f4f 	dsb	sy
   80b86:	e7fe      	b.n	80b86 <vPortFree+0x12>
   80b88:	4770      	bx	lr
	...

00080b8c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   80b8c:	b510      	push	{r4, lr}
   80b8e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80b90:	4b04      	ldr	r3, [pc, #16]	; (80ba4 <prvIsQueueEmpty+0x18>)
   80b92:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   80b94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80b96:	4b04      	ldr	r3, [pc, #16]	; (80ba8 <prvIsQueueEmpty+0x1c>)
   80b98:	4798      	blx	r3

	return xReturn;
}
   80b9a:	fab4 f084 	clz	r0, r4
   80b9e:	0940      	lsrs	r0, r0, #5
   80ba0:	bd10      	pop	{r4, pc}
   80ba2:	bf00      	nop
   80ba4:	000808c9 	.word	0x000808c9
   80ba8:	0008090d 	.word	0x0008090d

00080bac <prvCopyDataToQueue>:
{
   80bac:	b570      	push	{r4, r5, r6, lr}
   80bae:	4604      	mov	r4, r0
   80bb0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80bb2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   80bb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80bb6:	b952      	cbnz	r2, 80bce <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80bb8:	6803      	ldr	r3, [r0, #0]
   80bba:	2b00      	cmp	r3, #0
   80bbc:	d12a      	bne.n	80c14 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80bbe:	6840      	ldr	r0, [r0, #4]
   80bc0:	4b18      	ldr	r3, [pc, #96]	; (80c24 <prvCopyDataToQueue+0x78>)
   80bc2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80bc4:	2300      	movs	r3, #0
   80bc6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   80bc8:	3501      	adds	r5, #1
   80bca:	63a5      	str	r5, [r4, #56]	; 0x38
}
   80bcc:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   80bce:	b96e      	cbnz	r6, 80bec <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   80bd0:	6880      	ldr	r0, [r0, #8]
   80bd2:	4b15      	ldr	r3, [pc, #84]	; (80c28 <prvCopyDataToQueue+0x7c>)
   80bd4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80bd6:	68a3      	ldr	r3, [r4, #8]
   80bd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80bda:	4413      	add	r3, r2
   80bdc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   80bde:	6862      	ldr	r2, [r4, #4]
   80be0:	4293      	cmp	r3, r2
   80be2:	d319      	bcc.n	80c18 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80be4:	6823      	ldr	r3, [r4, #0]
   80be6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   80be8:	2000      	movs	r0, #0
   80bea:	e7ed      	b.n	80bc8 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80bec:	68c0      	ldr	r0, [r0, #12]
   80bee:	4b0e      	ldr	r3, [pc, #56]	; (80c28 <prvCopyDataToQueue+0x7c>)
   80bf0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   80bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80bf4:	425b      	negs	r3, r3
   80bf6:	68e2      	ldr	r2, [r4, #12]
   80bf8:	441a      	add	r2, r3
   80bfa:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   80bfc:	6821      	ldr	r1, [r4, #0]
   80bfe:	428a      	cmp	r2, r1
   80c00:	d202      	bcs.n	80c08 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80c02:	6862      	ldr	r2, [r4, #4]
   80c04:	4413      	add	r3, r2
   80c06:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   80c08:	2e02      	cmp	r6, #2
   80c0a:	d107      	bne.n	80c1c <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   80c0c:	b145      	cbz	r5, 80c20 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
   80c0e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   80c10:	2000      	movs	r0, #0
   80c12:	e7d9      	b.n	80bc8 <prvCopyDataToQueue+0x1c>
   80c14:	2000      	movs	r0, #0
   80c16:	e7d7      	b.n	80bc8 <prvCopyDataToQueue+0x1c>
   80c18:	2000      	movs	r0, #0
   80c1a:	e7d5      	b.n	80bc8 <prvCopyDataToQueue+0x1c>
   80c1c:	2000      	movs	r0, #0
   80c1e:	e7d3      	b.n	80bc8 <prvCopyDataToQueue+0x1c>
   80c20:	2000      	movs	r0, #0
   80c22:	e7d1      	b.n	80bc8 <prvCopyDataToQueue+0x1c>
   80c24:	00081bd1 	.word	0x00081bd1
   80c28:	00082805 	.word	0x00082805

00080c2c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   80c2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80c2e:	b172      	cbz	r2, 80c4e <prvCopyDataFromQueue+0x22>
{
   80c30:	b510      	push	{r4, lr}
   80c32:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   80c34:	68c4      	ldr	r4, [r0, #12]
   80c36:	4414      	add	r4, r2
   80c38:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   80c3a:	6840      	ldr	r0, [r0, #4]
   80c3c:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   80c3e:	bf24      	itt	cs
   80c40:	6818      	ldrcs	r0, [r3, #0]
   80c42:	60d8      	strcs	r0, [r3, #12]
   80c44:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   80c46:	68d9      	ldr	r1, [r3, #12]
   80c48:	4b01      	ldr	r3, [pc, #4]	; (80c50 <prvCopyDataFromQueue+0x24>)
   80c4a:	4798      	blx	r3
   80c4c:	bd10      	pop	{r4, pc}
   80c4e:	4770      	bx	lr
   80c50:	00082805 	.word	0x00082805

00080c54 <prvUnlockQueue>:
{
   80c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c58:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   80c5a:	4b20      	ldr	r3, [pc, #128]	; (80cdc <prvUnlockQueue+0x88>)
   80c5c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   80c5e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   80c62:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80c64:	2c00      	cmp	r4, #0
   80c66:	dd12      	ble.n	80c8e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80c6a:	b183      	cbz	r3, 80c8e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c6c:	f105 0724 	add.w	r7, r5, #36	; 0x24
   80c70:	4e1b      	ldr	r6, [pc, #108]	; (80ce0 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   80c72:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80ce8 <prvUnlockQueue+0x94>
   80c76:	e004      	b.n	80c82 <prvUnlockQueue+0x2e>
   80c78:	3c01      	subs	r4, #1
   80c7a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80c7c:	b13c      	cbz	r4, 80c8e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80c80:	b12b      	cbz	r3, 80c8e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c82:	4638      	mov	r0, r7
   80c84:	47b0      	blx	r6
   80c86:	2800      	cmp	r0, #0
   80c88:	d0f6      	beq.n	80c78 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   80c8a:	47c0      	blx	r8
   80c8c:	e7f4      	b.n	80c78 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   80c8e:	23ff      	movs	r3, #255	; 0xff
   80c90:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   80c94:	4b13      	ldr	r3, [pc, #76]	; (80ce4 <prvUnlockQueue+0x90>)
   80c96:	4798      	blx	r3
	taskENTER_CRITICAL();
   80c98:	4b10      	ldr	r3, [pc, #64]	; (80cdc <prvUnlockQueue+0x88>)
   80c9a:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   80c9c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   80ca0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   80ca2:	2c00      	cmp	r4, #0
   80ca4:	dd12      	ble.n	80ccc <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ca6:	692b      	ldr	r3, [r5, #16]
   80ca8:	b183      	cbz	r3, 80ccc <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80caa:	f105 0710 	add.w	r7, r5, #16
   80cae:	4e0c      	ldr	r6, [pc, #48]	; (80ce0 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   80cb0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80ce8 <prvUnlockQueue+0x94>
   80cb4:	e004      	b.n	80cc0 <prvUnlockQueue+0x6c>
   80cb6:	3c01      	subs	r4, #1
   80cb8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   80cba:	b13c      	cbz	r4, 80ccc <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80cbc:	692b      	ldr	r3, [r5, #16]
   80cbe:	b12b      	cbz	r3, 80ccc <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80cc0:	4638      	mov	r0, r7
   80cc2:	47b0      	blx	r6
   80cc4:	2800      	cmp	r0, #0
   80cc6:	d0f6      	beq.n	80cb6 <prvUnlockQueue+0x62>
					vTaskMissedYield();
   80cc8:	47c0      	blx	r8
   80cca:	e7f4      	b.n	80cb6 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   80ccc:	23ff      	movs	r3, #255	; 0xff
   80cce:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   80cd2:	4b04      	ldr	r3, [pc, #16]	; (80ce4 <prvUnlockQueue+0x90>)
   80cd4:	4798      	blx	r3
   80cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80cda:	bf00      	nop
   80cdc:	000808c9 	.word	0x000808c9
   80ce0:	00081a71 	.word	0x00081a71
   80ce4:	0008090d 	.word	0x0008090d
   80ce8:	00081ba5 	.word	0x00081ba5

00080cec <xQueueGenericReset>:
{
   80cec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80cee:	b330      	cbz	r0, 80d3e <xQueueGenericReset+0x52>
   80cf0:	4604      	mov	r4, r0
   80cf2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
   80cf4:	4b1c      	ldr	r3, [pc, #112]	; (80d68 <xQueueGenericReset+0x7c>)
   80cf6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80cf8:	6822      	ldr	r2, [r4, #0]
   80cfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80cfe:	fb03 f301 	mul.w	r3, r3, r1
   80d02:	18d0      	adds	r0, r2, r3
   80d04:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   80d06:	2000      	movs	r0, #0
   80d08:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80d0a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   80d0c:	1a5b      	subs	r3, r3, r1
   80d0e:	4413      	add	r3, r2
   80d10:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   80d12:	23ff      	movs	r3, #255	; 0xff
   80d14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   80d18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   80d1c:	b9c5      	cbnz	r5, 80d50 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80d1e:	6923      	ldr	r3, [r4, #16]
   80d20:	b1eb      	cbz	r3, 80d5e <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80d22:	f104 0010 	add.w	r0, r4, #16
   80d26:	4b11      	ldr	r3, [pc, #68]	; (80d6c <xQueueGenericReset+0x80>)
   80d28:	4798      	blx	r3
   80d2a:	b1c0      	cbz	r0, 80d5e <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
   80d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d30:	4b0f      	ldr	r3, [pc, #60]	; (80d70 <xQueueGenericReset+0x84>)
   80d32:	601a      	str	r2, [r3, #0]
   80d34:	f3bf 8f4f 	dsb	sy
   80d38:	f3bf 8f6f 	isb	sy
   80d3c:	e00f      	b.n	80d5e <xQueueGenericReset+0x72>
   80d3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d42:	f383 8811 	msr	BASEPRI, r3
   80d46:	f3bf 8f6f 	isb	sy
   80d4a:	f3bf 8f4f 	dsb	sy
   80d4e:	e7fe      	b.n	80d4e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80d50:	f104 0010 	add.w	r0, r4, #16
   80d54:	4d07      	ldr	r5, [pc, #28]	; (80d74 <xQueueGenericReset+0x88>)
   80d56:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80d58:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d5c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
   80d5e:	4b06      	ldr	r3, [pc, #24]	; (80d78 <xQueueGenericReset+0x8c>)
   80d60:	4798      	blx	r3
}
   80d62:	2001      	movs	r0, #1
   80d64:	bd38      	pop	{r3, r4, r5, pc}
   80d66:	bf00      	nop
   80d68:	000808c9 	.word	0x000808c9
   80d6c:	00081a71 	.word	0x00081a71
   80d70:	e000ed04 	.word	0xe000ed04
   80d74:	00080789 	.word	0x00080789
   80d78:	0008090d 	.word	0x0008090d

00080d7c <xQueueGenericCreate>:
	{
   80d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   80d7e:	b940      	cbnz	r0, 80d92 <xQueueGenericCreate+0x16>
   80d80:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d84:	f383 8811 	msr	BASEPRI, r3
   80d88:	f3bf 8f6f 	isb	sy
   80d8c:	f3bf 8f4f 	dsb	sy
   80d90:	e7fe      	b.n	80d90 <xQueueGenericCreate+0x14>
   80d92:	4606      	mov	r6, r0
   80d94:	4617      	mov	r7, r2
   80d96:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80d98:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   80d9c:	3050      	adds	r0, #80	; 0x50
   80d9e:	4b0a      	ldr	r3, [pc, #40]	; (80dc8 <xQueueGenericCreate+0x4c>)
   80da0:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80da2:	4604      	mov	r4, r0
   80da4:	b168      	cbz	r0, 80dc2 <xQueueGenericCreate+0x46>
	if( uxItemSize == ( UBaseType_t ) 0 )
   80da6:	b11d      	cbz	r5, 80db0 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   80da8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   80dac:	6003      	str	r3, [r0, #0]
   80dae:	e000      	b.n	80db2 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   80db0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   80db2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   80db4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   80db6:	2101      	movs	r1, #1
   80db8:	4620      	mov	r0, r4
   80dba:	4b04      	ldr	r3, [pc, #16]	; (80dcc <xQueueGenericCreate+0x50>)
   80dbc:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   80dbe:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   80dc2:	4620      	mov	r0, r4
   80dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80dc6:	bf00      	nop
   80dc8:	00080b0d 	.word	0x00080b0d
   80dcc:	00080ced 	.word	0x00080ced

00080dd0 <xQueueGenericSend>:
{
   80dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80dd4:	b085      	sub	sp, #20
   80dd6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80dd8:	b198      	cbz	r0, 80e02 <xQueueGenericSend+0x32>
   80dda:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80ddc:	b1d1      	cbz	r1, 80e14 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80dde:	2b02      	cmp	r3, #2
   80de0:	d024      	beq.n	80e2c <xQueueGenericSend+0x5c>
   80de2:	461e      	mov	r6, r3
   80de4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80de6:	4b5b      	ldr	r3, [pc, #364]	; (80f54 <xQueueGenericSend+0x184>)
   80de8:	4798      	blx	r3
   80dea:	bb58      	cbnz	r0, 80e44 <xQueueGenericSend+0x74>
   80dec:	9b01      	ldr	r3, [sp, #4]
   80dee:	b38b      	cbz	r3, 80e54 <xQueueGenericSend+0x84>
   80df0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80df4:	f383 8811 	msr	BASEPRI, r3
   80df8:	f3bf 8f6f 	isb	sy
   80dfc:	f3bf 8f4f 	dsb	sy
   80e00:	e7fe      	b.n	80e00 <xQueueGenericSend+0x30>
   80e02:	f04f 0340 	mov.w	r3, #64	; 0x40
   80e06:	f383 8811 	msr	BASEPRI, r3
   80e0a:	f3bf 8f6f 	isb	sy
   80e0e:	f3bf 8f4f 	dsb	sy
   80e12:	e7fe      	b.n	80e12 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80e14:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80e16:	2a00      	cmp	r2, #0
   80e18:	d0e1      	beq.n	80dde <xQueueGenericSend+0xe>
   80e1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80e1e:	f383 8811 	msr	BASEPRI, r3
   80e22:	f3bf 8f6f 	isb	sy
   80e26:	f3bf 8f4f 	dsb	sy
   80e2a:	e7fe      	b.n	80e2a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80e2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   80e2e:	2a01      	cmp	r2, #1
   80e30:	d0d7      	beq.n	80de2 <xQueueGenericSend+0x12>
   80e32:	f04f 0340 	mov.w	r3, #64	; 0x40
   80e36:	f383 8811 	msr	BASEPRI, r3
   80e3a:	f3bf 8f6f 	isb	sy
   80e3e:	f3bf 8f4f 	dsb	sy
   80e42:	e7fe      	b.n	80e42 <xQueueGenericSend+0x72>
   80e44:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   80e46:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80f7c <xQueueGenericSend+0x1ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80e4a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80f80 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   80e4e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80f60 <xQueueGenericSend+0x190>
   80e52:	e030      	b.n	80eb6 <xQueueGenericSend+0xe6>
   80e54:	2500      	movs	r5, #0
   80e56:	e7f6      	b.n	80e46 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80e58:	4632      	mov	r2, r6
   80e5a:	4639      	mov	r1, r7
   80e5c:	4620      	mov	r0, r4
   80e5e:	4b3e      	ldr	r3, [pc, #248]	; (80f58 <xQueueGenericSend+0x188>)
   80e60:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e64:	b193      	cbz	r3, 80e8c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e66:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e6a:	4b3c      	ldr	r3, [pc, #240]	; (80f5c <xQueueGenericSend+0x18c>)
   80e6c:	4798      	blx	r3
   80e6e:	b138      	cbz	r0, 80e80 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
   80e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e74:	4b3a      	ldr	r3, [pc, #232]	; (80f60 <xQueueGenericSend+0x190>)
   80e76:	601a      	str	r2, [r3, #0]
   80e78:	f3bf 8f4f 	dsb	sy
   80e7c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80e80:	4b38      	ldr	r3, [pc, #224]	; (80f64 <xQueueGenericSend+0x194>)
   80e82:	4798      	blx	r3
				return pdPASS;
   80e84:	2001      	movs	r0, #1
}
   80e86:	b005      	add	sp, #20
   80e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if( xYieldRequired != pdFALSE )
   80e8c:	2800      	cmp	r0, #0
   80e8e:	d0f7      	beq.n	80e80 <xQueueGenericSend+0xb0>
						queueYIELD_IF_USING_PREEMPTION();
   80e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e94:	4b32      	ldr	r3, [pc, #200]	; (80f60 <xQueueGenericSend+0x190>)
   80e96:	601a      	str	r2, [r3, #0]
   80e98:	f3bf 8f4f 	dsb	sy
   80e9c:	f3bf 8f6f 	isb	sy
   80ea0:	e7ee      	b.n	80e80 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
   80ea2:	4b30      	ldr	r3, [pc, #192]	; (80f64 <xQueueGenericSend+0x194>)
   80ea4:	4798      	blx	r3
					return errQUEUE_FULL;
   80ea6:	2000      	movs	r0, #0
   80ea8:	e7ed      	b.n	80e86 <xQueueGenericSend+0xb6>
				prvUnlockQueue( pxQueue );
   80eaa:	4620      	mov	r0, r4
   80eac:	4b2e      	ldr	r3, [pc, #184]	; (80f68 <xQueueGenericSend+0x198>)
   80eae:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80eb0:	4b2e      	ldr	r3, [pc, #184]	; (80f6c <xQueueGenericSend+0x19c>)
   80eb2:	4798      	blx	r3
   80eb4:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   80eb6:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80eb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80eba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ebc:	429a      	cmp	r2, r3
   80ebe:	d3cb      	bcc.n	80e58 <xQueueGenericSend+0x88>
   80ec0:	2e02      	cmp	r6, #2
   80ec2:	d0c9      	beq.n	80e58 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
   80ec4:	9b01      	ldr	r3, [sp, #4]
   80ec6:	2b00      	cmp	r3, #0
   80ec8:	d0eb      	beq.n	80ea2 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   80eca:	b90d      	cbnz	r5, 80ed0 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80ecc:	a802      	add	r0, sp, #8
   80ece:	47d0      	blx	sl
		taskEXIT_CRITICAL();
   80ed0:	4b24      	ldr	r3, [pc, #144]	; (80f64 <xQueueGenericSend+0x194>)
   80ed2:	4798      	blx	r3
		vTaskSuspendAll();
   80ed4:	4b26      	ldr	r3, [pc, #152]	; (80f70 <xQueueGenericSend+0x1a0>)
   80ed6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80ed8:	47c0      	blx	r8
   80eda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80ede:	b25b      	sxtb	r3, r3
   80ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ee4:	bf04      	itt	eq
   80ee6:	2300      	moveq	r3, #0
   80ee8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80eec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80ef0:	b25b      	sxtb	r3, r3
   80ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ef6:	bf04      	itt	eq
   80ef8:	2300      	moveq	r3, #0
   80efa:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80efe:	4b19      	ldr	r3, [pc, #100]	; (80f64 <xQueueGenericSend+0x194>)
   80f00:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80f02:	a901      	add	r1, sp, #4
   80f04:	a802      	add	r0, sp, #8
   80f06:	4b1b      	ldr	r3, [pc, #108]	; (80f74 <xQueueGenericSend+0x1a4>)
   80f08:	4798      	blx	r3
   80f0a:	b9e0      	cbnz	r0, 80f46 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80f0c:	47c0      	blx	r8
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   80f0e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80f12:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80f14:	4b13      	ldr	r3, [pc, #76]	; (80f64 <xQueueGenericSend+0x194>)
   80f16:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80f18:	45ab      	cmp	fp, r5
   80f1a:	d1c6      	bne.n	80eaa <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80f1c:	9901      	ldr	r1, [sp, #4]
   80f1e:	f104 0010 	add.w	r0, r4, #16
   80f22:	4b15      	ldr	r3, [pc, #84]	; (80f78 <xQueueGenericSend+0x1a8>)
   80f24:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80f26:	4620      	mov	r0, r4
   80f28:	4b0f      	ldr	r3, [pc, #60]	; (80f68 <xQueueGenericSend+0x198>)
   80f2a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80f2c:	4b0f      	ldr	r3, [pc, #60]	; (80f6c <xQueueGenericSend+0x19c>)
   80f2e:	4798      	blx	r3
   80f30:	2800      	cmp	r0, #0
   80f32:	d1bf      	bne.n	80eb4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
   80f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80f38:	f8c9 3000 	str.w	r3, [r9]
   80f3c:	f3bf 8f4f 	dsb	sy
   80f40:	f3bf 8f6f 	isb	sy
   80f44:	e7b6      	b.n	80eb4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
   80f46:	4620      	mov	r0, r4
   80f48:	4b07      	ldr	r3, [pc, #28]	; (80f68 <xQueueGenericSend+0x198>)
   80f4a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80f4c:	4b07      	ldr	r3, [pc, #28]	; (80f6c <xQueueGenericSend+0x19c>)
   80f4e:	4798      	blx	r3
			return errQUEUE_FULL;
   80f50:	2000      	movs	r0, #0
   80f52:	e798      	b.n	80e86 <xQueueGenericSend+0xb6>
   80f54:	00081bb1 	.word	0x00081bb1
   80f58:	00080bad 	.word	0x00080bad
   80f5c:	00081a71 	.word	0x00081a71
   80f60:	e000ed04 	.word	0xe000ed04
   80f64:	0008090d 	.word	0x0008090d
   80f68:	00080c55 	.word	0x00080c55
   80f6c:	000817a1 	.word	0x000817a1
   80f70:	00081651 	.word	0x00081651
   80f74:	00081b19 	.word	0x00081b19
   80f78:	000819f5 	.word	0x000819f5
   80f7c:	000808c9 	.word	0x000808c9
   80f80:	00081b01 	.word	0x00081b01

00080f84 <xQueueGenericSendFromISR>:
{
   80f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
   80f88:	2800      	cmp	r0, #0
   80f8a:	d037      	beq.n	80ffc <xQueueGenericSendFromISR+0x78>
   80f8c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80f8e:	2900      	cmp	r1, #0
   80f90:	d03d      	beq.n	8100e <xQueueGenericSendFromISR+0x8a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80f92:	2b02      	cmp	r3, #2
   80f94:	d047      	beq.n	81026 <xQueueGenericSendFromISR+0xa2>
   80f96:	461f      	mov	r7, r3
   80f98:	4690      	mov	r8, r2
   80f9a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   80f9c:	4b2f      	ldr	r3, [pc, #188]	; (8105c <xQueueGenericSendFromISR+0xd8>)
   80f9e:	4798      	blx	r3
	__asm volatile
   80fa0:	f3ef 8611 	mrs	r6, BASEPRI
   80fa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   80fa8:	f383 8811 	msr	BASEPRI, r3
   80fac:	f3bf 8f6f 	isb	sy
   80fb0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80fb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80fb8:	429a      	cmp	r2, r3
   80fba:	d301      	bcc.n	80fc0 <xQueueGenericSendFromISR+0x3c>
   80fbc:	2f02      	cmp	r7, #2
   80fbe:	d144      	bne.n	8104a <xQueueGenericSendFromISR+0xc6>
			const int8_t cTxLock = pxQueue->cTxLock;
   80fc0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   80fc4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80fc6:	463a      	mov	r2, r7
   80fc8:	4649      	mov	r1, r9
   80fca:	4620      	mov	r0, r4
   80fcc:	4b24      	ldr	r3, [pc, #144]	; (81060 <xQueueGenericSendFromISR+0xdc>)
   80fce:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   80fd0:	f1b5 3fff 	cmp.w	r5, #4294967295
   80fd4:	d133      	bne.n	8103e <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fd8:	2b00      	cmp	r3, #0
   80fda:	d038      	beq.n	8104e <xQueueGenericSendFromISR+0xca>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80fe0:	4b20      	ldr	r3, [pc, #128]	; (81064 <xQueueGenericSendFromISR+0xe0>)
   80fe2:	4798      	blx	r3
   80fe4:	2800      	cmp	r0, #0
   80fe6:	d034      	beq.n	81052 <xQueueGenericSendFromISR+0xce>
							if( pxHigherPriorityTaskWoken != NULL )
   80fe8:	f1b8 0f00 	cmp.w	r8, #0
   80fec:	d033      	beq.n	81056 <xQueueGenericSendFromISR+0xd2>
								*pxHigherPriorityTaskWoken = pdTRUE;
   80fee:	2001      	movs	r0, #1
   80ff0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
   80ff4:	f386 8811 	msr	BASEPRI, r6
}
   80ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
   80ffc:	f04f 0340 	mov.w	r3, #64	; 0x40
   81000:	f383 8811 	msr	BASEPRI, r3
   81004:	f3bf 8f6f 	isb	sy
   81008:	f3bf 8f4f 	dsb	sy
   8100c:	e7fe      	b.n	8100c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8100e:	6c00      	ldr	r0, [r0, #64]	; 0x40
   81010:	2800      	cmp	r0, #0
   81012:	d0be      	beq.n	80f92 <xQueueGenericSendFromISR+0xe>
   81014:	f04f 0340 	mov.w	r3, #64	; 0x40
   81018:	f383 8811 	msr	BASEPRI, r3
   8101c:	f3bf 8f6f 	isb	sy
   81020:	f3bf 8f4f 	dsb	sy
   81024:	e7fe      	b.n	81024 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81026:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81028:	2801      	cmp	r0, #1
   8102a:	d0b4      	beq.n	80f96 <xQueueGenericSendFromISR+0x12>
   8102c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81030:	f383 8811 	msr	BASEPRI, r3
   81034:	f3bf 8f6f 	isb	sy
   81038:	f3bf 8f4f 	dsb	sy
   8103c:	e7fe      	b.n	8103c <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   8103e:	1c6b      	adds	r3, r5, #1
   81040:	b25b      	sxtb	r3, r3
   81042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   81046:	2001      	movs	r0, #1
   81048:	e7d4      	b.n	80ff4 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
   8104a:	2000      	movs	r0, #0
   8104c:	e7d2      	b.n	80ff4 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
   8104e:	2001      	movs	r0, #1
   81050:	e7d0      	b.n	80ff4 <xQueueGenericSendFromISR+0x70>
   81052:	2001      	movs	r0, #1
   81054:	e7ce      	b.n	80ff4 <xQueueGenericSendFromISR+0x70>
   81056:	2001      	movs	r0, #1
   81058:	e7cc      	b.n	80ff4 <xQueueGenericSendFromISR+0x70>
   8105a:	bf00      	nop
   8105c:	00080ab1 	.word	0x00080ab1
   81060:	00080bad 	.word	0x00080bad
   81064:	00081a71 	.word	0x00081a71

00081068 <xQueueReceive>:
{
   81068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8106c:	b084      	sub	sp, #16
   8106e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   81070:	b180      	cbz	r0, 81094 <xQueueReceive+0x2c>
   81072:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81074:	b1b9      	cbz	r1, 810a6 <xQueueReceive+0x3e>
   81076:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   81078:	4b50      	ldr	r3, [pc, #320]	; (811bc <xQueueReceive+0x154>)
   8107a:	4798      	blx	r3
   8107c:	b9f8      	cbnz	r0, 810be <xQueueReceive+0x56>
   8107e:	9b01      	ldr	r3, [sp, #4]
   81080:	b32b      	cbz	r3, 810ce <xQueueReceive+0x66>
   81082:	f04f 0340 	mov.w	r3, #64	; 0x40
   81086:	f383 8811 	msr	BASEPRI, r3
   8108a:	f3bf 8f6f 	isb	sy
   8108e:	f3bf 8f4f 	dsb	sy
   81092:	e7fe      	b.n	81092 <xQueueReceive+0x2a>
   81094:	f04f 0340 	mov.w	r3, #64	; 0x40
   81098:	f383 8811 	msr	BASEPRI, r3
   8109c:	f3bf 8f6f 	isb	sy
   810a0:	f3bf 8f4f 	dsb	sy
   810a4:	e7fe      	b.n	810a4 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   810a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   810a8:	2b00      	cmp	r3, #0
   810aa:	d0e4      	beq.n	81076 <xQueueReceive+0xe>
   810ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   810b0:	f383 8811 	msr	BASEPRI, r3
   810b4:	f3bf 8f6f 	isb	sy
   810b8:	f3bf 8f4f 	dsb	sy
   810bc:	e7fe      	b.n	810bc <xQueueReceive+0x54>
   810be:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   810c0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 811e8 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
   810c4:	f8df a124 	ldr.w	sl, [pc, #292]	; 811ec <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
   810c8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 811c8 <xQueueReceive+0x160>
   810cc:	e029      	b.n	81122 <xQueueReceive+0xba>
   810ce:	2700      	movs	r7, #0
   810d0:	e7f6      	b.n	810c0 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   810d2:	4631      	mov	r1, r6
   810d4:	4620      	mov	r0, r4
   810d6:	4b3a      	ldr	r3, [pc, #232]	; (811c0 <xQueueReceive+0x158>)
   810d8:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   810da:	3d01      	subs	r5, #1
   810dc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   810de:	6923      	ldr	r3, [r4, #16]
   810e0:	b163      	cbz	r3, 810fc <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   810e2:	f104 0010 	add.w	r0, r4, #16
   810e6:	4b37      	ldr	r3, [pc, #220]	; (811c4 <xQueueReceive+0x15c>)
   810e8:	4798      	blx	r3
   810ea:	b138      	cbz	r0, 810fc <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
   810ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   810f0:	4b35      	ldr	r3, [pc, #212]	; (811c8 <xQueueReceive+0x160>)
   810f2:	601a      	str	r2, [r3, #0]
   810f4:	f3bf 8f4f 	dsb	sy
   810f8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   810fc:	4b33      	ldr	r3, [pc, #204]	; (811cc <xQueueReceive+0x164>)
   810fe:	4798      	blx	r3
				return pdPASS;
   81100:	2001      	movs	r0, #1
}
   81102:	b004      	add	sp, #16
   81104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
   81108:	4b30      	ldr	r3, [pc, #192]	; (811cc <xQueueReceive+0x164>)
   8110a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   8110c:	2000      	movs	r0, #0
   8110e:	e7f8      	b.n	81102 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   81110:	a802      	add	r0, sp, #8
   81112:	47d0      	blx	sl
   81114:	e00e      	b.n	81134 <xQueueReceive+0xcc>
				prvUnlockQueue( pxQueue );
   81116:	4620      	mov	r0, r4
   81118:	4b2d      	ldr	r3, [pc, #180]	; (811d0 <xQueueReceive+0x168>)
   8111a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8111c:	4b2d      	ldr	r3, [pc, #180]	; (811d4 <xQueueReceive+0x16c>)
   8111e:	4798      	blx	r3
   81120:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   81122:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   81124:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   81126:	2d00      	cmp	r5, #0
   81128:	d1d3      	bne.n	810d2 <xQueueReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
   8112a:	9b01      	ldr	r3, [sp, #4]
   8112c:	2b00      	cmp	r3, #0
   8112e:	d0eb      	beq.n	81108 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   81130:	2f00      	cmp	r7, #0
   81132:	d0ed      	beq.n	81110 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
   81134:	4b25      	ldr	r3, [pc, #148]	; (811cc <xQueueReceive+0x164>)
   81136:	4798      	blx	r3
		vTaskSuspendAll();
   81138:	4b27      	ldr	r3, [pc, #156]	; (811d8 <xQueueReceive+0x170>)
   8113a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8113c:	47c0      	blx	r8
   8113e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   81142:	b25b      	sxtb	r3, r3
   81144:	f1b3 3fff 	cmp.w	r3, #4294967295
   81148:	bf04      	itt	eq
   8114a:	2300      	moveq	r3, #0
   8114c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   81150:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   81154:	b25b      	sxtb	r3, r3
   81156:	f1b3 3fff 	cmp.w	r3, #4294967295
   8115a:	bf04      	itt	eq
   8115c:	2300      	moveq	r3, #0
   8115e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   81162:	4b1a      	ldr	r3, [pc, #104]	; (811cc <xQueueReceive+0x164>)
   81164:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81166:	a901      	add	r1, sp, #4
   81168:	a802      	add	r0, sp, #8
   8116a:	4b1c      	ldr	r3, [pc, #112]	; (811dc <xQueueReceive+0x174>)
   8116c:	4798      	blx	r3
   8116e:	b9c8      	cbnz	r0, 811a4 <xQueueReceive+0x13c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81170:	4620      	mov	r0, r4
   81172:	4b1b      	ldr	r3, [pc, #108]	; (811e0 <xQueueReceive+0x178>)
   81174:	4798      	blx	r3
   81176:	2800      	cmp	r0, #0
   81178:	d0cd      	beq.n	81116 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8117a:	9901      	ldr	r1, [sp, #4]
   8117c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81180:	4b18      	ldr	r3, [pc, #96]	; (811e4 <xQueueReceive+0x17c>)
   81182:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81184:	4620      	mov	r0, r4
   81186:	4b12      	ldr	r3, [pc, #72]	; (811d0 <xQueueReceive+0x168>)
   81188:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8118a:	4b12      	ldr	r3, [pc, #72]	; (811d4 <xQueueReceive+0x16c>)
   8118c:	4798      	blx	r3
   8118e:	2800      	cmp	r0, #0
   81190:	d1c6      	bne.n	81120 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
   81192:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81196:	f8c9 3000 	str.w	r3, [r9]
   8119a:	f3bf 8f4f 	dsb	sy
   8119e:	f3bf 8f6f 	isb	sy
   811a2:	e7bd      	b.n	81120 <xQueueReceive+0xb8>
			prvUnlockQueue( pxQueue );
   811a4:	4620      	mov	r0, r4
   811a6:	4b0a      	ldr	r3, [pc, #40]	; (811d0 <xQueueReceive+0x168>)
   811a8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   811aa:	4b0a      	ldr	r3, [pc, #40]	; (811d4 <xQueueReceive+0x16c>)
   811ac:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   811ae:	4620      	mov	r0, r4
   811b0:	4b0b      	ldr	r3, [pc, #44]	; (811e0 <xQueueReceive+0x178>)
   811b2:	4798      	blx	r3
   811b4:	2800      	cmp	r0, #0
   811b6:	d0b3      	beq.n	81120 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
   811b8:	2000      	movs	r0, #0
   811ba:	e7a2      	b.n	81102 <xQueueReceive+0x9a>
   811bc:	00081bb1 	.word	0x00081bb1
   811c0:	00080c2d 	.word	0x00080c2d
   811c4:	00081a71 	.word	0x00081a71
   811c8:	e000ed04 	.word	0xe000ed04
   811cc:	0008090d 	.word	0x0008090d
   811d0:	00080c55 	.word	0x00080c55
   811d4:	000817a1 	.word	0x000817a1
   811d8:	00081651 	.word	0x00081651
   811dc:	00081b19 	.word	0x00081b19
   811e0:	00080b8d 	.word	0x00080b8d
   811e4:	000819f5 	.word	0x000819f5
   811e8:	000808c9 	.word	0x000808c9
   811ec:	00081b01 	.word	0x00081b01

000811f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   811f0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   811f2:	4b0a      	ldr	r3, [pc, #40]	; (8121c <vQueueAddToRegistry+0x2c>)
   811f4:	681b      	ldr	r3, [r3, #0]
   811f6:	b14b      	cbz	r3, 8120c <vQueueAddToRegistry+0x1c>
   811f8:	2301      	movs	r3, #1
   811fa:	4c08      	ldr	r4, [pc, #32]	; (8121c <vQueueAddToRegistry+0x2c>)
   811fc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   81200:	b12a      	cbz	r2, 8120e <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   81202:	3301      	adds	r3, #1
   81204:	2b08      	cmp	r3, #8
   81206:	d1f9      	bne.n	811fc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   81208:	bc10      	pop	{r4}
   8120a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   8120c:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   8120e:	4a03      	ldr	r2, [pc, #12]	; (8121c <vQueueAddToRegistry+0x2c>)
   81210:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   81214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81218:	6058      	str	r0, [r3, #4]
				break;
   8121a:	e7f5      	b.n	81208 <vQueueAddToRegistry+0x18>
   8121c:	2007c50c 	.word	0x2007c50c

00081220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   81220:	b570      	push	{r4, r5, r6, lr}
   81222:	4604      	mov	r4, r0
   81224:	460d      	mov	r5, r1
   81226:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81228:	4b11      	ldr	r3, [pc, #68]	; (81270 <vQueueWaitForMessageRestricted+0x50>)
   8122a:	4798      	blx	r3
   8122c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   81230:	b25b      	sxtb	r3, r3
   81232:	f1b3 3fff 	cmp.w	r3, #4294967295
   81236:	bf04      	itt	eq
   81238:	2300      	moveq	r3, #0
   8123a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8123e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   81242:	b25b      	sxtb	r3, r3
   81244:	f1b3 3fff 	cmp.w	r3, #4294967295
   81248:	bf04      	itt	eq
   8124a:	2300      	moveq	r3, #0
   8124c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   81250:	4b08      	ldr	r3, [pc, #32]	; (81274 <vQueueWaitForMessageRestricted+0x54>)
   81252:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   81254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81256:	b11b      	cbz	r3, 81260 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   81258:	4620      	mov	r0, r4
   8125a:	4b07      	ldr	r3, [pc, #28]	; (81278 <vQueueWaitForMessageRestricted+0x58>)
   8125c:	4798      	blx	r3
   8125e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   81260:	4632      	mov	r2, r6
   81262:	4629      	mov	r1, r5
   81264:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81268:	4b04      	ldr	r3, [pc, #16]	; (8127c <vQueueWaitForMessageRestricted+0x5c>)
   8126a:	4798      	blx	r3
   8126c:	e7f4      	b.n	81258 <vQueueWaitForMessageRestricted+0x38>
   8126e:	bf00      	nop
   81270:	000808c9 	.word	0x000808c9
   81274:	0008090d 	.word	0x0008090d
   81278:	00080c55 	.word	0x00080c55
   8127c:	00081a2d 	.word	0x00081a2d

00081280 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81280:	4b08      	ldr	r3, [pc, #32]	; (812a4 <prvResetNextTaskUnblockTime+0x24>)
   81282:	681b      	ldr	r3, [r3, #0]
   81284:	681b      	ldr	r3, [r3, #0]
   81286:	b13b      	cbz	r3, 81298 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81288:	4b06      	ldr	r3, [pc, #24]	; (812a4 <prvResetNextTaskUnblockTime+0x24>)
   8128a:	681b      	ldr	r3, [r3, #0]
   8128c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   8128e:	68db      	ldr	r3, [r3, #12]
   81290:	685a      	ldr	r2, [r3, #4]
   81292:	4b05      	ldr	r3, [pc, #20]	; (812a8 <prvResetNextTaskUnblockTime+0x28>)
   81294:	601a      	str	r2, [r3, #0]
   81296:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   81298:	f04f 32ff 	mov.w	r2, #4294967295
   8129c:	4b02      	ldr	r3, [pc, #8]	; (812a8 <prvResetNextTaskUnblockTime+0x28>)
   8129e:	601a      	str	r2, [r3, #0]
   812a0:	4770      	bx	lr
   812a2:	bf00      	nop
   812a4:	2007c310 	.word	0x2007c310
   812a8:	2007c3c0 	.word	0x2007c3c0

000812ac <prvIdleTask>:
{
   812ac:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   812ae:	4d16      	ldr	r5, [pc, #88]	; (81308 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   812b0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81320 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   812b4:	4f15      	ldr	r7, [pc, #84]	; (8130c <prvIdleTask+0x60>)
				taskYIELD();
   812b6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 81324 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   812ba:	682b      	ldr	r3, [r5, #0]
   812bc:	b1bb      	cbz	r3, 812ee <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   812be:	4e14      	ldr	r6, [pc, #80]	; (81310 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   812c0:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   812c2:	68fb      	ldr	r3, [r7, #12]
   812c4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   812c6:	1d20      	adds	r0, r4, #4
   812c8:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   812ca:	4a12      	ldr	r2, [pc, #72]	; (81314 <prvIdleTask+0x68>)
   812cc:	6813      	ldr	r3, [r2, #0]
   812ce:	3b01      	subs	r3, #1
   812d0:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   812d2:	682b      	ldr	r3, [r5, #0]
   812d4:	3b01      	subs	r3, #1
   812d6:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   812d8:	4b0f      	ldr	r3, [pc, #60]	; (81318 <prvIdleTask+0x6c>)
   812da:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   812dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   812de:	f8df a048 	ldr.w	sl, [pc, #72]	; 81328 <prvIdleTask+0x7c>
   812e2:	47d0      	blx	sl
			vPortFree( pxTCB );
   812e4:	4620      	mov	r0, r4
   812e6:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   812e8:	682b      	ldr	r3, [r5, #0]
   812ea:	2b00      	cmp	r3, #0
   812ec:	d1e8      	bne.n	812c0 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   812ee:	4b0b      	ldr	r3, [pc, #44]	; (8131c <prvIdleTask+0x70>)
   812f0:	681b      	ldr	r3, [r3, #0]
   812f2:	2b01      	cmp	r3, #1
   812f4:	d9e1      	bls.n	812ba <prvIdleTask+0xe>
				taskYIELD();
   812f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   812fa:	f8c9 3000 	str.w	r3, [r9]
   812fe:	f3bf 8f4f 	dsb	sy
   81302:	f3bf 8f6f 	isb	sy
   81306:	e7d8      	b.n	812ba <prvIdleTask+0xe>
   81308:	2007c380 	.word	0x2007c380
   8130c:	2007c3f4 	.word	0x2007c3f4
   81310:	000807f1 	.word	0x000807f1
   81314:	2007c37c 	.word	0x2007c37c
   81318:	0008090d 	.word	0x0008090d
   8131c:	2007c318 	.word	0x2007c318
   81320:	000808c9 	.word	0x000808c9
   81324:	e000ed04 	.word	0xe000ed04
   81328:	00080b75 	.word	0x00080b75

0008132c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   8132c:	b570      	push	{r4, r5, r6, lr}
   8132e:	4604      	mov	r4, r0
   81330:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   81332:	4b1d      	ldr	r3, [pc, #116]	; (813a8 <prvAddCurrentTaskToDelayedList+0x7c>)
   81334:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81336:	4b1d      	ldr	r3, [pc, #116]	; (813ac <prvAddCurrentTaskToDelayedList+0x80>)
   81338:	6818      	ldr	r0, [r3, #0]
   8133a:	3004      	adds	r0, #4
   8133c:	4b1c      	ldr	r3, [pc, #112]	; (813b0 <prvAddCurrentTaskToDelayedList+0x84>)
   8133e:	4798      	blx	r3
   81340:	b948      	cbnz	r0, 81356 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   81342:	4b1a      	ldr	r3, [pc, #104]	; (813ac <prvAddCurrentTaskToDelayedList+0x80>)
   81344:	681a      	ldr	r2, [r3, #0]
   81346:	491b      	ldr	r1, [pc, #108]	; (813b4 <prvAddCurrentTaskToDelayedList+0x88>)
   81348:	680b      	ldr	r3, [r1, #0]
   8134a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   8134c:	2201      	movs	r2, #1
   8134e:	4082      	lsls	r2, r0
   81350:	ea23 0302 	bic.w	r3, r3, r2
   81354:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81356:	f1b4 3fff 	cmp.w	r4, #4294967295
   8135a:	d013      	beq.n	81384 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   8135c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   8135e:	4b13      	ldr	r3, [pc, #76]	; (813ac <prvAddCurrentTaskToDelayedList+0x80>)
   81360:	681b      	ldr	r3, [r3, #0]
   81362:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   81364:	42a5      	cmp	r5, r4
   81366:	d816      	bhi.n	81396 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81368:	4b13      	ldr	r3, [pc, #76]	; (813b8 <prvAddCurrentTaskToDelayedList+0x8c>)
   8136a:	6818      	ldr	r0, [r3, #0]
   8136c:	4b0f      	ldr	r3, [pc, #60]	; (813ac <prvAddCurrentTaskToDelayedList+0x80>)
   8136e:	6819      	ldr	r1, [r3, #0]
   81370:	3104      	adds	r1, #4
   81372:	4b12      	ldr	r3, [pc, #72]	; (813bc <prvAddCurrentTaskToDelayedList+0x90>)
   81374:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   81376:	4b12      	ldr	r3, [pc, #72]	; (813c0 <prvAddCurrentTaskToDelayedList+0x94>)
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   8137c:	bf3c      	itt	cc
   8137e:	4b10      	ldrcc	r3, [pc, #64]	; (813c0 <prvAddCurrentTaskToDelayedList+0x94>)
   81380:	601c      	strcc	r4, [r3, #0]
   81382:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81384:	2e00      	cmp	r6, #0
   81386:	d0e9      	beq.n	8135c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81388:	4b08      	ldr	r3, [pc, #32]	; (813ac <prvAddCurrentTaskToDelayedList+0x80>)
   8138a:	6819      	ldr	r1, [r3, #0]
   8138c:	3104      	adds	r1, #4
   8138e:	480d      	ldr	r0, [pc, #52]	; (813c4 <prvAddCurrentTaskToDelayedList+0x98>)
   81390:	4b0d      	ldr	r3, [pc, #52]	; (813c8 <prvAddCurrentTaskToDelayedList+0x9c>)
   81392:	4798      	blx	r3
   81394:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81396:	4b0d      	ldr	r3, [pc, #52]	; (813cc <prvAddCurrentTaskToDelayedList+0xa0>)
   81398:	6818      	ldr	r0, [r3, #0]
   8139a:	4b04      	ldr	r3, [pc, #16]	; (813ac <prvAddCurrentTaskToDelayedList+0x80>)
   8139c:	6819      	ldr	r1, [r3, #0]
   8139e:	3104      	adds	r1, #4
   813a0:	4b06      	ldr	r3, [pc, #24]	; (813bc <prvAddCurrentTaskToDelayedList+0x90>)
   813a2:	4798      	blx	r3
   813a4:	bd70      	pop	{r4, r5, r6, pc}
   813a6:	bf00      	nop
   813a8:	2007c408 	.word	0x2007c408
   813ac:	2007c30c 	.word	0x2007c30c
   813b0:	000807f1 	.word	0x000807f1
   813b4:	2007c390 	.word	0x2007c390
   813b8:	2007c310 	.word	0x2007c310
   813bc:	000807bd 	.word	0x000807bd
   813c0:	2007c3c0 	.word	0x2007c3c0
   813c4:	2007c3e0 	.word	0x2007c3e0
   813c8:	000807a5 	.word	0x000807a5
   813cc:	2007c314 	.word	0x2007c314

000813d0 <xTaskCreate>:
	{
   813d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   813d4:	b083      	sub	sp, #12
   813d6:	4683      	mov	fp, r0
   813d8:	460d      	mov	r5, r1
   813da:	9301      	str	r3, [sp, #4]
   813dc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   813e0:	0096      	lsls	r6, r2, #2
   813e2:	4630      	mov	r0, r6
   813e4:	4b60      	ldr	r3, [pc, #384]	; (81568 <xTaskCreate+0x198>)
   813e6:	4798      	blx	r3
			if( pxStack != NULL )
   813e8:	2800      	cmp	r0, #0
   813ea:	f000 808d 	beq.w	81508 <xTaskCreate+0x138>
   813ee:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   813f0:	2060      	movs	r0, #96	; 0x60
   813f2:	4b5d      	ldr	r3, [pc, #372]	; (81568 <xTaskCreate+0x198>)
   813f4:	4798      	blx	r3
				if( pxNewTCB != NULL )
   813f6:	4604      	mov	r4, r0
   813f8:	2800      	cmp	r0, #0
   813fa:	f000 8082 	beq.w	81502 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
   813fe:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   81400:	4632      	mov	r2, r6
   81402:	21a5      	movs	r1, #165	; 0xa5
   81404:	4638      	mov	r0, r7
   81406:	4b59      	ldr	r3, [pc, #356]	; (8156c <xTaskCreate+0x19c>)
   81408:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   8140a:	3e04      	subs	r6, #4
   8140c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8140e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   81410:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81414:	782b      	ldrb	r3, [r5, #0]
   81416:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   8141a:	782b      	ldrb	r3, [r5, #0]
   8141c:	b163      	cbz	r3, 81438 <xTaskCreate+0x68>
   8141e:	462b      	mov	r3, r5
   81420:	f104 0234 	add.w	r2, r4, #52	; 0x34
   81424:	f105 0113 	add.w	r1, r5, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81428:	7858      	ldrb	r0, [r3, #1]
   8142a:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   8142e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   81432:	b108      	cbz	r0, 81438 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   81434:	428b      	cmp	r3, r1
   81436:	d1f7      	bne.n	81428 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   81438:	2700      	movs	r7, #0
   8143a:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
   8143e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   81440:	2d04      	cmp	r5, #4
   81442:	bf28      	it	cs
   81444:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   81446:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   81448:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
   8144a:	6567      	str	r7, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   8144c:	f104 0804 	add.w	r8, r4, #4
   81450:	4640      	mov	r0, r8
   81452:	f8df 916c 	ldr.w	r9, [pc, #364]	; 815c0 <xTaskCreate+0x1f0>
   81456:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   81458:	f104 0018 	add.w	r0, r4, #24
   8145c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   8145e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81460:	f1c5 0505 	rsb	r5, r5, #5
   81464:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   81466:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   81468:	65a7      	str	r7, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   8146a:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8146e:	9a01      	ldr	r2, [sp, #4]
   81470:	4659      	mov	r1, fp
   81472:	4630      	mov	r0, r6
   81474:	4b3e      	ldr	r3, [pc, #248]	; (81570 <xTaskCreate+0x1a0>)
   81476:	4798      	blx	r3
   81478:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   8147a:	f1ba 0f00 	cmp.w	sl, #0
   8147e:	d001      	beq.n	81484 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   81480:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   81484:	4b3b      	ldr	r3, [pc, #236]	; (81574 <xTaskCreate+0x1a4>)
   81486:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   81488:	4a3b      	ldr	r2, [pc, #236]	; (81578 <xTaskCreate+0x1a8>)
   8148a:	6813      	ldr	r3, [r2, #0]
   8148c:	3301      	adds	r3, #1
   8148e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   81490:	4b3a      	ldr	r3, [pc, #232]	; (8157c <xTaskCreate+0x1ac>)
   81492:	681b      	ldr	r3, [r3, #0]
   81494:	2b00      	cmp	r3, #0
   81496:	d03a      	beq.n	8150e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
   81498:	4b39      	ldr	r3, [pc, #228]	; (81580 <xTaskCreate+0x1b0>)
   8149a:	681b      	ldr	r3, [r3, #0]
   8149c:	b93b      	cbnz	r3, 814ae <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   8149e:	4b37      	ldr	r3, [pc, #220]	; (8157c <xTaskCreate+0x1ac>)
   814a0:	681b      	ldr	r3, [r3, #0]
   814a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   814a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   814a6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   814a8:	bf9c      	itt	ls
   814aa:	4b34      	ldrls	r3, [pc, #208]	; (8157c <xTaskCreate+0x1ac>)
   814ac:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   814ae:	4a35      	ldr	r2, [pc, #212]	; (81584 <xTaskCreate+0x1b4>)
   814b0:	6813      	ldr	r3, [r2, #0]
   814b2:	3301      	adds	r3, #1
   814b4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   814b6:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
   814b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   814ba:	4a33      	ldr	r2, [pc, #204]	; (81588 <xTaskCreate+0x1b8>)
   814bc:	6811      	ldr	r1, [r2, #0]
   814be:	2301      	movs	r3, #1
   814c0:	4083      	lsls	r3, r0
   814c2:	430b      	orrs	r3, r1
   814c4:	6013      	str	r3, [r2, #0]
   814c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814ca:	4641      	mov	r1, r8
   814cc:	4b2f      	ldr	r3, [pc, #188]	; (8158c <xTaskCreate+0x1bc>)
   814ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   814d2:	4b2f      	ldr	r3, [pc, #188]	; (81590 <xTaskCreate+0x1c0>)
   814d4:	4798      	blx	r3
	taskEXIT_CRITICAL();
   814d6:	4b2f      	ldr	r3, [pc, #188]	; (81594 <xTaskCreate+0x1c4>)
   814d8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   814da:	4b29      	ldr	r3, [pc, #164]	; (81580 <xTaskCreate+0x1b0>)
   814dc:	681b      	ldr	r3, [r3, #0]
   814de:	2b00      	cmp	r3, #0
   814e0:	d03b      	beq.n	8155a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   814e2:	4b26      	ldr	r3, [pc, #152]	; (8157c <xTaskCreate+0x1ac>)
   814e4:	681b      	ldr	r3, [r3, #0]
   814e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   814e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   814ea:	429a      	cmp	r2, r3
   814ec:	d239      	bcs.n	81562 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
   814ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   814f2:	4b29      	ldr	r3, [pc, #164]	; (81598 <xTaskCreate+0x1c8>)
   814f4:	601a      	str	r2, [r3, #0]
   814f6:	f3bf 8f4f 	dsb	sy
   814fa:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   814fe:	2001      	movs	r0, #1
   81500:	e02c      	b.n	8155c <xTaskCreate+0x18c>
					vPortFree( pxStack );
   81502:	4638      	mov	r0, r7
   81504:	4b25      	ldr	r3, [pc, #148]	; (8159c <xTaskCreate+0x1cc>)
   81506:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81508:	f04f 30ff 	mov.w	r0, #4294967295
   8150c:	e026      	b.n	8155c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
   8150e:	4b1b      	ldr	r3, [pc, #108]	; (8157c <xTaskCreate+0x1ac>)
   81510:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   81512:	6813      	ldr	r3, [r2, #0]
   81514:	2b01      	cmp	r3, #1
   81516:	d1ca      	bne.n	814ae <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   81518:	4e1c      	ldr	r6, [pc, #112]	; (8158c <xTaskCreate+0x1bc>)
   8151a:	4630      	mov	r0, r6
   8151c:	4d20      	ldr	r5, [pc, #128]	; (815a0 <xTaskCreate+0x1d0>)
   8151e:	47a8      	blx	r5
   81520:	f106 0014 	add.w	r0, r6, #20
   81524:	47a8      	blx	r5
   81526:	f106 0028 	add.w	r0, r6, #40	; 0x28
   8152a:	47a8      	blx	r5
   8152c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   81530:	47a8      	blx	r5
   81532:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81536:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   81538:	4f1a      	ldr	r7, [pc, #104]	; (815a4 <xTaskCreate+0x1d4>)
   8153a:	4638      	mov	r0, r7
   8153c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   8153e:	4e1a      	ldr	r6, [pc, #104]	; (815a8 <xTaskCreate+0x1d8>)
   81540:	4630      	mov	r0, r6
   81542:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   81544:	4819      	ldr	r0, [pc, #100]	; (815ac <xTaskCreate+0x1dc>)
   81546:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   81548:	4819      	ldr	r0, [pc, #100]	; (815b0 <xTaskCreate+0x1e0>)
   8154a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   8154c:	4819      	ldr	r0, [pc, #100]	; (815b4 <xTaskCreate+0x1e4>)
   8154e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   81550:	4b19      	ldr	r3, [pc, #100]	; (815b8 <xTaskCreate+0x1e8>)
   81552:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81554:	4b19      	ldr	r3, [pc, #100]	; (815bc <xTaskCreate+0x1ec>)
   81556:	601e      	str	r6, [r3, #0]
   81558:	e7a9      	b.n	814ae <xTaskCreate+0xde>
			xReturn = pdPASS;
   8155a:	2001      	movs	r0, #1
	}
   8155c:	b003      	add	sp, #12
   8155e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   81562:	2001      	movs	r0, #1
		return xReturn;
   81564:	e7fa      	b.n	8155c <xTaskCreate+0x18c>
   81566:	bf00      	nop
   81568:	00080b0d 	.word	0x00080b0d
   8156c:	000828f1 	.word	0x000828f1
   81570:	00080879 	.word	0x00080879
   81574:	000808c9 	.word	0x000808c9
   81578:	2007c37c 	.word	0x2007c37c
   8157c:	2007c30c 	.word	0x2007c30c
   81580:	2007c3dc 	.word	0x2007c3dc
   81584:	2007c38c 	.word	0x2007c38c
   81588:	2007c390 	.word	0x2007c390
   8158c:	2007c318 	.word	0x2007c318
   81590:	000807a5 	.word	0x000807a5
   81594:	0008090d 	.word	0x0008090d
   81598:	e000ed04 	.word	0xe000ed04
   8159c:	00080b75 	.word	0x00080b75
   815a0:	00080789 	.word	0x00080789
   815a4:	2007c394 	.word	0x2007c394
   815a8:	2007c3a8 	.word	0x2007c3a8
   815ac:	2007c3c8 	.word	0x2007c3c8
   815b0:	2007c3f4 	.word	0x2007c3f4
   815b4:	2007c3e0 	.word	0x2007c3e0
   815b8:	2007c310 	.word	0x2007c310
   815bc:	2007c314 	.word	0x2007c314
   815c0:	0008079f 	.word	0x0008079f

000815c4 <vTaskStartScheduler>:
{
   815c4:	b510      	push	{r4, lr}
   815c6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   815c8:	4b18      	ldr	r3, [pc, #96]	; (8162c <vTaskStartScheduler+0x68>)
   815ca:	9301      	str	r3, [sp, #4]
   815cc:	2300      	movs	r3, #0
   815ce:	9300      	str	r3, [sp, #0]
   815d0:	2282      	movs	r2, #130	; 0x82
   815d2:	4917      	ldr	r1, [pc, #92]	; (81630 <vTaskStartScheduler+0x6c>)
   815d4:	4817      	ldr	r0, [pc, #92]	; (81634 <vTaskStartScheduler+0x70>)
   815d6:	4c18      	ldr	r4, [pc, #96]	; (81638 <vTaskStartScheduler+0x74>)
   815d8:	47a0      	blx	r4
		if( xReturn == pdPASS )
   815da:	2801      	cmp	r0, #1
   815dc:	d004      	beq.n	815e8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   815de:	f1b0 3fff 	cmp.w	r0, #4294967295
   815e2:	d01a      	beq.n	8161a <vTaskStartScheduler+0x56>
}
   815e4:	b002      	add	sp, #8
   815e6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   815e8:	4b14      	ldr	r3, [pc, #80]	; (8163c <vTaskStartScheduler+0x78>)
   815ea:	4798      	blx	r3
	if( xReturn == pdPASS )
   815ec:	2801      	cmp	r0, #1
   815ee:	d1f6      	bne.n	815de <vTaskStartScheduler+0x1a>
   815f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   815f4:	f383 8811 	msr	BASEPRI, r3
   815f8:	f3bf 8f6f 	isb	sy
   815fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   81600:	f04f 32ff 	mov.w	r2, #4294967295
   81604:	4b0e      	ldr	r3, [pc, #56]	; (81640 <vTaskStartScheduler+0x7c>)
   81606:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   81608:	2201      	movs	r2, #1
   8160a:	4b0e      	ldr	r3, [pc, #56]	; (81644 <vTaskStartScheduler+0x80>)
   8160c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   8160e:	2200      	movs	r2, #0
   81610:	4b0d      	ldr	r3, [pc, #52]	; (81648 <vTaskStartScheduler+0x84>)
   81612:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   81614:	4b0d      	ldr	r3, [pc, #52]	; (8164c <vTaskStartScheduler+0x88>)
   81616:	4798      	blx	r3
   81618:	e7e4      	b.n	815e4 <vTaskStartScheduler+0x20>
   8161a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8161e:	f383 8811 	msr	BASEPRI, r3
   81622:	f3bf 8f6f 	isb	sy
   81626:	f3bf 8f4f 	dsb	sy
   8162a:	e7fe      	b.n	8162a <vTaskStartScheduler+0x66>
   8162c:	2007c3bc 	.word	0x2007c3bc
   81630:	00085638 	.word	0x00085638
   81634:	000812ad 	.word	0x000812ad
   81638:	000813d1 	.word	0x000813d1
   8163c:	00081d49 	.word	0x00081d49
   81640:	2007c3c0 	.word	0x2007c3c0
   81644:	2007c3dc 	.word	0x2007c3dc
   81648:	2007c408 	.word	0x2007c408
   8164c:	000809e1 	.word	0x000809e1

00081650 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   81650:	4a02      	ldr	r2, [pc, #8]	; (8165c <vTaskSuspendAll+0xc>)
   81652:	6813      	ldr	r3, [r2, #0]
   81654:	3301      	adds	r3, #1
   81656:	6013      	str	r3, [r2, #0]
   81658:	4770      	bx	lr
   8165a:	bf00      	nop
   8165c:	2007c388 	.word	0x2007c388

00081660 <xTaskGetTickCount>:
		xTicks = xTickCount;
   81660:	4b01      	ldr	r3, [pc, #4]	; (81668 <xTaskGetTickCount+0x8>)
   81662:	6818      	ldr	r0, [r3, #0]
}
   81664:	4770      	bx	lr
   81666:	bf00      	nop
   81668:	2007c408 	.word	0x2007c408

0008166c <xTaskIncrementTick>:
{
   8166c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81670:	4b3d      	ldr	r3, [pc, #244]	; (81768 <xTaskIncrementTick+0xfc>)
   81672:	681b      	ldr	r3, [r3, #0]
   81674:	2b00      	cmp	r3, #0
   81676:	d169      	bne.n	8174c <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   81678:	4b3c      	ldr	r3, [pc, #240]	; (8176c <xTaskIncrementTick+0x100>)
   8167a:	681d      	ldr	r5, [r3, #0]
   8167c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   8167e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   81680:	b9c5      	cbnz	r5, 816b4 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
   81682:	4b3b      	ldr	r3, [pc, #236]	; (81770 <xTaskIncrementTick+0x104>)
   81684:	681b      	ldr	r3, [r3, #0]
   81686:	681b      	ldr	r3, [r3, #0]
   81688:	b143      	cbz	r3, 8169c <xTaskIncrementTick+0x30>
   8168a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8168e:	f383 8811 	msr	BASEPRI, r3
   81692:	f3bf 8f6f 	isb	sy
   81696:	f3bf 8f4f 	dsb	sy
   8169a:	e7fe      	b.n	8169a <xTaskIncrementTick+0x2e>
   8169c:	4a34      	ldr	r2, [pc, #208]	; (81770 <xTaskIncrementTick+0x104>)
   8169e:	6811      	ldr	r1, [r2, #0]
   816a0:	4b34      	ldr	r3, [pc, #208]	; (81774 <xTaskIncrementTick+0x108>)
   816a2:	6818      	ldr	r0, [r3, #0]
   816a4:	6010      	str	r0, [r2, #0]
   816a6:	6019      	str	r1, [r3, #0]
   816a8:	4a33      	ldr	r2, [pc, #204]	; (81778 <xTaskIncrementTick+0x10c>)
   816aa:	6813      	ldr	r3, [r2, #0]
   816ac:	3301      	adds	r3, #1
   816ae:	6013      	str	r3, [r2, #0]
   816b0:	4b32      	ldr	r3, [pc, #200]	; (8177c <xTaskIncrementTick+0x110>)
   816b2:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   816b4:	4b32      	ldr	r3, [pc, #200]	; (81780 <xTaskIncrementTick+0x114>)
   816b6:	681b      	ldr	r3, [r3, #0]
   816b8:	429d      	cmp	r5, r3
   816ba:	d20c      	bcs.n	816d6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
   816bc:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   816be:	4b31      	ldr	r3, [pc, #196]	; (81784 <xTaskIncrementTick+0x118>)
   816c0:	681b      	ldr	r3, [r3, #0]
   816c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   816c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816c8:	009b      	lsls	r3, r3, #2
   816ca:	4a2f      	ldr	r2, [pc, #188]	; (81788 <xTaskIncrementTick+0x11c>)
   816cc:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   816ce:	2b02      	cmp	r3, #2
   816d0:	bf28      	it	cs
   816d2:	2401      	movcs	r4, #1
   816d4:	e03f      	b.n	81756 <xTaskIncrementTick+0xea>
   816d6:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   816d8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 81770 <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   816dc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8179c <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
   816e0:	4f2a      	ldr	r7, [pc, #168]	; (8178c <xTaskIncrementTick+0x120>)
   816e2:	e01f      	b.n	81724 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   816e4:	f04f 32ff 	mov.w	r2, #4294967295
   816e8:	4b25      	ldr	r3, [pc, #148]	; (81780 <xTaskIncrementTick+0x114>)
   816ea:	601a      	str	r2, [r3, #0]
					break;
   816ec:	e7e7      	b.n	816be <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
   816ee:	4a24      	ldr	r2, [pc, #144]	; (81780 <xTaskIncrementTick+0x114>)
   816f0:	6013      	str	r3, [r2, #0]
						break;
   816f2:	e7e4      	b.n	816be <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   816f4:	f106 0018 	add.w	r0, r6, #24
   816f8:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   816fa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   816fc:	683a      	ldr	r2, [r7, #0]
   816fe:	2301      	movs	r3, #1
   81700:	4083      	lsls	r3, r0
   81702:	4313      	orrs	r3, r2
   81704:	603b      	str	r3, [r7, #0]
   81706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8170a:	4651      	mov	r1, sl
   8170c:	4b1e      	ldr	r3, [pc, #120]	; (81788 <xTaskIncrementTick+0x11c>)
   8170e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81712:	4b1f      	ldr	r3, [pc, #124]	; (81790 <xTaskIncrementTick+0x124>)
   81714:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81716:	4b1b      	ldr	r3, [pc, #108]	; (81784 <xTaskIncrementTick+0x118>)
   81718:	681b      	ldr	r3, [r3, #0]
   8171a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   8171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   8171e:	429a      	cmp	r2, r3
   81720:	bf28      	it	cs
   81722:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81724:	f8d9 3000 	ldr.w	r3, [r9]
   81728:	681b      	ldr	r3, [r3, #0]
   8172a:	2b00      	cmp	r3, #0
   8172c:	d0da      	beq.n	816e4 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8172e:	f8d9 3000 	ldr.w	r3, [r9]
   81732:	68db      	ldr	r3, [r3, #12]
   81734:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   81736:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   81738:	429d      	cmp	r5, r3
   8173a:	d3d8      	bcc.n	816ee <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   8173c:	f106 0a04 	add.w	sl, r6, #4
   81740:	4650      	mov	r0, sl
   81742:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81744:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   81746:	2b00      	cmp	r3, #0
   81748:	d1d4      	bne.n	816f4 <xTaskIncrementTick+0x88>
   8174a:	e7d6      	b.n	816fa <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
   8174c:	4a11      	ldr	r2, [pc, #68]	; (81794 <xTaskIncrementTick+0x128>)
   8174e:	6813      	ldr	r3, [r2, #0]
   81750:	3301      	adds	r3, #1
   81752:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   81754:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   81756:	4b10      	ldr	r3, [pc, #64]	; (81798 <xTaskIncrementTick+0x12c>)
   81758:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   8175a:	2b00      	cmp	r3, #0
}
   8175c:	bf0c      	ite	eq
   8175e:	4620      	moveq	r0, r4
   81760:	2001      	movne	r0, #1
   81762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81766:	bf00      	nop
   81768:	2007c388 	.word	0x2007c388
   8176c:	2007c408 	.word	0x2007c408
   81770:	2007c310 	.word	0x2007c310
   81774:	2007c314 	.word	0x2007c314
   81778:	2007c3c4 	.word	0x2007c3c4
   8177c:	00081281 	.word	0x00081281
   81780:	2007c3c0 	.word	0x2007c3c0
   81784:	2007c30c 	.word	0x2007c30c
   81788:	2007c318 	.word	0x2007c318
   8178c:	2007c390 	.word	0x2007c390
   81790:	000807a5 	.word	0x000807a5
   81794:	2007c384 	.word	0x2007c384
   81798:	2007c40c 	.word	0x2007c40c
   8179c:	000807f1 	.word	0x000807f1

000817a0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   817a0:	4b35      	ldr	r3, [pc, #212]	; (81878 <xTaskResumeAll+0xd8>)
   817a2:	681b      	ldr	r3, [r3, #0]
   817a4:	b943      	cbnz	r3, 817b8 <xTaskResumeAll+0x18>
   817a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   817aa:	f383 8811 	msr	BASEPRI, r3
   817ae:	f3bf 8f6f 	isb	sy
   817b2:	f3bf 8f4f 	dsb	sy
   817b6:	e7fe      	b.n	817b6 <xTaskResumeAll+0x16>
{
   817b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
   817bc:	4b2f      	ldr	r3, [pc, #188]	; (8187c <xTaskResumeAll+0xdc>)
   817be:	4798      	blx	r3
		--uxSchedulerSuspended;
   817c0:	4b2d      	ldr	r3, [pc, #180]	; (81878 <xTaskResumeAll+0xd8>)
   817c2:	681a      	ldr	r2, [r3, #0]
   817c4:	3a01      	subs	r2, #1
   817c6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   817c8:	681b      	ldr	r3, [r3, #0]
   817ca:	2b00      	cmp	r3, #0
   817cc:	d150      	bne.n	81870 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   817ce:	4b2c      	ldr	r3, [pc, #176]	; (81880 <xTaskResumeAll+0xe0>)
   817d0:	681b      	ldr	r3, [r3, #0]
   817d2:	b92b      	cbnz	r3, 817e0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
   817d4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   817d6:	4b2b      	ldr	r3, [pc, #172]	; (81884 <xTaskResumeAll+0xe4>)
   817d8:	4798      	blx	r3
}
   817da:	4620      	mov	r0, r4
   817dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   817e0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   817e2:	4f29      	ldr	r7, [pc, #164]	; (81888 <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   817e4:	4e29      	ldr	r6, [pc, #164]	; (8188c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
   817e6:	4d2a      	ldr	r5, [pc, #168]	; (81890 <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   817e8:	683b      	ldr	r3, [r7, #0]
   817ea:	b303      	cbz	r3, 8182e <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   817ec:	68fb      	ldr	r3, [r7, #12]
   817ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   817f0:	f104 0018 	add.w	r0, r4, #24
   817f4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   817f6:	f104 0804 	add.w	r8, r4, #4
   817fa:	4640      	mov	r0, r8
   817fc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   817fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81800:	682a      	ldr	r2, [r5, #0]
   81802:	2301      	movs	r3, #1
   81804:	4083      	lsls	r3, r0
   81806:	4313      	orrs	r3, r2
   81808:	602b      	str	r3, [r5, #0]
   8180a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8180e:	4641      	mov	r1, r8
   81810:	4b20      	ldr	r3, [pc, #128]	; (81894 <xTaskResumeAll+0xf4>)
   81812:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81816:	4b20      	ldr	r3, [pc, #128]	; (81898 <xTaskResumeAll+0xf8>)
   81818:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8181a:	4b20      	ldr	r3, [pc, #128]	; (8189c <xTaskResumeAll+0xfc>)
   8181c:	681b      	ldr	r3, [r3, #0]
   8181e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81822:	429a      	cmp	r2, r3
   81824:	d3e0      	bcc.n	817e8 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
   81826:	2201      	movs	r2, #1
   81828:	4b1d      	ldr	r3, [pc, #116]	; (818a0 <xTaskResumeAll+0x100>)
   8182a:	601a      	str	r2, [r3, #0]
   8182c:	e7dc      	b.n	817e8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
   8182e:	b10c      	cbz	r4, 81834 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
   81830:	4b1c      	ldr	r3, [pc, #112]	; (818a4 <xTaskResumeAll+0x104>)
   81832:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   81834:	4b1c      	ldr	r3, [pc, #112]	; (818a8 <xTaskResumeAll+0x108>)
   81836:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   81838:	b16c      	cbz	r4, 81856 <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
   8183a:	4f1c      	ldr	r7, [pc, #112]	; (818ac <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   8183c:	4e18      	ldr	r6, [pc, #96]	; (818a0 <xTaskResumeAll+0x100>)
   8183e:	2501      	movs	r5, #1
   81840:	e001      	b.n	81846 <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   81842:	3c01      	subs	r4, #1
   81844:	d004      	beq.n	81850 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   81846:	47b8      	blx	r7
   81848:	2800      	cmp	r0, #0
   8184a:	d0fa      	beq.n	81842 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
   8184c:	6035      	str	r5, [r6, #0]
   8184e:	e7f8      	b.n	81842 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
   81850:	2200      	movs	r2, #0
   81852:	4b15      	ldr	r3, [pc, #84]	; (818a8 <xTaskResumeAll+0x108>)
   81854:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   81856:	4b12      	ldr	r3, [pc, #72]	; (818a0 <xTaskResumeAll+0x100>)
   81858:	681b      	ldr	r3, [r3, #0]
   8185a:	b15b      	cbz	r3, 81874 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
   8185c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81860:	4b13      	ldr	r3, [pc, #76]	; (818b0 <xTaskResumeAll+0x110>)
   81862:	601a      	str	r2, [r3, #0]
   81864:	f3bf 8f4f 	dsb	sy
   81868:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   8186c:	2401      	movs	r4, #1
   8186e:	e7b2      	b.n	817d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
   81870:	2400      	movs	r4, #0
   81872:	e7b0      	b.n	817d6 <xTaskResumeAll+0x36>
   81874:	2400      	movs	r4, #0
   81876:	e7ae      	b.n	817d6 <xTaskResumeAll+0x36>
   81878:	2007c388 	.word	0x2007c388
   8187c:	000808c9 	.word	0x000808c9
   81880:	2007c37c 	.word	0x2007c37c
   81884:	0008090d 	.word	0x0008090d
   81888:	2007c3c8 	.word	0x2007c3c8
   8188c:	000807f1 	.word	0x000807f1
   81890:	2007c390 	.word	0x2007c390
   81894:	2007c318 	.word	0x2007c318
   81898:	000807a5 	.word	0x000807a5
   8189c:	2007c30c 	.word	0x2007c30c
   818a0:	2007c40c 	.word	0x2007c40c
   818a4:	00081281 	.word	0x00081281
   818a8:	2007c384 	.word	0x2007c384
   818ac:	0008166d 	.word	0x0008166d
   818b0:	e000ed04 	.word	0xe000ed04

000818b4 <vTaskDelayUntil>:
	{
   818b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   818b6:	b150      	cbz	r0, 818ce <vTaskDelayUntil+0x1a>
   818b8:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   818ba:	b989      	cbnz	r1, 818e0 <vTaskDelayUntil+0x2c>
   818bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   818c0:	f383 8811 	msr	BASEPRI, r3
   818c4:	f3bf 8f6f 	isb	sy
   818c8:	f3bf 8f4f 	dsb	sy
   818cc:	e7fe      	b.n	818cc <vTaskDelayUntil+0x18>
   818ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   818d2:	f383 8811 	msr	BASEPRI, r3
   818d6:	f3bf 8f6f 	isb	sy
   818da:	f3bf 8f4f 	dsb	sy
   818de:	e7fe      	b.n	818de <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
   818e0:	4b19      	ldr	r3, [pc, #100]	; (81948 <vTaskDelayUntil+0x94>)
   818e2:	681b      	ldr	r3, [r3, #0]
   818e4:	b143      	cbz	r3, 818f8 <vTaskDelayUntil+0x44>
   818e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   818ea:	f383 8811 	msr	BASEPRI, r3
   818ee:	f3bf 8f6f 	isb	sy
   818f2:	f3bf 8f4f 	dsb	sy
   818f6:	e7fe      	b.n	818f6 <vTaskDelayUntil+0x42>
   818f8:	460c      	mov	r4, r1
		vTaskSuspendAll();
   818fa:	4b14      	ldr	r3, [pc, #80]	; (8194c <vTaskDelayUntil+0x98>)
   818fc:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
   818fe:	4b14      	ldr	r3, [pc, #80]	; (81950 <vTaskDelayUntil+0x9c>)
   81900:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81902:	682a      	ldr	r2, [r5, #0]
   81904:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
   81906:	4290      	cmp	r0, r2
   81908:	d214      	bcs.n	81934 <vTaskDelayUntil+0x80>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   8190a:	42a2      	cmp	r2, r4
   8190c:	d916      	bls.n	8193c <vTaskDelayUntil+0x88>
			*pxPreviousWakeTime = xTimeToWake;
   8190e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   81910:	42a0      	cmp	r0, r4
   81912:	d203      	bcs.n	8191c <vTaskDelayUntil+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   81914:	2100      	movs	r1, #0
   81916:	1a20      	subs	r0, r4, r0
   81918:	4b0e      	ldr	r3, [pc, #56]	; (81954 <vTaskDelayUntil+0xa0>)
   8191a:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
   8191c:	4b0e      	ldr	r3, [pc, #56]	; (81958 <vTaskDelayUntil+0xa4>)
   8191e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81920:	b980      	cbnz	r0, 81944 <vTaskDelayUntil+0x90>
			portYIELD_WITHIN_API();
   81922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81926:	4b0d      	ldr	r3, [pc, #52]	; (8195c <vTaskDelayUntil+0xa8>)
   81928:	601a      	str	r2, [r3, #0]
   8192a:	f3bf 8f4f 	dsb	sy
   8192e:	f3bf 8f6f 	isb	sy
	}
   81932:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   81934:	42a2      	cmp	r2, r4
   81936:	d803      	bhi.n	81940 <vTaskDelayUntil+0x8c>
   81938:	42a0      	cmp	r0, r4
   8193a:	d301      	bcc.n	81940 <vTaskDelayUntil+0x8c>
			*pxPreviousWakeTime = xTimeToWake;
   8193c:	602c      	str	r4, [r5, #0]
   8193e:	e7ed      	b.n	8191c <vTaskDelayUntil+0x68>
   81940:	602c      	str	r4, [r5, #0]
   81942:	e7e7      	b.n	81914 <vTaskDelayUntil+0x60>
   81944:	bd38      	pop	{r3, r4, r5, pc}
   81946:	bf00      	nop
   81948:	2007c388 	.word	0x2007c388
   8194c:	00081651 	.word	0x00081651
   81950:	2007c408 	.word	0x2007c408
   81954:	0008132d 	.word	0x0008132d
   81958:	000817a1 	.word	0x000817a1
   8195c:	e000ed04 	.word	0xe000ed04

00081960 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   81960:	4b1f      	ldr	r3, [pc, #124]	; (819e0 <vTaskSwitchContext+0x80>)
   81962:	681b      	ldr	r3, [r3, #0]
   81964:	b9c3      	cbnz	r3, 81998 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
   81966:	2200      	movs	r2, #0
   81968:	4b1e      	ldr	r3, [pc, #120]	; (819e4 <vTaskSwitchContext+0x84>)
   8196a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8196c:	4b1e      	ldr	r3, [pc, #120]	; (819e8 <vTaskSwitchContext+0x88>)
   8196e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   81970:	fab3 f383 	clz	r3, r3
   81974:	b2db      	uxtb	r3, r3
   81976:	f1c3 031f 	rsb	r3, r3, #31
   8197a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   8197e:	0092      	lsls	r2, r2, #2
   81980:	491a      	ldr	r1, [pc, #104]	; (819ec <vTaskSwitchContext+0x8c>)
   81982:	588a      	ldr	r2, [r1, r2]
   81984:	b962      	cbnz	r2, 819a0 <vTaskSwitchContext+0x40>
	__asm volatile
   81986:	f04f 0340 	mov.w	r3, #64	; 0x40
   8198a:	f383 8811 	msr	BASEPRI, r3
   8198e:	f3bf 8f6f 	isb	sy
   81992:	f3bf 8f4f 	dsb	sy
   81996:	e7fe      	b.n	81996 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
   81998:	2201      	movs	r2, #1
   8199a:	4b12      	ldr	r3, [pc, #72]	; (819e4 <vTaskSwitchContext+0x84>)
   8199c:	601a      	str	r2, [r3, #0]
   8199e:	4770      	bx	lr
{
   819a0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   819a2:	4a12      	ldr	r2, [pc, #72]	; (819ec <vTaskSwitchContext+0x8c>)
   819a4:	0099      	lsls	r1, r3, #2
   819a6:	18c8      	adds	r0, r1, r3
   819a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   819ac:	6844      	ldr	r4, [r0, #4]
   819ae:	6864      	ldr	r4, [r4, #4]
   819b0:	6044      	str	r4, [r0, #4]
   819b2:	4419      	add	r1, r3
   819b4:	4602      	mov	r2, r0
   819b6:	3208      	adds	r2, #8
   819b8:	4294      	cmp	r4, r2
   819ba:	d00a      	beq.n	819d2 <vTaskSwitchContext+0x72>
   819bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   819c0:	4a0a      	ldr	r2, [pc, #40]	; (819ec <vTaskSwitchContext+0x8c>)
   819c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   819c6:	685b      	ldr	r3, [r3, #4]
   819c8:	68da      	ldr	r2, [r3, #12]
   819ca:	4b09      	ldr	r3, [pc, #36]	; (819f0 <vTaskSwitchContext+0x90>)
   819cc:	601a      	str	r2, [r3, #0]
}
   819ce:	bc10      	pop	{r4}
   819d0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   819d2:	6860      	ldr	r0, [r4, #4]
   819d4:	4a05      	ldr	r2, [pc, #20]	; (819ec <vTaskSwitchContext+0x8c>)
   819d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   819da:	6050      	str	r0, [r2, #4]
   819dc:	e7ee      	b.n	819bc <vTaskSwitchContext+0x5c>
   819de:	bf00      	nop
   819e0:	2007c388 	.word	0x2007c388
   819e4:	2007c40c 	.word	0x2007c40c
   819e8:	2007c390 	.word	0x2007c390
   819ec:	2007c318 	.word	0x2007c318
   819f0:	2007c30c 	.word	0x2007c30c

000819f4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   819f4:	b940      	cbnz	r0, 81a08 <vTaskPlaceOnEventList+0x14>
   819f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   819fa:	f383 8811 	msr	BASEPRI, r3
   819fe:	f3bf 8f6f 	isb	sy
   81a02:	f3bf 8f4f 	dsb	sy
   81a06:	e7fe      	b.n	81a06 <vTaskPlaceOnEventList+0x12>
{
   81a08:	b510      	push	{r4, lr}
   81a0a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81a0c:	4b04      	ldr	r3, [pc, #16]	; (81a20 <vTaskPlaceOnEventList+0x2c>)
   81a0e:	6819      	ldr	r1, [r3, #0]
   81a10:	3118      	adds	r1, #24
   81a12:	4b04      	ldr	r3, [pc, #16]	; (81a24 <vTaskPlaceOnEventList+0x30>)
   81a14:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   81a16:	2101      	movs	r1, #1
   81a18:	4620      	mov	r0, r4
   81a1a:	4b03      	ldr	r3, [pc, #12]	; (81a28 <vTaskPlaceOnEventList+0x34>)
   81a1c:	4798      	blx	r3
   81a1e:	bd10      	pop	{r4, pc}
   81a20:	2007c30c 	.word	0x2007c30c
   81a24:	000807bd 	.word	0x000807bd
   81a28:	0008132d 	.word	0x0008132d

00081a2c <vTaskPlaceOnEventListRestricted>:
	{
   81a2c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   81a2e:	b178      	cbz	r0, 81a50 <vTaskPlaceOnEventListRestricted+0x24>
   81a30:	4614      	mov	r4, r2
   81a32:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81a34:	4b0b      	ldr	r3, [pc, #44]	; (81a64 <vTaskPlaceOnEventListRestricted+0x38>)
   81a36:	6819      	ldr	r1, [r3, #0]
   81a38:	3118      	adds	r1, #24
   81a3a:	4b0b      	ldr	r3, [pc, #44]	; (81a68 <vTaskPlaceOnEventListRestricted+0x3c>)
   81a3c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   81a3e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   81a40:	4621      	mov	r1, r4
   81a42:	bf0c      	ite	eq
   81a44:	4628      	moveq	r0, r5
   81a46:	f04f 30ff 	movne.w	r0, #4294967295
   81a4a:	4b08      	ldr	r3, [pc, #32]	; (81a6c <vTaskPlaceOnEventListRestricted+0x40>)
   81a4c:	4798      	blx	r3
   81a4e:	bd38      	pop	{r3, r4, r5, pc}
   81a50:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a54:	f383 8811 	msr	BASEPRI, r3
   81a58:	f3bf 8f6f 	isb	sy
   81a5c:	f3bf 8f4f 	dsb	sy
   81a60:	e7fe      	b.n	81a60 <vTaskPlaceOnEventListRestricted+0x34>
   81a62:	bf00      	nop
   81a64:	2007c30c 	.word	0x2007c30c
   81a68:	000807a5 	.word	0x000807a5
   81a6c:	0008132d 	.word	0x0008132d

00081a70 <xTaskRemoveFromEventList>:
{
   81a70:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81a72:	68c3      	ldr	r3, [r0, #12]
   81a74:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81a76:	b32c      	cbz	r4, 81ac4 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81a78:	f104 0518 	add.w	r5, r4, #24
   81a7c:	4628      	mov	r0, r5
   81a7e:	4b18      	ldr	r3, [pc, #96]	; (81ae0 <xTaskRemoveFromEventList+0x70>)
   81a80:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81a82:	4b18      	ldr	r3, [pc, #96]	; (81ae4 <xTaskRemoveFromEventList+0x74>)
   81a84:	681b      	ldr	r3, [r3, #0]
   81a86:	bb33      	cbnz	r3, 81ad6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   81a88:	1d25      	adds	r5, r4, #4
   81a8a:	4628      	mov	r0, r5
   81a8c:	4b14      	ldr	r3, [pc, #80]	; (81ae0 <xTaskRemoveFromEventList+0x70>)
   81a8e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   81a90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81a92:	4a15      	ldr	r2, [pc, #84]	; (81ae8 <xTaskRemoveFromEventList+0x78>)
   81a94:	6811      	ldr	r1, [r2, #0]
   81a96:	2301      	movs	r3, #1
   81a98:	4083      	lsls	r3, r0
   81a9a:	430b      	orrs	r3, r1
   81a9c:	6013      	str	r3, [r2, #0]
   81a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81aa2:	4629      	mov	r1, r5
   81aa4:	4b11      	ldr	r3, [pc, #68]	; (81aec <xTaskRemoveFromEventList+0x7c>)
   81aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81aaa:	4b11      	ldr	r3, [pc, #68]	; (81af0 <xTaskRemoveFromEventList+0x80>)
   81aac:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   81aae:	4b11      	ldr	r3, [pc, #68]	; (81af4 <xTaskRemoveFromEventList+0x84>)
   81ab0:	681b      	ldr	r3, [r3, #0]
   81ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81ab6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   81ab8:	bf83      	ittte	hi
   81aba:	2001      	movhi	r0, #1
   81abc:	4b0e      	ldrhi	r3, [pc, #56]	; (81af8 <xTaskRemoveFromEventList+0x88>)
   81abe:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   81ac0:	2000      	movls	r0, #0
}
   81ac2:	bd38      	pop	{r3, r4, r5, pc}
   81ac4:	f04f 0340 	mov.w	r3, #64	; 0x40
   81ac8:	f383 8811 	msr	BASEPRI, r3
   81acc:	f3bf 8f6f 	isb	sy
   81ad0:	f3bf 8f4f 	dsb	sy
   81ad4:	e7fe      	b.n	81ad4 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81ad6:	4629      	mov	r1, r5
   81ad8:	4808      	ldr	r0, [pc, #32]	; (81afc <xTaskRemoveFromEventList+0x8c>)
   81ada:	4b05      	ldr	r3, [pc, #20]	; (81af0 <xTaskRemoveFromEventList+0x80>)
   81adc:	4798      	blx	r3
   81ade:	e7e6      	b.n	81aae <xTaskRemoveFromEventList+0x3e>
   81ae0:	000807f1 	.word	0x000807f1
   81ae4:	2007c388 	.word	0x2007c388
   81ae8:	2007c390 	.word	0x2007c390
   81aec:	2007c318 	.word	0x2007c318
   81af0:	000807a5 	.word	0x000807a5
   81af4:	2007c30c 	.word	0x2007c30c
   81af8:	2007c40c 	.word	0x2007c40c
   81afc:	2007c3c8 	.word	0x2007c3c8

00081b00 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81b00:	4b03      	ldr	r3, [pc, #12]	; (81b10 <vTaskInternalSetTimeOutState+0x10>)
   81b02:	681b      	ldr	r3, [r3, #0]
   81b04:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81b06:	4b03      	ldr	r3, [pc, #12]	; (81b14 <vTaskInternalSetTimeOutState+0x14>)
   81b08:	681b      	ldr	r3, [r3, #0]
   81b0a:	6043      	str	r3, [r0, #4]
   81b0c:	4770      	bx	lr
   81b0e:	bf00      	nop
   81b10:	2007c3c4 	.word	0x2007c3c4
   81b14:	2007c408 	.word	0x2007c408

00081b18 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   81b18:	b1e8      	cbz	r0, 81b56 <xTaskCheckForTimeOut+0x3e>
{
   81b1a:	b570      	push	{r4, r5, r6, lr}
   81b1c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
   81b1e:	b319      	cbz	r1, 81b68 <xTaskCheckForTimeOut+0x50>
   81b20:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
   81b22:	4b1b      	ldr	r3, [pc, #108]	; (81b90 <xTaskCheckForTimeOut+0x78>)
   81b24:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   81b26:	4b1b      	ldr	r3, [pc, #108]	; (81b94 <xTaskCheckForTimeOut+0x7c>)
   81b28:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81b2a:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   81b2c:	6823      	ldr	r3, [r4, #0]
   81b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81b32:	d029      	beq.n	81b88 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   81b34:	4818      	ldr	r0, [pc, #96]	; (81b98 <xTaskCheckForTimeOut+0x80>)
   81b36:	6800      	ldr	r0, [r0, #0]
   81b38:	682e      	ldr	r6, [r5, #0]
   81b3a:	4286      	cmp	r6, r0
   81b3c:	d001      	beq.n	81b42 <xTaskCheckForTimeOut+0x2a>
   81b3e:	428a      	cmp	r2, r1
   81b40:	d224      	bcs.n	81b8c <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81b42:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   81b44:	429a      	cmp	r2, r3
   81b46:	d318      	bcc.n	81b7a <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
   81b48:	2300      	movs	r3, #0
   81b4a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   81b4c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81b4e:	4b13      	ldr	r3, [pc, #76]	; (81b9c <xTaskCheckForTimeOut+0x84>)
   81b50:	4798      	blx	r3
}
   81b52:	4620      	mov	r0, r4
   81b54:	bd70      	pop	{r4, r5, r6, pc}
   81b56:	f04f 0340 	mov.w	r3, #64	; 0x40
   81b5a:	f383 8811 	msr	BASEPRI, r3
   81b5e:	f3bf 8f6f 	isb	sy
   81b62:	f3bf 8f4f 	dsb	sy
   81b66:	e7fe      	b.n	81b66 <xTaskCheckForTimeOut+0x4e>
   81b68:	f04f 0340 	mov.w	r3, #64	; 0x40
   81b6c:	f383 8811 	msr	BASEPRI, r3
   81b70:	f3bf 8f6f 	isb	sy
   81b74:	f3bf 8f4f 	dsb	sy
   81b78:	e7fe      	b.n	81b78 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   81b7a:	1a9b      	subs	r3, r3, r2
   81b7c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   81b7e:	4628      	mov	r0, r5
   81b80:	4b07      	ldr	r3, [pc, #28]	; (81ba0 <xTaskCheckForTimeOut+0x88>)
   81b82:	4798      	blx	r3
			xReturn = pdFALSE;
   81b84:	2400      	movs	r4, #0
   81b86:	e7e2      	b.n	81b4e <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   81b88:	2400      	movs	r4, #0
   81b8a:	e7e0      	b.n	81b4e <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   81b8c:	2401      	movs	r4, #1
   81b8e:	e7de      	b.n	81b4e <xTaskCheckForTimeOut+0x36>
   81b90:	000808c9 	.word	0x000808c9
   81b94:	2007c408 	.word	0x2007c408
   81b98:	2007c3c4 	.word	0x2007c3c4
   81b9c:	0008090d 	.word	0x0008090d
   81ba0:	00081b01 	.word	0x00081b01

00081ba4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   81ba4:	2201      	movs	r2, #1
   81ba6:	4b01      	ldr	r3, [pc, #4]	; (81bac <vTaskMissedYield+0x8>)
   81ba8:	601a      	str	r2, [r3, #0]
   81baa:	4770      	bx	lr
   81bac:	2007c40c 	.word	0x2007c40c

00081bb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   81bb0:	4b05      	ldr	r3, [pc, #20]	; (81bc8 <xTaskGetSchedulerState+0x18>)
   81bb2:	681b      	ldr	r3, [r3, #0]
   81bb4:	b133      	cbz	r3, 81bc4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81bb6:	4b05      	ldr	r3, [pc, #20]	; (81bcc <xTaskGetSchedulerState+0x1c>)
   81bb8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   81bba:	2b00      	cmp	r3, #0
   81bbc:	bf0c      	ite	eq
   81bbe:	2002      	moveq	r0, #2
   81bc0:	2000      	movne	r0, #0
   81bc2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81bc4:	2001      	movs	r0, #1
	}
   81bc6:	4770      	bx	lr
   81bc8:	2007c3dc 	.word	0x2007c3dc
   81bcc:	2007c388 	.word	0x2007c388

00081bd0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   81bd0:	2800      	cmp	r0, #0
   81bd2:	d04a      	beq.n	81c6a <xTaskPriorityDisinherit+0x9a>
	{
   81bd4:	b538      	push	{r3, r4, r5, lr}
   81bd6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   81bd8:	4a27      	ldr	r2, [pc, #156]	; (81c78 <xTaskPriorityDisinherit+0xa8>)
   81bda:	6812      	ldr	r2, [r2, #0]
   81bdc:	4290      	cmp	r0, r2
   81bde:	d008      	beq.n	81bf2 <xTaskPriorityDisinherit+0x22>
   81be0:	f04f 0340 	mov.w	r3, #64	; 0x40
   81be4:	f383 8811 	msr	BASEPRI, r3
   81be8:	f3bf 8f6f 	isb	sy
   81bec:	f3bf 8f4f 	dsb	sy
   81bf0:	e7fe      	b.n	81bf0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
   81bf2:	6d42      	ldr	r2, [r0, #84]	; 0x54
   81bf4:	b942      	cbnz	r2, 81c08 <xTaskPriorityDisinherit+0x38>
   81bf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   81bfa:	f383 8811 	msr	BASEPRI, r3
   81bfe:	f3bf 8f6f 	isb	sy
   81c02:	f3bf 8f4f 	dsb	sy
   81c06:	e7fe      	b.n	81c06 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
   81c08:	3a01      	subs	r2, #1
   81c0a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81c0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81c0e:	6d21      	ldr	r1, [r4, #80]	; 0x50
   81c10:	4288      	cmp	r0, r1
   81c12:	d02c      	beq.n	81c6e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   81c14:	2a00      	cmp	r2, #0
   81c16:	d12c      	bne.n	81c72 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81c18:	1d25      	adds	r5, r4, #4
   81c1a:	4628      	mov	r0, r5
   81c1c:	4b17      	ldr	r3, [pc, #92]	; (81c7c <xTaskPriorityDisinherit+0xac>)
   81c1e:	4798      	blx	r3
   81c20:	b968      	cbnz	r0, 81c3e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81c22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81c24:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81c28:	009b      	lsls	r3, r3, #2
   81c2a:	4a15      	ldr	r2, [pc, #84]	; (81c80 <xTaskPriorityDisinherit+0xb0>)
   81c2c:	58d3      	ldr	r3, [r2, r3]
   81c2e:	b933      	cbnz	r3, 81c3e <xTaskPriorityDisinherit+0x6e>
   81c30:	4814      	ldr	r0, [pc, #80]	; (81c84 <xTaskPriorityDisinherit+0xb4>)
   81c32:	6803      	ldr	r3, [r0, #0]
   81c34:	2201      	movs	r2, #1
   81c36:	408a      	lsls	r2, r1
   81c38:	ea23 0302 	bic.w	r3, r3, r2
   81c3c:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   81c3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   81c40:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81c42:	f1c0 0305 	rsb	r3, r0, #5
   81c46:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   81c48:	4a0e      	ldr	r2, [pc, #56]	; (81c84 <xTaskPriorityDisinherit+0xb4>)
   81c4a:	6811      	ldr	r1, [r2, #0]
   81c4c:	2401      	movs	r4, #1
   81c4e:	fa04 f300 	lsl.w	r3, r4, r0
   81c52:	430b      	orrs	r3, r1
   81c54:	6013      	str	r3, [r2, #0]
   81c56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c5a:	4629      	mov	r1, r5
   81c5c:	4b08      	ldr	r3, [pc, #32]	; (81c80 <xTaskPriorityDisinherit+0xb0>)
   81c5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81c62:	4b09      	ldr	r3, [pc, #36]	; (81c88 <xTaskPriorityDisinherit+0xb8>)
   81c64:	4798      	blx	r3
					xReturn = pdTRUE;
   81c66:	4620      	mov	r0, r4
   81c68:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   81c6a:	2000      	movs	r0, #0
   81c6c:	4770      	bx	lr
   81c6e:	2000      	movs	r0, #0
   81c70:	bd38      	pop	{r3, r4, r5, pc}
   81c72:	2000      	movs	r0, #0
	}
   81c74:	bd38      	pop	{r3, r4, r5, pc}
   81c76:	bf00      	nop
   81c78:	2007c30c 	.word	0x2007c30c
   81c7c:	000807f1 	.word	0x000807f1
   81c80:	2007c318 	.word	0x2007c318
   81c84:	2007c390 	.word	0x2007c390
   81c88:	000807a5 	.word	0x000807a5

00081c8c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   81c8c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81c8e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81c90:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81c92:	4291      	cmp	r1, r2
   81c94:	d80c      	bhi.n	81cb0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81c96:	1ad2      	subs	r2, r2, r3
   81c98:	6983      	ldr	r3, [r0, #24]
   81c9a:	429a      	cmp	r2, r3
   81c9c:	d301      	bcc.n	81ca2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81c9e:	2001      	movs	r0, #1
   81ca0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81ca2:	1d01      	adds	r1, r0, #4
   81ca4:	4b09      	ldr	r3, [pc, #36]	; (81ccc <prvInsertTimerInActiveList+0x40>)
   81ca6:	6818      	ldr	r0, [r3, #0]
   81ca8:	4b09      	ldr	r3, [pc, #36]	; (81cd0 <prvInsertTimerInActiveList+0x44>)
   81caa:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81cac:	2000      	movs	r0, #0
   81cae:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81cb0:	429a      	cmp	r2, r3
   81cb2:	d201      	bcs.n	81cb8 <prvInsertTimerInActiveList+0x2c>
   81cb4:	4299      	cmp	r1, r3
   81cb6:	d206      	bcs.n	81cc6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81cb8:	1d01      	adds	r1, r0, #4
   81cba:	4b06      	ldr	r3, [pc, #24]	; (81cd4 <prvInsertTimerInActiveList+0x48>)
   81cbc:	6818      	ldr	r0, [r3, #0]
   81cbe:	4b04      	ldr	r3, [pc, #16]	; (81cd0 <prvInsertTimerInActiveList+0x44>)
   81cc0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81cc2:	2000      	movs	r0, #0
   81cc4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   81cc6:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   81cc8:	bd08      	pop	{r3, pc}
   81cca:	bf00      	nop
   81ccc:	2007c414 	.word	0x2007c414
   81cd0:	000807bd 	.word	0x000807bd
   81cd4:	2007c410 	.word	0x2007c410

00081cd8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81cd8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81cda:	4b10      	ldr	r3, [pc, #64]	; (81d1c <prvCheckForValidListAndQueue+0x44>)
   81cdc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81cde:	4b10      	ldr	r3, [pc, #64]	; (81d20 <prvCheckForValidListAndQueue+0x48>)
   81ce0:	681b      	ldr	r3, [r3, #0]
   81ce2:	b113      	cbz	r3, 81cea <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   81ce4:	4b0f      	ldr	r3, [pc, #60]	; (81d24 <prvCheckForValidListAndQueue+0x4c>)
   81ce6:	4798      	blx	r3
   81ce8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   81cea:	4d0f      	ldr	r5, [pc, #60]	; (81d28 <prvCheckForValidListAndQueue+0x50>)
   81cec:	4628      	mov	r0, r5
   81cee:	4e0f      	ldr	r6, [pc, #60]	; (81d2c <prvCheckForValidListAndQueue+0x54>)
   81cf0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81cf2:	4c0f      	ldr	r4, [pc, #60]	; (81d30 <prvCheckForValidListAndQueue+0x58>)
   81cf4:	4620      	mov	r0, r4
   81cf6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81cf8:	4b0e      	ldr	r3, [pc, #56]	; (81d34 <prvCheckForValidListAndQueue+0x5c>)
   81cfa:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81cfc:	4b0e      	ldr	r3, [pc, #56]	; (81d38 <prvCheckForValidListAndQueue+0x60>)
   81cfe:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   81d00:	2200      	movs	r2, #0
   81d02:	2110      	movs	r1, #16
   81d04:	2005      	movs	r0, #5
   81d06:	4b0d      	ldr	r3, [pc, #52]	; (81d3c <prvCheckForValidListAndQueue+0x64>)
   81d08:	4798      	blx	r3
   81d0a:	4b05      	ldr	r3, [pc, #20]	; (81d20 <prvCheckForValidListAndQueue+0x48>)
   81d0c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   81d0e:	2800      	cmp	r0, #0
   81d10:	d0e8      	beq.n	81ce4 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   81d12:	490b      	ldr	r1, [pc, #44]	; (81d40 <prvCheckForValidListAndQueue+0x68>)
   81d14:	4b0b      	ldr	r3, [pc, #44]	; (81d44 <prvCheckForValidListAndQueue+0x6c>)
   81d16:	4798      	blx	r3
   81d18:	e7e4      	b.n	81ce4 <prvCheckForValidListAndQueue+0xc>
   81d1a:	bf00      	nop
   81d1c:	000808c9 	.word	0x000808c9
   81d20:	2007c444 	.word	0x2007c444
   81d24:	0008090d 	.word	0x0008090d
   81d28:	2007c418 	.word	0x2007c418
   81d2c:	00080789 	.word	0x00080789
   81d30:	2007c42c 	.word	0x2007c42c
   81d34:	2007c410 	.word	0x2007c410
   81d38:	2007c414 	.word	0x2007c414
   81d3c:	00080d7d 	.word	0x00080d7d
   81d40:	00085640 	.word	0x00085640
   81d44:	000811f1 	.word	0x000811f1

00081d48 <xTimerCreateTimerTask>:
{
   81d48:	b510      	push	{r4, lr}
   81d4a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   81d4c:	4b0d      	ldr	r3, [pc, #52]	; (81d84 <xTimerCreateTimerTask+0x3c>)
   81d4e:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81d50:	4b0d      	ldr	r3, [pc, #52]	; (81d88 <xTimerCreateTimerTask+0x40>)
   81d52:	681b      	ldr	r3, [r3, #0]
   81d54:	b16b      	cbz	r3, 81d72 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
   81d56:	4b0d      	ldr	r3, [pc, #52]	; (81d8c <xTimerCreateTimerTask+0x44>)
   81d58:	9301      	str	r3, [sp, #4]
   81d5a:	2304      	movs	r3, #4
   81d5c:	9300      	str	r3, [sp, #0]
   81d5e:	2300      	movs	r3, #0
   81d60:	f44f 7282 	mov.w	r2, #260	; 0x104
   81d64:	490a      	ldr	r1, [pc, #40]	; (81d90 <xTimerCreateTimerTask+0x48>)
   81d66:	480b      	ldr	r0, [pc, #44]	; (81d94 <xTimerCreateTimerTask+0x4c>)
   81d68:	4c0b      	ldr	r4, [pc, #44]	; (81d98 <xTimerCreateTimerTask+0x50>)
   81d6a:	47a0      	blx	r4
	configASSERT( xReturn );
   81d6c:	b108      	cbz	r0, 81d72 <xTimerCreateTimerTask+0x2a>
}
   81d6e:	b002      	add	sp, #8
   81d70:	bd10      	pop	{r4, pc}
   81d72:	f04f 0340 	mov.w	r3, #64	; 0x40
   81d76:	f383 8811 	msr	BASEPRI, r3
   81d7a:	f3bf 8f6f 	isb	sy
   81d7e:	f3bf 8f4f 	dsb	sy
   81d82:	e7fe      	b.n	81d82 <xTimerCreateTimerTask+0x3a>
   81d84:	00081cd9 	.word	0x00081cd9
   81d88:	2007c444 	.word	0x2007c444
   81d8c:	2007c448 	.word	0x2007c448
   81d90:	00085648 	.word	0x00085648
   81d94:	00081ebd 	.word	0x00081ebd
   81d98:	000813d1 	.word	0x000813d1

00081d9c <xTimerGenericCommand>:
	configASSERT( xTimer );
   81d9c:	b1d8      	cbz	r0, 81dd6 <xTimerGenericCommand+0x3a>
{
   81d9e:	b530      	push	{r4, r5, lr}
   81da0:	b085      	sub	sp, #20
   81da2:	4615      	mov	r5, r2
   81da4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
   81da6:	4a14      	ldr	r2, [pc, #80]	; (81df8 <xTimerGenericCommand+0x5c>)
   81da8:	6810      	ldr	r0, [r2, #0]
   81daa:	b310      	cbz	r0, 81df2 <xTimerGenericCommand+0x56>
   81dac:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
   81dae:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   81db0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   81db2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   81db4:	2905      	cmp	r1, #5
   81db6:	dc17      	bgt.n	81de8 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81db8:	4b10      	ldr	r3, [pc, #64]	; (81dfc <xTimerGenericCommand+0x60>)
   81dba:	4798      	blx	r3
   81dbc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   81dbe:	f04f 0300 	mov.w	r3, #0
   81dc2:	bf0c      	ite	eq
   81dc4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81dc6:	461a      	movne	r2, r3
   81dc8:	4669      	mov	r1, sp
   81dca:	480b      	ldr	r0, [pc, #44]	; (81df8 <xTimerGenericCommand+0x5c>)
   81dcc:	6800      	ldr	r0, [r0, #0]
   81dce:	4c0c      	ldr	r4, [pc, #48]	; (81e00 <xTimerGenericCommand+0x64>)
   81dd0:	47a0      	blx	r4
}
   81dd2:	b005      	add	sp, #20
   81dd4:	bd30      	pop	{r4, r5, pc}
   81dd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   81dda:	f383 8811 	msr	BASEPRI, r3
   81dde:	f3bf 8f6f 	isb	sy
   81de2:	f3bf 8f4f 	dsb	sy
   81de6:	e7fe      	b.n	81de6 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81de8:	2300      	movs	r3, #0
   81dea:	4669      	mov	r1, sp
   81dec:	4c05      	ldr	r4, [pc, #20]	; (81e04 <xTimerGenericCommand+0x68>)
   81dee:	47a0      	blx	r4
   81df0:	e7ef      	b.n	81dd2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
   81df2:	2000      	movs	r0, #0
	return xReturn;
   81df4:	e7ed      	b.n	81dd2 <xTimerGenericCommand+0x36>
   81df6:	bf00      	nop
   81df8:	2007c444 	.word	0x2007c444
   81dfc:	00081bb1 	.word	0x00081bb1
   81e00:	00080dd1 	.word	0x00080dd1
   81e04:	00080f85 	.word	0x00080f85

00081e08 <prvSampleTimeNow>:
{
   81e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e0c:	b082      	sub	sp, #8
   81e0e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   81e10:	4b23      	ldr	r3, [pc, #140]	; (81ea0 <prvSampleTimeNow+0x98>)
   81e12:	4798      	blx	r3
   81e14:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   81e16:	4b23      	ldr	r3, [pc, #140]	; (81ea4 <prvSampleTimeNow+0x9c>)
   81e18:	681b      	ldr	r3, [r3, #0]
   81e1a:	4298      	cmp	r0, r3
   81e1c:	d319      	bcc.n	81e52 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
   81e1e:	2300      	movs	r3, #0
   81e20:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   81e24:	4b1f      	ldr	r3, [pc, #124]	; (81ea4 <prvSampleTimeNow+0x9c>)
   81e26:	601f      	str	r7, [r3, #0]
}
   81e28:	4638      	mov	r0, r7
   81e2a:	b002      	add	sp, #8
   81e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81e30:	2100      	movs	r1, #0
   81e32:	9100      	str	r1, [sp, #0]
   81e34:	460b      	mov	r3, r1
   81e36:	4652      	mov	r2, sl
   81e38:	4620      	mov	r0, r4
   81e3a:	4c1b      	ldr	r4, [pc, #108]	; (81ea8 <prvSampleTimeNow+0xa0>)
   81e3c:	47a0      	blx	r4
				configASSERT( xResult );
   81e3e:	b950      	cbnz	r0, 81e56 <prvSampleTimeNow+0x4e>
   81e40:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e44:	f383 8811 	msr	BASEPRI, r3
   81e48:	f3bf 8f6f 	isb	sy
   81e4c:	f3bf 8f4f 	dsb	sy
   81e50:	e7fe      	b.n	81e50 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e52:	4d16      	ldr	r5, [pc, #88]	; (81eac <prvSampleTimeNow+0xa4>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81e54:	4e16      	ldr	r6, [pc, #88]	; (81eb0 <prvSampleTimeNow+0xa8>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e56:	682b      	ldr	r3, [r5, #0]
   81e58:	681a      	ldr	r2, [r3, #0]
   81e5a:	b1c2      	cbz	r2, 81e8e <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e5c:	68db      	ldr	r3, [r3, #12]
   81e5e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e62:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81e64:	f104 0904 	add.w	r9, r4, #4
   81e68:	4648      	mov	r0, r9
   81e6a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81e6e:	4620      	mov	r0, r4
   81e70:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81e72:	69e3      	ldr	r3, [r4, #28]
   81e74:	2b01      	cmp	r3, #1
   81e76:	d1ee      	bne.n	81e56 <prvSampleTimeNow+0x4e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81e78:	69a3      	ldr	r3, [r4, #24]
   81e7a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81e7c:	459a      	cmp	sl, r3
   81e7e:	d2d7      	bcs.n	81e30 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81e80:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81e82:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81e84:	4649      	mov	r1, r9
   81e86:	6828      	ldr	r0, [r5, #0]
   81e88:	4b0a      	ldr	r3, [pc, #40]	; (81eb4 <prvSampleTimeNow+0xac>)
   81e8a:	4798      	blx	r3
   81e8c:	e7e3      	b.n	81e56 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList = pxOverflowTimerList;
   81e8e:	4a0a      	ldr	r2, [pc, #40]	; (81eb8 <prvSampleTimeNow+0xb0>)
   81e90:	6810      	ldr	r0, [r2, #0]
   81e92:	4906      	ldr	r1, [pc, #24]	; (81eac <prvSampleTimeNow+0xa4>)
   81e94:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81e96:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81e98:	2301      	movs	r3, #1
   81e9a:	f8c8 3000 	str.w	r3, [r8]
   81e9e:	e7c1      	b.n	81e24 <prvSampleTimeNow+0x1c>
   81ea0:	00081661 	.word	0x00081661
   81ea4:	2007c440 	.word	0x2007c440
   81ea8:	00081d9d 	.word	0x00081d9d
   81eac:	2007c410 	.word	0x2007c410
   81eb0:	000807f1 	.word	0x000807f1
   81eb4:	000807bd 	.word	0x000807bd
   81eb8:	2007c414 	.word	0x2007c414

00081ebc <prvTimerTask>:
{
   81ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ec0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81ec2:	4e70      	ldr	r6, [pc, #448]	; (82084 <prvTimerTask+0x1c8>)
			( void ) xTaskResumeAll();
   81ec4:	4f70      	ldr	r7, [pc, #448]	; (82088 <prvTimerTask+0x1cc>)
					portYIELD_WITHIN_API();
   81ec6:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 820b0 <prvTimerTask+0x1f4>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81eca:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 820b4 <prvTimerTask+0x1f8>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81ece:	6833      	ldr	r3, [r6, #0]
   81ed0:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81ed2:	b172      	cbz	r2, 81ef2 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ed4:	68db      	ldr	r3, [r3, #12]
   81ed6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   81ed8:	4b6c      	ldr	r3, [pc, #432]	; (8208c <prvTimerTask+0x1d0>)
   81eda:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81edc:	a804      	add	r0, sp, #16
   81ede:	4b6c      	ldr	r3, [pc, #432]	; (82090 <prvTimerTask+0x1d4>)
   81ee0:	4798      	blx	r3
   81ee2:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81ee4:	9b04      	ldr	r3, [sp, #16]
   81ee6:	2b00      	cmp	r3, #0
   81ee8:	d152      	bne.n	81f90 <prvTimerTask+0xd4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81eea:	42a0      	cmp	r0, r4
   81eec:	d223      	bcs.n	81f36 <prvTimerTask+0x7a>
   81eee:	2200      	movs	r2, #0
   81ef0:	e00f      	b.n	81f12 <prvTimerTask+0x56>
	vTaskSuspendAll();
   81ef2:	4b66      	ldr	r3, [pc, #408]	; (8208c <prvTimerTask+0x1d0>)
   81ef4:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ef6:	a804      	add	r0, sp, #16
   81ef8:	4b65      	ldr	r3, [pc, #404]	; (82090 <prvTimerTask+0x1d4>)
   81efa:	4798      	blx	r3
   81efc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81efe:	9b04      	ldr	r3, [sp, #16]
   81f00:	2b00      	cmp	r3, #0
   81f02:	d145      	bne.n	81f90 <prvTimerTask+0xd4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   81f04:	4b63      	ldr	r3, [pc, #396]	; (82094 <prvTimerTask+0x1d8>)
   81f06:	681b      	ldr	r3, [r3, #0]
   81f08:	681a      	ldr	r2, [r3, #0]
   81f0a:	fab2 f282 	clz	r2, r2
   81f0e:	0952      	lsrs	r2, r2, #5
   81f10:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   81f12:	1b61      	subs	r1, r4, r5
   81f14:	4b60      	ldr	r3, [pc, #384]	; (82098 <prvTimerTask+0x1dc>)
   81f16:	6818      	ldr	r0, [r3, #0]
   81f18:	4b60      	ldr	r3, [pc, #384]	; (8209c <prvTimerTask+0x1e0>)
   81f1a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81f1c:	47b8      	blx	r7
   81f1e:	b938      	cbnz	r0, 81f30 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
   81f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81f24:	f8c9 3000 	str.w	r3, [r9]
   81f28:	f3bf 8f4f 	dsb	sy
   81f2c:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81f30:	4d59      	ldr	r5, [pc, #356]	; (82098 <prvTimerTask+0x1dc>)
   81f32:	4c5b      	ldr	r4, [pc, #364]	; (820a0 <prvTimerTask+0x1e4>)
   81f34:	e035      	b.n	81fa2 <prvTimerTask+0xe6>
				( void ) xTaskResumeAll();
   81f36:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f38:	6833      	ldr	r3, [r6, #0]
   81f3a:	68db      	ldr	r3, [r3, #12]
   81f3c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f40:	f10a 0004 	add.w	r0, sl, #4
   81f44:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81f46:	f8da 301c 	ldr.w	r3, [sl, #28]
   81f4a:	2b01      	cmp	r3, #1
   81f4c:	d004      	beq.n	81f58 <prvTimerTask+0x9c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81f4e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   81f52:	4650      	mov	r0, sl
   81f54:	4798      	blx	r3
   81f56:	e7eb      	b.n	81f30 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   81f58:	f8da 1018 	ldr.w	r1, [sl, #24]
   81f5c:	4623      	mov	r3, r4
   81f5e:	462a      	mov	r2, r5
   81f60:	4421      	add	r1, r4
   81f62:	4650      	mov	r0, sl
   81f64:	4d4f      	ldr	r5, [pc, #316]	; (820a4 <prvTimerTask+0x1e8>)
   81f66:	47a8      	blx	r5
   81f68:	2800      	cmp	r0, #0
   81f6a:	d0f0      	beq.n	81f4e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81f6c:	2100      	movs	r1, #0
   81f6e:	9100      	str	r1, [sp, #0]
   81f70:	460b      	mov	r3, r1
   81f72:	4622      	mov	r2, r4
   81f74:	4650      	mov	r0, sl
   81f76:	4c4c      	ldr	r4, [pc, #304]	; (820a8 <prvTimerTask+0x1ec>)
   81f78:	47a0      	blx	r4
			configASSERT( xResult );
   81f7a:	2800      	cmp	r0, #0
   81f7c:	d1e7      	bne.n	81f4e <prvTimerTask+0x92>
   81f7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   81f82:	f383 8811 	msr	BASEPRI, r3
   81f86:	f3bf 8f6f 	isb	sy
   81f8a:	f3bf 8f4f 	dsb	sy
   81f8e:	e7fe      	b.n	81f8e <prvTimerTask+0xd2>
			( void ) xTaskResumeAll();
   81f90:	47b8      	blx	r7
   81f92:	e7cd      	b.n	81f30 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   81f94:	9907      	ldr	r1, [sp, #28]
   81f96:	9806      	ldr	r0, [sp, #24]
   81f98:	9b05      	ldr	r3, [sp, #20]
   81f9a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   81f9c:	9b04      	ldr	r3, [sp, #16]
   81f9e:	2b00      	cmp	r3, #0
   81fa0:	da08      	bge.n	81fb4 <prvTimerTask+0xf8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81fa2:	2200      	movs	r2, #0
   81fa4:	a904      	add	r1, sp, #16
   81fa6:	6828      	ldr	r0, [r5, #0]
   81fa8:	47a0      	blx	r4
   81faa:	2800      	cmp	r0, #0
   81fac:	d08f      	beq.n	81ece <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   81fae:	9b04      	ldr	r3, [sp, #16]
   81fb0:	2b00      	cmp	r3, #0
   81fb2:	dbef      	blt.n	81f94 <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   81fb4:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   81fb8:	f8da 3014 	ldr.w	r3, [sl, #20]
   81fbc:	b113      	cbz	r3, 81fc4 <prvTimerTask+0x108>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81fbe:	f10a 0004 	add.w	r0, sl, #4
   81fc2:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81fc4:	a803      	add	r0, sp, #12
   81fc6:	4b32      	ldr	r3, [pc, #200]	; (82090 <prvTimerTask+0x1d4>)
   81fc8:	4798      	blx	r3
			switch( xMessage.xMessageID )
   81fca:	9b04      	ldr	r3, [sp, #16]
   81fcc:	2b09      	cmp	r3, #9
   81fce:	d8e8      	bhi.n	81fa2 <prvTimerTask+0xe6>
   81fd0:	a201      	add	r2, pc, #4	; (adr r2, 81fd8 <prvTimerTask+0x11c>)
   81fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81fd6:	bf00      	nop
   81fd8:	00082001 	.word	0x00082001
   81fdc:	00082001 	.word	0x00082001
   81fe0:	00082001 	.word	0x00082001
   81fe4:	00081fa3 	.word	0x00081fa3
   81fe8:	00082053 	.word	0x00082053
   81fec:	0008207b 	.word	0x0008207b
   81ff0:	00082001 	.word	0x00082001
   81ff4:	00082001 	.word	0x00082001
   81ff8:	00081fa3 	.word	0x00081fa3
   81ffc:	00082053 	.word	0x00082053
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   82000:	9c05      	ldr	r4, [sp, #20]
   82002:	f8da 1018 	ldr.w	r1, [sl, #24]
   82006:	4623      	mov	r3, r4
   82008:	4602      	mov	r2, r0
   8200a:	4421      	add	r1, r4
   8200c:	4650      	mov	r0, sl
   8200e:	4c25      	ldr	r4, [pc, #148]	; (820a4 <prvTimerTask+0x1e8>)
   82010:	47a0      	blx	r4
   82012:	2800      	cmp	r0, #0
   82014:	d08d      	beq.n	81f32 <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   82016:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   8201a:	4650      	mov	r0, sl
   8201c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8201e:	f8da 301c 	ldr.w	r3, [sl, #28]
   82022:	2b01      	cmp	r3, #1
   82024:	d185      	bne.n	81f32 <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82026:	f8da 2018 	ldr.w	r2, [sl, #24]
   8202a:	2100      	movs	r1, #0
   8202c:	9100      	str	r1, [sp, #0]
   8202e:	460b      	mov	r3, r1
   82030:	9805      	ldr	r0, [sp, #20]
   82032:	4402      	add	r2, r0
   82034:	4650      	mov	r0, sl
   82036:	4c1c      	ldr	r4, [pc, #112]	; (820a8 <prvTimerTask+0x1ec>)
   82038:	47a0      	blx	r4
							configASSERT( xResult );
   8203a:	2800      	cmp	r0, #0
   8203c:	f47f af79 	bne.w	81f32 <prvTimerTask+0x76>
   82040:	f04f 0340 	mov.w	r3, #64	; 0x40
   82044:	f383 8811 	msr	BASEPRI, r3
   82048:	f3bf 8f6f 	isb	sy
   8204c:	f3bf 8f4f 	dsb	sy
   82050:	e7fe      	b.n	82050 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   82052:	9905      	ldr	r1, [sp, #20]
   82054:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82058:	b131      	cbz	r1, 82068 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8205a:	4603      	mov	r3, r0
   8205c:	4602      	mov	r2, r0
   8205e:	4401      	add	r1, r0
   82060:	4650      	mov	r0, sl
   82062:	4c10      	ldr	r4, [pc, #64]	; (820a4 <prvTimerTask+0x1e8>)
   82064:	47a0      	blx	r4
   82066:	e764      	b.n	81f32 <prvTimerTask+0x76>
   82068:	f04f 0340 	mov.w	r3, #64	; 0x40
   8206c:	f383 8811 	msr	BASEPRI, r3
   82070:	f3bf 8f6f 	isb	sy
   82074:	f3bf 8f4f 	dsb	sy
   82078:	e7fe      	b.n	82078 <prvTimerTask+0x1bc>
						vPortFree( pxTimer );
   8207a:	4650      	mov	r0, sl
   8207c:	4b0b      	ldr	r3, [pc, #44]	; (820ac <prvTimerTask+0x1f0>)
   8207e:	4798      	blx	r3
   82080:	e757      	b.n	81f32 <prvTimerTask+0x76>
   82082:	bf00      	nop
   82084:	2007c410 	.word	0x2007c410
   82088:	000817a1 	.word	0x000817a1
   8208c:	00081651 	.word	0x00081651
   82090:	00081e09 	.word	0x00081e09
   82094:	2007c414 	.word	0x2007c414
   82098:	2007c444 	.word	0x2007c444
   8209c:	00081221 	.word	0x00081221
   820a0:	00081069 	.word	0x00081069
   820a4:	00081c8d 	.word	0x00081c8d
   820a8:	00081d9d 	.word	0x00081d9d
   820ac:	00080b75 	.word	0x00080b75
   820b0:	e000ed04 	.word	0xe000ed04
   820b4:	000807f1 	.word	0x000807f1

000820b8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   820b8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   820ba:	480e      	ldr	r0, [pc, #56]	; (820f4 <sysclk_init+0x3c>)
   820bc:	4b0e      	ldr	r3, [pc, #56]	; (820f8 <sysclk_init+0x40>)
   820be:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   820c0:	213e      	movs	r1, #62	; 0x3e
   820c2:	2000      	movs	r0, #0
   820c4:	4b0d      	ldr	r3, [pc, #52]	; (820fc <sysclk_init+0x44>)
   820c6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   820c8:	4c0d      	ldr	r4, [pc, #52]	; (82100 <sysclk_init+0x48>)
   820ca:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   820cc:	2800      	cmp	r0, #0
   820ce:	d0fc      	beq.n	820ca <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   820d0:	4b0c      	ldr	r3, [pc, #48]	; (82104 <sysclk_init+0x4c>)
   820d2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   820d4:	4a0c      	ldr	r2, [pc, #48]	; (82108 <sysclk_init+0x50>)
   820d6:	4b0d      	ldr	r3, [pc, #52]	; (8210c <sysclk_init+0x54>)
   820d8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   820da:	4c0d      	ldr	r4, [pc, #52]	; (82110 <sysclk_init+0x58>)
   820dc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   820de:	2800      	cmp	r0, #0
   820e0:	d0fc      	beq.n	820dc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   820e2:	2010      	movs	r0, #16
   820e4:	4b0b      	ldr	r3, [pc, #44]	; (82114 <sysclk_init+0x5c>)
   820e6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   820e8:	4b0b      	ldr	r3, [pc, #44]	; (82118 <sysclk_init+0x60>)
   820ea:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   820ec:	4801      	ldr	r0, [pc, #4]	; (820f4 <sysclk_init+0x3c>)
   820ee:	4b02      	ldr	r3, [pc, #8]	; (820f8 <sysclk_init+0x40>)
   820f0:	4798      	blx	r3
   820f2:	bd10      	pop	{r4, pc}
   820f4:	0501bd00 	.word	0x0501bd00
   820f8:	200700a5 	.word	0x200700a5
   820fc:	000824ad 	.word	0x000824ad
   82100:	00082501 	.word	0x00082501
   82104:	00082511 	.word	0x00082511
   82108:	200d3f01 	.word	0x200d3f01
   8210c:	400e0600 	.word	0x400e0600
   82110:	00082521 	.word	0x00082521
   82114:	00082449 	.word	0x00082449
   82118:	000825ed 	.word	0x000825ed

0008211c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8211c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8211e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82122:	4b16      	ldr	r3, [pc, #88]	; (8217c <board_init+0x60>)
   82124:	605a      	str	r2, [r3, #4]
   82126:	200b      	movs	r0, #11
   82128:	4c15      	ldr	r4, [pc, #84]	; (82180 <board_init+0x64>)
   8212a:	47a0      	blx	r4
   8212c:	200c      	movs	r0, #12
   8212e:	47a0      	blx	r4
   82130:	200d      	movs	r0, #13
   82132:	47a0      	blx	r4
   82134:	200e      	movs	r0, #14
   82136:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82138:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8213c:	203b      	movs	r0, #59	; 0x3b
   8213e:	4c11      	ldr	r4, [pc, #68]	; (82184 <board_init+0x68>)
   82140:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82142:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82146:	2055      	movs	r0, #85	; 0x55
   82148:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8214a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8214e:	2056      	movs	r0, #86	; 0x56
   82150:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82152:	490d      	ldr	r1, [pc, #52]	; (82188 <board_init+0x6c>)
   82154:	2068      	movs	r0, #104	; 0x68
   82156:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82158:	490c      	ldr	r1, [pc, #48]	; (8218c <board_init+0x70>)
   8215a:	205c      	movs	r0, #92	; 0x5c
   8215c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8215e:	4a0c      	ldr	r2, [pc, #48]	; (82190 <board_init+0x74>)
   82160:	f44f 7140 	mov.w	r1, #768	; 0x300
   82164:	480b      	ldr	r0, [pc, #44]	; (82194 <board_init+0x78>)
   82166:	4b0c      	ldr	r3, [pc, #48]	; (82198 <board_init+0x7c>)
   82168:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8216a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8216e:	202b      	movs	r0, #43	; 0x2b
   82170:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82172:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82176:	202a      	movs	r0, #42	; 0x2a
   82178:	47a0      	blx	r4
   8217a:	bd10      	pop	{r4, pc}
   8217c:	400e1a50 	.word	0x400e1a50
   82180:	00082531 	.word	0x00082531
   82184:	0008223d 	.word	0x0008223d
   82188:	28000079 	.word	0x28000079
   8218c:	28000001 	.word	0x28000001
   82190:	08000001 	.word	0x08000001
   82194:	400e0e00 	.word	0x400e0e00
   82198:	0008230d 	.word	0x0008230d

0008219c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8219c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8219e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   821a2:	d016      	beq.n	821d2 <pio_set_peripheral+0x36>
   821a4:	d80b      	bhi.n	821be <pio_set_peripheral+0x22>
   821a6:	b149      	cbz	r1, 821bc <pio_set_peripheral+0x20>
   821a8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   821ac:	d105      	bne.n	821ba <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   821ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   821b0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   821b2:	400b      	ands	r3, r1
   821b4:	ea23 0302 	bic.w	r3, r3, r2
   821b8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   821ba:	6042      	str	r2, [r0, #4]
   821bc:	4770      	bx	lr
	switch (ul_type) {
   821be:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   821c2:	d0fb      	beq.n	821bc <pio_set_peripheral+0x20>
   821c4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   821c8:	d0f8      	beq.n	821bc <pio_set_peripheral+0x20>
   821ca:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   821ce:	d1f4      	bne.n	821ba <pio_set_peripheral+0x1e>
   821d0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   821d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   821d4:	4313      	orrs	r3, r2
   821d6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   821d8:	e7ef      	b.n	821ba <pio_set_peripheral+0x1e>

000821da <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   821da:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   821dc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   821e0:	bf14      	ite	ne
   821e2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   821e4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   821e6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   821ea:	bf14      	ite	ne
   821ec:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   821ee:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   821f0:	f012 0f02 	tst.w	r2, #2
   821f4:	d107      	bne.n	82206 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   821f6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   821fa:	bf18      	it	ne
   821fc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82200:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82202:	6001      	str	r1, [r0, #0]
   82204:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   82206:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8220a:	e7f9      	b.n	82200 <pio_set_input+0x26>

0008220c <pio_set_output>:
{
   8220c:	b410      	push	{r4}
   8220e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82210:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82212:	b944      	cbnz	r4, 82226 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   82214:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   82216:	b143      	cbz	r3, 8222a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82218:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8221a:	b942      	cbnz	r2, 8222e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8221c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8221e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82220:	6001      	str	r1, [r0, #0]
}
   82222:	bc10      	pop	{r4}
   82224:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   82226:	6641      	str	r1, [r0, #100]	; 0x64
   82228:	e7f5      	b.n	82216 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8222a:	6541      	str	r1, [r0, #84]	; 0x54
   8222c:	e7f5      	b.n	8221a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8222e:	6301      	str	r1, [r0, #48]	; 0x30
   82230:	e7f5      	b.n	8221e <pio_set_output+0x12>

00082232 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82232:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82234:	4770      	bx	lr

00082236 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82236:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82238:	4770      	bx	lr
	...

0008223c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8223c:	b570      	push	{r4, r5, r6, lr}
   8223e:	b082      	sub	sp, #8
   82240:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82242:	0943      	lsrs	r3, r0, #5
   82244:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82248:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8224c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8224e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82252:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82256:	d031      	beq.n	822bc <pio_configure_pin+0x80>
   82258:	d816      	bhi.n	82288 <pio_configure_pin+0x4c>
   8225a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8225e:	d01b      	beq.n	82298 <pio_configure_pin+0x5c>
   82260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82264:	d116      	bne.n	82294 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82266:	f000 001f 	and.w	r0, r0, #31
   8226a:	2601      	movs	r6, #1
   8226c:	4086      	lsls	r6, r0
   8226e:	4632      	mov	r2, r6
   82270:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82274:	4620      	mov	r0, r4
   82276:	4b22      	ldr	r3, [pc, #136]	; (82300 <pio_configure_pin+0xc4>)
   82278:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8227a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8227e:	bf14      	ite	ne
   82280:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82282:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82284:	2001      	movs	r0, #1
   82286:	e017      	b.n	822b8 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8228c:	d021      	beq.n	822d2 <pio_configure_pin+0x96>
   8228e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82292:	d01e      	beq.n	822d2 <pio_configure_pin+0x96>
		return 0;
   82294:	2000      	movs	r0, #0
   82296:	e00f      	b.n	822b8 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82298:	f000 001f 	and.w	r0, r0, #31
   8229c:	2601      	movs	r6, #1
   8229e:	4086      	lsls	r6, r0
   822a0:	4632      	mov	r2, r6
   822a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   822a6:	4620      	mov	r0, r4
   822a8:	4b15      	ldr	r3, [pc, #84]	; (82300 <pio_configure_pin+0xc4>)
   822aa:	4798      	blx	r3
	if (ul_pull_up_enable) {
   822ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822b0:	bf14      	ite	ne
   822b2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   822b4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   822b6:	2001      	movs	r0, #1
}
   822b8:	b002      	add	sp, #8
   822ba:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   822bc:	f000 011f 	and.w	r1, r0, #31
   822c0:	2601      	movs	r6, #1
   822c2:	462a      	mov	r2, r5
   822c4:	fa06 f101 	lsl.w	r1, r6, r1
   822c8:	4620      	mov	r0, r4
   822ca:	4b0e      	ldr	r3, [pc, #56]	; (82304 <pio_configure_pin+0xc8>)
   822cc:	4798      	blx	r3
	return 1;
   822ce:	4630      	mov	r0, r6
		break;
   822d0:	e7f2      	b.n	822b8 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   822d2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822d6:	f000 011f 	and.w	r1, r0, #31
   822da:	2601      	movs	r6, #1
   822dc:	ea05 0306 	and.w	r3, r5, r6
   822e0:	9300      	str	r3, [sp, #0]
   822e2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   822e6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   822ea:	bf14      	ite	ne
   822ec:	2200      	movne	r2, #0
   822ee:	2201      	moveq	r2, #1
   822f0:	fa06 f101 	lsl.w	r1, r6, r1
   822f4:	4620      	mov	r0, r4
   822f6:	4c04      	ldr	r4, [pc, #16]	; (82308 <pio_configure_pin+0xcc>)
   822f8:	47a0      	blx	r4
	return 1;
   822fa:	4630      	mov	r0, r6
		break;
   822fc:	e7dc      	b.n	822b8 <pio_configure_pin+0x7c>
   822fe:	bf00      	nop
   82300:	0008219d 	.word	0x0008219d
   82304:	000821db 	.word	0x000821db
   82308:	0008220d 	.word	0x0008220d

0008230c <pio_configure_pin_group>:
{
   8230c:	b570      	push	{r4, r5, r6, lr}
   8230e:	b082      	sub	sp, #8
   82310:	4605      	mov	r5, r0
   82312:	460e      	mov	r6, r1
   82314:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   82316:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8231a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8231e:	d027      	beq.n	82370 <pio_configure_pin_group+0x64>
   82320:	d811      	bhi.n	82346 <pio_configure_pin_group+0x3a>
   82322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82326:	d016      	beq.n	82356 <pio_configure_pin_group+0x4a>
   82328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8232c:	d111      	bne.n	82352 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8232e:	460a      	mov	r2, r1
   82330:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82334:	4b19      	ldr	r3, [pc, #100]	; (8239c <pio_configure_pin_group+0x90>)
   82336:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82338:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8233c:	bf14      	ite	ne
   8233e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82340:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82342:	2001      	movs	r0, #1
   82344:	e012      	b.n	8236c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   82346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8234a:	d015      	beq.n	82378 <pio_configure_pin_group+0x6c>
   8234c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82350:	d012      	beq.n	82378 <pio_configure_pin_group+0x6c>
		return 0;
   82352:	2000      	movs	r0, #0
   82354:	e00a      	b.n	8236c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82356:	460a      	mov	r2, r1
   82358:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8235c:	4b0f      	ldr	r3, [pc, #60]	; (8239c <pio_configure_pin_group+0x90>)
   8235e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82360:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82364:	bf14      	ite	ne
   82366:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82368:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8236a:	2001      	movs	r0, #1
}
   8236c:	b002      	add	sp, #8
   8236e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82370:	4b0b      	ldr	r3, [pc, #44]	; (823a0 <pio_configure_pin_group+0x94>)
   82372:	4798      	blx	r3
	return 1;
   82374:	2001      	movs	r0, #1
		break;
   82376:	e7f9      	b.n	8236c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82378:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8237c:	f004 0301 	and.w	r3, r4, #1
   82380:	9300      	str	r3, [sp, #0]
   82382:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82386:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8238a:	bf14      	ite	ne
   8238c:	2200      	movne	r2, #0
   8238e:	2201      	moveq	r2, #1
   82390:	4631      	mov	r1, r6
   82392:	4628      	mov	r0, r5
   82394:	4c03      	ldr	r4, [pc, #12]	; (823a4 <pio_configure_pin_group+0x98>)
   82396:	47a0      	blx	r4
	return 1;
   82398:	2001      	movs	r0, #1
		break;
   8239a:	e7e7      	b.n	8236c <pio_configure_pin_group+0x60>
   8239c:	0008219d 	.word	0x0008219d
   823a0:	000821db 	.word	0x000821db
   823a4:	0008220d 	.word	0x0008220d

000823a8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   823a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823ac:	4604      	mov	r4, r0
   823ae:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   823b0:	4b0e      	ldr	r3, [pc, #56]	; (823ec <pio_handler_process+0x44>)
   823b2:	4798      	blx	r3
   823b4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   823b6:	4620      	mov	r0, r4
   823b8:	4b0d      	ldr	r3, [pc, #52]	; (823f0 <pio_handler_process+0x48>)
   823ba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   823bc:	4005      	ands	r5, r0
   823be:	d013      	beq.n	823e8 <pio_handler_process+0x40>
   823c0:	4c0c      	ldr	r4, [pc, #48]	; (823f4 <pio_handler_process+0x4c>)
   823c2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   823c6:	e003      	b.n	823d0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   823c8:	42b4      	cmp	r4, r6
   823ca:	d00d      	beq.n	823e8 <pio_handler_process+0x40>
   823cc:	3410      	adds	r4, #16
		while (status != 0) {
   823ce:	b15d      	cbz	r5, 823e8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   823d0:	6820      	ldr	r0, [r4, #0]
   823d2:	4540      	cmp	r0, r8
   823d4:	d1f8      	bne.n	823c8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   823d6:	6861      	ldr	r1, [r4, #4]
   823d8:	4229      	tst	r1, r5
   823da:	d0f5      	beq.n	823c8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   823dc:	68e3      	ldr	r3, [r4, #12]
   823de:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   823e0:	6863      	ldr	r3, [r4, #4]
   823e2:	ea25 0503 	bic.w	r5, r5, r3
   823e6:	e7ef      	b.n	823c8 <pio_handler_process+0x20>
   823e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823ec:	00082233 	.word	0x00082233
   823f0:	00082237 	.word	0x00082237
   823f4:	2007c44c 	.word	0x2007c44c

000823f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   823f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   823fa:	210b      	movs	r1, #11
   823fc:	4801      	ldr	r0, [pc, #4]	; (82404 <PIOA_Handler+0xc>)
   823fe:	4b02      	ldr	r3, [pc, #8]	; (82408 <PIOA_Handler+0x10>)
   82400:	4798      	blx	r3
   82402:	bd08      	pop	{r3, pc}
   82404:	400e0e00 	.word	0x400e0e00
   82408:	000823a9 	.word	0x000823a9

0008240c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8240c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8240e:	210c      	movs	r1, #12
   82410:	4801      	ldr	r0, [pc, #4]	; (82418 <PIOB_Handler+0xc>)
   82412:	4b02      	ldr	r3, [pc, #8]	; (8241c <PIOB_Handler+0x10>)
   82414:	4798      	blx	r3
   82416:	bd08      	pop	{r3, pc}
   82418:	400e1000 	.word	0x400e1000
   8241c:	000823a9 	.word	0x000823a9

00082420 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82420:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82422:	210d      	movs	r1, #13
   82424:	4801      	ldr	r0, [pc, #4]	; (8242c <PIOC_Handler+0xc>)
   82426:	4b02      	ldr	r3, [pc, #8]	; (82430 <PIOC_Handler+0x10>)
   82428:	4798      	blx	r3
   8242a:	bd08      	pop	{r3, pc}
   8242c:	400e1200 	.word	0x400e1200
   82430:	000823a9 	.word	0x000823a9

00082434 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82434:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82436:	210e      	movs	r1, #14
   82438:	4801      	ldr	r0, [pc, #4]	; (82440 <PIOD_Handler+0xc>)
   8243a:	4b02      	ldr	r3, [pc, #8]	; (82444 <PIOD_Handler+0x10>)
   8243c:	4798      	blx	r3
   8243e:	bd08      	pop	{r3, pc}
   82440:	400e1400 	.word	0x400e1400
   82444:	000823a9 	.word	0x000823a9

00082448 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82448:	4a17      	ldr	r2, [pc, #92]	; (824a8 <pmc_switch_mck_to_pllack+0x60>)
   8244a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8244c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82450:	4318      	orrs	r0, r3
   82452:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82454:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82456:	f013 0f08 	tst.w	r3, #8
   8245a:	d10a      	bne.n	82472 <pmc_switch_mck_to_pllack+0x2a>
   8245c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82460:	4911      	ldr	r1, [pc, #68]	; (824a8 <pmc_switch_mck_to_pllack+0x60>)
   82462:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82464:	f012 0f08 	tst.w	r2, #8
   82468:	d103      	bne.n	82472 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8246a:	3b01      	subs	r3, #1
   8246c:	d1f9      	bne.n	82462 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8246e:	2001      	movs	r0, #1
   82470:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82472:	4a0d      	ldr	r2, [pc, #52]	; (824a8 <pmc_switch_mck_to_pllack+0x60>)
   82474:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82476:	f023 0303 	bic.w	r3, r3, #3
   8247a:	f043 0302 	orr.w	r3, r3, #2
   8247e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82480:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82482:	f013 0f08 	tst.w	r3, #8
   82486:	d10a      	bne.n	8249e <pmc_switch_mck_to_pllack+0x56>
   82488:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8248c:	4906      	ldr	r1, [pc, #24]	; (824a8 <pmc_switch_mck_to_pllack+0x60>)
   8248e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82490:	f012 0f08 	tst.w	r2, #8
   82494:	d105      	bne.n	824a2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82496:	3b01      	subs	r3, #1
   82498:	d1f9      	bne.n	8248e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8249a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8249c:	4770      	bx	lr
	return 0;
   8249e:	2000      	movs	r0, #0
   824a0:	4770      	bx	lr
   824a2:	2000      	movs	r0, #0
   824a4:	4770      	bx	lr
   824a6:	bf00      	nop
   824a8:	400e0600 	.word	0x400e0600

000824ac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   824ac:	b9c8      	cbnz	r0, 824e2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824ae:	4a11      	ldr	r2, [pc, #68]	; (824f4 <pmc_switch_mainck_to_xtal+0x48>)
   824b0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   824b2:	0209      	lsls	r1, r1, #8
   824b4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   824b6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824ba:	f023 0303 	bic.w	r3, r3, #3
   824be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   824c2:	f043 0301 	orr.w	r3, r3, #1
   824c6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824c8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   824ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
   824cc:	f013 0f01 	tst.w	r3, #1
   824d0:	d0fb      	beq.n	824ca <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   824d2:	4a08      	ldr	r2, [pc, #32]	; (824f4 <pmc_switch_mainck_to_xtal+0x48>)
   824d4:	6a13      	ldr	r3, [r2, #32]
   824d6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   824da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   824de:	6213      	str	r3, [r2, #32]
   824e0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824e2:	4904      	ldr	r1, [pc, #16]	; (824f4 <pmc_switch_mainck_to_xtal+0x48>)
   824e4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   824e6:	4a04      	ldr	r2, [pc, #16]	; (824f8 <pmc_switch_mainck_to_xtal+0x4c>)
   824e8:	401a      	ands	r2, r3
   824ea:	4b04      	ldr	r3, [pc, #16]	; (824fc <pmc_switch_mainck_to_xtal+0x50>)
   824ec:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824ee:	620b      	str	r3, [r1, #32]
   824f0:	4770      	bx	lr
   824f2:	bf00      	nop
   824f4:	400e0600 	.word	0x400e0600
   824f8:	fec8fffc 	.word	0xfec8fffc
   824fc:	01370002 	.word	0x01370002

00082500 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82500:	4b02      	ldr	r3, [pc, #8]	; (8250c <pmc_osc_is_ready_mainck+0xc>)
   82502:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82504:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82508:	4770      	bx	lr
   8250a:	bf00      	nop
   8250c:	400e0600 	.word	0x400e0600

00082510 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82510:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82514:	4b01      	ldr	r3, [pc, #4]	; (8251c <pmc_disable_pllack+0xc>)
   82516:	629a      	str	r2, [r3, #40]	; 0x28
   82518:	4770      	bx	lr
   8251a:	bf00      	nop
   8251c:	400e0600 	.word	0x400e0600

00082520 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82520:	4b02      	ldr	r3, [pc, #8]	; (8252c <pmc_is_locked_pllack+0xc>)
   82522:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82524:	f000 0002 	and.w	r0, r0, #2
   82528:	4770      	bx	lr
   8252a:	bf00      	nop
   8252c:	400e0600 	.word	0x400e0600

00082530 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   82530:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82534:	4b05      	ldr	r3, [pc, #20]	; (8254c <pmc_enable_periph_clk+0x1c>)
   82536:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   8253a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   8253e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   82542:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   82546:	2000      	movs	r0, #0
   82548:	4770      	bx	lr
   8254a:	bf00      	nop
   8254c:	400e0600 	.word	0x400e0600

00082550 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82550:	e7fe      	b.n	82550 <Dummy_Handler>
	...

00082554 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82554:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82556:	4b1c      	ldr	r3, [pc, #112]	; (825c8 <Reset_Handler+0x74>)
   82558:	4a1c      	ldr	r2, [pc, #112]	; (825cc <Reset_Handler+0x78>)
   8255a:	429a      	cmp	r2, r3
   8255c:	d010      	beq.n	82580 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8255e:	4b1c      	ldr	r3, [pc, #112]	; (825d0 <Reset_Handler+0x7c>)
   82560:	4a19      	ldr	r2, [pc, #100]	; (825c8 <Reset_Handler+0x74>)
   82562:	429a      	cmp	r2, r3
   82564:	d20c      	bcs.n	82580 <Reset_Handler+0x2c>
   82566:	3b01      	subs	r3, #1
   82568:	1a9b      	subs	r3, r3, r2
   8256a:	f023 0303 	bic.w	r3, r3, #3
   8256e:	3304      	adds	r3, #4
   82570:	4413      	add	r3, r2
   82572:	4916      	ldr	r1, [pc, #88]	; (825cc <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82574:	f851 0b04 	ldr.w	r0, [r1], #4
   82578:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8257c:	429a      	cmp	r2, r3
   8257e:	d1f9      	bne.n	82574 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82580:	4b14      	ldr	r3, [pc, #80]	; (825d4 <Reset_Handler+0x80>)
   82582:	4a15      	ldr	r2, [pc, #84]	; (825d8 <Reset_Handler+0x84>)
   82584:	429a      	cmp	r2, r3
   82586:	d20a      	bcs.n	8259e <Reset_Handler+0x4a>
   82588:	3b01      	subs	r3, #1
   8258a:	1a9b      	subs	r3, r3, r2
   8258c:	f023 0303 	bic.w	r3, r3, #3
   82590:	3304      	adds	r3, #4
   82592:	4413      	add	r3, r2
		*pDest++ = 0;
   82594:	2100      	movs	r1, #0
   82596:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8259a:	4293      	cmp	r3, r2
   8259c:	d1fb      	bne.n	82596 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8259e:	4b0f      	ldr	r3, [pc, #60]	; (825dc <Reset_Handler+0x88>)
   825a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   825a4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   825a8:	490d      	ldr	r1, [pc, #52]	; (825e0 <Reset_Handler+0x8c>)
   825aa:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   825ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   825b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   825b4:	d203      	bcs.n	825be <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   825b6:	688b      	ldr	r3, [r1, #8]
   825b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   825bc:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   825be:	4b09      	ldr	r3, [pc, #36]	; (825e4 <Reset_Handler+0x90>)
   825c0:	4798      	blx	r3

	/* Branch to main function */
	main();
   825c2:	4b09      	ldr	r3, [pc, #36]	; (825e8 <Reset_Handler+0x94>)
   825c4:	4798      	blx	r3
   825c6:	e7fe      	b.n	825c6 <Reset_Handler+0x72>
   825c8:	20070000 	.word	0x20070000
   825cc:	000857e4 	.word	0x000857e4
   825d0:	20070ae0 	.word	0x20070ae0
   825d4:	2007c574 	.word	0x2007c574
   825d8:	20070ae0 	.word	0x20070ae0
   825dc:	00080000 	.word	0x00080000
   825e0:	e000ed00 	.word	0xe000ed00
   825e4:	0008278d 	.word	0x0008278d
   825e8:	00082755 	.word	0x00082755

000825ec <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   825ec:	4b3d      	ldr	r3, [pc, #244]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   825ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   825f0:	f003 0303 	and.w	r3, r3, #3
   825f4:	2b03      	cmp	r3, #3
   825f6:	d80e      	bhi.n	82616 <SystemCoreClockUpdate+0x2a>
   825f8:	e8df f003 	tbb	[pc, r3]
   825fc:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82600:	4b39      	ldr	r3, [pc, #228]	; (826e8 <SystemCoreClockUpdate+0xfc>)
   82602:	695b      	ldr	r3, [r3, #20]
   82604:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82608:	bf14      	ite	ne
   8260a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8260e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82612:	4b36      	ldr	r3, [pc, #216]	; (826ec <SystemCoreClockUpdate+0x100>)
   82614:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82616:	4b33      	ldr	r3, [pc, #204]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   82618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8261a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8261e:	2b70      	cmp	r3, #112	; 0x70
   82620:	d057      	beq.n	826d2 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82622:	4b30      	ldr	r3, [pc, #192]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   82624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82626:	4931      	ldr	r1, [pc, #196]	; (826ec <SystemCoreClockUpdate+0x100>)
   82628:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8262c:	680b      	ldr	r3, [r1, #0]
   8262e:	40d3      	lsrs	r3, r2
   82630:	600b      	str	r3, [r1, #0]
   82632:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82634:	4b2b      	ldr	r3, [pc, #172]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   82636:	6a1b      	ldr	r3, [r3, #32]
   82638:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8263c:	d003      	beq.n	82646 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8263e:	4a2c      	ldr	r2, [pc, #176]	; (826f0 <SystemCoreClockUpdate+0x104>)
   82640:	4b2a      	ldr	r3, [pc, #168]	; (826ec <SystemCoreClockUpdate+0x100>)
   82642:	601a      	str	r2, [r3, #0]
   82644:	e7e7      	b.n	82616 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82646:	4a2b      	ldr	r2, [pc, #172]	; (826f4 <SystemCoreClockUpdate+0x108>)
   82648:	4b28      	ldr	r3, [pc, #160]	; (826ec <SystemCoreClockUpdate+0x100>)
   8264a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8264c:	4b25      	ldr	r3, [pc, #148]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   8264e:	6a1b      	ldr	r3, [r3, #32]
   82650:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82654:	2b10      	cmp	r3, #16
   82656:	d005      	beq.n	82664 <SystemCoreClockUpdate+0x78>
   82658:	2b20      	cmp	r3, #32
   8265a:	d1dc      	bne.n	82616 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8265c:	4a24      	ldr	r2, [pc, #144]	; (826f0 <SystemCoreClockUpdate+0x104>)
   8265e:	4b23      	ldr	r3, [pc, #140]	; (826ec <SystemCoreClockUpdate+0x100>)
   82660:	601a      	str	r2, [r3, #0]
				break;
   82662:	e7d8      	b.n	82616 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82664:	4a24      	ldr	r2, [pc, #144]	; (826f8 <SystemCoreClockUpdate+0x10c>)
   82666:	4b21      	ldr	r3, [pc, #132]	; (826ec <SystemCoreClockUpdate+0x100>)
   82668:	601a      	str	r2, [r3, #0]
				break;
   8266a:	e7d4      	b.n	82616 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8266c:	4b1d      	ldr	r3, [pc, #116]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   8266e:	6a1b      	ldr	r3, [r3, #32]
   82670:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82674:	d00c      	beq.n	82690 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82676:	4a1e      	ldr	r2, [pc, #120]	; (826f0 <SystemCoreClockUpdate+0x104>)
   82678:	4b1c      	ldr	r3, [pc, #112]	; (826ec <SystemCoreClockUpdate+0x100>)
   8267a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8267c:	4b19      	ldr	r3, [pc, #100]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   8267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82680:	f003 0303 	and.w	r3, r3, #3
   82684:	2b02      	cmp	r3, #2
   82686:	d016      	beq.n	826b6 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82688:	4a1c      	ldr	r2, [pc, #112]	; (826fc <SystemCoreClockUpdate+0x110>)
   8268a:	4b18      	ldr	r3, [pc, #96]	; (826ec <SystemCoreClockUpdate+0x100>)
   8268c:	601a      	str	r2, [r3, #0]
   8268e:	e7c2      	b.n	82616 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82690:	4a18      	ldr	r2, [pc, #96]	; (826f4 <SystemCoreClockUpdate+0x108>)
   82692:	4b16      	ldr	r3, [pc, #88]	; (826ec <SystemCoreClockUpdate+0x100>)
   82694:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82696:	4b13      	ldr	r3, [pc, #76]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   82698:	6a1b      	ldr	r3, [r3, #32]
   8269a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8269e:	2b10      	cmp	r3, #16
   826a0:	d005      	beq.n	826ae <SystemCoreClockUpdate+0xc2>
   826a2:	2b20      	cmp	r3, #32
   826a4:	d1ea      	bne.n	8267c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   826a6:	4a12      	ldr	r2, [pc, #72]	; (826f0 <SystemCoreClockUpdate+0x104>)
   826a8:	4b10      	ldr	r3, [pc, #64]	; (826ec <SystemCoreClockUpdate+0x100>)
   826aa:	601a      	str	r2, [r3, #0]
				break;
   826ac:	e7e6      	b.n	8267c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   826ae:	4a12      	ldr	r2, [pc, #72]	; (826f8 <SystemCoreClockUpdate+0x10c>)
   826b0:	4b0e      	ldr	r3, [pc, #56]	; (826ec <SystemCoreClockUpdate+0x100>)
   826b2:	601a      	str	r2, [r3, #0]
				break;
   826b4:	e7e2      	b.n	8267c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826b6:	4a0b      	ldr	r2, [pc, #44]	; (826e4 <SystemCoreClockUpdate+0xf8>)
   826b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
   826bc:	480b      	ldr	r0, [pc, #44]	; (826ec <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826be:	f3c1 410a 	ubfx	r1, r1, #16, #11
   826c2:	6803      	ldr	r3, [r0, #0]
   826c4:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826c8:	b2d2      	uxtb	r2, r2
   826ca:	fbb3 f3f2 	udiv	r3, r3, r2
   826ce:	6003      	str	r3, [r0, #0]
   826d0:	e7a1      	b.n	82616 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   826d2:	4a06      	ldr	r2, [pc, #24]	; (826ec <SystemCoreClockUpdate+0x100>)
   826d4:	6813      	ldr	r3, [r2, #0]
   826d6:	490a      	ldr	r1, [pc, #40]	; (82700 <SystemCoreClockUpdate+0x114>)
   826d8:	fba1 1303 	umull	r1, r3, r1, r3
   826dc:	085b      	lsrs	r3, r3, #1
   826de:	6013      	str	r3, [r2, #0]
   826e0:	4770      	bx	lr
   826e2:	bf00      	nop
   826e4:	400e0600 	.word	0x400e0600
   826e8:	400e1a10 	.word	0x400e1a10
   826ec:	20070130 	.word	0x20070130
   826f0:	00b71b00 	.word	0x00b71b00
   826f4:	003d0900 	.word	0x003d0900
   826f8:	007a1200 	.word	0x007a1200
   826fc:	0e4e1c00 	.word	0x0e4e1c00
   82700:	aaaaaaab 	.word	0xaaaaaaab

00082704 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82704:	4b0a      	ldr	r3, [pc, #40]	; (82730 <_sbrk+0x2c>)
   82706:	681b      	ldr	r3, [r3, #0]
   82708:	b153      	cbz	r3, 82720 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8270a:	4b09      	ldr	r3, [pc, #36]	; (82730 <_sbrk+0x2c>)
   8270c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8270e:	181a      	adds	r2, r3, r0
   82710:	4908      	ldr	r1, [pc, #32]	; (82734 <_sbrk+0x30>)
   82712:	4291      	cmp	r1, r2
   82714:	db08      	blt.n	82728 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82716:	4610      	mov	r0, r2
   82718:	4a05      	ldr	r2, [pc, #20]	; (82730 <_sbrk+0x2c>)
   8271a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8271c:	4618      	mov	r0, r3
   8271e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82720:	4a05      	ldr	r2, [pc, #20]	; (82738 <_sbrk+0x34>)
   82722:	4b03      	ldr	r3, [pc, #12]	; (82730 <_sbrk+0x2c>)
   82724:	601a      	str	r2, [r3, #0]
   82726:	e7f0      	b.n	8270a <_sbrk+0x6>
		return (caddr_t) -1;	
   82728:	f04f 30ff 	mov.w	r0, #4294967295
}
   8272c:	4770      	bx	lr
   8272e:	bf00      	nop
   82730:	2007c4bc 	.word	0x2007c4bc
   82734:	20087ffc 	.word	0x20087ffc
   82738:	2007e578 	.word	0x2007e578

0008273c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8273c:	f04f 30ff 	mov.w	r0, #4294967295
   82740:	4770      	bx	lr

00082742 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82746:	604b      	str	r3, [r1, #4]

	return 0;
}
   82748:	2000      	movs	r0, #0
   8274a:	4770      	bx	lr

0008274c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8274c:	2001      	movs	r0, #1
   8274e:	4770      	bx	lr

00082750 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82750:	2000      	movs	r0, #0
   82752:	4770      	bx	lr

00082754 <main>:
#include <command_po.h>
#include <tc.h>


int main (void)
{
   82754:	b508      	push	{r3, lr}
	/* System clock initialization */
	sysclk_init();
   82756:	4b07      	ldr	r3, [pc, #28]	; (82774 <main+0x20>)
   82758:	4798      	blx	r3
	
	/* Board peripherals initialization */
	board_init();
   8275a:	4b07      	ldr	r3, [pc, #28]	; (82778 <main+0x24>)
   8275c:	4798      	blx	r3
	
	/* Init tasks */
	init_blink();
   8275e:	4b07      	ldr	r3, [pc, #28]	; (8277c <main+0x28>)
   82760:	4798      	blx	r3
	init_cmd();
   82762:	4b07      	ldr	r3, [pc, #28]	; (82780 <main+0x2c>)
   82764:	4798      	blx	r3
	init_tc();
   82766:	4b07      	ldr	r3, [pc, #28]	; (82784 <main+0x30>)
   82768:	4798      	blx	r3
	//blink(500);
	/* Start scheduler */
	vTaskStartScheduler();
   8276a:	4b07      	ldr	r3, [pc, #28]	; (82788 <main+0x34>)
   8276c:	4798      	blx	r3
	
	/* Should never reach here ... */
	return 1;
}
   8276e:	2001      	movs	r0, #1
   82770:	bd08      	pop	{r3, pc}
   82772:	bf00      	nop
   82774:	000820b9 	.word	0x000820b9
   82778:	0008211d 	.word	0x0008211d
   8277c:	0008051d 	.word	0x0008051d
   82780:	000806b5 	.word	0x000806b5
   82784:	00080329 	.word	0x00080329
   82788:	000815c5 	.word	0x000815c5

0008278c <__libc_init_array>:
   8278c:	b570      	push	{r4, r5, r6, lr}
   8278e:	4e0f      	ldr	r6, [pc, #60]	; (827cc <__libc_init_array+0x40>)
   82790:	4d0f      	ldr	r5, [pc, #60]	; (827d0 <__libc_init_array+0x44>)
   82792:	1b76      	subs	r6, r6, r5
   82794:	10b6      	asrs	r6, r6, #2
   82796:	bf18      	it	ne
   82798:	2400      	movne	r4, #0
   8279a:	d005      	beq.n	827a8 <__libc_init_array+0x1c>
   8279c:	3401      	adds	r4, #1
   8279e:	f855 3b04 	ldr.w	r3, [r5], #4
   827a2:	4798      	blx	r3
   827a4:	42a6      	cmp	r6, r4
   827a6:	d1f9      	bne.n	8279c <__libc_init_array+0x10>
   827a8:	4e0a      	ldr	r6, [pc, #40]	; (827d4 <__libc_init_array+0x48>)
   827aa:	4d0b      	ldr	r5, [pc, #44]	; (827d8 <__libc_init_array+0x4c>)
   827ac:	f003 f804 	bl	857b8 <_init>
   827b0:	1b76      	subs	r6, r6, r5
   827b2:	10b6      	asrs	r6, r6, #2
   827b4:	bf18      	it	ne
   827b6:	2400      	movne	r4, #0
   827b8:	d006      	beq.n	827c8 <__libc_init_array+0x3c>
   827ba:	3401      	adds	r4, #1
   827bc:	f855 3b04 	ldr.w	r3, [r5], #4
   827c0:	4798      	blx	r3
   827c2:	42a6      	cmp	r6, r4
   827c4:	d1f9      	bne.n	827ba <__libc_init_array+0x2e>
   827c6:	bd70      	pop	{r4, r5, r6, pc}
   827c8:	bd70      	pop	{r4, r5, r6, pc}
   827ca:	bf00      	nop
   827cc:	000857c4 	.word	0x000857c4
   827d0:	000857c4 	.word	0x000857c4
   827d4:	000857cc 	.word	0x000857cc
   827d8:	000857c4 	.word	0x000857c4

000827dc <iprintf>:
   827dc:	b40f      	push	{r0, r1, r2, r3}
   827de:	b510      	push	{r4, lr}
   827e0:	4b07      	ldr	r3, [pc, #28]	; (82800 <iprintf+0x24>)
   827e2:	b082      	sub	sp, #8
   827e4:	ac04      	add	r4, sp, #16
   827e6:	f854 2b04 	ldr.w	r2, [r4], #4
   827ea:	6818      	ldr	r0, [r3, #0]
   827ec:	4623      	mov	r3, r4
   827ee:	6881      	ldr	r1, [r0, #8]
   827f0:	9401      	str	r4, [sp, #4]
   827f2:	f000 fa09 	bl	82c08 <_vfiprintf_r>
   827f6:	b002      	add	sp, #8
   827f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   827fc:	b004      	add	sp, #16
   827fe:	4770      	bx	lr
   82800:	20070134 	.word	0x20070134

00082804 <memcpy>:
   82804:	4684      	mov	ip, r0
   82806:	ea41 0300 	orr.w	r3, r1, r0
   8280a:	f013 0303 	ands.w	r3, r3, #3
   8280e:	d149      	bne.n	828a4 <memcpy+0xa0>
   82810:	3a40      	subs	r2, #64	; 0x40
   82812:	d323      	bcc.n	8285c <memcpy+0x58>
   82814:	680b      	ldr	r3, [r1, #0]
   82816:	6003      	str	r3, [r0, #0]
   82818:	684b      	ldr	r3, [r1, #4]
   8281a:	6043      	str	r3, [r0, #4]
   8281c:	688b      	ldr	r3, [r1, #8]
   8281e:	6083      	str	r3, [r0, #8]
   82820:	68cb      	ldr	r3, [r1, #12]
   82822:	60c3      	str	r3, [r0, #12]
   82824:	690b      	ldr	r3, [r1, #16]
   82826:	6103      	str	r3, [r0, #16]
   82828:	694b      	ldr	r3, [r1, #20]
   8282a:	6143      	str	r3, [r0, #20]
   8282c:	698b      	ldr	r3, [r1, #24]
   8282e:	6183      	str	r3, [r0, #24]
   82830:	69cb      	ldr	r3, [r1, #28]
   82832:	61c3      	str	r3, [r0, #28]
   82834:	6a0b      	ldr	r3, [r1, #32]
   82836:	6203      	str	r3, [r0, #32]
   82838:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8283a:	6243      	str	r3, [r0, #36]	; 0x24
   8283c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8283e:	6283      	str	r3, [r0, #40]	; 0x28
   82840:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82842:	62c3      	str	r3, [r0, #44]	; 0x2c
   82844:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82846:	6303      	str	r3, [r0, #48]	; 0x30
   82848:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8284a:	6343      	str	r3, [r0, #52]	; 0x34
   8284c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8284e:	6383      	str	r3, [r0, #56]	; 0x38
   82850:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82852:	63c3      	str	r3, [r0, #60]	; 0x3c
   82854:	3040      	adds	r0, #64	; 0x40
   82856:	3140      	adds	r1, #64	; 0x40
   82858:	3a40      	subs	r2, #64	; 0x40
   8285a:	d2db      	bcs.n	82814 <memcpy+0x10>
   8285c:	3230      	adds	r2, #48	; 0x30
   8285e:	d30b      	bcc.n	82878 <memcpy+0x74>
   82860:	680b      	ldr	r3, [r1, #0]
   82862:	6003      	str	r3, [r0, #0]
   82864:	684b      	ldr	r3, [r1, #4]
   82866:	6043      	str	r3, [r0, #4]
   82868:	688b      	ldr	r3, [r1, #8]
   8286a:	6083      	str	r3, [r0, #8]
   8286c:	68cb      	ldr	r3, [r1, #12]
   8286e:	60c3      	str	r3, [r0, #12]
   82870:	3010      	adds	r0, #16
   82872:	3110      	adds	r1, #16
   82874:	3a10      	subs	r2, #16
   82876:	d2f3      	bcs.n	82860 <memcpy+0x5c>
   82878:	320c      	adds	r2, #12
   8287a:	d305      	bcc.n	82888 <memcpy+0x84>
   8287c:	f851 3b04 	ldr.w	r3, [r1], #4
   82880:	f840 3b04 	str.w	r3, [r0], #4
   82884:	3a04      	subs	r2, #4
   82886:	d2f9      	bcs.n	8287c <memcpy+0x78>
   82888:	3204      	adds	r2, #4
   8288a:	d008      	beq.n	8289e <memcpy+0x9a>
   8288c:	07d2      	lsls	r2, r2, #31
   8288e:	bf1c      	itt	ne
   82890:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82894:	f800 3b01 	strbne.w	r3, [r0], #1
   82898:	d301      	bcc.n	8289e <memcpy+0x9a>
   8289a:	880b      	ldrh	r3, [r1, #0]
   8289c:	8003      	strh	r3, [r0, #0]
   8289e:	4660      	mov	r0, ip
   828a0:	4770      	bx	lr
   828a2:	bf00      	nop
   828a4:	2a08      	cmp	r2, #8
   828a6:	d313      	bcc.n	828d0 <memcpy+0xcc>
   828a8:	078b      	lsls	r3, r1, #30
   828aa:	d0b1      	beq.n	82810 <memcpy+0xc>
   828ac:	f010 0303 	ands.w	r3, r0, #3
   828b0:	d0ae      	beq.n	82810 <memcpy+0xc>
   828b2:	f1c3 0304 	rsb	r3, r3, #4
   828b6:	1ad2      	subs	r2, r2, r3
   828b8:	07db      	lsls	r3, r3, #31
   828ba:	bf1c      	itt	ne
   828bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   828c0:	f800 3b01 	strbne.w	r3, [r0], #1
   828c4:	d3a4      	bcc.n	82810 <memcpy+0xc>
   828c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   828ca:	f820 3b02 	strh.w	r3, [r0], #2
   828ce:	e79f      	b.n	82810 <memcpy+0xc>
   828d0:	3a04      	subs	r2, #4
   828d2:	d3d9      	bcc.n	82888 <memcpy+0x84>
   828d4:	3a01      	subs	r2, #1
   828d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   828da:	f800 3b01 	strb.w	r3, [r0], #1
   828de:	d2f9      	bcs.n	828d4 <memcpy+0xd0>
   828e0:	780b      	ldrb	r3, [r1, #0]
   828e2:	7003      	strb	r3, [r0, #0]
   828e4:	784b      	ldrb	r3, [r1, #1]
   828e6:	7043      	strb	r3, [r0, #1]
   828e8:	788b      	ldrb	r3, [r1, #2]
   828ea:	7083      	strb	r3, [r0, #2]
   828ec:	4660      	mov	r0, ip
   828ee:	4770      	bx	lr

000828f0 <memset>:
   828f0:	b470      	push	{r4, r5, r6}
   828f2:	0786      	lsls	r6, r0, #30
   828f4:	d046      	beq.n	82984 <memset+0x94>
   828f6:	1e54      	subs	r4, r2, #1
   828f8:	2a00      	cmp	r2, #0
   828fa:	d041      	beq.n	82980 <memset+0x90>
   828fc:	b2ca      	uxtb	r2, r1
   828fe:	4603      	mov	r3, r0
   82900:	e002      	b.n	82908 <memset+0x18>
   82902:	f114 34ff 	adds.w	r4, r4, #4294967295
   82906:	d33b      	bcc.n	82980 <memset+0x90>
   82908:	f803 2b01 	strb.w	r2, [r3], #1
   8290c:	079d      	lsls	r5, r3, #30
   8290e:	d1f8      	bne.n	82902 <memset+0x12>
   82910:	2c03      	cmp	r4, #3
   82912:	d92e      	bls.n	82972 <memset+0x82>
   82914:	b2cd      	uxtb	r5, r1
   82916:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8291a:	2c0f      	cmp	r4, #15
   8291c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82920:	d919      	bls.n	82956 <memset+0x66>
   82922:	4626      	mov	r6, r4
   82924:	f103 0210 	add.w	r2, r3, #16
   82928:	3e10      	subs	r6, #16
   8292a:	2e0f      	cmp	r6, #15
   8292c:	f842 5c10 	str.w	r5, [r2, #-16]
   82930:	f842 5c0c 	str.w	r5, [r2, #-12]
   82934:	f842 5c08 	str.w	r5, [r2, #-8]
   82938:	f842 5c04 	str.w	r5, [r2, #-4]
   8293c:	f102 0210 	add.w	r2, r2, #16
   82940:	d8f2      	bhi.n	82928 <memset+0x38>
   82942:	f1a4 0210 	sub.w	r2, r4, #16
   82946:	f022 020f 	bic.w	r2, r2, #15
   8294a:	f004 040f 	and.w	r4, r4, #15
   8294e:	3210      	adds	r2, #16
   82950:	2c03      	cmp	r4, #3
   82952:	4413      	add	r3, r2
   82954:	d90d      	bls.n	82972 <memset+0x82>
   82956:	461e      	mov	r6, r3
   82958:	4622      	mov	r2, r4
   8295a:	3a04      	subs	r2, #4
   8295c:	2a03      	cmp	r2, #3
   8295e:	f846 5b04 	str.w	r5, [r6], #4
   82962:	d8fa      	bhi.n	8295a <memset+0x6a>
   82964:	1f22      	subs	r2, r4, #4
   82966:	f022 0203 	bic.w	r2, r2, #3
   8296a:	3204      	adds	r2, #4
   8296c:	4413      	add	r3, r2
   8296e:	f004 0403 	and.w	r4, r4, #3
   82972:	b12c      	cbz	r4, 82980 <memset+0x90>
   82974:	b2c9      	uxtb	r1, r1
   82976:	441c      	add	r4, r3
   82978:	f803 1b01 	strb.w	r1, [r3], #1
   8297c:	429c      	cmp	r4, r3
   8297e:	d1fb      	bne.n	82978 <memset+0x88>
   82980:	bc70      	pop	{r4, r5, r6}
   82982:	4770      	bx	lr
   82984:	4614      	mov	r4, r2
   82986:	4603      	mov	r3, r0
   82988:	e7c2      	b.n	82910 <memset+0x20>
   8298a:	bf00      	nop

0008298c <setbuf>:
   8298c:	2900      	cmp	r1, #0
   8298e:	bf0c      	ite	eq
   82990:	2202      	moveq	r2, #2
   82992:	2200      	movne	r2, #0
   82994:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82998:	f000 b800 	b.w	8299c <setvbuf>

0008299c <setvbuf>:
   8299c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   829a0:	4d61      	ldr	r5, [pc, #388]	; (82b28 <setvbuf+0x18c>)
   829a2:	b083      	sub	sp, #12
   829a4:	682d      	ldr	r5, [r5, #0]
   829a6:	4604      	mov	r4, r0
   829a8:	460f      	mov	r7, r1
   829aa:	4690      	mov	r8, r2
   829ac:	461e      	mov	r6, r3
   829ae:	b115      	cbz	r5, 829b6 <setvbuf+0x1a>
   829b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   829b2:	2b00      	cmp	r3, #0
   829b4:	d064      	beq.n	82a80 <setvbuf+0xe4>
   829b6:	f1b8 0f02 	cmp.w	r8, #2
   829ba:	d006      	beq.n	829ca <setvbuf+0x2e>
   829bc:	f1b8 0f01 	cmp.w	r8, #1
   829c0:	f200 809f 	bhi.w	82b02 <setvbuf+0x166>
   829c4:	2e00      	cmp	r6, #0
   829c6:	f2c0 809c 	blt.w	82b02 <setvbuf+0x166>
   829ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   829cc:	07d8      	lsls	r0, r3, #31
   829ce:	d534      	bpl.n	82a3a <setvbuf+0x9e>
   829d0:	4621      	mov	r1, r4
   829d2:	4628      	mov	r0, r5
   829d4:	f001 f8b0 	bl	83b38 <_fflush_r>
   829d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   829da:	b141      	cbz	r1, 829ee <setvbuf+0x52>
   829dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   829e0:	4299      	cmp	r1, r3
   829e2:	d002      	beq.n	829ea <setvbuf+0x4e>
   829e4:	4628      	mov	r0, r5
   829e6:	f001 fa25 	bl	83e34 <_free_r>
   829ea:	2300      	movs	r3, #0
   829ec:	6323      	str	r3, [r4, #48]	; 0x30
   829ee:	2200      	movs	r2, #0
   829f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829f4:	61a2      	str	r2, [r4, #24]
   829f6:	6062      	str	r2, [r4, #4]
   829f8:	061a      	lsls	r2, r3, #24
   829fa:	d43a      	bmi.n	82a72 <setvbuf+0xd6>
   829fc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82a00:	f023 0303 	bic.w	r3, r3, #3
   82a04:	f1b8 0f02 	cmp.w	r8, #2
   82a08:	81a3      	strh	r3, [r4, #12]
   82a0a:	d01d      	beq.n	82a48 <setvbuf+0xac>
   82a0c:	ab01      	add	r3, sp, #4
   82a0e:	466a      	mov	r2, sp
   82a10:	4621      	mov	r1, r4
   82a12:	4628      	mov	r0, r5
   82a14:	f001 fcac 	bl	84370 <__swhatbuf_r>
   82a18:	89a3      	ldrh	r3, [r4, #12]
   82a1a:	4318      	orrs	r0, r3
   82a1c:	81a0      	strh	r0, [r4, #12]
   82a1e:	2e00      	cmp	r6, #0
   82a20:	d132      	bne.n	82a88 <setvbuf+0xec>
   82a22:	9e00      	ldr	r6, [sp, #0]
   82a24:	4630      	mov	r0, r6
   82a26:	f001 fd1b 	bl	84460 <malloc>
   82a2a:	4607      	mov	r7, r0
   82a2c:	2800      	cmp	r0, #0
   82a2e:	d06b      	beq.n	82b08 <setvbuf+0x16c>
   82a30:	89a3      	ldrh	r3, [r4, #12]
   82a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a36:	81a3      	strh	r3, [r4, #12]
   82a38:	e028      	b.n	82a8c <setvbuf+0xf0>
   82a3a:	89a3      	ldrh	r3, [r4, #12]
   82a3c:	0599      	lsls	r1, r3, #22
   82a3e:	d4c7      	bmi.n	829d0 <setvbuf+0x34>
   82a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82a42:	f001 fc91 	bl	84368 <__retarget_lock_acquire_recursive>
   82a46:	e7c3      	b.n	829d0 <setvbuf+0x34>
   82a48:	2500      	movs	r5, #0
   82a4a:	2600      	movs	r6, #0
   82a4c:	2001      	movs	r0, #1
   82a4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a54:	f043 0302 	orr.w	r3, r3, #2
   82a58:	60a6      	str	r6, [r4, #8]
   82a5a:	07ce      	lsls	r6, r1, #31
   82a5c:	81a3      	strh	r3, [r4, #12]
   82a5e:	6160      	str	r0, [r4, #20]
   82a60:	6022      	str	r2, [r4, #0]
   82a62:	6122      	str	r2, [r4, #16]
   82a64:	d401      	bmi.n	82a6a <setvbuf+0xce>
   82a66:	0598      	lsls	r0, r3, #22
   82a68:	d53e      	bpl.n	82ae8 <setvbuf+0x14c>
   82a6a:	4628      	mov	r0, r5
   82a6c:	b003      	add	sp, #12
   82a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82a72:	6921      	ldr	r1, [r4, #16]
   82a74:	4628      	mov	r0, r5
   82a76:	f001 f9dd 	bl	83e34 <_free_r>
   82a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a7e:	e7bd      	b.n	829fc <setvbuf+0x60>
   82a80:	4628      	mov	r0, r5
   82a82:	f001 f8b1 	bl	83be8 <__sinit>
   82a86:	e796      	b.n	829b6 <setvbuf+0x1a>
   82a88:	2f00      	cmp	r7, #0
   82a8a:	d0cb      	beq.n	82a24 <setvbuf+0x88>
   82a8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82a8e:	2b00      	cmp	r3, #0
   82a90:	d033      	beq.n	82afa <setvbuf+0x15e>
   82a92:	9b00      	ldr	r3, [sp, #0]
   82a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82a98:	429e      	cmp	r6, r3
   82a9a:	bf1c      	itt	ne
   82a9c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82aa0:	81a2      	strhne	r2, [r4, #12]
   82aa2:	f1b8 0f01 	cmp.w	r8, #1
   82aa6:	bf04      	itt	eq
   82aa8:	f042 0201 	orreq.w	r2, r2, #1
   82aac:	81a2      	strheq	r2, [r4, #12]
   82aae:	b292      	uxth	r2, r2
   82ab0:	f012 0308 	ands.w	r3, r2, #8
   82ab4:	6027      	str	r7, [r4, #0]
   82ab6:	6127      	str	r7, [r4, #16]
   82ab8:	6166      	str	r6, [r4, #20]
   82aba:	d00e      	beq.n	82ada <setvbuf+0x13e>
   82abc:	07d1      	lsls	r1, r2, #31
   82abe:	d51a      	bpl.n	82af6 <setvbuf+0x15a>
   82ac0:	2300      	movs	r3, #0
   82ac2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82ac4:	4276      	negs	r6, r6
   82ac6:	f015 0501 	ands.w	r5, r5, #1
   82aca:	61a6      	str	r6, [r4, #24]
   82acc:	60a3      	str	r3, [r4, #8]
   82ace:	d009      	beq.n	82ae4 <setvbuf+0x148>
   82ad0:	2500      	movs	r5, #0
   82ad2:	4628      	mov	r0, r5
   82ad4:	b003      	add	sp, #12
   82ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82ada:	60a3      	str	r3, [r4, #8]
   82adc:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82ade:	f015 0501 	ands.w	r5, r5, #1
   82ae2:	d1f5      	bne.n	82ad0 <setvbuf+0x134>
   82ae4:	0593      	lsls	r3, r2, #22
   82ae6:	d4c0      	bmi.n	82a6a <setvbuf+0xce>
   82ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82aea:	f001 fc3f 	bl	8436c <__retarget_lock_release_recursive>
   82aee:	4628      	mov	r0, r5
   82af0:	b003      	add	sp, #12
   82af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82af6:	60a6      	str	r6, [r4, #8]
   82af8:	e7f0      	b.n	82adc <setvbuf+0x140>
   82afa:	4628      	mov	r0, r5
   82afc:	f001 f874 	bl	83be8 <__sinit>
   82b00:	e7c7      	b.n	82a92 <setvbuf+0xf6>
   82b02:	f04f 35ff 	mov.w	r5, #4294967295
   82b06:	e7b0      	b.n	82a6a <setvbuf+0xce>
   82b08:	f8dd 9000 	ldr.w	r9, [sp]
   82b0c:	45b1      	cmp	r9, r6
   82b0e:	d004      	beq.n	82b1a <setvbuf+0x17e>
   82b10:	4648      	mov	r0, r9
   82b12:	f001 fca5 	bl	84460 <malloc>
   82b16:	4607      	mov	r7, r0
   82b18:	b920      	cbnz	r0, 82b24 <setvbuf+0x188>
   82b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b1e:	f04f 35ff 	mov.w	r5, #4294967295
   82b22:	e792      	b.n	82a4a <setvbuf+0xae>
   82b24:	464e      	mov	r6, r9
   82b26:	e783      	b.n	82a30 <setvbuf+0x94>
   82b28:	20070134 	.word	0x20070134

00082b2c <strlen>:
   82b2c:	f020 0103 	bic.w	r1, r0, #3
   82b30:	f010 0003 	ands.w	r0, r0, #3
   82b34:	f1c0 0000 	rsb	r0, r0, #0
   82b38:	f851 3b04 	ldr.w	r3, [r1], #4
   82b3c:	f100 0c04 	add.w	ip, r0, #4
   82b40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82b44:	f06f 0200 	mvn.w	r2, #0
   82b48:	bf1c      	itt	ne
   82b4a:	fa22 f20c 	lsrne.w	r2, r2, ip
   82b4e:	4313      	orrne	r3, r2
   82b50:	f04f 0c01 	mov.w	ip, #1
   82b54:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82b58:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82b5c:	eba3 020c 	sub.w	r2, r3, ip
   82b60:	ea22 0203 	bic.w	r2, r2, r3
   82b64:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82b68:	bf04      	itt	eq
   82b6a:	f851 3b04 	ldreq.w	r3, [r1], #4
   82b6e:	3004      	addeq	r0, #4
   82b70:	d0f4      	beq.n	82b5c <strlen+0x30>
   82b72:	f1c2 0100 	rsb	r1, r2, #0
   82b76:	ea02 0201 	and.w	r2, r2, r1
   82b7a:	fab2 f282 	clz	r2, r2
   82b7e:	f1c2 021f 	rsb	r2, r2, #31
   82b82:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82b86:	4770      	bx	lr

00082b88 <__sprint_r.part.0>:
   82b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b8c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82b8e:	4693      	mov	fp, r2
   82b90:	049c      	lsls	r4, r3, #18
   82b92:	d52f      	bpl.n	82bf4 <__sprint_r.part.0+0x6c>
   82b94:	6893      	ldr	r3, [r2, #8]
   82b96:	6812      	ldr	r2, [r2, #0]
   82b98:	b353      	cbz	r3, 82bf0 <__sprint_r.part.0+0x68>
   82b9a:	460e      	mov	r6, r1
   82b9c:	4607      	mov	r7, r0
   82b9e:	f102 0908 	add.w	r9, r2, #8
   82ba2:	e919 0420 	ldmdb	r9, {r5, sl}
   82ba6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82baa:	d017      	beq.n	82bdc <__sprint_r.part.0+0x54>
   82bac:	2400      	movs	r4, #0
   82bae:	3d04      	subs	r5, #4
   82bb0:	e001      	b.n	82bb6 <__sprint_r.part.0+0x2e>
   82bb2:	45a0      	cmp	r8, r4
   82bb4:	d010      	beq.n	82bd8 <__sprint_r.part.0+0x50>
   82bb6:	4632      	mov	r2, r6
   82bb8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82bbc:	4638      	mov	r0, r7
   82bbe:	f001 f8b5 	bl	83d2c <_fputwc_r>
   82bc2:	1c43      	adds	r3, r0, #1
   82bc4:	f104 0401 	add.w	r4, r4, #1
   82bc8:	d1f3      	bne.n	82bb2 <__sprint_r.part.0+0x2a>
   82bca:	2300      	movs	r3, #0
   82bcc:	f8cb 3008 	str.w	r3, [fp, #8]
   82bd0:	f8cb 3004 	str.w	r3, [fp, #4]
   82bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bd8:	f8db 3008 	ldr.w	r3, [fp, #8]
   82bdc:	f02a 0a03 	bic.w	sl, sl, #3
   82be0:	eba3 030a 	sub.w	r3, r3, sl
   82be4:	f8cb 3008 	str.w	r3, [fp, #8]
   82be8:	f109 0908 	add.w	r9, r9, #8
   82bec:	2b00      	cmp	r3, #0
   82bee:	d1d8      	bne.n	82ba2 <__sprint_r.part.0+0x1a>
   82bf0:	2000      	movs	r0, #0
   82bf2:	e7ea      	b.n	82bca <__sprint_r.part.0+0x42>
   82bf4:	f001 fa04 	bl	84000 <__sfvwrite_r>
   82bf8:	2300      	movs	r3, #0
   82bfa:	f8cb 3008 	str.w	r3, [fp, #8]
   82bfe:	f8cb 3004 	str.w	r3, [fp, #4]
   82c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c06:	bf00      	nop

00082c08 <_vfiprintf_r>:
   82c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c0c:	b0ad      	sub	sp, #180	; 0xb4
   82c0e:	461d      	mov	r5, r3
   82c10:	468b      	mov	fp, r1
   82c12:	4690      	mov	r8, r2
   82c14:	9307      	str	r3, [sp, #28]
   82c16:	9006      	str	r0, [sp, #24]
   82c18:	b118      	cbz	r0, 82c22 <_vfiprintf_r+0x1a>
   82c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c1c:	2b00      	cmp	r3, #0
   82c1e:	f000 80f3 	beq.w	82e08 <_vfiprintf_r+0x200>
   82c22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82c26:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82c2a:	07df      	lsls	r7, r3, #31
   82c2c:	b281      	uxth	r1, r0
   82c2e:	d402      	bmi.n	82c36 <_vfiprintf_r+0x2e>
   82c30:	058e      	lsls	r6, r1, #22
   82c32:	f140 80fc 	bpl.w	82e2e <_vfiprintf_r+0x226>
   82c36:	048c      	lsls	r4, r1, #18
   82c38:	d40a      	bmi.n	82c50 <_vfiprintf_r+0x48>
   82c3a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82c3e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82c46:	f8ab 100c 	strh.w	r1, [fp, #12]
   82c4a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82c4e:	b289      	uxth	r1, r1
   82c50:	0708      	lsls	r0, r1, #28
   82c52:	f140 80b3 	bpl.w	82dbc <_vfiprintf_r+0x1b4>
   82c56:	f8db 3010 	ldr.w	r3, [fp, #16]
   82c5a:	2b00      	cmp	r3, #0
   82c5c:	f000 80ae 	beq.w	82dbc <_vfiprintf_r+0x1b4>
   82c60:	f001 031a 	and.w	r3, r1, #26
   82c64:	2b0a      	cmp	r3, #10
   82c66:	f000 80b5 	beq.w	82dd4 <_vfiprintf_r+0x1cc>
   82c6a:	2300      	movs	r3, #0
   82c6c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82c70:	46d1      	mov	r9, sl
   82c72:	930b      	str	r3, [sp, #44]	; 0x2c
   82c74:	9303      	str	r3, [sp, #12]
   82c76:	9311      	str	r3, [sp, #68]	; 0x44
   82c78:	9310      	str	r3, [sp, #64]	; 0x40
   82c7a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   82c7e:	f8cd b010 	str.w	fp, [sp, #16]
   82c82:	f898 3000 	ldrb.w	r3, [r8]
   82c86:	4644      	mov	r4, r8
   82c88:	b1fb      	cbz	r3, 82cca <_vfiprintf_r+0xc2>
   82c8a:	2b25      	cmp	r3, #37	; 0x25
   82c8c:	d102      	bne.n	82c94 <_vfiprintf_r+0x8c>
   82c8e:	e01c      	b.n	82cca <_vfiprintf_r+0xc2>
   82c90:	2b25      	cmp	r3, #37	; 0x25
   82c92:	d003      	beq.n	82c9c <_vfiprintf_r+0x94>
   82c94:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82c98:	2b00      	cmp	r3, #0
   82c9a:	d1f9      	bne.n	82c90 <_vfiprintf_r+0x88>
   82c9c:	eba4 0508 	sub.w	r5, r4, r8
   82ca0:	b19d      	cbz	r5, 82cca <_vfiprintf_r+0xc2>
   82ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82ca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ca6:	3301      	adds	r3, #1
   82ca8:	442a      	add	r2, r5
   82caa:	2b07      	cmp	r3, #7
   82cac:	f8c9 8000 	str.w	r8, [r9]
   82cb0:	f8c9 5004 	str.w	r5, [r9, #4]
   82cb4:	9211      	str	r2, [sp, #68]	; 0x44
   82cb6:	9310      	str	r3, [sp, #64]	; 0x40
   82cb8:	dd7a      	ble.n	82db0 <_vfiprintf_r+0x1a8>
   82cba:	2a00      	cmp	r2, #0
   82cbc:	f040 84b5 	bne.w	8362a <_vfiprintf_r+0xa22>
   82cc0:	46d1      	mov	r9, sl
   82cc2:	9b03      	ldr	r3, [sp, #12]
   82cc4:	9210      	str	r2, [sp, #64]	; 0x40
   82cc6:	442b      	add	r3, r5
   82cc8:	9303      	str	r3, [sp, #12]
   82cca:	7823      	ldrb	r3, [r4, #0]
   82ccc:	2b00      	cmp	r3, #0
   82cce:	f000 83e5 	beq.w	8349c <_vfiprintf_r+0x894>
   82cd2:	2000      	movs	r0, #0
   82cd4:	f04f 0300 	mov.w	r3, #0
   82cd8:	f104 0801 	add.w	r8, r4, #1
   82cdc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82ce0:	7862      	ldrb	r2, [r4, #1]
   82ce2:	4606      	mov	r6, r0
   82ce4:	4605      	mov	r5, r0
   82ce6:	4603      	mov	r3, r0
   82ce8:	f04f 34ff 	mov.w	r4, #4294967295
   82cec:	f108 0801 	add.w	r8, r8, #1
   82cf0:	f1a2 0120 	sub.w	r1, r2, #32
   82cf4:	2958      	cmp	r1, #88	; 0x58
   82cf6:	f200 82d9 	bhi.w	832ac <_vfiprintf_r+0x6a4>
   82cfa:	e8df f011 	tbh	[pc, r1, lsl #1]
   82cfe:	0228      	.short	0x0228
   82d00:	02d702d7 	.word	0x02d702d7
   82d04:	02d70230 	.word	0x02d70230
   82d08:	02d702d7 	.word	0x02d702d7
   82d0c:	02d702d7 	.word	0x02d702d7
   82d10:	00a002d7 	.word	0x00a002d7
   82d14:	02d70288 	.word	0x02d70288
   82d18:	02b800a8 	.word	0x02b800a8
   82d1c:	01a602d7 	.word	0x01a602d7
   82d20:	01ab01ab 	.word	0x01ab01ab
   82d24:	01ab01ab 	.word	0x01ab01ab
   82d28:	01ab01ab 	.word	0x01ab01ab
   82d2c:	01ab01ab 	.word	0x01ab01ab
   82d30:	02d701ab 	.word	0x02d701ab
   82d34:	02d702d7 	.word	0x02d702d7
   82d38:	02d702d7 	.word	0x02d702d7
   82d3c:	02d702d7 	.word	0x02d702d7
   82d40:	02d702d7 	.word	0x02d702d7
   82d44:	01b902d7 	.word	0x01b902d7
   82d48:	02d702d7 	.word	0x02d702d7
   82d4c:	02d702d7 	.word	0x02d702d7
   82d50:	02d702d7 	.word	0x02d702d7
   82d54:	02d702d7 	.word	0x02d702d7
   82d58:	02d702d7 	.word	0x02d702d7
   82d5c:	02d7019e 	.word	0x02d7019e
   82d60:	02d702d7 	.word	0x02d702d7
   82d64:	02d702d7 	.word	0x02d702d7
   82d68:	02d701a2 	.word	0x02d701a2
   82d6c:	025a02d7 	.word	0x025a02d7
   82d70:	02d702d7 	.word	0x02d702d7
   82d74:	02d702d7 	.word	0x02d702d7
   82d78:	02d702d7 	.word	0x02d702d7
   82d7c:	02d702d7 	.word	0x02d702d7
   82d80:	02d702d7 	.word	0x02d702d7
   82d84:	02220261 	.word	0x02220261
   82d88:	02d702d7 	.word	0x02d702d7
   82d8c:	027602d7 	.word	0x027602d7
   82d90:	02d70222 	.word	0x02d70222
   82d94:	027b02d7 	.word	0x027b02d7
   82d98:	01fc02d7 	.word	0x01fc02d7
   82d9c:	02100189 	.word	0x02100189
   82da0:	02d702d2 	.word	0x02d702d2
   82da4:	02d70295 	.word	0x02d70295
   82da8:	02d700ad 	.word	0x02d700ad
   82dac:	023502d7 	.word	0x023502d7
   82db0:	f109 0908 	add.w	r9, r9, #8
   82db4:	9b03      	ldr	r3, [sp, #12]
   82db6:	442b      	add	r3, r5
   82db8:	9303      	str	r3, [sp, #12]
   82dba:	e786      	b.n	82cca <_vfiprintf_r+0xc2>
   82dbc:	4659      	mov	r1, fp
   82dbe:	9806      	ldr	r0, [sp, #24]
   82dc0:	f000 fdaa 	bl	83918 <__swsetup_r>
   82dc4:	bb18      	cbnz	r0, 82e0e <_vfiprintf_r+0x206>
   82dc6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82dca:	f001 031a 	and.w	r3, r1, #26
   82dce:	2b0a      	cmp	r3, #10
   82dd0:	f47f af4b 	bne.w	82c6a <_vfiprintf_r+0x62>
   82dd4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82dd8:	2b00      	cmp	r3, #0
   82dda:	f6ff af46 	blt.w	82c6a <_vfiprintf_r+0x62>
   82dde:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82de2:	07db      	lsls	r3, r3, #31
   82de4:	d405      	bmi.n	82df2 <_vfiprintf_r+0x1ea>
   82de6:	058f      	lsls	r7, r1, #22
   82de8:	d403      	bmi.n	82df2 <_vfiprintf_r+0x1ea>
   82dea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82dee:	f001 fabd 	bl	8436c <__retarget_lock_release_recursive>
   82df2:	462b      	mov	r3, r5
   82df4:	4642      	mov	r2, r8
   82df6:	4659      	mov	r1, fp
   82df8:	9806      	ldr	r0, [sp, #24]
   82dfa:	f000 fd49 	bl	83890 <__sbprintf>
   82dfe:	9003      	str	r0, [sp, #12]
   82e00:	9803      	ldr	r0, [sp, #12]
   82e02:	b02d      	add	sp, #180	; 0xb4
   82e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e08:	f000 feee 	bl	83be8 <__sinit>
   82e0c:	e709      	b.n	82c22 <_vfiprintf_r+0x1a>
   82e0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82e12:	07d9      	lsls	r1, r3, #31
   82e14:	d404      	bmi.n	82e20 <_vfiprintf_r+0x218>
   82e16:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82e1a:	059a      	lsls	r2, r3, #22
   82e1c:	f140 84ae 	bpl.w	8377c <_vfiprintf_r+0xb74>
   82e20:	f04f 33ff 	mov.w	r3, #4294967295
   82e24:	9303      	str	r3, [sp, #12]
   82e26:	9803      	ldr	r0, [sp, #12]
   82e28:	b02d      	add	sp, #180	; 0xb4
   82e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e2e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82e32:	f001 fa99 	bl	84368 <__retarget_lock_acquire_recursive>
   82e36:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82e3a:	b281      	uxth	r1, r0
   82e3c:	e6fb      	b.n	82c36 <_vfiprintf_r+0x2e>
   82e3e:	9907      	ldr	r1, [sp, #28]
   82e40:	460a      	mov	r2, r1
   82e42:	680d      	ldr	r5, [r1, #0]
   82e44:	3204      	adds	r2, #4
   82e46:	2d00      	cmp	r5, #0
   82e48:	9207      	str	r2, [sp, #28]
   82e4a:	da02      	bge.n	82e52 <_vfiprintf_r+0x24a>
   82e4c:	426d      	negs	r5, r5
   82e4e:	f043 0304 	orr.w	r3, r3, #4
   82e52:	f898 2000 	ldrb.w	r2, [r8]
   82e56:	e749      	b.n	82cec <_vfiprintf_r+0xe4>
   82e58:	9508      	str	r5, [sp, #32]
   82e5a:	069e      	lsls	r6, r3, #26
   82e5c:	f100 845a 	bmi.w	83714 <_vfiprintf_r+0xb0c>
   82e60:	9907      	ldr	r1, [sp, #28]
   82e62:	06dd      	lsls	r5, r3, #27
   82e64:	460a      	mov	r2, r1
   82e66:	f100 83ef 	bmi.w	83648 <_vfiprintf_r+0xa40>
   82e6a:	0658      	lsls	r0, r3, #25
   82e6c:	f140 83ec 	bpl.w	83648 <_vfiprintf_r+0xa40>
   82e70:	2700      	movs	r7, #0
   82e72:	2201      	movs	r2, #1
   82e74:	880e      	ldrh	r6, [r1, #0]
   82e76:	3104      	adds	r1, #4
   82e78:	9107      	str	r1, [sp, #28]
   82e7a:	f04f 0100 	mov.w	r1, #0
   82e7e:	2500      	movs	r5, #0
   82e80:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82e84:	1c61      	adds	r1, r4, #1
   82e86:	f000 8117 	beq.w	830b8 <_vfiprintf_r+0x4b0>
   82e8a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82e8e:	9102      	str	r1, [sp, #8]
   82e90:	ea56 0107 	orrs.w	r1, r6, r7
   82e94:	f040 8115 	bne.w	830c2 <_vfiprintf_r+0x4ba>
   82e98:	2c00      	cmp	r4, #0
   82e9a:	f040 835b 	bne.w	83554 <_vfiprintf_r+0x94c>
   82e9e:	2a00      	cmp	r2, #0
   82ea0:	f040 83b6 	bne.w	83610 <_vfiprintf_r+0xa08>
   82ea4:	f013 0301 	ands.w	r3, r3, #1
   82ea8:	9305      	str	r3, [sp, #20]
   82eaa:	f000 8455 	beq.w	83758 <_vfiprintf_r+0xb50>
   82eae:	2330      	movs	r3, #48	; 0x30
   82eb0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82eb4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82eb8:	9b05      	ldr	r3, [sp, #20]
   82eba:	42a3      	cmp	r3, r4
   82ebc:	bfb8      	it	lt
   82ebe:	4623      	movlt	r3, r4
   82ec0:	9301      	str	r3, [sp, #4]
   82ec2:	b10d      	cbz	r5, 82ec8 <_vfiprintf_r+0x2c0>
   82ec4:	3301      	adds	r3, #1
   82ec6:	9301      	str	r3, [sp, #4]
   82ec8:	9b02      	ldr	r3, [sp, #8]
   82eca:	f013 0302 	ands.w	r3, r3, #2
   82ece:	9309      	str	r3, [sp, #36]	; 0x24
   82ed0:	d002      	beq.n	82ed8 <_vfiprintf_r+0x2d0>
   82ed2:	9b01      	ldr	r3, [sp, #4]
   82ed4:	3302      	adds	r3, #2
   82ed6:	9301      	str	r3, [sp, #4]
   82ed8:	9b02      	ldr	r3, [sp, #8]
   82eda:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82ede:	930a      	str	r3, [sp, #40]	; 0x28
   82ee0:	f040 8215 	bne.w	8330e <_vfiprintf_r+0x706>
   82ee4:	9b08      	ldr	r3, [sp, #32]
   82ee6:	9a01      	ldr	r2, [sp, #4]
   82ee8:	1a9d      	subs	r5, r3, r2
   82eea:	2d00      	cmp	r5, #0
   82eec:	f340 820f 	ble.w	8330e <_vfiprintf_r+0x706>
   82ef0:	2d10      	cmp	r5, #16
   82ef2:	f340 8484 	ble.w	837fe <_vfiprintf_r+0xbf6>
   82ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82ef8:	46ce      	mov	lr, r9
   82efa:	2710      	movs	r7, #16
   82efc:	46a1      	mov	r9, r4
   82efe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82f00:	4ec5      	ldr	r6, [pc, #788]	; (83218 <_vfiprintf_r+0x610>)
   82f02:	4619      	mov	r1, r3
   82f04:	9c06      	ldr	r4, [sp, #24]
   82f06:	e007      	b.n	82f18 <_vfiprintf_r+0x310>
   82f08:	f101 0c02 	add.w	ip, r1, #2
   82f0c:	4601      	mov	r1, r0
   82f0e:	f10e 0e08 	add.w	lr, lr, #8
   82f12:	3d10      	subs	r5, #16
   82f14:	2d10      	cmp	r5, #16
   82f16:	dd11      	ble.n	82f3c <_vfiprintf_r+0x334>
   82f18:	1c48      	adds	r0, r1, #1
   82f1a:	3210      	adds	r2, #16
   82f1c:	2807      	cmp	r0, #7
   82f1e:	9211      	str	r2, [sp, #68]	; 0x44
   82f20:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82f24:	9010      	str	r0, [sp, #64]	; 0x40
   82f26:	ddef      	ble.n	82f08 <_vfiprintf_r+0x300>
   82f28:	2a00      	cmp	r2, #0
   82f2a:	f040 81d9 	bne.w	832e0 <_vfiprintf_r+0x6d8>
   82f2e:	3d10      	subs	r5, #16
   82f30:	2d10      	cmp	r5, #16
   82f32:	4611      	mov	r1, r2
   82f34:	f04f 0c01 	mov.w	ip, #1
   82f38:	46d6      	mov	lr, sl
   82f3a:	dced      	bgt.n	82f18 <_vfiprintf_r+0x310>
   82f3c:	464c      	mov	r4, r9
   82f3e:	4661      	mov	r1, ip
   82f40:	46f1      	mov	r9, lr
   82f42:	442a      	add	r2, r5
   82f44:	2907      	cmp	r1, #7
   82f46:	9211      	str	r2, [sp, #68]	; 0x44
   82f48:	f8c9 6000 	str.w	r6, [r9]
   82f4c:	f8c9 5004 	str.w	r5, [r9, #4]
   82f50:	9110      	str	r1, [sp, #64]	; 0x40
   82f52:	f300 82eb 	bgt.w	8352c <_vfiprintf_r+0x924>
   82f56:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82f5a:	f109 0908 	add.w	r9, r9, #8
   82f5e:	1c48      	adds	r0, r1, #1
   82f60:	2d00      	cmp	r5, #0
   82f62:	f040 81dc 	bne.w	8331e <_vfiprintf_r+0x716>
   82f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82f68:	2b00      	cmp	r3, #0
   82f6a:	f000 81f6 	beq.w	8335a <_vfiprintf_r+0x752>
   82f6e:	2102      	movs	r1, #2
   82f70:	ab0e      	add	r3, sp, #56	; 0x38
   82f72:	440a      	add	r2, r1
   82f74:	2807      	cmp	r0, #7
   82f76:	9211      	str	r2, [sp, #68]	; 0x44
   82f78:	9010      	str	r0, [sp, #64]	; 0x40
   82f7a:	f8c9 1004 	str.w	r1, [r9, #4]
   82f7e:	f8c9 3000 	str.w	r3, [r9]
   82f82:	f340 81e6 	ble.w	83352 <_vfiprintf_r+0x74a>
   82f86:	2a00      	cmp	r2, #0
   82f88:	f040 8395 	bne.w	836b6 <_vfiprintf_r+0xaae>
   82f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82f8e:	2001      	movs	r0, #1
   82f90:	2b80      	cmp	r3, #128	; 0x80
   82f92:	4611      	mov	r1, r2
   82f94:	46d1      	mov	r9, sl
   82f96:	f040 81e4 	bne.w	83362 <_vfiprintf_r+0x75a>
   82f9a:	9b08      	ldr	r3, [sp, #32]
   82f9c:	9d01      	ldr	r5, [sp, #4]
   82f9e:	1b5e      	subs	r6, r3, r5
   82fa0:	2e00      	cmp	r6, #0
   82fa2:	f340 81de 	ble.w	83362 <_vfiprintf_r+0x75a>
   82fa6:	2e10      	cmp	r6, #16
   82fa8:	f340 843c 	ble.w	83824 <_vfiprintf_r+0xc1c>
   82fac:	46cc      	mov	ip, r9
   82fae:	2710      	movs	r7, #16
   82fb0:	46a1      	mov	r9, r4
   82fb2:	4d9a      	ldr	r5, [pc, #616]	; (8321c <_vfiprintf_r+0x614>)
   82fb4:	9c06      	ldr	r4, [sp, #24]
   82fb6:	e007      	b.n	82fc8 <_vfiprintf_r+0x3c0>
   82fb8:	f101 0e02 	add.w	lr, r1, #2
   82fbc:	4601      	mov	r1, r0
   82fbe:	f10c 0c08 	add.w	ip, ip, #8
   82fc2:	3e10      	subs	r6, #16
   82fc4:	2e10      	cmp	r6, #16
   82fc6:	dd11      	ble.n	82fec <_vfiprintf_r+0x3e4>
   82fc8:	1c48      	adds	r0, r1, #1
   82fca:	3210      	adds	r2, #16
   82fcc:	2807      	cmp	r0, #7
   82fce:	9211      	str	r2, [sp, #68]	; 0x44
   82fd0:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82fd4:	9010      	str	r0, [sp, #64]	; 0x40
   82fd6:	ddef      	ble.n	82fb8 <_vfiprintf_r+0x3b0>
   82fd8:	2a00      	cmp	r2, #0
   82fda:	f040 829b 	bne.w	83514 <_vfiprintf_r+0x90c>
   82fde:	3e10      	subs	r6, #16
   82fe0:	2e10      	cmp	r6, #16
   82fe2:	f04f 0e01 	mov.w	lr, #1
   82fe6:	4611      	mov	r1, r2
   82fe8:	46d4      	mov	ip, sl
   82fea:	dced      	bgt.n	82fc8 <_vfiprintf_r+0x3c0>
   82fec:	464c      	mov	r4, r9
   82fee:	46e1      	mov	r9, ip
   82ff0:	4432      	add	r2, r6
   82ff2:	f1be 0f07 	cmp.w	lr, #7
   82ff6:	9211      	str	r2, [sp, #68]	; 0x44
   82ff8:	e889 0060 	stmia.w	r9, {r5, r6}
   82ffc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   83000:	f300 8366 	bgt.w	836d0 <_vfiprintf_r+0xac8>
   83004:	f109 0908 	add.w	r9, r9, #8
   83008:	f10e 0001 	add.w	r0, lr, #1
   8300c:	4671      	mov	r1, lr
   8300e:	e1a8      	b.n	83362 <_vfiprintf_r+0x75a>
   83010:	9508      	str	r5, [sp, #32]
   83012:	f013 0220 	ands.w	r2, r3, #32
   83016:	f040 8389 	bne.w	8372c <_vfiprintf_r+0xb24>
   8301a:	f013 0110 	ands.w	r1, r3, #16
   8301e:	f040 8319 	bne.w	83654 <_vfiprintf_r+0xa4c>
   83022:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   83026:	f000 8315 	beq.w	83654 <_vfiprintf_r+0xa4c>
   8302a:	9807      	ldr	r0, [sp, #28]
   8302c:	460a      	mov	r2, r1
   8302e:	4601      	mov	r1, r0
   83030:	3104      	adds	r1, #4
   83032:	8806      	ldrh	r6, [r0, #0]
   83034:	2700      	movs	r7, #0
   83036:	9107      	str	r1, [sp, #28]
   83038:	e71f      	b.n	82e7a <_vfiprintf_r+0x272>
   8303a:	9508      	str	r5, [sp, #32]
   8303c:	f043 0310 	orr.w	r3, r3, #16
   83040:	e7e7      	b.n	83012 <_vfiprintf_r+0x40a>
   83042:	9508      	str	r5, [sp, #32]
   83044:	f043 0310 	orr.w	r3, r3, #16
   83048:	e707      	b.n	82e5a <_vfiprintf_r+0x252>
   8304a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8304e:	f898 2000 	ldrb.w	r2, [r8]
   83052:	e64b      	b.n	82cec <_vfiprintf_r+0xe4>
   83054:	2500      	movs	r5, #0
   83056:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8305a:	f818 2b01 	ldrb.w	r2, [r8], #1
   8305e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83062:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   83066:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8306a:	2909      	cmp	r1, #9
   8306c:	d9f5      	bls.n	8305a <_vfiprintf_r+0x452>
   8306e:	e63f      	b.n	82cf0 <_vfiprintf_r+0xe8>
   83070:	9508      	str	r5, [sp, #32]
   83072:	2800      	cmp	r0, #0
   83074:	f040 8402 	bne.w	8387c <_vfiprintf_r+0xc74>
   83078:	f043 0310 	orr.w	r3, r3, #16
   8307c:	069e      	lsls	r6, r3, #26
   8307e:	f100 833d 	bmi.w	836fc <_vfiprintf_r+0xaf4>
   83082:	9907      	ldr	r1, [sp, #28]
   83084:	06dd      	lsls	r5, r3, #27
   83086:	460a      	mov	r2, r1
   83088:	f100 82f0 	bmi.w	8366c <_vfiprintf_r+0xa64>
   8308c:	0658      	lsls	r0, r3, #25
   8308e:	f140 82ed 	bpl.w	8366c <_vfiprintf_r+0xa64>
   83092:	f9b1 6000 	ldrsh.w	r6, [r1]
   83096:	3204      	adds	r2, #4
   83098:	17f7      	asrs	r7, r6, #31
   8309a:	4630      	mov	r0, r6
   8309c:	4639      	mov	r1, r7
   8309e:	9207      	str	r2, [sp, #28]
   830a0:	2800      	cmp	r0, #0
   830a2:	f171 0200 	sbcs.w	r2, r1, #0
   830a6:	f2c0 835a 	blt.w	8375e <_vfiprintf_r+0xb56>
   830aa:	1c61      	adds	r1, r4, #1
   830ac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   830b0:	f04f 0201 	mov.w	r2, #1
   830b4:	f47f aee9 	bne.w	82e8a <_vfiprintf_r+0x282>
   830b8:	ea56 0107 	orrs.w	r1, r6, r7
   830bc:	f000 824b 	beq.w	83556 <_vfiprintf_r+0x94e>
   830c0:	9302      	str	r3, [sp, #8]
   830c2:	2a01      	cmp	r2, #1
   830c4:	f000 828a 	beq.w	835dc <_vfiprintf_r+0x9d4>
   830c8:	2a02      	cmp	r2, #2
   830ca:	f040 825a 	bne.w	83582 <_vfiprintf_r+0x97a>
   830ce:	46d3      	mov	fp, sl
   830d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   830d2:	0933      	lsrs	r3, r6, #4
   830d4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   830d8:	0939      	lsrs	r1, r7, #4
   830da:	f006 020f 	and.w	r2, r6, #15
   830de:	460f      	mov	r7, r1
   830e0:	461e      	mov	r6, r3
   830e2:	5c83      	ldrb	r3, [r0, r2]
   830e4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   830e8:	ea56 0307 	orrs.w	r3, r6, r7
   830ec:	d1f1      	bne.n	830d2 <_vfiprintf_r+0x4ca>
   830ee:	ebaa 030b 	sub.w	r3, sl, fp
   830f2:	9305      	str	r3, [sp, #20]
   830f4:	e6e0      	b.n	82eb8 <_vfiprintf_r+0x2b0>
   830f6:	2800      	cmp	r0, #0
   830f8:	f040 83bd 	bne.w	83876 <_vfiprintf_r+0xc6e>
   830fc:	0699      	lsls	r1, r3, #26
   830fe:	f100 8359 	bmi.w	837b4 <_vfiprintf_r+0xbac>
   83102:	06da      	lsls	r2, r3, #27
   83104:	f100 80e5 	bmi.w	832d2 <_vfiprintf_r+0x6ca>
   83108:	065b      	lsls	r3, r3, #25
   8310a:	f140 80e2 	bpl.w	832d2 <_vfiprintf_r+0x6ca>
   8310e:	9a07      	ldr	r2, [sp, #28]
   83110:	6813      	ldr	r3, [r2, #0]
   83112:	3204      	adds	r2, #4
   83114:	9207      	str	r2, [sp, #28]
   83116:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8311a:	801a      	strh	r2, [r3, #0]
   8311c:	e5b1      	b.n	82c82 <_vfiprintf_r+0x7a>
   8311e:	2278      	movs	r2, #120	; 0x78
   83120:	2130      	movs	r1, #48	; 0x30
   83122:	9508      	str	r5, [sp, #32]
   83124:	9d07      	ldr	r5, [sp, #28]
   83126:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8312a:	1d2a      	adds	r2, r5, #4
   8312c:	9207      	str	r2, [sp, #28]
   8312e:	4a3c      	ldr	r2, [pc, #240]	; (83220 <_vfiprintf_r+0x618>)
   83130:	682e      	ldr	r6, [r5, #0]
   83132:	920b      	str	r2, [sp, #44]	; 0x2c
   83134:	f043 0302 	orr.w	r3, r3, #2
   83138:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8313c:	2700      	movs	r7, #0
   8313e:	2202      	movs	r2, #2
   83140:	e69b      	b.n	82e7a <_vfiprintf_r+0x272>
   83142:	9508      	str	r5, [sp, #32]
   83144:	2800      	cmp	r0, #0
   83146:	d099      	beq.n	8307c <_vfiprintf_r+0x474>
   83148:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8314c:	e796      	b.n	8307c <_vfiprintf_r+0x474>
   8314e:	f898 2000 	ldrb.w	r2, [r8]
   83152:	2e00      	cmp	r6, #0
   83154:	f47f adca 	bne.w	82cec <_vfiprintf_r+0xe4>
   83158:	2001      	movs	r0, #1
   8315a:	2620      	movs	r6, #32
   8315c:	e5c6      	b.n	82cec <_vfiprintf_r+0xe4>
   8315e:	f043 0301 	orr.w	r3, r3, #1
   83162:	f898 2000 	ldrb.w	r2, [r8]
   83166:	e5c1      	b.n	82cec <_vfiprintf_r+0xe4>
   83168:	9508      	str	r5, [sp, #32]
   8316a:	2800      	cmp	r0, #0
   8316c:	f040 8380 	bne.w	83870 <_vfiprintf_r+0xc68>
   83170:	492b      	ldr	r1, [pc, #172]	; (83220 <_vfiprintf_r+0x618>)
   83172:	910b      	str	r1, [sp, #44]	; 0x2c
   83174:	069f      	lsls	r7, r3, #26
   83176:	f100 82e5 	bmi.w	83744 <_vfiprintf_r+0xb3c>
   8317a:	9807      	ldr	r0, [sp, #28]
   8317c:	06de      	lsls	r6, r3, #27
   8317e:	4601      	mov	r1, r0
   83180:	f100 826f 	bmi.w	83662 <_vfiprintf_r+0xa5a>
   83184:	065d      	lsls	r5, r3, #25
   83186:	f140 826c 	bpl.w	83662 <_vfiprintf_r+0xa5a>
   8318a:	2700      	movs	r7, #0
   8318c:	3104      	adds	r1, #4
   8318e:	8806      	ldrh	r6, [r0, #0]
   83190:	9107      	str	r1, [sp, #28]
   83192:	07d8      	lsls	r0, r3, #31
   83194:	f140 8220 	bpl.w	835d8 <_vfiprintf_r+0x9d0>
   83198:	ea56 0107 	orrs.w	r1, r6, r7
   8319c:	f000 821c 	beq.w	835d8 <_vfiprintf_r+0x9d0>
   831a0:	2130      	movs	r1, #48	; 0x30
   831a2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   831a6:	f043 0302 	orr.w	r3, r3, #2
   831aa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   831ae:	2202      	movs	r2, #2
   831b0:	e663      	b.n	82e7a <_vfiprintf_r+0x272>
   831b2:	9508      	str	r5, [sp, #32]
   831b4:	2800      	cmp	r0, #0
   831b6:	f040 8355 	bne.w	83864 <_vfiprintf_r+0xc5c>
   831ba:	491a      	ldr	r1, [pc, #104]	; (83224 <_vfiprintf_r+0x61c>)
   831bc:	910b      	str	r1, [sp, #44]	; 0x2c
   831be:	e7d9      	b.n	83174 <_vfiprintf_r+0x56c>
   831c0:	2201      	movs	r2, #1
   831c2:	9807      	ldr	r0, [sp, #28]
   831c4:	4611      	mov	r1, r2
   831c6:	9201      	str	r2, [sp, #4]
   831c8:	6802      	ldr	r2, [r0, #0]
   831ca:	f04f 0400 	mov.w	r4, #0
   831ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   831d2:	4602      	mov	r2, r0
   831d4:	3204      	adds	r2, #4
   831d6:	9508      	str	r5, [sp, #32]
   831d8:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   831dc:	9105      	str	r1, [sp, #20]
   831de:	9207      	str	r2, [sp, #28]
   831e0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   831e4:	9302      	str	r3, [sp, #8]
   831e6:	2400      	movs	r4, #0
   831e8:	e66e      	b.n	82ec8 <_vfiprintf_r+0x2c0>
   831ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   831ee:	f898 2000 	ldrb.w	r2, [r8]
   831f2:	e57b      	b.n	82cec <_vfiprintf_r+0xe4>
   831f4:	f898 2000 	ldrb.w	r2, [r8]
   831f8:	2a6c      	cmp	r2, #108	; 0x6c
   831fa:	bf03      	ittte	eq
   831fc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   83200:	f043 0320 	orreq.w	r3, r3, #32
   83204:	f108 0801 	addeq.w	r8, r8, #1
   83208:	f043 0310 	orrne.w	r3, r3, #16
   8320c:	e56e      	b.n	82cec <_vfiprintf_r+0xe4>
   8320e:	f898 2000 	ldrb.w	r2, [r8]
   83212:	2001      	movs	r0, #1
   83214:	262b      	movs	r6, #43	; 0x2b
   83216:	e569      	b.n	82cec <_vfiprintf_r+0xe4>
   83218:	00085684 	.word	0x00085684
   8321c:	00085694 	.word	0x00085694
   83220:	00085668 	.word	0x00085668
   83224:	00085654 	.word	0x00085654
   83228:	f04f 0200 	mov.w	r2, #0
   8322c:	9907      	ldr	r1, [sp, #28]
   8322e:	9508      	str	r5, [sp, #32]
   83230:	f8d1 b000 	ldr.w	fp, [r1]
   83234:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83238:	1d0d      	adds	r5, r1, #4
   8323a:	f1bb 0f00 	cmp.w	fp, #0
   8323e:	f000 82e4 	beq.w	8380a <_vfiprintf_r+0xc02>
   83242:	1c67      	adds	r7, r4, #1
   83244:	f000 82c3 	beq.w	837ce <_vfiprintf_r+0xbc6>
   83248:	4622      	mov	r2, r4
   8324a:	2100      	movs	r1, #0
   8324c:	4658      	mov	r0, fp
   8324e:	9301      	str	r3, [sp, #4]
   83250:	f001 fbc6 	bl	849e0 <memchr>
   83254:	9b01      	ldr	r3, [sp, #4]
   83256:	2800      	cmp	r0, #0
   83258:	f000 82e8 	beq.w	8382c <_vfiprintf_r+0xc24>
   8325c:	eba0 020b 	sub.w	r2, r0, fp
   83260:	9507      	str	r5, [sp, #28]
   83262:	9205      	str	r2, [sp, #20]
   83264:	9302      	str	r3, [sp, #8]
   83266:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8326a:	2400      	movs	r4, #0
   8326c:	e624      	b.n	82eb8 <_vfiprintf_r+0x2b0>
   8326e:	f898 2000 	ldrb.w	r2, [r8]
   83272:	f108 0701 	add.w	r7, r8, #1
   83276:	2a2a      	cmp	r2, #42	; 0x2a
   83278:	f000 82e9 	beq.w	8384e <_vfiprintf_r+0xc46>
   8327c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83280:	2909      	cmp	r1, #9
   83282:	46b8      	mov	r8, r7
   83284:	f04f 0400 	mov.w	r4, #0
   83288:	f63f ad32 	bhi.w	82cf0 <_vfiprintf_r+0xe8>
   8328c:	f818 2b01 	ldrb.w	r2, [r8], #1
   83290:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83294:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   83298:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8329c:	2909      	cmp	r1, #9
   8329e:	d9f5      	bls.n	8328c <_vfiprintf_r+0x684>
   832a0:	e526      	b.n	82cf0 <_vfiprintf_r+0xe8>
   832a2:	f043 0320 	orr.w	r3, r3, #32
   832a6:	f898 2000 	ldrb.w	r2, [r8]
   832aa:	e51f      	b.n	82cec <_vfiprintf_r+0xe4>
   832ac:	9508      	str	r5, [sp, #32]
   832ae:	2800      	cmp	r0, #0
   832b0:	f040 82db 	bne.w	8386a <_vfiprintf_r+0xc62>
   832b4:	2a00      	cmp	r2, #0
   832b6:	f000 80f1 	beq.w	8349c <_vfiprintf_r+0x894>
   832ba:	2101      	movs	r1, #1
   832bc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   832c0:	f04f 0200 	mov.w	r2, #0
   832c4:	9101      	str	r1, [sp, #4]
   832c6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   832ca:	9105      	str	r1, [sp, #20]
   832cc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   832d0:	e788      	b.n	831e4 <_vfiprintf_r+0x5dc>
   832d2:	9a07      	ldr	r2, [sp, #28]
   832d4:	6813      	ldr	r3, [r2, #0]
   832d6:	3204      	adds	r2, #4
   832d8:	9207      	str	r2, [sp, #28]
   832da:	9a03      	ldr	r2, [sp, #12]
   832dc:	601a      	str	r2, [r3, #0]
   832de:	e4d0      	b.n	82c82 <_vfiprintf_r+0x7a>
   832e0:	aa0f      	add	r2, sp, #60	; 0x3c
   832e2:	9904      	ldr	r1, [sp, #16]
   832e4:	4620      	mov	r0, r4
   832e6:	f7ff fc4f 	bl	82b88 <__sprint_r.part.0>
   832ea:	2800      	cmp	r0, #0
   832ec:	f040 8143 	bne.w	83576 <_vfiprintf_r+0x96e>
   832f0:	9910      	ldr	r1, [sp, #64]	; 0x40
   832f2:	46d6      	mov	lr, sl
   832f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   832f6:	f101 0c01 	add.w	ip, r1, #1
   832fa:	e60a      	b.n	82f12 <_vfiprintf_r+0x30a>
   832fc:	aa0f      	add	r2, sp, #60	; 0x3c
   832fe:	9904      	ldr	r1, [sp, #16]
   83300:	9806      	ldr	r0, [sp, #24]
   83302:	f7ff fc41 	bl	82b88 <__sprint_r.part.0>
   83306:	2800      	cmp	r0, #0
   83308:	f040 8135 	bne.w	83576 <_vfiprintf_r+0x96e>
   8330c:	46d1      	mov	r9, sl
   8330e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83310:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83314:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83316:	1c48      	adds	r0, r1, #1
   83318:	2d00      	cmp	r5, #0
   8331a:	f43f ae24 	beq.w	82f66 <_vfiprintf_r+0x35e>
   8331e:	2101      	movs	r1, #1
   83320:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   83324:	440a      	add	r2, r1
   83326:	2807      	cmp	r0, #7
   83328:	9211      	str	r2, [sp, #68]	; 0x44
   8332a:	9010      	str	r0, [sp, #64]	; 0x40
   8332c:	f8c9 1004 	str.w	r1, [r9, #4]
   83330:	f8c9 5000 	str.w	r5, [r9]
   83334:	f340 8109 	ble.w	8354a <_vfiprintf_r+0x942>
   83338:	2a00      	cmp	r2, #0
   8333a:	f040 81af 	bne.w	8369c <_vfiprintf_r+0xa94>
   8333e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83340:	2b00      	cmp	r3, #0
   83342:	f43f ae23 	beq.w	82f8c <_vfiprintf_r+0x384>
   83346:	2202      	movs	r2, #2
   83348:	4608      	mov	r0, r1
   8334a:	46d1      	mov	r9, sl
   8334c:	ab0e      	add	r3, sp, #56	; 0x38
   8334e:	921d      	str	r2, [sp, #116]	; 0x74
   83350:	931c      	str	r3, [sp, #112]	; 0x70
   83352:	4601      	mov	r1, r0
   83354:	f109 0908 	add.w	r9, r9, #8
   83358:	3001      	adds	r0, #1
   8335a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8335c:	2b80      	cmp	r3, #128	; 0x80
   8335e:	f43f ae1c 	beq.w	82f9a <_vfiprintf_r+0x392>
   83362:	9b05      	ldr	r3, [sp, #20]
   83364:	1ae4      	subs	r4, r4, r3
   83366:	2c00      	cmp	r4, #0
   83368:	dd2f      	ble.n	833ca <_vfiprintf_r+0x7c2>
   8336a:	2c10      	cmp	r4, #16
   8336c:	f340 8220 	ble.w	837b0 <_vfiprintf_r+0xba8>
   83370:	46ce      	mov	lr, r9
   83372:	2610      	movs	r6, #16
   83374:	4db2      	ldr	r5, [pc, #712]	; (83640 <_vfiprintf_r+0xa38>)
   83376:	9f06      	ldr	r7, [sp, #24]
   83378:	f8dd 9010 	ldr.w	r9, [sp, #16]
   8337c:	e006      	b.n	8338c <_vfiprintf_r+0x784>
   8337e:	1c88      	adds	r0, r1, #2
   83380:	4619      	mov	r1, r3
   83382:	f10e 0e08 	add.w	lr, lr, #8
   83386:	3c10      	subs	r4, #16
   83388:	2c10      	cmp	r4, #16
   8338a:	dd10      	ble.n	833ae <_vfiprintf_r+0x7a6>
   8338c:	1c4b      	adds	r3, r1, #1
   8338e:	3210      	adds	r2, #16
   83390:	2b07      	cmp	r3, #7
   83392:	9211      	str	r2, [sp, #68]	; 0x44
   83394:	e88e 0060 	stmia.w	lr, {r5, r6}
   83398:	9310      	str	r3, [sp, #64]	; 0x40
   8339a:	ddf0      	ble.n	8337e <_vfiprintf_r+0x776>
   8339c:	2a00      	cmp	r2, #0
   8339e:	d165      	bne.n	8346c <_vfiprintf_r+0x864>
   833a0:	3c10      	subs	r4, #16
   833a2:	2c10      	cmp	r4, #16
   833a4:	f04f 0001 	mov.w	r0, #1
   833a8:	4611      	mov	r1, r2
   833aa:	46d6      	mov	lr, sl
   833ac:	dcee      	bgt.n	8338c <_vfiprintf_r+0x784>
   833ae:	46f1      	mov	r9, lr
   833b0:	4422      	add	r2, r4
   833b2:	2807      	cmp	r0, #7
   833b4:	9211      	str	r2, [sp, #68]	; 0x44
   833b6:	f8c9 5000 	str.w	r5, [r9]
   833ba:	f8c9 4004 	str.w	r4, [r9, #4]
   833be:	9010      	str	r0, [sp, #64]	; 0x40
   833c0:	f300 8085 	bgt.w	834ce <_vfiprintf_r+0x8c6>
   833c4:	f109 0908 	add.w	r9, r9, #8
   833c8:	3001      	adds	r0, #1
   833ca:	9905      	ldr	r1, [sp, #20]
   833cc:	2807      	cmp	r0, #7
   833ce:	440a      	add	r2, r1
   833d0:	9211      	str	r2, [sp, #68]	; 0x44
   833d2:	f8c9 b000 	str.w	fp, [r9]
   833d6:	f8c9 1004 	str.w	r1, [r9, #4]
   833da:	9010      	str	r0, [sp, #64]	; 0x40
   833dc:	f340 8082 	ble.w	834e4 <_vfiprintf_r+0x8dc>
   833e0:	2a00      	cmp	r2, #0
   833e2:	f040 8118 	bne.w	83616 <_vfiprintf_r+0xa0e>
   833e6:	9b02      	ldr	r3, [sp, #8]
   833e8:	9210      	str	r2, [sp, #64]	; 0x40
   833ea:	0758      	lsls	r0, r3, #29
   833ec:	d535      	bpl.n	8345a <_vfiprintf_r+0x852>
   833ee:	9b08      	ldr	r3, [sp, #32]
   833f0:	9901      	ldr	r1, [sp, #4]
   833f2:	1a5c      	subs	r4, r3, r1
   833f4:	2c00      	cmp	r4, #0
   833f6:	f340 80e7 	ble.w	835c8 <_vfiprintf_r+0x9c0>
   833fa:	46d1      	mov	r9, sl
   833fc:	2c10      	cmp	r4, #16
   833fe:	f340 820d 	ble.w	8381c <_vfiprintf_r+0xc14>
   83402:	2510      	movs	r5, #16
   83404:	9910      	ldr	r1, [sp, #64]	; 0x40
   83406:	4e8f      	ldr	r6, [pc, #572]	; (83644 <_vfiprintf_r+0xa3c>)
   83408:	9f06      	ldr	r7, [sp, #24]
   8340a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8340e:	e006      	b.n	8341e <_vfiprintf_r+0x816>
   83410:	1c88      	adds	r0, r1, #2
   83412:	4619      	mov	r1, r3
   83414:	f109 0908 	add.w	r9, r9, #8
   83418:	3c10      	subs	r4, #16
   8341a:	2c10      	cmp	r4, #16
   8341c:	dd11      	ble.n	83442 <_vfiprintf_r+0x83a>
   8341e:	1c4b      	adds	r3, r1, #1
   83420:	3210      	adds	r2, #16
   83422:	2b07      	cmp	r3, #7
   83424:	9211      	str	r2, [sp, #68]	; 0x44
   83426:	f8c9 6000 	str.w	r6, [r9]
   8342a:	f8c9 5004 	str.w	r5, [r9, #4]
   8342e:	9310      	str	r3, [sp, #64]	; 0x40
   83430:	ddee      	ble.n	83410 <_vfiprintf_r+0x808>
   83432:	bb42      	cbnz	r2, 83486 <_vfiprintf_r+0x87e>
   83434:	3c10      	subs	r4, #16
   83436:	2c10      	cmp	r4, #16
   83438:	f04f 0001 	mov.w	r0, #1
   8343c:	4611      	mov	r1, r2
   8343e:	46d1      	mov	r9, sl
   83440:	dced      	bgt.n	8341e <_vfiprintf_r+0x816>
   83442:	4422      	add	r2, r4
   83444:	2807      	cmp	r0, #7
   83446:	9211      	str	r2, [sp, #68]	; 0x44
   83448:	f8c9 6000 	str.w	r6, [r9]
   8344c:	f8c9 4004 	str.w	r4, [r9, #4]
   83450:	9010      	str	r0, [sp, #64]	; 0x40
   83452:	dd51      	ble.n	834f8 <_vfiprintf_r+0x8f0>
   83454:	2a00      	cmp	r2, #0
   83456:	f040 819a 	bne.w	8378e <_vfiprintf_r+0xb86>
   8345a:	9b03      	ldr	r3, [sp, #12]
   8345c:	9a08      	ldr	r2, [sp, #32]
   8345e:	9901      	ldr	r1, [sp, #4]
   83460:	428a      	cmp	r2, r1
   83462:	bfac      	ite	ge
   83464:	189b      	addge	r3, r3, r2
   83466:	185b      	addlt	r3, r3, r1
   83468:	9303      	str	r3, [sp, #12]
   8346a:	e04e      	b.n	8350a <_vfiprintf_r+0x902>
   8346c:	aa0f      	add	r2, sp, #60	; 0x3c
   8346e:	4649      	mov	r1, r9
   83470:	4638      	mov	r0, r7
   83472:	f7ff fb89 	bl	82b88 <__sprint_r.part.0>
   83476:	2800      	cmp	r0, #0
   83478:	f040 813e 	bne.w	836f8 <_vfiprintf_r+0xaf0>
   8347c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8347e:	46d6      	mov	lr, sl
   83480:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83482:	1c48      	adds	r0, r1, #1
   83484:	e77f      	b.n	83386 <_vfiprintf_r+0x77e>
   83486:	aa0f      	add	r2, sp, #60	; 0x3c
   83488:	4659      	mov	r1, fp
   8348a:	4638      	mov	r0, r7
   8348c:	f7ff fb7c 	bl	82b88 <__sprint_r.part.0>
   83490:	b960      	cbnz	r0, 834ac <_vfiprintf_r+0x8a4>
   83492:	9910      	ldr	r1, [sp, #64]	; 0x40
   83494:	46d1      	mov	r9, sl
   83496:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83498:	1c48      	adds	r0, r1, #1
   8349a:	e7bd      	b.n	83418 <_vfiprintf_r+0x810>
   8349c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8349e:	f8dd b010 	ldr.w	fp, [sp, #16]
   834a2:	2b00      	cmp	r3, #0
   834a4:	f040 81ca 	bne.w	8383c <_vfiprintf_r+0xc34>
   834a8:	2300      	movs	r3, #0
   834aa:	9310      	str	r3, [sp, #64]	; 0x40
   834ac:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   834b0:	f013 0f01 	tst.w	r3, #1
   834b4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   834b8:	d102      	bne.n	834c0 <_vfiprintf_r+0x8b8>
   834ba:	059a      	lsls	r2, r3, #22
   834bc:	f140 80dd 	bpl.w	8367a <_vfiprintf_r+0xa72>
   834c0:	065b      	lsls	r3, r3, #25
   834c2:	f53f acad 	bmi.w	82e20 <_vfiprintf_r+0x218>
   834c6:	9803      	ldr	r0, [sp, #12]
   834c8:	b02d      	add	sp, #180	; 0xb4
   834ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834ce:	2a00      	cmp	r2, #0
   834d0:	f040 8105 	bne.w	836de <_vfiprintf_r+0xad6>
   834d4:	2301      	movs	r3, #1
   834d6:	46d1      	mov	r9, sl
   834d8:	9a05      	ldr	r2, [sp, #20]
   834da:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   834de:	921d      	str	r2, [sp, #116]	; 0x74
   834e0:	9211      	str	r2, [sp, #68]	; 0x44
   834e2:	9310      	str	r3, [sp, #64]	; 0x40
   834e4:	f109 0908 	add.w	r9, r9, #8
   834e8:	9b02      	ldr	r3, [sp, #8]
   834ea:	0759      	lsls	r1, r3, #29
   834ec:	d504      	bpl.n	834f8 <_vfiprintf_r+0x8f0>
   834ee:	9b08      	ldr	r3, [sp, #32]
   834f0:	9901      	ldr	r1, [sp, #4]
   834f2:	1a5c      	subs	r4, r3, r1
   834f4:	2c00      	cmp	r4, #0
   834f6:	dc81      	bgt.n	833fc <_vfiprintf_r+0x7f4>
   834f8:	9b03      	ldr	r3, [sp, #12]
   834fa:	9908      	ldr	r1, [sp, #32]
   834fc:	9801      	ldr	r0, [sp, #4]
   834fe:	4281      	cmp	r1, r0
   83500:	bfac      	ite	ge
   83502:	185b      	addge	r3, r3, r1
   83504:	181b      	addlt	r3, r3, r0
   83506:	9303      	str	r3, [sp, #12]
   83508:	bb72      	cbnz	r2, 83568 <_vfiprintf_r+0x960>
   8350a:	2300      	movs	r3, #0
   8350c:	46d1      	mov	r9, sl
   8350e:	9310      	str	r3, [sp, #64]	; 0x40
   83510:	f7ff bbb7 	b.w	82c82 <_vfiprintf_r+0x7a>
   83514:	aa0f      	add	r2, sp, #60	; 0x3c
   83516:	9904      	ldr	r1, [sp, #16]
   83518:	4620      	mov	r0, r4
   8351a:	f7ff fb35 	bl	82b88 <__sprint_r.part.0>
   8351e:	bb50      	cbnz	r0, 83576 <_vfiprintf_r+0x96e>
   83520:	9910      	ldr	r1, [sp, #64]	; 0x40
   83522:	46d4      	mov	ip, sl
   83524:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83526:	f101 0e01 	add.w	lr, r1, #1
   8352a:	e54a      	b.n	82fc2 <_vfiprintf_r+0x3ba>
   8352c:	2a00      	cmp	r2, #0
   8352e:	f47f aee5 	bne.w	832fc <_vfiprintf_r+0x6f4>
   83532:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   83536:	2900      	cmp	r1, #0
   83538:	f000 811a 	beq.w	83770 <_vfiprintf_r+0xb68>
   8353c:	2201      	movs	r2, #1
   8353e:	46d1      	mov	r9, sl
   83540:	4610      	mov	r0, r2
   83542:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   83546:	921d      	str	r2, [sp, #116]	; 0x74
   83548:	911c      	str	r1, [sp, #112]	; 0x70
   8354a:	4601      	mov	r1, r0
   8354c:	f109 0908 	add.w	r9, r9, #8
   83550:	3001      	adds	r0, #1
   83552:	e508      	b.n	82f66 <_vfiprintf_r+0x35e>
   83554:	9b02      	ldr	r3, [sp, #8]
   83556:	2a01      	cmp	r2, #1
   83558:	f000 8097 	beq.w	8368a <_vfiprintf_r+0xa82>
   8355c:	2a02      	cmp	r2, #2
   8355e:	d10d      	bne.n	8357c <_vfiprintf_r+0x974>
   83560:	9302      	str	r3, [sp, #8]
   83562:	2600      	movs	r6, #0
   83564:	2700      	movs	r7, #0
   83566:	e5b2      	b.n	830ce <_vfiprintf_r+0x4c6>
   83568:	aa0f      	add	r2, sp, #60	; 0x3c
   8356a:	9904      	ldr	r1, [sp, #16]
   8356c:	9806      	ldr	r0, [sp, #24]
   8356e:	f7ff fb0b 	bl	82b88 <__sprint_r.part.0>
   83572:	2800      	cmp	r0, #0
   83574:	d0c9      	beq.n	8350a <_vfiprintf_r+0x902>
   83576:	f8dd b010 	ldr.w	fp, [sp, #16]
   8357a:	e797      	b.n	834ac <_vfiprintf_r+0x8a4>
   8357c:	2600      	movs	r6, #0
   8357e:	2700      	movs	r7, #0
   83580:	9302      	str	r3, [sp, #8]
   83582:	4651      	mov	r1, sl
   83584:	e000      	b.n	83588 <_vfiprintf_r+0x980>
   83586:	4659      	mov	r1, fp
   83588:	08f2      	lsrs	r2, r6, #3
   8358a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8358e:	08f8      	lsrs	r0, r7, #3
   83590:	f006 0307 	and.w	r3, r6, #7
   83594:	4607      	mov	r7, r0
   83596:	4616      	mov	r6, r2
   83598:	3330      	adds	r3, #48	; 0x30
   8359a:	ea56 0207 	orrs.w	r2, r6, r7
   8359e:	f801 3c01 	strb.w	r3, [r1, #-1]
   835a2:	f101 3bff 	add.w	fp, r1, #4294967295
   835a6:	d1ee      	bne.n	83586 <_vfiprintf_r+0x97e>
   835a8:	9a02      	ldr	r2, [sp, #8]
   835aa:	07d6      	lsls	r6, r2, #31
   835ac:	f57f ad9f 	bpl.w	830ee <_vfiprintf_r+0x4e6>
   835b0:	2b30      	cmp	r3, #48	; 0x30
   835b2:	f43f ad9c 	beq.w	830ee <_vfiprintf_r+0x4e6>
   835b6:	2330      	movs	r3, #48	; 0x30
   835b8:	3902      	subs	r1, #2
   835ba:	f80b 3c01 	strb.w	r3, [fp, #-1]
   835be:	ebaa 0301 	sub.w	r3, sl, r1
   835c2:	9305      	str	r3, [sp, #20]
   835c4:	468b      	mov	fp, r1
   835c6:	e477      	b.n	82eb8 <_vfiprintf_r+0x2b0>
   835c8:	9b03      	ldr	r3, [sp, #12]
   835ca:	9a08      	ldr	r2, [sp, #32]
   835cc:	428a      	cmp	r2, r1
   835ce:	bfac      	ite	ge
   835d0:	189b      	addge	r3, r3, r2
   835d2:	185b      	addlt	r3, r3, r1
   835d4:	9303      	str	r3, [sp, #12]
   835d6:	e798      	b.n	8350a <_vfiprintf_r+0x902>
   835d8:	2202      	movs	r2, #2
   835da:	e44e      	b.n	82e7a <_vfiprintf_r+0x272>
   835dc:	2f00      	cmp	r7, #0
   835de:	bf08      	it	eq
   835e0:	2e0a      	cmpeq	r6, #10
   835e2:	d351      	bcc.n	83688 <_vfiprintf_r+0xa80>
   835e4:	46d3      	mov	fp, sl
   835e6:	4630      	mov	r0, r6
   835e8:	4639      	mov	r1, r7
   835ea:	220a      	movs	r2, #10
   835ec:	2300      	movs	r3, #0
   835ee:	f001 fe85 	bl	852fc <__aeabi_uldivmod>
   835f2:	3230      	adds	r2, #48	; 0x30
   835f4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   835f8:	4630      	mov	r0, r6
   835fa:	4639      	mov	r1, r7
   835fc:	2300      	movs	r3, #0
   835fe:	220a      	movs	r2, #10
   83600:	f001 fe7c 	bl	852fc <__aeabi_uldivmod>
   83604:	4606      	mov	r6, r0
   83606:	460f      	mov	r7, r1
   83608:	ea56 0307 	orrs.w	r3, r6, r7
   8360c:	d1eb      	bne.n	835e6 <_vfiprintf_r+0x9de>
   8360e:	e56e      	b.n	830ee <_vfiprintf_r+0x4e6>
   83610:	9405      	str	r4, [sp, #20]
   83612:	46d3      	mov	fp, sl
   83614:	e450      	b.n	82eb8 <_vfiprintf_r+0x2b0>
   83616:	aa0f      	add	r2, sp, #60	; 0x3c
   83618:	9904      	ldr	r1, [sp, #16]
   8361a:	9806      	ldr	r0, [sp, #24]
   8361c:	f7ff fab4 	bl	82b88 <__sprint_r.part.0>
   83620:	2800      	cmp	r0, #0
   83622:	d1a8      	bne.n	83576 <_vfiprintf_r+0x96e>
   83624:	46d1      	mov	r9, sl
   83626:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83628:	e75e      	b.n	834e8 <_vfiprintf_r+0x8e0>
   8362a:	aa0f      	add	r2, sp, #60	; 0x3c
   8362c:	9904      	ldr	r1, [sp, #16]
   8362e:	9806      	ldr	r0, [sp, #24]
   83630:	f7ff faaa 	bl	82b88 <__sprint_r.part.0>
   83634:	2800      	cmp	r0, #0
   83636:	d19e      	bne.n	83576 <_vfiprintf_r+0x96e>
   83638:	46d1      	mov	r9, sl
   8363a:	f7ff bbbb 	b.w	82db4 <_vfiprintf_r+0x1ac>
   8363e:	bf00      	nop
   83640:	00085694 	.word	0x00085694
   83644:	00085684 	.word	0x00085684
   83648:	3104      	adds	r1, #4
   8364a:	6816      	ldr	r6, [r2, #0]
   8364c:	2700      	movs	r7, #0
   8364e:	2201      	movs	r2, #1
   83650:	9107      	str	r1, [sp, #28]
   83652:	e412      	b.n	82e7a <_vfiprintf_r+0x272>
   83654:	9807      	ldr	r0, [sp, #28]
   83656:	2700      	movs	r7, #0
   83658:	4601      	mov	r1, r0
   8365a:	3104      	adds	r1, #4
   8365c:	6806      	ldr	r6, [r0, #0]
   8365e:	9107      	str	r1, [sp, #28]
   83660:	e40b      	b.n	82e7a <_vfiprintf_r+0x272>
   83662:	680e      	ldr	r6, [r1, #0]
   83664:	3104      	adds	r1, #4
   83666:	9107      	str	r1, [sp, #28]
   83668:	2700      	movs	r7, #0
   8366a:	e592      	b.n	83192 <_vfiprintf_r+0x58a>
   8366c:	6816      	ldr	r6, [r2, #0]
   8366e:	3204      	adds	r2, #4
   83670:	17f7      	asrs	r7, r6, #31
   83672:	9207      	str	r2, [sp, #28]
   83674:	4630      	mov	r0, r6
   83676:	4639      	mov	r1, r7
   83678:	e512      	b.n	830a0 <_vfiprintf_r+0x498>
   8367a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8367e:	f000 fe75 	bl	8436c <__retarget_lock_release_recursive>
   83682:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83686:	e71b      	b.n	834c0 <_vfiprintf_r+0x8b8>
   83688:	9b02      	ldr	r3, [sp, #8]
   8368a:	9302      	str	r3, [sp, #8]
   8368c:	2301      	movs	r3, #1
   8368e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   83692:	3630      	adds	r6, #48	; 0x30
   83694:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83698:	9305      	str	r3, [sp, #20]
   8369a:	e40d      	b.n	82eb8 <_vfiprintf_r+0x2b0>
   8369c:	aa0f      	add	r2, sp, #60	; 0x3c
   8369e:	9904      	ldr	r1, [sp, #16]
   836a0:	9806      	ldr	r0, [sp, #24]
   836a2:	f7ff fa71 	bl	82b88 <__sprint_r.part.0>
   836a6:	2800      	cmp	r0, #0
   836a8:	f47f af65 	bne.w	83576 <_vfiprintf_r+0x96e>
   836ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   836ae:	46d1      	mov	r9, sl
   836b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836b2:	1c48      	adds	r0, r1, #1
   836b4:	e457      	b.n	82f66 <_vfiprintf_r+0x35e>
   836b6:	aa0f      	add	r2, sp, #60	; 0x3c
   836b8:	9904      	ldr	r1, [sp, #16]
   836ba:	9806      	ldr	r0, [sp, #24]
   836bc:	f7ff fa64 	bl	82b88 <__sprint_r.part.0>
   836c0:	2800      	cmp	r0, #0
   836c2:	f47f af58 	bne.w	83576 <_vfiprintf_r+0x96e>
   836c6:	9910      	ldr	r1, [sp, #64]	; 0x40
   836c8:	46d1      	mov	r9, sl
   836ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836cc:	1c48      	adds	r0, r1, #1
   836ce:	e644      	b.n	8335a <_vfiprintf_r+0x752>
   836d0:	2a00      	cmp	r2, #0
   836d2:	f040 8087 	bne.w	837e4 <_vfiprintf_r+0xbdc>
   836d6:	2001      	movs	r0, #1
   836d8:	4611      	mov	r1, r2
   836da:	46d1      	mov	r9, sl
   836dc:	e641      	b.n	83362 <_vfiprintf_r+0x75a>
   836de:	aa0f      	add	r2, sp, #60	; 0x3c
   836e0:	9904      	ldr	r1, [sp, #16]
   836e2:	9806      	ldr	r0, [sp, #24]
   836e4:	f7ff fa50 	bl	82b88 <__sprint_r.part.0>
   836e8:	2800      	cmp	r0, #0
   836ea:	f47f af44 	bne.w	83576 <_vfiprintf_r+0x96e>
   836ee:	9810      	ldr	r0, [sp, #64]	; 0x40
   836f0:	46d1      	mov	r9, sl
   836f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836f4:	3001      	adds	r0, #1
   836f6:	e668      	b.n	833ca <_vfiprintf_r+0x7c2>
   836f8:	46cb      	mov	fp, r9
   836fa:	e6d7      	b.n	834ac <_vfiprintf_r+0x8a4>
   836fc:	9d07      	ldr	r5, [sp, #28]
   836fe:	3507      	adds	r5, #7
   83700:	f025 0507 	bic.w	r5, r5, #7
   83704:	f105 0208 	add.w	r2, r5, #8
   83708:	e9d5 0100 	ldrd	r0, r1, [r5]
   8370c:	9207      	str	r2, [sp, #28]
   8370e:	4606      	mov	r6, r0
   83710:	460f      	mov	r7, r1
   83712:	e4c5      	b.n	830a0 <_vfiprintf_r+0x498>
   83714:	9d07      	ldr	r5, [sp, #28]
   83716:	3507      	adds	r5, #7
   83718:	f025 0207 	bic.w	r2, r5, #7
   8371c:	f102 0108 	add.w	r1, r2, #8
   83720:	e9d2 6700 	ldrd	r6, r7, [r2]
   83724:	9107      	str	r1, [sp, #28]
   83726:	2201      	movs	r2, #1
   83728:	f7ff bba7 	b.w	82e7a <_vfiprintf_r+0x272>
   8372c:	9d07      	ldr	r5, [sp, #28]
   8372e:	3507      	adds	r5, #7
   83730:	f025 0207 	bic.w	r2, r5, #7
   83734:	f102 0108 	add.w	r1, r2, #8
   83738:	e9d2 6700 	ldrd	r6, r7, [r2]
   8373c:	9107      	str	r1, [sp, #28]
   8373e:	2200      	movs	r2, #0
   83740:	f7ff bb9b 	b.w	82e7a <_vfiprintf_r+0x272>
   83744:	9d07      	ldr	r5, [sp, #28]
   83746:	3507      	adds	r5, #7
   83748:	f025 0107 	bic.w	r1, r5, #7
   8374c:	f101 0008 	add.w	r0, r1, #8
   83750:	9007      	str	r0, [sp, #28]
   83752:	e9d1 6700 	ldrd	r6, r7, [r1]
   83756:	e51c      	b.n	83192 <_vfiprintf_r+0x58a>
   83758:	46d3      	mov	fp, sl
   8375a:	f7ff bbad 	b.w	82eb8 <_vfiprintf_r+0x2b0>
   8375e:	252d      	movs	r5, #45	; 0x2d
   83760:	4276      	negs	r6, r6
   83762:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83766:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8376a:	2201      	movs	r2, #1
   8376c:	f7ff bb8a 	b.w	82e84 <_vfiprintf_r+0x27c>
   83770:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83772:	b9b3      	cbnz	r3, 837a2 <_vfiprintf_r+0xb9a>
   83774:	4611      	mov	r1, r2
   83776:	2001      	movs	r0, #1
   83778:	46d1      	mov	r9, sl
   8377a:	e5f2      	b.n	83362 <_vfiprintf_r+0x75a>
   8377c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83780:	f000 fdf4 	bl	8436c <__retarget_lock_release_recursive>
   83784:	f04f 33ff 	mov.w	r3, #4294967295
   83788:	9303      	str	r3, [sp, #12]
   8378a:	f7ff bb4c 	b.w	82e26 <_vfiprintf_r+0x21e>
   8378e:	aa0f      	add	r2, sp, #60	; 0x3c
   83790:	9904      	ldr	r1, [sp, #16]
   83792:	9806      	ldr	r0, [sp, #24]
   83794:	f7ff f9f8 	bl	82b88 <__sprint_r.part.0>
   83798:	2800      	cmp	r0, #0
   8379a:	f47f aeec 	bne.w	83576 <_vfiprintf_r+0x96e>
   8379e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   837a0:	e6aa      	b.n	834f8 <_vfiprintf_r+0x8f0>
   837a2:	2202      	movs	r2, #2
   837a4:	ab0e      	add	r3, sp, #56	; 0x38
   837a6:	921d      	str	r2, [sp, #116]	; 0x74
   837a8:	931c      	str	r3, [sp, #112]	; 0x70
   837aa:	2001      	movs	r0, #1
   837ac:	46d1      	mov	r9, sl
   837ae:	e5d0      	b.n	83352 <_vfiprintf_r+0x74a>
   837b0:	4d34      	ldr	r5, [pc, #208]	; (83884 <_vfiprintf_r+0xc7c>)
   837b2:	e5fd      	b.n	833b0 <_vfiprintf_r+0x7a8>
   837b4:	9a07      	ldr	r2, [sp, #28]
   837b6:	4613      	mov	r3, r2
   837b8:	3304      	adds	r3, #4
   837ba:	9307      	str	r3, [sp, #28]
   837bc:	9b03      	ldr	r3, [sp, #12]
   837be:	6811      	ldr	r1, [r2, #0]
   837c0:	17dd      	asrs	r5, r3, #31
   837c2:	461a      	mov	r2, r3
   837c4:	462b      	mov	r3, r5
   837c6:	e9c1 2300 	strd	r2, r3, [r1]
   837ca:	f7ff ba5a 	b.w	82c82 <_vfiprintf_r+0x7a>
   837ce:	4658      	mov	r0, fp
   837d0:	9507      	str	r5, [sp, #28]
   837d2:	9302      	str	r3, [sp, #8]
   837d4:	f7ff f9aa 	bl	82b2c <strlen>
   837d8:	2400      	movs	r4, #0
   837da:	9005      	str	r0, [sp, #20]
   837dc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   837e0:	f7ff bb6a 	b.w	82eb8 <_vfiprintf_r+0x2b0>
   837e4:	aa0f      	add	r2, sp, #60	; 0x3c
   837e6:	9904      	ldr	r1, [sp, #16]
   837e8:	9806      	ldr	r0, [sp, #24]
   837ea:	f7ff f9cd 	bl	82b88 <__sprint_r.part.0>
   837ee:	2800      	cmp	r0, #0
   837f0:	f47f aec1 	bne.w	83576 <_vfiprintf_r+0x96e>
   837f4:	9910      	ldr	r1, [sp, #64]	; 0x40
   837f6:	46d1      	mov	r9, sl
   837f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   837fa:	1c48      	adds	r0, r1, #1
   837fc:	e5b1      	b.n	83362 <_vfiprintf_r+0x75a>
   837fe:	9910      	ldr	r1, [sp, #64]	; 0x40
   83800:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83802:	3101      	adds	r1, #1
   83804:	4e20      	ldr	r6, [pc, #128]	; (83888 <_vfiprintf_r+0xc80>)
   83806:	f7ff bb9c 	b.w	82f42 <_vfiprintf_r+0x33a>
   8380a:	2c06      	cmp	r4, #6
   8380c:	bf28      	it	cs
   8380e:	2406      	movcs	r4, #6
   83810:	9507      	str	r5, [sp, #28]
   83812:	9405      	str	r4, [sp, #20]
   83814:	9401      	str	r4, [sp, #4]
   83816:	f8df b074 	ldr.w	fp, [pc, #116]	; 8388c <_vfiprintf_r+0xc84>
   8381a:	e4e3      	b.n	831e4 <_vfiprintf_r+0x5dc>
   8381c:	9810      	ldr	r0, [sp, #64]	; 0x40
   8381e:	4e1a      	ldr	r6, [pc, #104]	; (83888 <_vfiprintf_r+0xc80>)
   83820:	3001      	adds	r0, #1
   83822:	e60e      	b.n	83442 <_vfiprintf_r+0x83a>
   83824:	4686      	mov	lr, r0
   83826:	4d17      	ldr	r5, [pc, #92]	; (83884 <_vfiprintf_r+0xc7c>)
   83828:	f7ff bbe2 	b.w	82ff0 <_vfiprintf_r+0x3e8>
   8382c:	9405      	str	r4, [sp, #20]
   8382e:	9507      	str	r5, [sp, #28]
   83830:	9302      	str	r3, [sp, #8]
   83832:	4604      	mov	r4, r0
   83834:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83838:	f7ff bb3e 	b.w	82eb8 <_vfiprintf_r+0x2b0>
   8383c:	9806      	ldr	r0, [sp, #24]
   8383e:	aa0f      	add	r2, sp, #60	; 0x3c
   83840:	4659      	mov	r1, fp
   83842:	f7ff f9a1 	bl	82b88 <__sprint_r.part.0>
   83846:	2800      	cmp	r0, #0
   83848:	f43f ae2e 	beq.w	834a8 <_vfiprintf_r+0x8a0>
   8384c:	e62e      	b.n	834ac <_vfiprintf_r+0x8a4>
   8384e:	9907      	ldr	r1, [sp, #28]
   83850:	f898 2001 	ldrb.w	r2, [r8, #1]
   83854:	680c      	ldr	r4, [r1, #0]
   83856:	3104      	adds	r1, #4
   83858:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8385c:	46b8      	mov	r8, r7
   8385e:	9107      	str	r1, [sp, #28]
   83860:	f7ff ba44 	b.w	82cec <_vfiprintf_r+0xe4>
   83864:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83868:	e4a7      	b.n	831ba <_vfiprintf_r+0x5b2>
   8386a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8386e:	e521      	b.n	832b4 <_vfiprintf_r+0x6ac>
   83870:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83874:	e47c      	b.n	83170 <_vfiprintf_r+0x568>
   83876:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8387a:	e43f      	b.n	830fc <_vfiprintf_r+0x4f4>
   8387c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83880:	f7ff bbfa 	b.w	83078 <_vfiprintf_r+0x470>
   83884:	00085694 	.word	0x00085694
   83888:	00085684 	.word	0x00085684
   8388c:	0008567c 	.word	0x0008567c

00083890 <__sbprintf>:
   83890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83894:	460c      	mov	r4, r1
   83896:	f04f 0e00 	mov.w	lr, #0
   8389a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8389e:	4606      	mov	r6, r0
   838a0:	4617      	mov	r7, r2
   838a2:	4698      	mov	r8, r3
   838a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   838a6:	89e3      	ldrh	r3, [r4, #14]
   838a8:	8989      	ldrh	r1, [r1, #12]
   838aa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   838ae:	f021 0102 	bic.w	r1, r1, #2
   838b2:	9219      	str	r2, [sp, #100]	; 0x64
   838b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   838b8:	69e2      	ldr	r2, [r4, #28]
   838ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   838bc:	f8ad 100c 	strh.w	r1, [sp, #12]
   838c0:	a816      	add	r0, sp, #88	; 0x58
   838c2:	a91a      	add	r1, sp, #104	; 0x68
   838c4:	f8cd e018 	str.w	lr, [sp, #24]
   838c8:	9207      	str	r2, [sp, #28]
   838ca:	9309      	str	r3, [sp, #36]	; 0x24
   838cc:	9100      	str	r1, [sp, #0]
   838ce:	9104      	str	r1, [sp, #16]
   838d0:	9502      	str	r5, [sp, #8]
   838d2:	9505      	str	r5, [sp, #20]
   838d4:	f000 fd44 	bl	84360 <__retarget_lock_init_recursive>
   838d8:	4643      	mov	r3, r8
   838da:	463a      	mov	r2, r7
   838dc:	4669      	mov	r1, sp
   838de:	4630      	mov	r0, r6
   838e0:	f7ff f992 	bl	82c08 <_vfiprintf_r>
   838e4:	1e05      	subs	r5, r0, #0
   838e6:	db07      	blt.n	838f8 <__sbprintf+0x68>
   838e8:	4630      	mov	r0, r6
   838ea:	4669      	mov	r1, sp
   838ec:	f000 f924 	bl	83b38 <_fflush_r>
   838f0:	2800      	cmp	r0, #0
   838f2:	bf18      	it	ne
   838f4:	f04f 35ff 	movne.w	r5, #4294967295
   838f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   838fc:	065b      	lsls	r3, r3, #25
   838fe:	d503      	bpl.n	83908 <__sbprintf+0x78>
   83900:	89a3      	ldrh	r3, [r4, #12]
   83902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83906:	81a3      	strh	r3, [r4, #12]
   83908:	9816      	ldr	r0, [sp, #88]	; 0x58
   8390a:	f000 fd2b 	bl	84364 <__retarget_lock_close_recursive>
   8390e:	4628      	mov	r0, r5
   83910:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083918 <__swsetup_r>:
   83918:	b538      	push	{r3, r4, r5, lr}
   8391a:	4b30      	ldr	r3, [pc, #192]	; (839dc <__swsetup_r+0xc4>)
   8391c:	4605      	mov	r5, r0
   8391e:	6818      	ldr	r0, [r3, #0]
   83920:	460c      	mov	r4, r1
   83922:	b110      	cbz	r0, 8392a <__swsetup_r+0x12>
   83924:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83926:	2b00      	cmp	r3, #0
   83928:	d038      	beq.n	8399c <__swsetup_r+0x84>
   8392a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8392e:	b293      	uxth	r3, r2
   83930:	0718      	lsls	r0, r3, #28
   83932:	d50c      	bpl.n	8394e <__swsetup_r+0x36>
   83934:	6920      	ldr	r0, [r4, #16]
   83936:	b1a8      	cbz	r0, 83964 <__swsetup_r+0x4c>
   83938:	f013 0201 	ands.w	r2, r3, #1
   8393c:	d01e      	beq.n	8397c <__swsetup_r+0x64>
   8393e:	2200      	movs	r2, #0
   83940:	6963      	ldr	r3, [r4, #20]
   83942:	60a2      	str	r2, [r4, #8]
   83944:	425b      	negs	r3, r3
   83946:	61a3      	str	r3, [r4, #24]
   83948:	b1f0      	cbz	r0, 83988 <__swsetup_r+0x70>
   8394a:	2000      	movs	r0, #0
   8394c:	bd38      	pop	{r3, r4, r5, pc}
   8394e:	06d9      	lsls	r1, r3, #27
   83950:	d53b      	bpl.n	839ca <__swsetup_r+0xb2>
   83952:	0758      	lsls	r0, r3, #29
   83954:	d425      	bmi.n	839a2 <__swsetup_r+0x8a>
   83956:	6920      	ldr	r0, [r4, #16]
   83958:	f042 0308 	orr.w	r3, r2, #8
   8395c:	81a3      	strh	r3, [r4, #12]
   8395e:	b29b      	uxth	r3, r3
   83960:	2800      	cmp	r0, #0
   83962:	d1e9      	bne.n	83938 <__swsetup_r+0x20>
   83964:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83968:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8396c:	d0e4      	beq.n	83938 <__swsetup_r+0x20>
   8396e:	4628      	mov	r0, r5
   83970:	4621      	mov	r1, r4
   83972:	f000 fd2b 	bl	843cc <__smakebuf_r>
   83976:	89a3      	ldrh	r3, [r4, #12]
   83978:	6920      	ldr	r0, [r4, #16]
   8397a:	e7dd      	b.n	83938 <__swsetup_r+0x20>
   8397c:	0799      	lsls	r1, r3, #30
   8397e:	bf58      	it	pl
   83980:	6962      	ldrpl	r2, [r4, #20]
   83982:	60a2      	str	r2, [r4, #8]
   83984:	2800      	cmp	r0, #0
   83986:	d1e0      	bne.n	8394a <__swsetup_r+0x32>
   83988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8398c:	061a      	lsls	r2, r3, #24
   8398e:	d5dd      	bpl.n	8394c <__swsetup_r+0x34>
   83990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83994:	81a3      	strh	r3, [r4, #12]
   83996:	f04f 30ff 	mov.w	r0, #4294967295
   8399a:	bd38      	pop	{r3, r4, r5, pc}
   8399c:	f000 f924 	bl	83be8 <__sinit>
   839a0:	e7c3      	b.n	8392a <__swsetup_r+0x12>
   839a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   839a4:	b151      	cbz	r1, 839bc <__swsetup_r+0xa4>
   839a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   839aa:	4299      	cmp	r1, r3
   839ac:	d004      	beq.n	839b8 <__swsetup_r+0xa0>
   839ae:	4628      	mov	r0, r5
   839b0:	f000 fa40 	bl	83e34 <_free_r>
   839b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   839b8:	2300      	movs	r3, #0
   839ba:	6323      	str	r3, [r4, #48]	; 0x30
   839bc:	2300      	movs	r3, #0
   839be:	6920      	ldr	r0, [r4, #16]
   839c0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   839c4:	e884 0009 	stmia.w	r4, {r0, r3}
   839c8:	e7c6      	b.n	83958 <__swsetup_r+0x40>
   839ca:	2309      	movs	r3, #9
   839cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   839d0:	602b      	str	r3, [r5, #0]
   839d2:	f04f 30ff 	mov.w	r0, #4294967295
   839d6:	81a2      	strh	r2, [r4, #12]
   839d8:	bd38      	pop	{r3, r4, r5, pc}
   839da:	bf00      	nop
   839dc:	20070134 	.word	0x20070134

000839e0 <register_fini>:
   839e0:	4b02      	ldr	r3, [pc, #8]	; (839ec <register_fini+0xc>)
   839e2:	b113      	cbz	r3, 839ea <register_fini+0xa>
   839e4:	4802      	ldr	r0, [pc, #8]	; (839f0 <register_fini+0x10>)
   839e6:	f000 b805 	b.w	839f4 <atexit>
   839ea:	4770      	bx	lr
   839ec:	00000000 	.word	0x00000000
   839f0:	00083c61 	.word	0x00083c61

000839f4 <atexit>:
   839f4:	2300      	movs	r3, #0
   839f6:	4601      	mov	r1, r0
   839f8:	461a      	mov	r2, r3
   839fa:	4618      	mov	r0, r3
   839fc:	f001 bb56 	b.w	850ac <__register_exitproc>

00083a00 <__sflush_r>:
   83a00:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a08:	b29a      	uxth	r2, r3
   83a0a:	460d      	mov	r5, r1
   83a0c:	0711      	lsls	r1, r2, #28
   83a0e:	4680      	mov	r8, r0
   83a10:	d43a      	bmi.n	83a88 <__sflush_r+0x88>
   83a12:	686a      	ldr	r2, [r5, #4]
   83a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83a18:	2a00      	cmp	r2, #0
   83a1a:	81ab      	strh	r3, [r5, #12]
   83a1c:	dd70      	ble.n	83b00 <__sflush_r+0x100>
   83a1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83a20:	2c00      	cmp	r4, #0
   83a22:	d04a      	beq.n	83aba <__sflush_r+0xba>
   83a24:	2200      	movs	r2, #0
   83a26:	b29b      	uxth	r3, r3
   83a28:	f8d8 6000 	ldr.w	r6, [r8]
   83a2c:	f8c8 2000 	str.w	r2, [r8]
   83a30:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83a34:	d068      	beq.n	83b08 <__sflush_r+0x108>
   83a36:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83a38:	075f      	lsls	r7, r3, #29
   83a3a:	d505      	bpl.n	83a48 <__sflush_r+0x48>
   83a3c:	6869      	ldr	r1, [r5, #4]
   83a3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83a40:	1a52      	subs	r2, r2, r1
   83a42:	b10b      	cbz	r3, 83a48 <__sflush_r+0x48>
   83a44:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83a46:	1ad2      	subs	r2, r2, r3
   83a48:	2300      	movs	r3, #0
   83a4a:	69e9      	ldr	r1, [r5, #28]
   83a4c:	4640      	mov	r0, r8
   83a4e:	47a0      	blx	r4
   83a50:	1c44      	adds	r4, r0, #1
   83a52:	d03d      	beq.n	83ad0 <__sflush_r+0xd0>
   83a54:	2100      	movs	r1, #0
   83a56:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83a5a:	692a      	ldr	r2, [r5, #16]
   83a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83a60:	81ab      	strh	r3, [r5, #12]
   83a62:	04db      	lsls	r3, r3, #19
   83a64:	6069      	str	r1, [r5, #4]
   83a66:	602a      	str	r2, [r5, #0]
   83a68:	d448      	bmi.n	83afc <__sflush_r+0xfc>
   83a6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83a6c:	f8c8 6000 	str.w	r6, [r8]
   83a70:	b319      	cbz	r1, 83aba <__sflush_r+0xba>
   83a72:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83a76:	4299      	cmp	r1, r3
   83a78:	d002      	beq.n	83a80 <__sflush_r+0x80>
   83a7a:	4640      	mov	r0, r8
   83a7c:	f000 f9da 	bl	83e34 <_free_r>
   83a80:	2000      	movs	r0, #0
   83a82:	6328      	str	r0, [r5, #48]	; 0x30
   83a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a88:	692e      	ldr	r6, [r5, #16]
   83a8a:	b1b6      	cbz	r6, 83aba <__sflush_r+0xba>
   83a8c:	0791      	lsls	r1, r2, #30
   83a8e:	bf18      	it	ne
   83a90:	2300      	movne	r3, #0
   83a92:	682c      	ldr	r4, [r5, #0]
   83a94:	bf08      	it	eq
   83a96:	696b      	ldreq	r3, [r5, #20]
   83a98:	602e      	str	r6, [r5, #0]
   83a9a:	1ba4      	subs	r4, r4, r6
   83a9c:	60ab      	str	r3, [r5, #8]
   83a9e:	e00a      	b.n	83ab6 <__sflush_r+0xb6>
   83aa0:	4623      	mov	r3, r4
   83aa2:	4632      	mov	r2, r6
   83aa4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83aa6:	69e9      	ldr	r1, [r5, #28]
   83aa8:	4640      	mov	r0, r8
   83aaa:	47b8      	blx	r7
   83aac:	2800      	cmp	r0, #0
   83aae:	eba4 0400 	sub.w	r4, r4, r0
   83ab2:	4406      	add	r6, r0
   83ab4:	dd04      	ble.n	83ac0 <__sflush_r+0xc0>
   83ab6:	2c00      	cmp	r4, #0
   83ab8:	dcf2      	bgt.n	83aa0 <__sflush_r+0xa0>
   83aba:	2000      	movs	r0, #0
   83abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ac0:	89ab      	ldrh	r3, [r5, #12]
   83ac2:	f04f 30ff 	mov.w	r0, #4294967295
   83ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83aca:	81ab      	strh	r3, [r5, #12]
   83acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ad0:	f8d8 4000 	ldr.w	r4, [r8]
   83ad4:	2c1d      	cmp	r4, #29
   83ad6:	d8f3      	bhi.n	83ac0 <__sflush_r+0xc0>
   83ad8:	4b16      	ldr	r3, [pc, #88]	; (83b34 <__sflush_r+0x134>)
   83ada:	40e3      	lsrs	r3, r4
   83adc:	43db      	mvns	r3, r3
   83ade:	f013 0301 	ands.w	r3, r3, #1
   83ae2:	d1ed      	bne.n	83ac0 <__sflush_r+0xc0>
   83ae4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83ae8:	6929      	ldr	r1, [r5, #16]
   83aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83aee:	81aa      	strh	r2, [r5, #12]
   83af0:	04d2      	lsls	r2, r2, #19
   83af2:	606b      	str	r3, [r5, #4]
   83af4:	6029      	str	r1, [r5, #0]
   83af6:	d5b8      	bpl.n	83a6a <__sflush_r+0x6a>
   83af8:	2c00      	cmp	r4, #0
   83afa:	d1b6      	bne.n	83a6a <__sflush_r+0x6a>
   83afc:	6528      	str	r0, [r5, #80]	; 0x50
   83afe:	e7b4      	b.n	83a6a <__sflush_r+0x6a>
   83b00:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83b02:	2a00      	cmp	r2, #0
   83b04:	dc8b      	bgt.n	83a1e <__sflush_r+0x1e>
   83b06:	e7d8      	b.n	83aba <__sflush_r+0xba>
   83b08:	2301      	movs	r3, #1
   83b0a:	69e9      	ldr	r1, [r5, #28]
   83b0c:	4640      	mov	r0, r8
   83b0e:	47a0      	blx	r4
   83b10:	1c43      	adds	r3, r0, #1
   83b12:	4602      	mov	r2, r0
   83b14:	d002      	beq.n	83b1c <__sflush_r+0x11c>
   83b16:	89ab      	ldrh	r3, [r5, #12]
   83b18:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83b1a:	e78d      	b.n	83a38 <__sflush_r+0x38>
   83b1c:	f8d8 3000 	ldr.w	r3, [r8]
   83b20:	2b00      	cmp	r3, #0
   83b22:	d0f8      	beq.n	83b16 <__sflush_r+0x116>
   83b24:	2b1d      	cmp	r3, #29
   83b26:	d001      	beq.n	83b2c <__sflush_r+0x12c>
   83b28:	2b16      	cmp	r3, #22
   83b2a:	d1c9      	bne.n	83ac0 <__sflush_r+0xc0>
   83b2c:	f8c8 6000 	str.w	r6, [r8]
   83b30:	e7c3      	b.n	83aba <__sflush_r+0xba>
   83b32:	bf00      	nop
   83b34:	20400001 	.word	0x20400001

00083b38 <_fflush_r>:
   83b38:	b538      	push	{r3, r4, r5, lr}
   83b3a:	460d      	mov	r5, r1
   83b3c:	4604      	mov	r4, r0
   83b3e:	b108      	cbz	r0, 83b44 <_fflush_r+0xc>
   83b40:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b42:	b1bb      	cbz	r3, 83b74 <_fflush_r+0x3c>
   83b44:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83b48:	b188      	cbz	r0, 83b6e <_fflush_r+0x36>
   83b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83b4c:	07db      	lsls	r3, r3, #31
   83b4e:	d401      	bmi.n	83b54 <_fflush_r+0x1c>
   83b50:	0581      	lsls	r1, r0, #22
   83b52:	d517      	bpl.n	83b84 <_fflush_r+0x4c>
   83b54:	4620      	mov	r0, r4
   83b56:	4629      	mov	r1, r5
   83b58:	f7ff ff52 	bl	83a00 <__sflush_r>
   83b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83b5e:	4604      	mov	r4, r0
   83b60:	07da      	lsls	r2, r3, #31
   83b62:	d402      	bmi.n	83b6a <_fflush_r+0x32>
   83b64:	89ab      	ldrh	r3, [r5, #12]
   83b66:	059b      	lsls	r3, r3, #22
   83b68:	d507      	bpl.n	83b7a <_fflush_r+0x42>
   83b6a:	4620      	mov	r0, r4
   83b6c:	bd38      	pop	{r3, r4, r5, pc}
   83b6e:	4604      	mov	r4, r0
   83b70:	4620      	mov	r0, r4
   83b72:	bd38      	pop	{r3, r4, r5, pc}
   83b74:	f000 f838 	bl	83be8 <__sinit>
   83b78:	e7e4      	b.n	83b44 <_fflush_r+0xc>
   83b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83b7c:	f000 fbf6 	bl	8436c <__retarget_lock_release_recursive>
   83b80:	4620      	mov	r0, r4
   83b82:	bd38      	pop	{r3, r4, r5, pc}
   83b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83b86:	f000 fbef 	bl	84368 <__retarget_lock_acquire_recursive>
   83b8a:	e7e3      	b.n	83b54 <_fflush_r+0x1c>

00083b8c <_cleanup_r>:
   83b8c:	4901      	ldr	r1, [pc, #4]	; (83b94 <_cleanup_r+0x8>)
   83b8e:	f000 bbb1 	b.w	842f4 <_fwalk_reent>
   83b92:	bf00      	nop
   83b94:	00085195 	.word	0x00085195

00083b98 <std.isra.0>:
   83b98:	2300      	movs	r3, #0
   83b9a:	b510      	push	{r4, lr}
   83b9c:	4604      	mov	r4, r0
   83b9e:	8181      	strh	r1, [r0, #12]
   83ba0:	81c2      	strh	r2, [r0, #14]
   83ba2:	6003      	str	r3, [r0, #0]
   83ba4:	6043      	str	r3, [r0, #4]
   83ba6:	6083      	str	r3, [r0, #8]
   83ba8:	6643      	str	r3, [r0, #100]	; 0x64
   83baa:	6103      	str	r3, [r0, #16]
   83bac:	6143      	str	r3, [r0, #20]
   83bae:	6183      	str	r3, [r0, #24]
   83bb0:	4619      	mov	r1, r3
   83bb2:	2208      	movs	r2, #8
   83bb4:	305c      	adds	r0, #92	; 0x5c
   83bb6:	f7fe fe9b 	bl	828f0 <memset>
   83bba:	4807      	ldr	r0, [pc, #28]	; (83bd8 <std.isra.0+0x40>)
   83bbc:	4907      	ldr	r1, [pc, #28]	; (83bdc <std.isra.0+0x44>)
   83bbe:	4a08      	ldr	r2, [pc, #32]	; (83be0 <std.isra.0+0x48>)
   83bc0:	4b08      	ldr	r3, [pc, #32]	; (83be4 <std.isra.0+0x4c>)
   83bc2:	6220      	str	r0, [r4, #32]
   83bc4:	61e4      	str	r4, [r4, #28]
   83bc6:	6261      	str	r1, [r4, #36]	; 0x24
   83bc8:	62a2      	str	r2, [r4, #40]	; 0x28
   83bca:	62e3      	str	r3, [r4, #44]	; 0x2c
   83bcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83bd4:	f000 bbc4 	b.w	84360 <__retarget_lock_init_recursive>
   83bd8:	00084edd 	.word	0x00084edd
   83bdc:	00084f01 	.word	0x00084f01
   83be0:	00084f3d 	.word	0x00084f3d
   83be4:	00084f5d 	.word	0x00084f5d

00083be8 <__sinit>:
   83be8:	b510      	push	{r4, lr}
   83bea:	4604      	mov	r4, r0
   83bec:	4814      	ldr	r0, [pc, #80]	; (83c40 <__sinit+0x58>)
   83bee:	f000 fbbb 	bl	84368 <__retarget_lock_acquire_recursive>
   83bf2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83bf4:	b9fa      	cbnz	r2, 83c36 <__sinit+0x4e>
   83bf6:	2003      	movs	r0, #3
   83bf8:	4912      	ldr	r1, [pc, #72]	; (83c44 <__sinit+0x5c>)
   83bfa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83bfe:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83c02:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83c06:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83c0a:	63e1      	str	r1, [r4, #60]	; 0x3c
   83c0c:	6860      	ldr	r0, [r4, #4]
   83c0e:	2104      	movs	r1, #4
   83c10:	f7ff ffc2 	bl	83b98 <std.isra.0>
   83c14:	68a0      	ldr	r0, [r4, #8]
   83c16:	2201      	movs	r2, #1
   83c18:	2109      	movs	r1, #9
   83c1a:	f7ff ffbd 	bl	83b98 <std.isra.0>
   83c1e:	68e0      	ldr	r0, [r4, #12]
   83c20:	2202      	movs	r2, #2
   83c22:	2112      	movs	r1, #18
   83c24:	f7ff ffb8 	bl	83b98 <std.isra.0>
   83c28:	2301      	movs	r3, #1
   83c2a:	4805      	ldr	r0, [pc, #20]	; (83c40 <__sinit+0x58>)
   83c2c:	63a3      	str	r3, [r4, #56]	; 0x38
   83c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c32:	f000 bb9b 	b.w	8436c <__retarget_lock_release_recursive>
   83c36:	4802      	ldr	r0, [pc, #8]	; (83c40 <__sinit+0x58>)
   83c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c3c:	f000 bb96 	b.w	8436c <__retarget_lock_release_recursive>
   83c40:	2007c558 	.word	0x2007c558
   83c44:	00083b8d 	.word	0x00083b8d

00083c48 <__sfp_lock_acquire>:
   83c48:	4801      	ldr	r0, [pc, #4]	; (83c50 <__sfp_lock_acquire+0x8>)
   83c4a:	f000 bb8d 	b.w	84368 <__retarget_lock_acquire_recursive>
   83c4e:	bf00      	nop
   83c50:	2007c56c 	.word	0x2007c56c

00083c54 <__sfp_lock_release>:
   83c54:	4801      	ldr	r0, [pc, #4]	; (83c5c <__sfp_lock_release+0x8>)
   83c56:	f000 bb89 	b.w	8436c <__retarget_lock_release_recursive>
   83c5a:	bf00      	nop
   83c5c:	2007c56c 	.word	0x2007c56c

00083c60 <__libc_fini_array>:
   83c60:	b538      	push	{r3, r4, r5, lr}
   83c62:	4c0a      	ldr	r4, [pc, #40]	; (83c8c <__libc_fini_array+0x2c>)
   83c64:	4d0a      	ldr	r5, [pc, #40]	; (83c90 <__libc_fini_array+0x30>)
   83c66:	1b64      	subs	r4, r4, r5
   83c68:	10a4      	asrs	r4, r4, #2
   83c6a:	d00a      	beq.n	83c82 <__libc_fini_array+0x22>
   83c6c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83c70:	3b01      	subs	r3, #1
   83c72:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83c76:	3c01      	subs	r4, #1
   83c78:	f855 3904 	ldr.w	r3, [r5], #-4
   83c7c:	4798      	blx	r3
   83c7e:	2c00      	cmp	r4, #0
   83c80:	d1f9      	bne.n	83c76 <__libc_fini_array+0x16>
   83c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83c86:	f001 bda1 	b.w	857cc <_fini>
   83c8a:	bf00      	nop
   83c8c:	000857dc 	.word	0x000857dc
   83c90:	000857d8 	.word	0x000857d8

00083c94 <__fputwc>:
   83c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83c98:	b083      	sub	sp, #12
   83c9a:	4607      	mov	r7, r0
   83c9c:	4688      	mov	r8, r1
   83c9e:	4614      	mov	r4, r2
   83ca0:	f000 fb50 	bl	84344 <__locale_mb_cur_max>
   83ca4:	2801      	cmp	r0, #1
   83ca6:	d033      	beq.n	83d10 <__fputwc+0x7c>
   83ca8:	4642      	mov	r2, r8
   83caa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83cae:	a901      	add	r1, sp, #4
   83cb0:	4638      	mov	r0, r7
   83cb2:	f001 f9af 	bl	85014 <_wcrtomb_r>
   83cb6:	1c42      	adds	r2, r0, #1
   83cb8:	4606      	mov	r6, r0
   83cba:	d022      	beq.n	83d02 <__fputwc+0x6e>
   83cbc:	b390      	cbz	r0, 83d24 <__fputwc+0x90>
   83cbe:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83cc2:	2500      	movs	r5, #0
   83cc4:	f10d 0904 	add.w	r9, sp, #4
   83cc8:	e008      	b.n	83cdc <__fputwc+0x48>
   83cca:	6823      	ldr	r3, [r4, #0]
   83ccc:	1c5a      	adds	r2, r3, #1
   83cce:	6022      	str	r2, [r4, #0]
   83cd0:	7019      	strb	r1, [r3, #0]
   83cd2:	3501      	adds	r5, #1
   83cd4:	42b5      	cmp	r5, r6
   83cd6:	d225      	bcs.n	83d24 <__fputwc+0x90>
   83cd8:	f815 1009 	ldrb.w	r1, [r5, r9]
   83cdc:	68a3      	ldr	r3, [r4, #8]
   83cde:	3b01      	subs	r3, #1
   83ce0:	2b00      	cmp	r3, #0
   83ce2:	60a3      	str	r3, [r4, #8]
   83ce4:	daf1      	bge.n	83cca <__fputwc+0x36>
   83ce6:	69a2      	ldr	r2, [r4, #24]
   83ce8:	4293      	cmp	r3, r2
   83cea:	db01      	blt.n	83cf0 <__fputwc+0x5c>
   83cec:	290a      	cmp	r1, #10
   83cee:	d1ec      	bne.n	83cca <__fputwc+0x36>
   83cf0:	4622      	mov	r2, r4
   83cf2:	4638      	mov	r0, r7
   83cf4:	f001 f936 	bl	84f64 <__swbuf_r>
   83cf8:	1c43      	adds	r3, r0, #1
   83cfa:	d1ea      	bne.n	83cd2 <__fputwc+0x3e>
   83cfc:	b003      	add	sp, #12
   83cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83d02:	89a3      	ldrh	r3, [r4, #12]
   83d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83d08:	81a3      	strh	r3, [r4, #12]
   83d0a:	b003      	add	sp, #12
   83d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83d10:	f108 33ff 	add.w	r3, r8, #4294967295
   83d14:	2bfe      	cmp	r3, #254	; 0xfe
   83d16:	d8c7      	bhi.n	83ca8 <__fputwc+0x14>
   83d18:	fa5f f188 	uxtb.w	r1, r8
   83d1c:	4606      	mov	r6, r0
   83d1e:	f88d 1004 	strb.w	r1, [sp, #4]
   83d22:	e7ce      	b.n	83cc2 <__fputwc+0x2e>
   83d24:	4640      	mov	r0, r8
   83d26:	b003      	add	sp, #12
   83d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083d2c <_fputwc_r>:
   83d2c:	b530      	push	{r4, r5, lr}
   83d2e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83d30:	4614      	mov	r4, r2
   83d32:	f013 0f01 	tst.w	r3, #1
   83d36:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83d3a:	b083      	sub	sp, #12
   83d3c:	4605      	mov	r5, r0
   83d3e:	b29a      	uxth	r2, r3
   83d40:	d101      	bne.n	83d46 <_fputwc_r+0x1a>
   83d42:	0590      	lsls	r0, r2, #22
   83d44:	d51c      	bpl.n	83d80 <_fputwc_r+0x54>
   83d46:	0490      	lsls	r0, r2, #18
   83d48:	d406      	bmi.n	83d58 <_fputwc_r+0x2c>
   83d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83d54:	81a3      	strh	r3, [r4, #12]
   83d56:	6662      	str	r2, [r4, #100]	; 0x64
   83d58:	4628      	mov	r0, r5
   83d5a:	4622      	mov	r2, r4
   83d5c:	f7ff ff9a 	bl	83c94 <__fputwc>
   83d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83d62:	4605      	mov	r5, r0
   83d64:	07da      	lsls	r2, r3, #31
   83d66:	d402      	bmi.n	83d6e <_fputwc_r+0x42>
   83d68:	89a3      	ldrh	r3, [r4, #12]
   83d6a:	059b      	lsls	r3, r3, #22
   83d6c:	d502      	bpl.n	83d74 <_fputwc_r+0x48>
   83d6e:	4628      	mov	r0, r5
   83d70:	b003      	add	sp, #12
   83d72:	bd30      	pop	{r4, r5, pc}
   83d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83d76:	f000 faf9 	bl	8436c <__retarget_lock_release_recursive>
   83d7a:	4628      	mov	r0, r5
   83d7c:	b003      	add	sp, #12
   83d7e:	bd30      	pop	{r4, r5, pc}
   83d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83d82:	9101      	str	r1, [sp, #4]
   83d84:	f000 faf0 	bl	84368 <__retarget_lock_acquire_recursive>
   83d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d8c:	9901      	ldr	r1, [sp, #4]
   83d8e:	b29a      	uxth	r2, r3
   83d90:	e7d9      	b.n	83d46 <_fputwc_r+0x1a>
   83d92:	bf00      	nop

00083d94 <_malloc_trim_r>:
   83d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d96:	460c      	mov	r4, r1
   83d98:	4f23      	ldr	r7, [pc, #140]	; (83e28 <_malloc_trim_r+0x94>)
   83d9a:	4606      	mov	r6, r0
   83d9c:	f000 feca 	bl	84b34 <__malloc_lock>
   83da0:	68bb      	ldr	r3, [r7, #8]
   83da2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83da6:	685d      	ldr	r5, [r3, #4]
   83da8:	310f      	adds	r1, #15
   83daa:	f025 0503 	bic.w	r5, r5, #3
   83dae:	4429      	add	r1, r5
   83db0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83db4:	f021 010f 	bic.w	r1, r1, #15
   83db8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83dbc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83dc0:	db07      	blt.n	83dd2 <_malloc_trim_r+0x3e>
   83dc2:	2100      	movs	r1, #0
   83dc4:	4630      	mov	r0, r6
   83dc6:	f001 f877 	bl	84eb8 <_sbrk_r>
   83dca:	68bb      	ldr	r3, [r7, #8]
   83dcc:	442b      	add	r3, r5
   83dce:	4298      	cmp	r0, r3
   83dd0:	d004      	beq.n	83ddc <_malloc_trim_r+0x48>
   83dd2:	4630      	mov	r0, r6
   83dd4:	f000 feb4 	bl	84b40 <__malloc_unlock>
   83dd8:	2000      	movs	r0, #0
   83dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ddc:	4261      	negs	r1, r4
   83dde:	4630      	mov	r0, r6
   83de0:	f001 f86a 	bl	84eb8 <_sbrk_r>
   83de4:	3001      	adds	r0, #1
   83de6:	d00d      	beq.n	83e04 <_malloc_trim_r+0x70>
   83de8:	4b10      	ldr	r3, [pc, #64]	; (83e2c <_malloc_trim_r+0x98>)
   83dea:	68ba      	ldr	r2, [r7, #8]
   83dec:	6819      	ldr	r1, [r3, #0]
   83dee:	1b2d      	subs	r5, r5, r4
   83df0:	f045 0501 	orr.w	r5, r5, #1
   83df4:	4630      	mov	r0, r6
   83df6:	1b09      	subs	r1, r1, r4
   83df8:	6055      	str	r5, [r2, #4]
   83dfa:	6019      	str	r1, [r3, #0]
   83dfc:	f000 fea0 	bl	84b40 <__malloc_unlock>
   83e00:	2001      	movs	r0, #1
   83e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e04:	2100      	movs	r1, #0
   83e06:	4630      	mov	r0, r6
   83e08:	f001 f856 	bl	84eb8 <_sbrk_r>
   83e0c:	68ba      	ldr	r2, [r7, #8]
   83e0e:	1a83      	subs	r3, r0, r2
   83e10:	2b0f      	cmp	r3, #15
   83e12:	ddde      	ble.n	83dd2 <_malloc_trim_r+0x3e>
   83e14:	4c06      	ldr	r4, [pc, #24]	; (83e30 <_malloc_trim_r+0x9c>)
   83e16:	4905      	ldr	r1, [pc, #20]	; (83e2c <_malloc_trim_r+0x98>)
   83e18:	6824      	ldr	r4, [r4, #0]
   83e1a:	f043 0301 	orr.w	r3, r3, #1
   83e1e:	1b00      	subs	r0, r0, r4
   83e20:	6053      	str	r3, [r2, #4]
   83e22:	6008      	str	r0, [r1, #0]
   83e24:	e7d5      	b.n	83dd2 <_malloc_trim_r+0x3e>
   83e26:	bf00      	nop
   83e28:	200706d0 	.word	0x200706d0
   83e2c:	2007c4c0 	.word	0x2007c4c0
   83e30:	20070ad8 	.word	0x20070ad8

00083e34 <_free_r>:
   83e34:	2900      	cmp	r1, #0
   83e36:	d044      	beq.n	83ec2 <_free_r+0x8e>
   83e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e3c:	460d      	mov	r5, r1
   83e3e:	4680      	mov	r8, r0
   83e40:	f000 fe78 	bl	84b34 <__malloc_lock>
   83e44:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83e48:	4969      	ldr	r1, [pc, #420]	; (83ff0 <_free_r+0x1bc>)
   83e4a:	f1a5 0408 	sub.w	r4, r5, #8
   83e4e:	f027 0301 	bic.w	r3, r7, #1
   83e52:	18e2      	adds	r2, r4, r3
   83e54:	688e      	ldr	r6, [r1, #8]
   83e56:	6850      	ldr	r0, [r2, #4]
   83e58:	42b2      	cmp	r2, r6
   83e5a:	f020 0003 	bic.w	r0, r0, #3
   83e5e:	d05e      	beq.n	83f1e <_free_r+0xea>
   83e60:	07fe      	lsls	r6, r7, #31
   83e62:	6050      	str	r0, [r2, #4]
   83e64:	d40b      	bmi.n	83e7e <_free_r+0x4a>
   83e66:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83e6a:	f101 0e08 	add.w	lr, r1, #8
   83e6e:	1be4      	subs	r4, r4, r7
   83e70:	68a5      	ldr	r5, [r4, #8]
   83e72:	443b      	add	r3, r7
   83e74:	4575      	cmp	r5, lr
   83e76:	d06d      	beq.n	83f54 <_free_r+0x120>
   83e78:	68e7      	ldr	r7, [r4, #12]
   83e7a:	60ef      	str	r7, [r5, #12]
   83e7c:	60bd      	str	r5, [r7, #8]
   83e7e:	1815      	adds	r5, r2, r0
   83e80:	686d      	ldr	r5, [r5, #4]
   83e82:	07ed      	lsls	r5, r5, #31
   83e84:	d53e      	bpl.n	83f04 <_free_r+0xd0>
   83e86:	f043 0201 	orr.w	r2, r3, #1
   83e8a:	6062      	str	r2, [r4, #4]
   83e8c:	50e3      	str	r3, [r4, r3]
   83e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83e92:	d217      	bcs.n	83ec4 <_free_r+0x90>
   83e94:	2201      	movs	r2, #1
   83e96:	08db      	lsrs	r3, r3, #3
   83e98:	1098      	asrs	r0, r3, #2
   83e9a:	684d      	ldr	r5, [r1, #4]
   83e9c:	4413      	add	r3, r2
   83e9e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83ea2:	4082      	lsls	r2, r0
   83ea4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83ea8:	432a      	orrs	r2, r5
   83eaa:	3808      	subs	r0, #8
   83eac:	60e0      	str	r0, [r4, #12]
   83eae:	60a7      	str	r7, [r4, #8]
   83eb0:	604a      	str	r2, [r1, #4]
   83eb2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83eb6:	60fc      	str	r4, [r7, #12]
   83eb8:	4640      	mov	r0, r8
   83eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ebe:	f000 be3f 	b.w	84b40 <__malloc_unlock>
   83ec2:	4770      	bx	lr
   83ec4:	0a5a      	lsrs	r2, r3, #9
   83ec6:	2a04      	cmp	r2, #4
   83ec8:	d852      	bhi.n	83f70 <_free_r+0x13c>
   83eca:	099a      	lsrs	r2, r3, #6
   83ecc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83ed0:	00ff      	lsls	r7, r7, #3
   83ed2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83ed6:	19c8      	adds	r0, r1, r7
   83ed8:	59ca      	ldr	r2, [r1, r7]
   83eda:	3808      	subs	r0, #8
   83edc:	4290      	cmp	r0, r2
   83ede:	d04f      	beq.n	83f80 <_free_r+0x14c>
   83ee0:	6851      	ldr	r1, [r2, #4]
   83ee2:	f021 0103 	bic.w	r1, r1, #3
   83ee6:	428b      	cmp	r3, r1
   83ee8:	d232      	bcs.n	83f50 <_free_r+0x11c>
   83eea:	6892      	ldr	r2, [r2, #8]
   83eec:	4290      	cmp	r0, r2
   83eee:	d1f7      	bne.n	83ee0 <_free_r+0xac>
   83ef0:	68c3      	ldr	r3, [r0, #12]
   83ef2:	60a0      	str	r0, [r4, #8]
   83ef4:	60e3      	str	r3, [r4, #12]
   83ef6:	609c      	str	r4, [r3, #8]
   83ef8:	60c4      	str	r4, [r0, #12]
   83efa:	4640      	mov	r0, r8
   83efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83f00:	f000 be1e 	b.w	84b40 <__malloc_unlock>
   83f04:	6895      	ldr	r5, [r2, #8]
   83f06:	4f3b      	ldr	r7, [pc, #236]	; (83ff4 <_free_r+0x1c0>)
   83f08:	4403      	add	r3, r0
   83f0a:	42bd      	cmp	r5, r7
   83f0c:	d040      	beq.n	83f90 <_free_r+0x15c>
   83f0e:	68d0      	ldr	r0, [r2, #12]
   83f10:	f043 0201 	orr.w	r2, r3, #1
   83f14:	60e8      	str	r0, [r5, #12]
   83f16:	6085      	str	r5, [r0, #8]
   83f18:	6062      	str	r2, [r4, #4]
   83f1a:	50e3      	str	r3, [r4, r3]
   83f1c:	e7b7      	b.n	83e8e <_free_r+0x5a>
   83f1e:	07ff      	lsls	r7, r7, #31
   83f20:	4403      	add	r3, r0
   83f22:	d407      	bmi.n	83f34 <_free_r+0x100>
   83f24:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83f28:	1b64      	subs	r4, r4, r5
   83f2a:	68e2      	ldr	r2, [r4, #12]
   83f2c:	68a0      	ldr	r0, [r4, #8]
   83f2e:	442b      	add	r3, r5
   83f30:	60c2      	str	r2, [r0, #12]
   83f32:	6090      	str	r0, [r2, #8]
   83f34:	4a30      	ldr	r2, [pc, #192]	; (83ff8 <_free_r+0x1c4>)
   83f36:	f043 0001 	orr.w	r0, r3, #1
   83f3a:	6812      	ldr	r2, [r2, #0]
   83f3c:	6060      	str	r0, [r4, #4]
   83f3e:	4293      	cmp	r3, r2
   83f40:	608c      	str	r4, [r1, #8]
   83f42:	d3b9      	bcc.n	83eb8 <_free_r+0x84>
   83f44:	4b2d      	ldr	r3, [pc, #180]	; (83ffc <_free_r+0x1c8>)
   83f46:	4640      	mov	r0, r8
   83f48:	6819      	ldr	r1, [r3, #0]
   83f4a:	f7ff ff23 	bl	83d94 <_malloc_trim_r>
   83f4e:	e7b3      	b.n	83eb8 <_free_r+0x84>
   83f50:	4610      	mov	r0, r2
   83f52:	e7cd      	b.n	83ef0 <_free_r+0xbc>
   83f54:	1811      	adds	r1, r2, r0
   83f56:	6849      	ldr	r1, [r1, #4]
   83f58:	07c9      	lsls	r1, r1, #31
   83f5a:	d444      	bmi.n	83fe6 <_free_r+0x1b2>
   83f5c:	6891      	ldr	r1, [r2, #8]
   83f5e:	4403      	add	r3, r0
   83f60:	68d2      	ldr	r2, [r2, #12]
   83f62:	f043 0001 	orr.w	r0, r3, #1
   83f66:	60ca      	str	r2, [r1, #12]
   83f68:	6091      	str	r1, [r2, #8]
   83f6a:	6060      	str	r0, [r4, #4]
   83f6c:	50e3      	str	r3, [r4, r3]
   83f6e:	e7a3      	b.n	83eb8 <_free_r+0x84>
   83f70:	2a14      	cmp	r2, #20
   83f72:	d816      	bhi.n	83fa2 <_free_r+0x16e>
   83f74:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83f78:	00ff      	lsls	r7, r7, #3
   83f7a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83f7e:	e7aa      	b.n	83ed6 <_free_r+0xa2>
   83f80:	2301      	movs	r3, #1
   83f82:	10aa      	asrs	r2, r5, #2
   83f84:	684d      	ldr	r5, [r1, #4]
   83f86:	4093      	lsls	r3, r2
   83f88:	432b      	orrs	r3, r5
   83f8a:	604b      	str	r3, [r1, #4]
   83f8c:	4603      	mov	r3, r0
   83f8e:	e7b0      	b.n	83ef2 <_free_r+0xbe>
   83f90:	f043 0201 	orr.w	r2, r3, #1
   83f94:	614c      	str	r4, [r1, #20]
   83f96:	610c      	str	r4, [r1, #16]
   83f98:	60e5      	str	r5, [r4, #12]
   83f9a:	60a5      	str	r5, [r4, #8]
   83f9c:	6062      	str	r2, [r4, #4]
   83f9e:	50e3      	str	r3, [r4, r3]
   83fa0:	e78a      	b.n	83eb8 <_free_r+0x84>
   83fa2:	2a54      	cmp	r2, #84	; 0x54
   83fa4:	d806      	bhi.n	83fb4 <_free_r+0x180>
   83fa6:	0b1a      	lsrs	r2, r3, #12
   83fa8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83fac:	00ff      	lsls	r7, r7, #3
   83fae:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83fb2:	e790      	b.n	83ed6 <_free_r+0xa2>
   83fb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83fb8:	d806      	bhi.n	83fc8 <_free_r+0x194>
   83fba:	0bda      	lsrs	r2, r3, #15
   83fbc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83fc0:	00ff      	lsls	r7, r7, #3
   83fc2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83fc6:	e786      	b.n	83ed6 <_free_r+0xa2>
   83fc8:	f240 5054 	movw	r0, #1364	; 0x554
   83fcc:	4282      	cmp	r2, r0
   83fce:	d806      	bhi.n	83fde <_free_r+0x1aa>
   83fd0:	0c9a      	lsrs	r2, r3, #18
   83fd2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83fd6:	00ff      	lsls	r7, r7, #3
   83fd8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83fdc:	e77b      	b.n	83ed6 <_free_r+0xa2>
   83fde:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83fe2:	257e      	movs	r5, #126	; 0x7e
   83fe4:	e777      	b.n	83ed6 <_free_r+0xa2>
   83fe6:	f043 0101 	orr.w	r1, r3, #1
   83fea:	6061      	str	r1, [r4, #4]
   83fec:	6013      	str	r3, [r2, #0]
   83fee:	e763      	b.n	83eb8 <_free_r+0x84>
   83ff0:	200706d0 	.word	0x200706d0
   83ff4:	200706d8 	.word	0x200706d8
   83ff8:	20070adc 	.word	0x20070adc
   83ffc:	2007c4f0 	.word	0x2007c4f0

00084000 <__sfvwrite_r>:
   84000:	6893      	ldr	r3, [r2, #8]
   84002:	2b00      	cmp	r3, #0
   84004:	d071      	beq.n	840ea <__sfvwrite_r+0xea>
   84006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8400a:	898b      	ldrh	r3, [r1, #12]
   8400c:	b083      	sub	sp, #12
   8400e:	460c      	mov	r4, r1
   84010:	0719      	lsls	r1, r3, #28
   84012:	9000      	str	r0, [sp, #0]
   84014:	4616      	mov	r6, r2
   84016:	d525      	bpl.n	84064 <__sfvwrite_r+0x64>
   84018:	6922      	ldr	r2, [r4, #16]
   8401a:	b31a      	cbz	r2, 84064 <__sfvwrite_r+0x64>
   8401c:	f013 0002 	ands.w	r0, r3, #2
   84020:	6835      	ldr	r5, [r6, #0]
   84022:	d02b      	beq.n	8407c <__sfvwrite_r+0x7c>
   84024:	f04f 0900 	mov.w	r9, #0
   84028:	46b0      	mov	r8, r6
   8402a:	464f      	mov	r7, r9
   8402c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 842f0 <__sfvwrite_r+0x2f0>
   84030:	2f00      	cmp	r7, #0
   84032:	d055      	beq.n	840e0 <__sfvwrite_r+0xe0>
   84034:	4557      	cmp	r7, sl
   84036:	463b      	mov	r3, r7
   84038:	464a      	mov	r2, r9
   8403a:	bf28      	it	cs
   8403c:	4653      	movcs	r3, sl
   8403e:	69e1      	ldr	r1, [r4, #28]
   84040:	9800      	ldr	r0, [sp, #0]
   84042:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84044:	47b0      	blx	r6
   84046:	2800      	cmp	r0, #0
   84048:	dd56      	ble.n	840f8 <__sfvwrite_r+0xf8>
   8404a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8404e:	4481      	add	r9, r0
   84050:	1a1b      	subs	r3, r3, r0
   84052:	1a3f      	subs	r7, r7, r0
   84054:	f8c8 3008 	str.w	r3, [r8, #8]
   84058:	2b00      	cmp	r3, #0
   8405a:	d1e9      	bne.n	84030 <__sfvwrite_r+0x30>
   8405c:	2000      	movs	r0, #0
   8405e:	b003      	add	sp, #12
   84060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84064:	4621      	mov	r1, r4
   84066:	9800      	ldr	r0, [sp, #0]
   84068:	f7ff fc56 	bl	83918 <__swsetup_r>
   8406c:	2800      	cmp	r0, #0
   8406e:	f040 8135 	bne.w	842dc <__sfvwrite_r+0x2dc>
   84072:	89a3      	ldrh	r3, [r4, #12]
   84074:	6835      	ldr	r5, [r6, #0]
   84076:	f013 0002 	ands.w	r0, r3, #2
   8407a:	d1d3      	bne.n	84024 <__sfvwrite_r+0x24>
   8407c:	f013 0901 	ands.w	r9, r3, #1
   84080:	d144      	bne.n	8410c <__sfvwrite_r+0x10c>
   84082:	464f      	mov	r7, r9
   84084:	9601      	str	r6, [sp, #4]
   84086:	b337      	cbz	r7, 840d6 <__sfvwrite_r+0xd6>
   84088:	059a      	lsls	r2, r3, #22
   8408a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8408e:	f140 8085 	bpl.w	8419c <__sfvwrite_r+0x19c>
   84092:	4547      	cmp	r7, r8
   84094:	46c3      	mov	fp, r8
   84096:	f0c0 80ad 	bcc.w	841f4 <__sfvwrite_r+0x1f4>
   8409a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8409e:	f040 80ae 	bne.w	841fe <__sfvwrite_r+0x1fe>
   840a2:	46ba      	mov	sl, r7
   840a4:	6820      	ldr	r0, [r4, #0]
   840a6:	465a      	mov	r2, fp
   840a8:	4649      	mov	r1, r9
   840aa:	f000 fcdf 	bl	84a6c <memmove>
   840ae:	68a2      	ldr	r2, [r4, #8]
   840b0:	6823      	ldr	r3, [r4, #0]
   840b2:	eba2 0208 	sub.w	r2, r2, r8
   840b6:	445b      	add	r3, fp
   840b8:	60a2      	str	r2, [r4, #8]
   840ba:	6023      	str	r3, [r4, #0]
   840bc:	9a01      	ldr	r2, [sp, #4]
   840be:	44d1      	add	r9, sl
   840c0:	6893      	ldr	r3, [r2, #8]
   840c2:	eba7 070a 	sub.w	r7, r7, sl
   840c6:	eba3 030a 	sub.w	r3, r3, sl
   840ca:	6093      	str	r3, [r2, #8]
   840cc:	2b00      	cmp	r3, #0
   840ce:	d0c5      	beq.n	8405c <__sfvwrite_r+0x5c>
   840d0:	89a3      	ldrh	r3, [r4, #12]
   840d2:	2f00      	cmp	r7, #0
   840d4:	d1d8      	bne.n	84088 <__sfvwrite_r+0x88>
   840d6:	f8d5 9000 	ldr.w	r9, [r5]
   840da:	686f      	ldr	r7, [r5, #4]
   840dc:	3508      	adds	r5, #8
   840de:	e7d2      	b.n	84086 <__sfvwrite_r+0x86>
   840e0:	f8d5 9000 	ldr.w	r9, [r5]
   840e4:	686f      	ldr	r7, [r5, #4]
   840e6:	3508      	adds	r5, #8
   840e8:	e7a2      	b.n	84030 <__sfvwrite_r+0x30>
   840ea:	2000      	movs	r0, #0
   840ec:	4770      	bx	lr
   840ee:	4621      	mov	r1, r4
   840f0:	9800      	ldr	r0, [sp, #0]
   840f2:	f7ff fd21 	bl	83b38 <_fflush_r>
   840f6:	b378      	cbz	r0, 84158 <__sfvwrite_r+0x158>
   840f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   840fc:	f04f 30ff 	mov.w	r0, #4294967295
   84100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84104:	81a3      	strh	r3, [r4, #12]
   84106:	b003      	add	sp, #12
   84108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8410c:	4681      	mov	r9, r0
   8410e:	4633      	mov	r3, r6
   84110:	464e      	mov	r6, r9
   84112:	46a8      	mov	r8, r5
   84114:	469a      	mov	sl, r3
   84116:	464d      	mov	r5, r9
   84118:	b356      	cbz	r6, 84170 <__sfvwrite_r+0x170>
   8411a:	2800      	cmp	r0, #0
   8411c:	d032      	beq.n	84184 <__sfvwrite_r+0x184>
   8411e:	45b1      	cmp	r9, r6
   84120:	46cb      	mov	fp, r9
   84122:	bf28      	it	cs
   84124:	46b3      	movcs	fp, r6
   84126:	6820      	ldr	r0, [r4, #0]
   84128:	6923      	ldr	r3, [r4, #16]
   8412a:	465f      	mov	r7, fp
   8412c:	4298      	cmp	r0, r3
   8412e:	6962      	ldr	r2, [r4, #20]
   84130:	d904      	bls.n	8413c <__sfvwrite_r+0x13c>
   84132:	68a3      	ldr	r3, [r4, #8]
   84134:	4413      	add	r3, r2
   84136:	459b      	cmp	fp, r3
   84138:	f300 80a8 	bgt.w	8428c <__sfvwrite_r+0x28c>
   8413c:	4593      	cmp	fp, r2
   8413e:	db4d      	blt.n	841dc <__sfvwrite_r+0x1dc>
   84140:	4613      	mov	r3, r2
   84142:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84144:	462a      	mov	r2, r5
   84146:	69e1      	ldr	r1, [r4, #28]
   84148:	9800      	ldr	r0, [sp, #0]
   8414a:	47b8      	blx	r7
   8414c:	1e07      	subs	r7, r0, #0
   8414e:	ddd3      	ble.n	840f8 <__sfvwrite_r+0xf8>
   84150:	ebb9 0907 	subs.w	r9, r9, r7
   84154:	d0cb      	beq.n	840ee <__sfvwrite_r+0xee>
   84156:	2001      	movs	r0, #1
   84158:	f8da 3008 	ldr.w	r3, [sl, #8]
   8415c:	443d      	add	r5, r7
   8415e:	1bdb      	subs	r3, r3, r7
   84160:	1bf6      	subs	r6, r6, r7
   84162:	f8ca 3008 	str.w	r3, [sl, #8]
   84166:	2b00      	cmp	r3, #0
   84168:	f43f af78 	beq.w	8405c <__sfvwrite_r+0x5c>
   8416c:	2e00      	cmp	r6, #0
   8416e:	d1d4      	bne.n	8411a <__sfvwrite_r+0x11a>
   84170:	f108 0308 	add.w	r3, r8, #8
   84174:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84178:	4698      	mov	r8, r3
   8417a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8417e:	3308      	adds	r3, #8
   84180:	2e00      	cmp	r6, #0
   84182:	d0f7      	beq.n	84174 <__sfvwrite_r+0x174>
   84184:	4632      	mov	r2, r6
   84186:	210a      	movs	r1, #10
   84188:	4628      	mov	r0, r5
   8418a:	f000 fc29 	bl	849e0 <memchr>
   8418e:	2800      	cmp	r0, #0
   84190:	f000 80a1 	beq.w	842d6 <__sfvwrite_r+0x2d6>
   84194:	3001      	adds	r0, #1
   84196:	eba0 0905 	sub.w	r9, r0, r5
   8419a:	e7c0      	b.n	8411e <__sfvwrite_r+0x11e>
   8419c:	6820      	ldr	r0, [r4, #0]
   8419e:	6923      	ldr	r3, [r4, #16]
   841a0:	4298      	cmp	r0, r3
   841a2:	d802      	bhi.n	841aa <__sfvwrite_r+0x1aa>
   841a4:	6963      	ldr	r3, [r4, #20]
   841a6:	429f      	cmp	r7, r3
   841a8:	d25d      	bcs.n	84266 <__sfvwrite_r+0x266>
   841aa:	45b8      	cmp	r8, r7
   841ac:	bf28      	it	cs
   841ae:	46b8      	movcs	r8, r7
   841b0:	4649      	mov	r1, r9
   841b2:	4642      	mov	r2, r8
   841b4:	f000 fc5a 	bl	84a6c <memmove>
   841b8:	68a3      	ldr	r3, [r4, #8]
   841ba:	6822      	ldr	r2, [r4, #0]
   841bc:	eba3 0308 	sub.w	r3, r3, r8
   841c0:	4442      	add	r2, r8
   841c2:	60a3      	str	r3, [r4, #8]
   841c4:	6022      	str	r2, [r4, #0]
   841c6:	b10b      	cbz	r3, 841cc <__sfvwrite_r+0x1cc>
   841c8:	46c2      	mov	sl, r8
   841ca:	e777      	b.n	840bc <__sfvwrite_r+0xbc>
   841cc:	4621      	mov	r1, r4
   841ce:	9800      	ldr	r0, [sp, #0]
   841d0:	f7ff fcb2 	bl	83b38 <_fflush_r>
   841d4:	2800      	cmp	r0, #0
   841d6:	d18f      	bne.n	840f8 <__sfvwrite_r+0xf8>
   841d8:	46c2      	mov	sl, r8
   841da:	e76f      	b.n	840bc <__sfvwrite_r+0xbc>
   841dc:	465a      	mov	r2, fp
   841de:	4629      	mov	r1, r5
   841e0:	f000 fc44 	bl	84a6c <memmove>
   841e4:	68a2      	ldr	r2, [r4, #8]
   841e6:	6823      	ldr	r3, [r4, #0]
   841e8:	eba2 020b 	sub.w	r2, r2, fp
   841ec:	445b      	add	r3, fp
   841ee:	60a2      	str	r2, [r4, #8]
   841f0:	6023      	str	r3, [r4, #0]
   841f2:	e7ad      	b.n	84150 <__sfvwrite_r+0x150>
   841f4:	46b8      	mov	r8, r7
   841f6:	46ba      	mov	sl, r7
   841f8:	46bb      	mov	fp, r7
   841fa:	6820      	ldr	r0, [r4, #0]
   841fc:	e753      	b.n	840a6 <__sfvwrite_r+0xa6>
   841fe:	6962      	ldr	r2, [r4, #20]
   84200:	6820      	ldr	r0, [r4, #0]
   84202:	6921      	ldr	r1, [r4, #16]
   84204:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   84208:	eba0 0a01 	sub.w	sl, r0, r1
   8420c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   84210:	f10a 0001 	add.w	r0, sl, #1
   84214:	ea4f 0868 	mov.w	r8, r8, asr #1
   84218:	4438      	add	r0, r7
   8421a:	4540      	cmp	r0, r8
   8421c:	4642      	mov	r2, r8
   8421e:	bf84      	itt	hi
   84220:	4680      	movhi	r8, r0
   84222:	4642      	movhi	r2, r8
   84224:	055b      	lsls	r3, r3, #21
   84226:	d544      	bpl.n	842b2 <__sfvwrite_r+0x2b2>
   84228:	4611      	mov	r1, r2
   8422a:	9800      	ldr	r0, [sp, #0]
   8422c:	f000 f920 	bl	84470 <_malloc_r>
   84230:	4683      	mov	fp, r0
   84232:	2800      	cmp	r0, #0
   84234:	d055      	beq.n	842e2 <__sfvwrite_r+0x2e2>
   84236:	4652      	mov	r2, sl
   84238:	6921      	ldr	r1, [r4, #16]
   8423a:	f7fe fae3 	bl	82804 <memcpy>
   8423e:	89a3      	ldrh	r3, [r4, #12]
   84240:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   84244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84248:	81a3      	strh	r3, [r4, #12]
   8424a:	eb0b 000a 	add.w	r0, fp, sl
   8424e:	eba8 030a 	sub.w	r3, r8, sl
   84252:	f8c4 b010 	str.w	fp, [r4, #16]
   84256:	f8c4 8014 	str.w	r8, [r4, #20]
   8425a:	6020      	str	r0, [r4, #0]
   8425c:	60a3      	str	r3, [r4, #8]
   8425e:	46b8      	mov	r8, r7
   84260:	46ba      	mov	sl, r7
   84262:	46bb      	mov	fp, r7
   84264:	e71f      	b.n	840a6 <__sfvwrite_r+0xa6>
   84266:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8426a:	42ba      	cmp	r2, r7
   8426c:	bf28      	it	cs
   8426e:	463a      	movcs	r2, r7
   84270:	fb92 f2f3 	sdiv	r2, r2, r3
   84274:	69e1      	ldr	r1, [r4, #28]
   84276:	fb03 f302 	mul.w	r3, r3, r2
   8427a:	9800      	ldr	r0, [sp, #0]
   8427c:	464a      	mov	r2, r9
   8427e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84280:	47b0      	blx	r6
   84282:	f1b0 0a00 	subs.w	sl, r0, #0
   84286:	f73f af19 	bgt.w	840bc <__sfvwrite_r+0xbc>
   8428a:	e735      	b.n	840f8 <__sfvwrite_r+0xf8>
   8428c:	461a      	mov	r2, r3
   8428e:	4629      	mov	r1, r5
   84290:	9301      	str	r3, [sp, #4]
   84292:	f000 fbeb 	bl	84a6c <memmove>
   84296:	6822      	ldr	r2, [r4, #0]
   84298:	9b01      	ldr	r3, [sp, #4]
   8429a:	4621      	mov	r1, r4
   8429c:	441a      	add	r2, r3
   8429e:	6022      	str	r2, [r4, #0]
   842a0:	9800      	ldr	r0, [sp, #0]
   842a2:	f7ff fc49 	bl	83b38 <_fflush_r>
   842a6:	9b01      	ldr	r3, [sp, #4]
   842a8:	2800      	cmp	r0, #0
   842aa:	f47f af25 	bne.w	840f8 <__sfvwrite_r+0xf8>
   842ae:	461f      	mov	r7, r3
   842b0:	e74e      	b.n	84150 <__sfvwrite_r+0x150>
   842b2:	9800      	ldr	r0, [sp, #0]
   842b4:	f000 fc4a 	bl	84b4c <_realloc_r>
   842b8:	4683      	mov	fp, r0
   842ba:	2800      	cmp	r0, #0
   842bc:	d1c5      	bne.n	8424a <__sfvwrite_r+0x24a>
   842be:	9d00      	ldr	r5, [sp, #0]
   842c0:	6921      	ldr	r1, [r4, #16]
   842c2:	4628      	mov	r0, r5
   842c4:	f7ff fdb6 	bl	83e34 <_free_r>
   842c8:	220c      	movs	r2, #12
   842ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842ce:	602a      	str	r2, [r5, #0]
   842d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   842d4:	e712      	b.n	840fc <__sfvwrite_r+0xfc>
   842d6:	f106 0901 	add.w	r9, r6, #1
   842da:	e720      	b.n	8411e <__sfvwrite_r+0x11e>
   842dc:	f04f 30ff 	mov.w	r0, #4294967295
   842e0:	e6bd      	b.n	8405e <__sfvwrite_r+0x5e>
   842e2:	220c      	movs	r2, #12
   842e4:	9900      	ldr	r1, [sp, #0]
   842e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842ea:	600a      	str	r2, [r1, #0]
   842ec:	e706      	b.n	840fc <__sfvwrite_r+0xfc>
   842ee:	bf00      	nop
   842f0:	7ffffc00 	.word	0x7ffffc00

000842f4 <_fwalk_reent>:
   842f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   842f8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   842fc:	d01e      	beq.n	8433c <_fwalk_reent+0x48>
   842fe:	4688      	mov	r8, r1
   84300:	4607      	mov	r7, r0
   84302:	f04f 0900 	mov.w	r9, #0
   84306:	6875      	ldr	r5, [r6, #4]
   84308:	68b4      	ldr	r4, [r6, #8]
   8430a:	3d01      	subs	r5, #1
   8430c:	d410      	bmi.n	84330 <_fwalk_reent+0x3c>
   8430e:	89a3      	ldrh	r3, [r4, #12]
   84310:	3d01      	subs	r5, #1
   84312:	2b01      	cmp	r3, #1
   84314:	d908      	bls.n	84328 <_fwalk_reent+0x34>
   84316:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8431a:	3301      	adds	r3, #1
   8431c:	d004      	beq.n	84328 <_fwalk_reent+0x34>
   8431e:	4621      	mov	r1, r4
   84320:	4638      	mov	r0, r7
   84322:	47c0      	blx	r8
   84324:	ea49 0900 	orr.w	r9, r9, r0
   84328:	1c6b      	adds	r3, r5, #1
   8432a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8432e:	d1ee      	bne.n	8430e <_fwalk_reent+0x1a>
   84330:	6836      	ldr	r6, [r6, #0]
   84332:	2e00      	cmp	r6, #0
   84334:	d1e7      	bne.n	84306 <_fwalk_reent+0x12>
   84336:	4648      	mov	r0, r9
   84338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8433c:	46b1      	mov	r9, r6
   8433e:	4648      	mov	r0, r9
   84340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084344 <__locale_mb_cur_max>:
   84344:	4b04      	ldr	r3, [pc, #16]	; (84358 <__locale_mb_cur_max+0x14>)
   84346:	4a05      	ldr	r2, [pc, #20]	; (8435c <__locale_mb_cur_max+0x18>)
   84348:	681b      	ldr	r3, [r3, #0]
   8434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8434c:	2b00      	cmp	r3, #0
   8434e:	bf08      	it	eq
   84350:	4613      	moveq	r3, r2
   84352:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   84356:	4770      	bx	lr
   84358:	20070134 	.word	0x20070134
   8435c:	20070564 	.word	0x20070564

00084360 <__retarget_lock_init_recursive>:
   84360:	4770      	bx	lr
   84362:	bf00      	nop

00084364 <__retarget_lock_close_recursive>:
   84364:	4770      	bx	lr
   84366:	bf00      	nop

00084368 <__retarget_lock_acquire_recursive>:
   84368:	4770      	bx	lr
   8436a:	bf00      	nop

0008436c <__retarget_lock_release_recursive>:
   8436c:	4770      	bx	lr
   8436e:	bf00      	nop

00084370 <__swhatbuf_r>:
   84370:	b570      	push	{r4, r5, r6, lr}
   84372:	460c      	mov	r4, r1
   84374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84378:	b090      	sub	sp, #64	; 0x40
   8437a:	2900      	cmp	r1, #0
   8437c:	4615      	mov	r5, r2
   8437e:	461e      	mov	r6, r3
   84380:	db14      	blt.n	843ac <__swhatbuf_r+0x3c>
   84382:	aa01      	add	r2, sp, #4
   84384:	f000 ff68 	bl	85258 <_fstat_r>
   84388:	2800      	cmp	r0, #0
   8438a:	db0f      	blt.n	843ac <__swhatbuf_r+0x3c>
   8438c:	9a02      	ldr	r2, [sp, #8]
   8438e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   84396:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8439a:	fab2 f282 	clz	r2, r2
   8439e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   843a2:	0952      	lsrs	r2, r2, #5
   843a4:	6032      	str	r2, [r6, #0]
   843a6:	602b      	str	r3, [r5, #0]
   843a8:	b010      	add	sp, #64	; 0x40
   843aa:	bd70      	pop	{r4, r5, r6, pc}
   843ac:	2300      	movs	r3, #0
   843ae:	89a2      	ldrh	r2, [r4, #12]
   843b0:	6033      	str	r3, [r6, #0]
   843b2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   843b6:	d004      	beq.n	843c2 <__swhatbuf_r+0x52>
   843b8:	2240      	movs	r2, #64	; 0x40
   843ba:	4618      	mov	r0, r3
   843bc:	602a      	str	r2, [r5, #0]
   843be:	b010      	add	sp, #64	; 0x40
   843c0:	bd70      	pop	{r4, r5, r6, pc}
   843c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   843c6:	602b      	str	r3, [r5, #0]
   843c8:	b010      	add	sp, #64	; 0x40
   843ca:	bd70      	pop	{r4, r5, r6, pc}

000843cc <__smakebuf_r>:
   843cc:	898a      	ldrh	r2, [r1, #12]
   843ce:	460b      	mov	r3, r1
   843d0:	0792      	lsls	r2, r2, #30
   843d2:	d506      	bpl.n	843e2 <__smakebuf_r+0x16>
   843d4:	2101      	movs	r1, #1
   843d6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   843da:	6159      	str	r1, [r3, #20]
   843dc:	601a      	str	r2, [r3, #0]
   843de:	611a      	str	r2, [r3, #16]
   843e0:	4770      	bx	lr
   843e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   843e4:	b083      	sub	sp, #12
   843e6:	ab01      	add	r3, sp, #4
   843e8:	466a      	mov	r2, sp
   843ea:	460c      	mov	r4, r1
   843ec:	4606      	mov	r6, r0
   843ee:	f7ff ffbf 	bl	84370 <__swhatbuf_r>
   843f2:	9900      	ldr	r1, [sp, #0]
   843f4:	4605      	mov	r5, r0
   843f6:	4630      	mov	r0, r6
   843f8:	f000 f83a 	bl	84470 <_malloc_r>
   843fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84400:	b1d8      	cbz	r0, 8443a <__smakebuf_r+0x6e>
   84402:	e89d 0006 	ldmia.w	sp, {r1, r2}
   84406:	4f15      	ldr	r7, [pc, #84]	; (8445c <__smakebuf_r+0x90>)
   84408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8440c:	63f7      	str	r7, [r6, #60]	; 0x3c
   8440e:	81a3      	strh	r3, [r4, #12]
   84410:	6020      	str	r0, [r4, #0]
   84412:	6120      	str	r0, [r4, #16]
   84414:	6161      	str	r1, [r4, #20]
   84416:	b91a      	cbnz	r2, 84420 <__smakebuf_r+0x54>
   84418:	432b      	orrs	r3, r5
   8441a:	81a3      	strh	r3, [r4, #12]
   8441c:	b003      	add	sp, #12
   8441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84420:	4630      	mov	r0, r6
   84422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84426:	f000 ff2b 	bl	85280 <_isatty_r>
   8442a:	b1a0      	cbz	r0, 84456 <__smakebuf_r+0x8a>
   8442c:	89a3      	ldrh	r3, [r4, #12]
   8442e:	f023 0303 	bic.w	r3, r3, #3
   84432:	f043 0301 	orr.w	r3, r3, #1
   84436:	b21b      	sxth	r3, r3
   84438:	e7ee      	b.n	84418 <__smakebuf_r+0x4c>
   8443a:	059a      	lsls	r2, r3, #22
   8443c:	d4ee      	bmi.n	8441c <__smakebuf_r+0x50>
   8443e:	2101      	movs	r1, #1
   84440:	f023 0303 	bic.w	r3, r3, #3
   84444:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84448:	f043 0302 	orr.w	r3, r3, #2
   8444c:	81a3      	strh	r3, [r4, #12]
   8444e:	6161      	str	r1, [r4, #20]
   84450:	6022      	str	r2, [r4, #0]
   84452:	6122      	str	r2, [r4, #16]
   84454:	e7e2      	b.n	8441c <__smakebuf_r+0x50>
   84456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8445a:	e7dd      	b.n	84418 <__smakebuf_r+0x4c>
   8445c:	00083b8d 	.word	0x00083b8d

00084460 <malloc>:
   84460:	4b02      	ldr	r3, [pc, #8]	; (8446c <malloc+0xc>)
   84462:	4601      	mov	r1, r0
   84464:	6818      	ldr	r0, [r3, #0]
   84466:	f000 b803 	b.w	84470 <_malloc_r>
   8446a:	bf00      	nop
   8446c:	20070134 	.word	0x20070134

00084470 <_malloc_r>:
   84470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84474:	f101 060b 	add.w	r6, r1, #11
   84478:	2e16      	cmp	r6, #22
   8447a:	b083      	sub	sp, #12
   8447c:	4605      	mov	r5, r0
   8447e:	f240 809e 	bls.w	845be <_malloc_r+0x14e>
   84482:	f036 0607 	bics.w	r6, r6, #7
   84486:	f100 80bd 	bmi.w	84604 <_malloc_r+0x194>
   8448a:	42b1      	cmp	r1, r6
   8448c:	f200 80ba 	bhi.w	84604 <_malloc_r+0x194>
   84490:	f000 fb50 	bl	84b34 <__malloc_lock>
   84494:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84498:	f0c0 8285 	bcc.w	849a6 <_malloc_r+0x536>
   8449c:	0a73      	lsrs	r3, r6, #9
   8449e:	f000 80b8 	beq.w	84612 <_malloc_r+0x1a2>
   844a2:	2b04      	cmp	r3, #4
   844a4:	f200 816c 	bhi.w	84780 <_malloc_r+0x310>
   844a8:	09b3      	lsrs	r3, r6, #6
   844aa:	f103 0039 	add.w	r0, r3, #57	; 0x39
   844ae:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   844b2:	00c1      	lsls	r1, r0, #3
   844b4:	4fb8      	ldr	r7, [pc, #736]	; (84798 <_malloc_r+0x328>)
   844b6:	4439      	add	r1, r7
   844b8:	684c      	ldr	r4, [r1, #4]
   844ba:	3908      	subs	r1, #8
   844bc:	42a1      	cmp	r1, r4
   844be:	d106      	bne.n	844ce <_malloc_r+0x5e>
   844c0:	e00c      	b.n	844dc <_malloc_r+0x6c>
   844c2:	2a00      	cmp	r2, #0
   844c4:	f280 80ab 	bge.w	8461e <_malloc_r+0x1ae>
   844c8:	68e4      	ldr	r4, [r4, #12]
   844ca:	42a1      	cmp	r1, r4
   844cc:	d006      	beq.n	844dc <_malloc_r+0x6c>
   844ce:	6863      	ldr	r3, [r4, #4]
   844d0:	f023 0303 	bic.w	r3, r3, #3
   844d4:	1b9a      	subs	r2, r3, r6
   844d6:	2a0f      	cmp	r2, #15
   844d8:	ddf3      	ble.n	844c2 <_malloc_r+0x52>
   844da:	4670      	mov	r0, lr
   844dc:	693c      	ldr	r4, [r7, #16]
   844de:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 847ac <_malloc_r+0x33c>
   844e2:	4574      	cmp	r4, lr
   844e4:	f000 819e 	beq.w	84824 <_malloc_r+0x3b4>
   844e8:	6863      	ldr	r3, [r4, #4]
   844ea:	f023 0303 	bic.w	r3, r3, #3
   844ee:	1b9a      	subs	r2, r3, r6
   844f0:	2a0f      	cmp	r2, #15
   844f2:	f300 8183 	bgt.w	847fc <_malloc_r+0x38c>
   844f6:	2a00      	cmp	r2, #0
   844f8:	f8c7 e014 	str.w	lr, [r7, #20]
   844fc:	f8c7 e010 	str.w	lr, [r7, #16]
   84500:	f280 8091 	bge.w	84626 <_malloc_r+0x1b6>
   84504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84508:	f080 8154 	bcs.w	847b4 <_malloc_r+0x344>
   8450c:	2201      	movs	r2, #1
   8450e:	08db      	lsrs	r3, r3, #3
   84510:	6879      	ldr	r1, [r7, #4]
   84512:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84516:	4413      	add	r3, r2
   84518:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8451c:	fa02 f20c 	lsl.w	r2, r2, ip
   84520:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   84524:	430a      	orrs	r2, r1
   84526:	f1ac 0108 	sub.w	r1, ip, #8
   8452a:	60e1      	str	r1, [r4, #12]
   8452c:	f8c4 8008 	str.w	r8, [r4, #8]
   84530:	607a      	str	r2, [r7, #4]
   84532:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   84536:	f8c8 400c 	str.w	r4, [r8, #12]
   8453a:	2401      	movs	r4, #1
   8453c:	1083      	asrs	r3, r0, #2
   8453e:	409c      	lsls	r4, r3
   84540:	4294      	cmp	r4, r2
   84542:	d87d      	bhi.n	84640 <_malloc_r+0x1d0>
   84544:	4214      	tst	r4, r2
   84546:	d106      	bne.n	84556 <_malloc_r+0xe6>
   84548:	f020 0003 	bic.w	r0, r0, #3
   8454c:	0064      	lsls	r4, r4, #1
   8454e:	4214      	tst	r4, r2
   84550:	f100 0004 	add.w	r0, r0, #4
   84554:	d0fa      	beq.n	8454c <_malloc_r+0xdc>
   84556:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8455a:	46cc      	mov	ip, r9
   8455c:	4680      	mov	r8, r0
   8455e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84562:	459c      	cmp	ip, r3
   84564:	d107      	bne.n	84576 <_malloc_r+0x106>
   84566:	e15f      	b.n	84828 <_malloc_r+0x3b8>
   84568:	2a00      	cmp	r2, #0
   8456a:	f280 816d 	bge.w	84848 <_malloc_r+0x3d8>
   8456e:	68db      	ldr	r3, [r3, #12]
   84570:	459c      	cmp	ip, r3
   84572:	f000 8159 	beq.w	84828 <_malloc_r+0x3b8>
   84576:	6859      	ldr	r1, [r3, #4]
   84578:	f021 0103 	bic.w	r1, r1, #3
   8457c:	1b8a      	subs	r2, r1, r6
   8457e:	2a0f      	cmp	r2, #15
   84580:	ddf2      	ble.n	84568 <_malloc_r+0xf8>
   84582:	68dc      	ldr	r4, [r3, #12]
   84584:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84588:	f046 0801 	orr.w	r8, r6, #1
   8458c:	4628      	mov	r0, r5
   8458e:	441e      	add	r6, r3
   84590:	f042 0501 	orr.w	r5, r2, #1
   84594:	f8c3 8004 	str.w	r8, [r3, #4]
   84598:	f8cc 400c 	str.w	r4, [ip, #12]
   8459c:	f8c4 c008 	str.w	ip, [r4, #8]
   845a0:	617e      	str	r6, [r7, #20]
   845a2:	613e      	str	r6, [r7, #16]
   845a4:	f8c6 e00c 	str.w	lr, [r6, #12]
   845a8:	f8c6 e008 	str.w	lr, [r6, #8]
   845ac:	6075      	str	r5, [r6, #4]
   845ae:	505a      	str	r2, [r3, r1]
   845b0:	9300      	str	r3, [sp, #0]
   845b2:	f000 fac5 	bl	84b40 <__malloc_unlock>
   845b6:	9b00      	ldr	r3, [sp, #0]
   845b8:	f103 0408 	add.w	r4, r3, #8
   845bc:	e01e      	b.n	845fc <_malloc_r+0x18c>
   845be:	2910      	cmp	r1, #16
   845c0:	d820      	bhi.n	84604 <_malloc_r+0x194>
   845c2:	f000 fab7 	bl	84b34 <__malloc_lock>
   845c6:	2610      	movs	r6, #16
   845c8:	2318      	movs	r3, #24
   845ca:	2002      	movs	r0, #2
   845cc:	4f72      	ldr	r7, [pc, #456]	; (84798 <_malloc_r+0x328>)
   845ce:	443b      	add	r3, r7
   845d0:	685c      	ldr	r4, [r3, #4]
   845d2:	f1a3 0208 	sub.w	r2, r3, #8
   845d6:	4294      	cmp	r4, r2
   845d8:	f000 812f 	beq.w	8483a <_malloc_r+0x3ca>
   845dc:	6863      	ldr	r3, [r4, #4]
   845de:	68e1      	ldr	r1, [r4, #12]
   845e0:	f023 0303 	bic.w	r3, r3, #3
   845e4:	4423      	add	r3, r4
   845e6:	685a      	ldr	r2, [r3, #4]
   845e8:	68a6      	ldr	r6, [r4, #8]
   845ea:	f042 0201 	orr.w	r2, r2, #1
   845ee:	60f1      	str	r1, [r6, #12]
   845f0:	4628      	mov	r0, r5
   845f2:	608e      	str	r6, [r1, #8]
   845f4:	605a      	str	r2, [r3, #4]
   845f6:	f000 faa3 	bl	84b40 <__malloc_unlock>
   845fa:	3408      	adds	r4, #8
   845fc:	4620      	mov	r0, r4
   845fe:	b003      	add	sp, #12
   84600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84604:	2400      	movs	r4, #0
   84606:	230c      	movs	r3, #12
   84608:	4620      	mov	r0, r4
   8460a:	602b      	str	r3, [r5, #0]
   8460c:	b003      	add	sp, #12
   8460e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84612:	2040      	movs	r0, #64	; 0x40
   84614:	f44f 7100 	mov.w	r1, #512	; 0x200
   84618:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8461c:	e74a      	b.n	844b4 <_malloc_r+0x44>
   8461e:	4423      	add	r3, r4
   84620:	685a      	ldr	r2, [r3, #4]
   84622:	68e1      	ldr	r1, [r4, #12]
   84624:	e7e0      	b.n	845e8 <_malloc_r+0x178>
   84626:	4423      	add	r3, r4
   84628:	685a      	ldr	r2, [r3, #4]
   8462a:	4628      	mov	r0, r5
   8462c:	f042 0201 	orr.w	r2, r2, #1
   84630:	605a      	str	r2, [r3, #4]
   84632:	3408      	adds	r4, #8
   84634:	f000 fa84 	bl	84b40 <__malloc_unlock>
   84638:	4620      	mov	r0, r4
   8463a:	b003      	add	sp, #12
   8463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84640:	68bc      	ldr	r4, [r7, #8]
   84642:	6863      	ldr	r3, [r4, #4]
   84644:	f023 0803 	bic.w	r8, r3, #3
   84648:	45b0      	cmp	r8, r6
   8464a:	d304      	bcc.n	84656 <_malloc_r+0x1e6>
   8464c:	eba8 0306 	sub.w	r3, r8, r6
   84650:	2b0f      	cmp	r3, #15
   84652:	f300 8085 	bgt.w	84760 <_malloc_r+0x2f0>
   84656:	f8df 9158 	ldr.w	r9, [pc, #344]	; 847b0 <_malloc_r+0x340>
   8465a:	4b50      	ldr	r3, [pc, #320]	; (8479c <_malloc_r+0x32c>)
   8465c:	f8d9 2000 	ldr.w	r2, [r9]
   84660:	681b      	ldr	r3, [r3, #0]
   84662:	3201      	adds	r2, #1
   84664:	4433      	add	r3, r6
   84666:	eb04 0a08 	add.w	sl, r4, r8
   8466a:	f000 8154 	beq.w	84916 <_malloc_r+0x4a6>
   8466e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   84672:	330f      	adds	r3, #15
   84674:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84678:	f02b 0b0f 	bic.w	fp, fp, #15
   8467c:	4659      	mov	r1, fp
   8467e:	4628      	mov	r0, r5
   84680:	f000 fc1a 	bl	84eb8 <_sbrk_r>
   84684:	1c41      	adds	r1, r0, #1
   84686:	4602      	mov	r2, r0
   84688:	f000 80fb 	beq.w	84882 <_malloc_r+0x412>
   8468c:	4582      	cmp	sl, r0
   8468e:	f200 80f6 	bhi.w	8487e <_malloc_r+0x40e>
   84692:	4b43      	ldr	r3, [pc, #268]	; (847a0 <_malloc_r+0x330>)
   84694:	6819      	ldr	r1, [r3, #0]
   84696:	4459      	add	r1, fp
   84698:	6019      	str	r1, [r3, #0]
   8469a:	f000 814c 	beq.w	84936 <_malloc_r+0x4c6>
   8469e:	f8d9 0000 	ldr.w	r0, [r9]
   846a2:	3001      	adds	r0, #1
   846a4:	bf1b      	ittet	ne
   846a6:	eba2 0a0a 	subne.w	sl, r2, sl
   846aa:	4451      	addne	r1, sl
   846ac:	f8c9 2000 	streq.w	r2, [r9]
   846b0:	6019      	strne	r1, [r3, #0]
   846b2:	f012 0107 	ands.w	r1, r2, #7
   846b6:	f000 8114 	beq.w	848e2 <_malloc_r+0x472>
   846ba:	f1c1 0008 	rsb	r0, r1, #8
   846be:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   846c2:	4402      	add	r2, r0
   846c4:	3108      	adds	r1, #8
   846c6:	eb02 090b 	add.w	r9, r2, fp
   846ca:	f3c9 090b 	ubfx	r9, r9, #0, #12
   846ce:	eba1 0909 	sub.w	r9, r1, r9
   846d2:	4649      	mov	r1, r9
   846d4:	4628      	mov	r0, r5
   846d6:	9301      	str	r3, [sp, #4]
   846d8:	9200      	str	r2, [sp, #0]
   846da:	f000 fbed 	bl	84eb8 <_sbrk_r>
   846de:	1c43      	adds	r3, r0, #1
   846e0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   846e4:	f000 8142 	beq.w	8496c <_malloc_r+0x4fc>
   846e8:	1a80      	subs	r0, r0, r2
   846ea:	4448      	add	r0, r9
   846ec:	f040 0001 	orr.w	r0, r0, #1
   846f0:	6819      	ldr	r1, [r3, #0]
   846f2:	42bc      	cmp	r4, r7
   846f4:	4449      	add	r1, r9
   846f6:	60ba      	str	r2, [r7, #8]
   846f8:	6019      	str	r1, [r3, #0]
   846fa:	6050      	str	r0, [r2, #4]
   846fc:	d017      	beq.n	8472e <_malloc_r+0x2be>
   846fe:	f1b8 0f0f 	cmp.w	r8, #15
   84702:	f240 80fa 	bls.w	848fa <_malloc_r+0x48a>
   84706:	f04f 0c05 	mov.w	ip, #5
   8470a:	6862      	ldr	r2, [r4, #4]
   8470c:	f1a8 000c 	sub.w	r0, r8, #12
   84710:	f020 0007 	bic.w	r0, r0, #7
   84714:	f002 0201 	and.w	r2, r2, #1
   84718:	eb04 0e00 	add.w	lr, r4, r0
   8471c:	4302      	orrs	r2, r0
   8471e:	280f      	cmp	r0, #15
   84720:	6062      	str	r2, [r4, #4]
   84722:	f8ce c004 	str.w	ip, [lr, #4]
   84726:	f8ce c008 	str.w	ip, [lr, #8]
   8472a:	f200 8116 	bhi.w	8495a <_malloc_r+0x4ea>
   8472e:	4b1d      	ldr	r3, [pc, #116]	; (847a4 <_malloc_r+0x334>)
   84730:	68bc      	ldr	r4, [r7, #8]
   84732:	681a      	ldr	r2, [r3, #0]
   84734:	4291      	cmp	r1, r2
   84736:	bf88      	it	hi
   84738:	6019      	strhi	r1, [r3, #0]
   8473a:	4b1b      	ldr	r3, [pc, #108]	; (847a8 <_malloc_r+0x338>)
   8473c:	681a      	ldr	r2, [r3, #0]
   8473e:	4291      	cmp	r1, r2
   84740:	6862      	ldr	r2, [r4, #4]
   84742:	bf88      	it	hi
   84744:	6019      	strhi	r1, [r3, #0]
   84746:	f022 0203 	bic.w	r2, r2, #3
   8474a:	4296      	cmp	r6, r2
   8474c:	eba2 0306 	sub.w	r3, r2, r6
   84750:	d801      	bhi.n	84756 <_malloc_r+0x2e6>
   84752:	2b0f      	cmp	r3, #15
   84754:	dc04      	bgt.n	84760 <_malloc_r+0x2f0>
   84756:	4628      	mov	r0, r5
   84758:	f000 f9f2 	bl	84b40 <__malloc_unlock>
   8475c:	2400      	movs	r4, #0
   8475e:	e74d      	b.n	845fc <_malloc_r+0x18c>
   84760:	f046 0201 	orr.w	r2, r6, #1
   84764:	f043 0301 	orr.w	r3, r3, #1
   84768:	4426      	add	r6, r4
   8476a:	6062      	str	r2, [r4, #4]
   8476c:	4628      	mov	r0, r5
   8476e:	60be      	str	r6, [r7, #8]
   84770:	3408      	adds	r4, #8
   84772:	6073      	str	r3, [r6, #4]
   84774:	f000 f9e4 	bl	84b40 <__malloc_unlock>
   84778:	4620      	mov	r0, r4
   8477a:	b003      	add	sp, #12
   8477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84780:	2b14      	cmp	r3, #20
   84782:	d970      	bls.n	84866 <_malloc_r+0x3f6>
   84784:	2b54      	cmp	r3, #84	; 0x54
   84786:	f200 80a2 	bhi.w	848ce <_malloc_r+0x45e>
   8478a:	0b33      	lsrs	r3, r6, #12
   8478c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84790:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84794:	00c1      	lsls	r1, r0, #3
   84796:	e68d      	b.n	844b4 <_malloc_r+0x44>
   84798:	200706d0 	.word	0x200706d0
   8479c:	2007c4f0 	.word	0x2007c4f0
   847a0:	2007c4c0 	.word	0x2007c4c0
   847a4:	2007c4e8 	.word	0x2007c4e8
   847a8:	2007c4ec 	.word	0x2007c4ec
   847ac:	200706d8 	.word	0x200706d8
   847b0:	20070ad8 	.word	0x20070ad8
   847b4:	0a5a      	lsrs	r2, r3, #9
   847b6:	2a04      	cmp	r2, #4
   847b8:	d95b      	bls.n	84872 <_malloc_r+0x402>
   847ba:	2a14      	cmp	r2, #20
   847bc:	f200 80ae 	bhi.w	8491c <_malloc_r+0x4ac>
   847c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   847c4:	00c9      	lsls	r1, r1, #3
   847c6:	325b      	adds	r2, #91	; 0x5b
   847c8:	eb07 0c01 	add.w	ip, r7, r1
   847cc:	5879      	ldr	r1, [r7, r1]
   847ce:	f1ac 0c08 	sub.w	ip, ip, #8
   847d2:	458c      	cmp	ip, r1
   847d4:	f000 8088 	beq.w	848e8 <_malloc_r+0x478>
   847d8:	684a      	ldr	r2, [r1, #4]
   847da:	f022 0203 	bic.w	r2, r2, #3
   847de:	4293      	cmp	r3, r2
   847e0:	d273      	bcs.n	848ca <_malloc_r+0x45a>
   847e2:	6889      	ldr	r1, [r1, #8]
   847e4:	458c      	cmp	ip, r1
   847e6:	d1f7      	bne.n	847d8 <_malloc_r+0x368>
   847e8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   847ec:	687a      	ldr	r2, [r7, #4]
   847ee:	60e3      	str	r3, [r4, #12]
   847f0:	f8c4 c008 	str.w	ip, [r4, #8]
   847f4:	609c      	str	r4, [r3, #8]
   847f6:	f8cc 400c 	str.w	r4, [ip, #12]
   847fa:	e69e      	b.n	8453a <_malloc_r+0xca>
   847fc:	f046 0c01 	orr.w	ip, r6, #1
   84800:	f042 0101 	orr.w	r1, r2, #1
   84804:	4426      	add	r6, r4
   84806:	f8c4 c004 	str.w	ip, [r4, #4]
   8480a:	4628      	mov	r0, r5
   8480c:	617e      	str	r6, [r7, #20]
   8480e:	613e      	str	r6, [r7, #16]
   84810:	f8c6 e00c 	str.w	lr, [r6, #12]
   84814:	f8c6 e008 	str.w	lr, [r6, #8]
   84818:	6071      	str	r1, [r6, #4]
   8481a:	50e2      	str	r2, [r4, r3]
   8481c:	f000 f990 	bl	84b40 <__malloc_unlock>
   84820:	3408      	adds	r4, #8
   84822:	e6eb      	b.n	845fc <_malloc_r+0x18c>
   84824:	687a      	ldr	r2, [r7, #4]
   84826:	e688      	b.n	8453a <_malloc_r+0xca>
   84828:	f108 0801 	add.w	r8, r8, #1
   8482c:	f018 0f03 	tst.w	r8, #3
   84830:	f10c 0c08 	add.w	ip, ip, #8
   84834:	f47f ae93 	bne.w	8455e <_malloc_r+0xee>
   84838:	e02d      	b.n	84896 <_malloc_r+0x426>
   8483a:	68dc      	ldr	r4, [r3, #12]
   8483c:	42a3      	cmp	r3, r4
   8483e:	bf08      	it	eq
   84840:	3002      	addeq	r0, #2
   84842:	f43f ae4b 	beq.w	844dc <_malloc_r+0x6c>
   84846:	e6c9      	b.n	845dc <_malloc_r+0x16c>
   84848:	461c      	mov	r4, r3
   8484a:	4419      	add	r1, r3
   8484c:	684a      	ldr	r2, [r1, #4]
   8484e:	68db      	ldr	r3, [r3, #12]
   84850:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84854:	f042 0201 	orr.w	r2, r2, #1
   84858:	604a      	str	r2, [r1, #4]
   8485a:	4628      	mov	r0, r5
   8485c:	60f3      	str	r3, [r6, #12]
   8485e:	609e      	str	r6, [r3, #8]
   84860:	f000 f96e 	bl	84b40 <__malloc_unlock>
   84864:	e6ca      	b.n	845fc <_malloc_r+0x18c>
   84866:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8486a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8486e:	00c1      	lsls	r1, r0, #3
   84870:	e620      	b.n	844b4 <_malloc_r+0x44>
   84872:	099a      	lsrs	r2, r3, #6
   84874:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84878:	00c9      	lsls	r1, r1, #3
   8487a:	3238      	adds	r2, #56	; 0x38
   8487c:	e7a4      	b.n	847c8 <_malloc_r+0x358>
   8487e:	42bc      	cmp	r4, r7
   84880:	d054      	beq.n	8492c <_malloc_r+0x4bc>
   84882:	68bc      	ldr	r4, [r7, #8]
   84884:	6862      	ldr	r2, [r4, #4]
   84886:	f022 0203 	bic.w	r2, r2, #3
   8488a:	e75e      	b.n	8474a <_malloc_r+0x2da>
   8488c:	f859 3908 	ldr.w	r3, [r9], #-8
   84890:	4599      	cmp	r9, r3
   84892:	f040 8086 	bne.w	849a2 <_malloc_r+0x532>
   84896:	f010 0f03 	tst.w	r0, #3
   8489a:	f100 30ff 	add.w	r0, r0, #4294967295
   8489e:	d1f5      	bne.n	8488c <_malloc_r+0x41c>
   848a0:	687b      	ldr	r3, [r7, #4]
   848a2:	ea23 0304 	bic.w	r3, r3, r4
   848a6:	607b      	str	r3, [r7, #4]
   848a8:	0064      	lsls	r4, r4, #1
   848aa:	429c      	cmp	r4, r3
   848ac:	f63f aec8 	bhi.w	84640 <_malloc_r+0x1d0>
   848b0:	2c00      	cmp	r4, #0
   848b2:	f43f aec5 	beq.w	84640 <_malloc_r+0x1d0>
   848b6:	421c      	tst	r4, r3
   848b8:	4640      	mov	r0, r8
   848ba:	f47f ae4c 	bne.w	84556 <_malloc_r+0xe6>
   848be:	0064      	lsls	r4, r4, #1
   848c0:	421c      	tst	r4, r3
   848c2:	f100 0004 	add.w	r0, r0, #4
   848c6:	d0fa      	beq.n	848be <_malloc_r+0x44e>
   848c8:	e645      	b.n	84556 <_malloc_r+0xe6>
   848ca:	468c      	mov	ip, r1
   848cc:	e78c      	b.n	847e8 <_malloc_r+0x378>
   848ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   848d2:	d815      	bhi.n	84900 <_malloc_r+0x490>
   848d4:	0bf3      	lsrs	r3, r6, #15
   848d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   848da:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   848de:	00c1      	lsls	r1, r0, #3
   848e0:	e5e8      	b.n	844b4 <_malloc_r+0x44>
   848e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   848e6:	e6ee      	b.n	846c6 <_malloc_r+0x256>
   848e8:	2101      	movs	r1, #1
   848ea:	687b      	ldr	r3, [r7, #4]
   848ec:	1092      	asrs	r2, r2, #2
   848ee:	fa01 f202 	lsl.w	r2, r1, r2
   848f2:	431a      	orrs	r2, r3
   848f4:	607a      	str	r2, [r7, #4]
   848f6:	4663      	mov	r3, ip
   848f8:	e779      	b.n	847ee <_malloc_r+0x37e>
   848fa:	2301      	movs	r3, #1
   848fc:	6053      	str	r3, [r2, #4]
   848fe:	e72a      	b.n	84756 <_malloc_r+0x2e6>
   84900:	f240 5254 	movw	r2, #1364	; 0x554
   84904:	4293      	cmp	r3, r2
   84906:	d822      	bhi.n	8494e <_malloc_r+0x4de>
   84908:	0cb3      	lsrs	r3, r6, #18
   8490a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8490e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84912:	00c1      	lsls	r1, r0, #3
   84914:	e5ce      	b.n	844b4 <_malloc_r+0x44>
   84916:	f103 0b10 	add.w	fp, r3, #16
   8491a:	e6af      	b.n	8467c <_malloc_r+0x20c>
   8491c:	2a54      	cmp	r2, #84	; 0x54
   8491e:	d829      	bhi.n	84974 <_malloc_r+0x504>
   84920:	0b1a      	lsrs	r2, r3, #12
   84922:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84926:	00c9      	lsls	r1, r1, #3
   84928:	326e      	adds	r2, #110	; 0x6e
   8492a:	e74d      	b.n	847c8 <_malloc_r+0x358>
   8492c:	4b20      	ldr	r3, [pc, #128]	; (849b0 <_malloc_r+0x540>)
   8492e:	6819      	ldr	r1, [r3, #0]
   84930:	4459      	add	r1, fp
   84932:	6019      	str	r1, [r3, #0]
   84934:	e6b3      	b.n	8469e <_malloc_r+0x22e>
   84936:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8493a:	2800      	cmp	r0, #0
   8493c:	f47f aeaf 	bne.w	8469e <_malloc_r+0x22e>
   84940:	eb08 030b 	add.w	r3, r8, fp
   84944:	68ba      	ldr	r2, [r7, #8]
   84946:	f043 0301 	orr.w	r3, r3, #1
   8494a:	6053      	str	r3, [r2, #4]
   8494c:	e6ef      	b.n	8472e <_malloc_r+0x2be>
   8494e:	207f      	movs	r0, #127	; 0x7f
   84950:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84954:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84958:	e5ac      	b.n	844b4 <_malloc_r+0x44>
   8495a:	f104 0108 	add.w	r1, r4, #8
   8495e:	4628      	mov	r0, r5
   84960:	9300      	str	r3, [sp, #0]
   84962:	f7ff fa67 	bl	83e34 <_free_r>
   84966:	9b00      	ldr	r3, [sp, #0]
   84968:	6819      	ldr	r1, [r3, #0]
   8496a:	e6e0      	b.n	8472e <_malloc_r+0x2be>
   8496c:	2001      	movs	r0, #1
   8496e:	f04f 0900 	mov.w	r9, #0
   84972:	e6bd      	b.n	846f0 <_malloc_r+0x280>
   84974:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84978:	d805      	bhi.n	84986 <_malloc_r+0x516>
   8497a:	0bda      	lsrs	r2, r3, #15
   8497c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84980:	00c9      	lsls	r1, r1, #3
   84982:	3277      	adds	r2, #119	; 0x77
   84984:	e720      	b.n	847c8 <_malloc_r+0x358>
   84986:	f240 5154 	movw	r1, #1364	; 0x554
   8498a:	428a      	cmp	r2, r1
   8498c:	d805      	bhi.n	8499a <_malloc_r+0x52a>
   8498e:	0c9a      	lsrs	r2, r3, #18
   84990:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84994:	00c9      	lsls	r1, r1, #3
   84996:	327c      	adds	r2, #124	; 0x7c
   84998:	e716      	b.n	847c8 <_malloc_r+0x358>
   8499a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8499e:	227e      	movs	r2, #126	; 0x7e
   849a0:	e712      	b.n	847c8 <_malloc_r+0x358>
   849a2:	687b      	ldr	r3, [r7, #4]
   849a4:	e780      	b.n	848a8 <_malloc_r+0x438>
   849a6:	08f0      	lsrs	r0, r6, #3
   849a8:	f106 0308 	add.w	r3, r6, #8
   849ac:	e60e      	b.n	845cc <_malloc_r+0x15c>
   849ae:	bf00      	nop
   849b0:	2007c4c0 	.word	0x2007c4c0

000849b4 <__ascii_mbtowc>:
   849b4:	b082      	sub	sp, #8
   849b6:	b149      	cbz	r1, 849cc <__ascii_mbtowc+0x18>
   849b8:	b15a      	cbz	r2, 849d2 <__ascii_mbtowc+0x1e>
   849ba:	b16b      	cbz	r3, 849d8 <__ascii_mbtowc+0x24>
   849bc:	7813      	ldrb	r3, [r2, #0]
   849be:	600b      	str	r3, [r1, #0]
   849c0:	7812      	ldrb	r2, [r2, #0]
   849c2:	1c10      	adds	r0, r2, #0
   849c4:	bf18      	it	ne
   849c6:	2001      	movne	r0, #1
   849c8:	b002      	add	sp, #8
   849ca:	4770      	bx	lr
   849cc:	a901      	add	r1, sp, #4
   849ce:	2a00      	cmp	r2, #0
   849d0:	d1f3      	bne.n	849ba <__ascii_mbtowc+0x6>
   849d2:	4610      	mov	r0, r2
   849d4:	b002      	add	sp, #8
   849d6:	4770      	bx	lr
   849d8:	f06f 0001 	mvn.w	r0, #1
   849dc:	e7f4      	b.n	849c8 <__ascii_mbtowc+0x14>
   849de:	bf00      	nop

000849e0 <memchr>:
   849e0:	0783      	lsls	r3, r0, #30
   849e2:	b470      	push	{r4, r5, r6}
   849e4:	b2cd      	uxtb	r5, r1
   849e6:	d03d      	beq.n	84a64 <memchr+0x84>
   849e8:	1e54      	subs	r4, r2, #1
   849ea:	b30a      	cbz	r2, 84a30 <memchr+0x50>
   849ec:	7803      	ldrb	r3, [r0, #0]
   849ee:	42ab      	cmp	r3, r5
   849f0:	d01f      	beq.n	84a32 <memchr+0x52>
   849f2:	1c43      	adds	r3, r0, #1
   849f4:	e005      	b.n	84a02 <memchr+0x22>
   849f6:	f114 34ff 	adds.w	r4, r4, #4294967295
   849fa:	d319      	bcc.n	84a30 <memchr+0x50>
   849fc:	7802      	ldrb	r2, [r0, #0]
   849fe:	42aa      	cmp	r2, r5
   84a00:	d017      	beq.n	84a32 <memchr+0x52>
   84a02:	f013 0f03 	tst.w	r3, #3
   84a06:	4618      	mov	r0, r3
   84a08:	f103 0301 	add.w	r3, r3, #1
   84a0c:	d1f3      	bne.n	849f6 <memchr+0x16>
   84a0e:	2c03      	cmp	r4, #3
   84a10:	d811      	bhi.n	84a36 <memchr+0x56>
   84a12:	b34c      	cbz	r4, 84a68 <memchr+0x88>
   84a14:	7803      	ldrb	r3, [r0, #0]
   84a16:	42ab      	cmp	r3, r5
   84a18:	d00b      	beq.n	84a32 <memchr+0x52>
   84a1a:	4404      	add	r4, r0
   84a1c:	1c43      	adds	r3, r0, #1
   84a1e:	e002      	b.n	84a26 <memchr+0x46>
   84a20:	7802      	ldrb	r2, [r0, #0]
   84a22:	42aa      	cmp	r2, r5
   84a24:	d005      	beq.n	84a32 <memchr+0x52>
   84a26:	429c      	cmp	r4, r3
   84a28:	4618      	mov	r0, r3
   84a2a:	f103 0301 	add.w	r3, r3, #1
   84a2e:	d1f7      	bne.n	84a20 <memchr+0x40>
   84a30:	2000      	movs	r0, #0
   84a32:	bc70      	pop	{r4, r5, r6}
   84a34:	4770      	bx	lr
   84a36:	0209      	lsls	r1, r1, #8
   84a38:	b289      	uxth	r1, r1
   84a3a:	4329      	orrs	r1, r5
   84a3c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84a40:	6803      	ldr	r3, [r0, #0]
   84a42:	4606      	mov	r6, r0
   84a44:	404b      	eors	r3, r1
   84a46:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84a4a:	ea22 0303 	bic.w	r3, r2, r3
   84a4e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84a52:	f100 0004 	add.w	r0, r0, #4
   84a56:	d103      	bne.n	84a60 <memchr+0x80>
   84a58:	3c04      	subs	r4, #4
   84a5a:	2c03      	cmp	r4, #3
   84a5c:	d8f0      	bhi.n	84a40 <memchr+0x60>
   84a5e:	e7d8      	b.n	84a12 <memchr+0x32>
   84a60:	4630      	mov	r0, r6
   84a62:	e7d7      	b.n	84a14 <memchr+0x34>
   84a64:	4614      	mov	r4, r2
   84a66:	e7d2      	b.n	84a0e <memchr+0x2e>
   84a68:	4620      	mov	r0, r4
   84a6a:	e7e2      	b.n	84a32 <memchr+0x52>

00084a6c <memmove>:
   84a6c:	4288      	cmp	r0, r1
   84a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84a70:	d90d      	bls.n	84a8e <memmove+0x22>
   84a72:	188b      	adds	r3, r1, r2
   84a74:	4298      	cmp	r0, r3
   84a76:	d20a      	bcs.n	84a8e <memmove+0x22>
   84a78:	1884      	adds	r4, r0, r2
   84a7a:	2a00      	cmp	r2, #0
   84a7c:	d051      	beq.n	84b22 <memmove+0xb6>
   84a7e:	4622      	mov	r2, r4
   84a80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84a84:	4299      	cmp	r1, r3
   84a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84a8a:	d1f9      	bne.n	84a80 <memmove+0x14>
   84a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a8e:	2a0f      	cmp	r2, #15
   84a90:	d948      	bls.n	84b24 <memmove+0xb8>
   84a92:	ea41 0300 	orr.w	r3, r1, r0
   84a96:	079b      	lsls	r3, r3, #30
   84a98:	d146      	bne.n	84b28 <memmove+0xbc>
   84a9a:	4615      	mov	r5, r2
   84a9c:	f100 0410 	add.w	r4, r0, #16
   84aa0:	f101 0310 	add.w	r3, r1, #16
   84aa4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84aa8:	3d10      	subs	r5, #16
   84aaa:	f844 6c10 	str.w	r6, [r4, #-16]
   84aae:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84ab2:	2d0f      	cmp	r5, #15
   84ab4:	f844 6c0c 	str.w	r6, [r4, #-12]
   84ab8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84abc:	f104 0410 	add.w	r4, r4, #16
   84ac0:	f844 6c18 	str.w	r6, [r4, #-24]
   84ac4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84ac8:	f103 0310 	add.w	r3, r3, #16
   84acc:	f844 6c14 	str.w	r6, [r4, #-20]
   84ad0:	d8e8      	bhi.n	84aa4 <memmove+0x38>
   84ad2:	f1a2 0310 	sub.w	r3, r2, #16
   84ad6:	f023 030f 	bic.w	r3, r3, #15
   84ada:	f002 0e0f 	and.w	lr, r2, #15
   84ade:	3310      	adds	r3, #16
   84ae0:	f1be 0f03 	cmp.w	lr, #3
   84ae4:	4419      	add	r1, r3
   84ae6:	4403      	add	r3, r0
   84ae8:	d921      	bls.n	84b2e <memmove+0xc2>
   84aea:	460e      	mov	r6, r1
   84aec:	4674      	mov	r4, lr
   84aee:	1f1d      	subs	r5, r3, #4
   84af0:	f856 7b04 	ldr.w	r7, [r6], #4
   84af4:	3c04      	subs	r4, #4
   84af6:	2c03      	cmp	r4, #3
   84af8:	f845 7f04 	str.w	r7, [r5, #4]!
   84afc:	d8f8      	bhi.n	84af0 <memmove+0x84>
   84afe:	f1ae 0404 	sub.w	r4, lr, #4
   84b02:	f024 0403 	bic.w	r4, r4, #3
   84b06:	3404      	adds	r4, #4
   84b08:	4421      	add	r1, r4
   84b0a:	4423      	add	r3, r4
   84b0c:	f002 0203 	and.w	r2, r2, #3
   84b10:	b162      	cbz	r2, 84b2c <memmove+0xc0>
   84b12:	3b01      	subs	r3, #1
   84b14:	440a      	add	r2, r1
   84b16:	f811 4b01 	ldrb.w	r4, [r1], #1
   84b1a:	428a      	cmp	r2, r1
   84b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
   84b20:	d1f9      	bne.n	84b16 <memmove+0xaa>
   84b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b24:	4603      	mov	r3, r0
   84b26:	e7f3      	b.n	84b10 <memmove+0xa4>
   84b28:	4603      	mov	r3, r0
   84b2a:	e7f2      	b.n	84b12 <memmove+0xa6>
   84b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b2e:	4672      	mov	r2, lr
   84b30:	e7ee      	b.n	84b10 <memmove+0xa4>
   84b32:	bf00      	nop

00084b34 <__malloc_lock>:
   84b34:	4801      	ldr	r0, [pc, #4]	; (84b3c <__malloc_lock+0x8>)
   84b36:	f7ff bc17 	b.w	84368 <__retarget_lock_acquire_recursive>
   84b3a:	bf00      	nop
   84b3c:	2007c55c 	.word	0x2007c55c

00084b40 <__malloc_unlock>:
   84b40:	4801      	ldr	r0, [pc, #4]	; (84b48 <__malloc_unlock+0x8>)
   84b42:	f7ff bc13 	b.w	8436c <__retarget_lock_release_recursive>
   84b46:	bf00      	nop
   84b48:	2007c55c 	.word	0x2007c55c

00084b4c <_realloc_r>:
   84b4c:	2900      	cmp	r1, #0
   84b4e:	f000 8094 	beq.w	84c7a <_realloc_r+0x12e>
   84b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b56:	460c      	mov	r4, r1
   84b58:	4615      	mov	r5, r2
   84b5a:	b083      	sub	sp, #12
   84b5c:	4680      	mov	r8, r0
   84b5e:	f105 060b 	add.w	r6, r5, #11
   84b62:	f7ff ffe7 	bl	84b34 <__malloc_lock>
   84b66:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84b6a:	2e16      	cmp	r6, #22
   84b6c:	f02e 0703 	bic.w	r7, lr, #3
   84b70:	f1a4 0908 	sub.w	r9, r4, #8
   84b74:	d83c      	bhi.n	84bf0 <_realloc_r+0xa4>
   84b76:	2210      	movs	r2, #16
   84b78:	4616      	mov	r6, r2
   84b7a:	42b5      	cmp	r5, r6
   84b7c:	d83d      	bhi.n	84bfa <_realloc_r+0xae>
   84b7e:	4297      	cmp	r7, r2
   84b80:	da43      	bge.n	84c0a <_realloc_r+0xbe>
   84b82:	4bc6      	ldr	r3, [pc, #792]	; (84e9c <_realloc_r+0x350>)
   84b84:	eb09 0007 	add.w	r0, r9, r7
   84b88:	6899      	ldr	r1, [r3, #8]
   84b8a:	4288      	cmp	r0, r1
   84b8c:	f000 80c3 	beq.w	84d16 <_realloc_r+0x1ca>
   84b90:	6843      	ldr	r3, [r0, #4]
   84b92:	f023 0101 	bic.w	r1, r3, #1
   84b96:	4401      	add	r1, r0
   84b98:	6849      	ldr	r1, [r1, #4]
   84b9a:	07c9      	lsls	r1, r1, #31
   84b9c:	d54d      	bpl.n	84c3a <_realloc_r+0xee>
   84b9e:	f01e 0f01 	tst.w	lr, #1
   84ba2:	f000 809b 	beq.w	84cdc <_realloc_r+0x190>
   84ba6:	4629      	mov	r1, r5
   84ba8:	4640      	mov	r0, r8
   84baa:	f7ff fc61 	bl	84470 <_malloc_r>
   84bae:	4605      	mov	r5, r0
   84bb0:	2800      	cmp	r0, #0
   84bb2:	d03b      	beq.n	84c2c <_realloc_r+0xe0>
   84bb4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84bb8:	f1a0 0208 	sub.w	r2, r0, #8
   84bbc:	f023 0301 	bic.w	r3, r3, #1
   84bc0:	444b      	add	r3, r9
   84bc2:	429a      	cmp	r2, r3
   84bc4:	f000 812b 	beq.w	84e1e <_realloc_r+0x2d2>
   84bc8:	1f3a      	subs	r2, r7, #4
   84bca:	2a24      	cmp	r2, #36	; 0x24
   84bcc:	f200 8118 	bhi.w	84e00 <_realloc_r+0x2b4>
   84bd0:	2a13      	cmp	r2, #19
   84bd2:	f200 80eb 	bhi.w	84dac <_realloc_r+0x260>
   84bd6:	4603      	mov	r3, r0
   84bd8:	4622      	mov	r2, r4
   84bda:	6811      	ldr	r1, [r2, #0]
   84bdc:	6019      	str	r1, [r3, #0]
   84bde:	6851      	ldr	r1, [r2, #4]
   84be0:	6059      	str	r1, [r3, #4]
   84be2:	6892      	ldr	r2, [r2, #8]
   84be4:	609a      	str	r2, [r3, #8]
   84be6:	4621      	mov	r1, r4
   84be8:	4640      	mov	r0, r8
   84bea:	f7ff f923 	bl	83e34 <_free_r>
   84bee:	e01d      	b.n	84c2c <_realloc_r+0xe0>
   84bf0:	f026 0607 	bic.w	r6, r6, #7
   84bf4:	2e00      	cmp	r6, #0
   84bf6:	4632      	mov	r2, r6
   84bf8:	dabf      	bge.n	84b7a <_realloc_r+0x2e>
   84bfa:	2500      	movs	r5, #0
   84bfc:	230c      	movs	r3, #12
   84bfe:	4628      	mov	r0, r5
   84c00:	f8c8 3000 	str.w	r3, [r8]
   84c04:	b003      	add	sp, #12
   84c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c0a:	4625      	mov	r5, r4
   84c0c:	1bbb      	subs	r3, r7, r6
   84c0e:	2b0f      	cmp	r3, #15
   84c10:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84c14:	d81d      	bhi.n	84c52 <_realloc_r+0x106>
   84c16:	f002 0201 	and.w	r2, r2, #1
   84c1a:	433a      	orrs	r2, r7
   84c1c:	eb09 0107 	add.w	r1, r9, r7
   84c20:	f8c9 2004 	str.w	r2, [r9, #4]
   84c24:	684b      	ldr	r3, [r1, #4]
   84c26:	f043 0301 	orr.w	r3, r3, #1
   84c2a:	604b      	str	r3, [r1, #4]
   84c2c:	4640      	mov	r0, r8
   84c2e:	f7ff ff87 	bl	84b40 <__malloc_unlock>
   84c32:	4628      	mov	r0, r5
   84c34:	b003      	add	sp, #12
   84c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c3a:	f023 0303 	bic.w	r3, r3, #3
   84c3e:	18f9      	adds	r1, r7, r3
   84c40:	4291      	cmp	r1, r2
   84c42:	db1d      	blt.n	84c80 <_realloc_r+0x134>
   84c44:	68c3      	ldr	r3, [r0, #12]
   84c46:	6882      	ldr	r2, [r0, #8]
   84c48:	4625      	mov	r5, r4
   84c4a:	60d3      	str	r3, [r2, #12]
   84c4c:	460f      	mov	r7, r1
   84c4e:	609a      	str	r2, [r3, #8]
   84c50:	e7dc      	b.n	84c0c <_realloc_r+0xc0>
   84c52:	f002 0201 	and.w	r2, r2, #1
   84c56:	eb09 0106 	add.w	r1, r9, r6
   84c5a:	f043 0301 	orr.w	r3, r3, #1
   84c5e:	4332      	orrs	r2, r6
   84c60:	f8c9 2004 	str.w	r2, [r9, #4]
   84c64:	444f      	add	r7, r9
   84c66:	604b      	str	r3, [r1, #4]
   84c68:	687b      	ldr	r3, [r7, #4]
   84c6a:	3108      	adds	r1, #8
   84c6c:	f043 0301 	orr.w	r3, r3, #1
   84c70:	607b      	str	r3, [r7, #4]
   84c72:	4640      	mov	r0, r8
   84c74:	f7ff f8de 	bl	83e34 <_free_r>
   84c78:	e7d8      	b.n	84c2c <_realloc_r+0xe0>
   84c7a:	4611      	mov	r1, r2
   84c7c:	f7ff bbf8 	b.w	84470 <_malloc_r>
   84c80:	f01e 0f01 	tst.w	lr, #1
   84c84:	d18f      	bne.n	84ba6 <_realloc_r+0x5a>
   84c86:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84c8a:	eba9 0a01 	sub.w	sl, r9, r1
   84c8e:	f8da 1004 	ldr.w	r1, [sl, #4]
   84c92:	f021 0103 	bic.w	r1, r1, #3
   84c96:	440b      	add	r3, r1
   84c98:	443b      	add	r3, r7
   84c9a:	4293      	cmp	r3, r2
   84c9c:	db26      	blt.n	84cec <_realloc_r+0x1a0>
   84c9e:	4655      	mov	r5, sl
   84ca0:	68c1      	ldr	r1, [r0, #12]
   84ca2:	6880      	ldr	r0, [r0, #8]
   84ca4:	1f3a      	subs	r2, r7, #4
   84ca6:	60c1      	str	r1, [r0, #12]
   84ca8:	6088      	str	r0, [r1, #8]
   84caa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84cae:	f8da 100c 	ldr.w	r1, [sl, #12]
   84cb2:	2a24      	cmp	r2, #36	; 0x24
   84cb4:	60c1      	str	r1, [r0, #12]
   84cb6:	6088      	str	r0, [r1, #8]
   84cb8:	d826      	bhi.n	84d08 <_realloc_r+0x1bc>
   84cba:	2a13      	cmp	r2, #19
   84cbc:	f240 8081 	bls.w	84dc2 <_realloc_r+0x276>
   84cc0:	6821      	ldr	r1, [r4, #0]
   84cc2:	2a1b      	cmp	r2, #27
   84cc4:	f8ca 1008 	str.w	r1, [sl, #8]
   84cc8:	6861      	ldr	r1, [r4, #4]
   84cca:	f8ca 100c 	str.w	r1, [sl, #12]
   84cce:	f200 80ad 	bhi.w	84e2c <_realloc_r+0x2e0>
   84cd2:	f104 0008 	add.w	r0, r4, #8
   84cd6:	f10a 0210 	add.w	r2, sl, #16
   84cda:	e074      	b.n	84dc6 <_realloc_r+0x27a>
   84cdc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84ce0:	eba9 0a03 	sub.w	sl, r9, r3
   84ce4:	f8da 1004 	ldr.w	r1, [sl, #4]
   84ce8:	f021 0103 	bic.w	r1, r1, #3
   84cec:	187b      	adds	r3, r7, r1
   84cee:	4293      	cmp	r3, r2
   84cf0:	f6ff af59 	blt.w	84ba6 <_realloc_r+0x5a>
   84cf4:	4655      	mov	r5, sl
   84cf6:	f8da 100c 	ldr.w	r1, [sl, #12]
   84cfa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84cfe:	1f3a      	subs	r2, r7, #4
   84d00:	2a24      	cmp	r2, #36	; 0x24
   84d02:	60c1      	str	r1, [r0, #12]
   84d04:	6088      	str	r0, [r1, #8]
   84d06:	d9d8      	bls.n	84cba <_realloc_r+0x16e>
   84d08:	4621      	mov	r1, r4
   84d0a:	4628      	mov	r0, r5
   84d0c:	461f      	mov	r7, r3
   84d0e:	46d1      	mov	r9, sl
   84d10:	f7ff feac 	bl	84a6c <memmove>
   84d14:	e77a      	b.n	84c0c <_realloc_r+0xc0>
   84d16:	6841      	ldr	r1, [r0, #4]
   84d18:	f106 0010 	add.w	r0, r6, #16
   84d1c:	f021 0b03 	bic.w	fp, r1, #3
   84d20:	44bb      	add	fp, r7
   84d22:	4583      	cmp	fp, r0
   84d24:	da58      	bge.n	84dd8 <_realloc_r+0x28c>
   84d26:	f01e 0f01 	tst.w	lr, #1
   84d2a:	f47f af3c 	bne.w	84ba6 <_realloc_r+0x5a>
   84d2e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84d32:	eba9 0a01 	sub.w	sl, r9, r1
   84d36:	f8da 1004 	ldr.w	r1, [sl, #4]
   84d3a:	f021 0103 	bic.w	r1, r1, #3
   84d3e:	448b      	add	fp, r1
   84d40:	4558      	cmp	r0, fp
   84d42:	dcd3      	bgt.n	84cec <_realloc_r+0x1a0>
   84d44:	4655      	mov	r5, sl
   84d46:	f8da 100c 	ldr.w	r1, [sl, #12]
   84d4a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84d4e:	1f3a      	subs	r2, r7, #4
   84d50:	2a24      	cmp	r2, #36	; 0x24
   84d52:	60c1      	str	r1, [r0, #12]
   84d54:	6088      	str	r0, [r1, #8]
   84d56:	f200 808d 	bhi.w	84e74 <_realloc_r+0x328>
   84d5a:	2a13      	cmp	r2, #19
   84d5c:	f240 8087 	bls.w	84e6e <_realloc_r+0x322>
   84d60:	6821      	ldr	r1, [r4, #0]
   84d62:	2a1b      	cmp	r2, #27
   84d64:	f8ca 1008 	str.w	r1, [sl, #8]
   84d68:	6861      	ldr	r1, [r4, #4]
   84d6a:	f8ca 100c 	str.w	r1, [sl, #12]
   84d6e:	f200 8088 	bhi.w	84e82 <_realloc_r+0x336>
   84d72:	f104 0108 	add.w	r1, r4, #8
   84d76:	f10a 0210 	add.w	r2, sl, #16
   84d7a:	6808      	ldr	r0, [r1, #0]
   84d7c:	6010      	str	r0, [r2, #0]
   84d7e:	6848      	ldr	r0, [r1, #4]
   84d80:	6050      	str	r0, [r2, #4]
   84d82:	6889      	ldr	r1, [r1, #8]
   84d84:	6091      	str	r1, [r2, #8]
   84d86:	ebab 0206 	sub.w	r2, fp, r6
   84d8a:	eb0a 0106 	add.w	r1, sl, r6
   84d8e:	f042 0201 	orr.w	r2, r2, #1
   84d92:	6099      	str	r1, [r3, #8]
   84d94:	604a      	str	r2, [r1, #4]
   84d96:	f8da 3004 	ldr.w	r3, [sl, #4]
   84d9a:	4640      	mov	r0, r8
   84d9c:	f003 0301 	and.w	r3, r3, #1
   84da0:	431e      	orrs	r6, r3
   84da2:	f8ca 6004 	str.w	r6, [sl, #4]
   84da6:	f7ff fecb 	bl	84b40 <__malloc_unlock>
   84daa:	e742      	b.n	84c32 <_realloc_r+0xe6>
   84dac:	6823      	ldr	r3, [r4, #0]
   84dae:	2a1b      	cmp	r2, #27
   84db0:	6003      	str	r3, [r0, #0]
   84db2:	6863      	ldr	r3, [r4, #4]
   84db4:	6043      	str	r3, [r0, #4]
   84db6:	d827      	bhi.n	84e08 <_realloc_r+0x2bc>
   84db8:	f100 0308 	add.w	r3, r0, #8
   84dbc:	f104 0208 	add.w	r2, r4, #8
   84dc0:	e70b      	b.n	84bda <_realloc_r+0x8e>
   84dc2:	4620      	mov	r0, r4
   84dc4:	462a      	mov	r2, r5
   84dc6:	6801      	ldr	r1, [r0, #0]
   84dc8:	461f      	mov	r7, r3
   84dca:	6011      	str	r1, [r2, #0]
   84dcc:	6841      	ldr	r1, [r0, #4]
   84dce:	46d1      	mov	r9, sl
   84dd0:	6051      	str	r1, [r2, #4]
   84dd2:	6883      	ldr	r3, [r0, #8]
   84dd4:	6093      	str	r3, [r2, #8]
   84dd6:	e719      	b.n	84c0c <_realloc_r+0xc0>
   84dd8:	ebab 0b06 	sub.w	fp, fp, r6
   84ddc:	eb09 0106 	add.w	r1, r9, r6
   84de0:	f04b 0201 	orr.w	r2, fp, #1
   84de4:	6099      	str	r1, [r3, #8]
   84de6:	604a      	str	r2, [r1, #4]
   84de8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84dec:	4640      	mov	r0, r8
   84dee:	f003 0301 	and.w	r3, r3, #1
   84df2:	431e      	orrs	r6, r3
   84df4:	f844 6c04 	str.w	r6, [r4, #-4]
   84df8:	f7ff fea2 	bl	84b40 <__malloc_unlock>
   84dfc:	4625      	mov	r5, r4
   84dfe:	e718      	b.n	84c32 <_realloc_r+0xe6>
   84e00:	4621      	mov	r1, r4
   84e02:	f7ff fe33 	bl	84a6c <memmove>
   84e06:	e6ee      	b.n	84be6 <_realloc_r+0x9a>
   84e08:	68a3      	ldr	r3, [r4, #8]
   84e0a:	2a24      	cmp	r2, #36	; 0x24
   84e0c:	6083      	str	r3, [r0, #8]
   84e0e:	68e3      	ldr	r3, [r4, #12]
   84e10:	60c3      	str	r3, [r0, #12]
   84e12:	d018      	beq.n	84e46 <_realloc_r+0x2fa>
   84e14:	f100 0310 	add.w	r3, r0, #16
   84e18:	f104 0210 	add.w	r2, r4, #16
   84e1c:	e6dd      	b.n	84bda <_realloc_r+0x8e>
   84e1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84e22:	4625      	mov	r5, r4
   84e24:	f023 0303 	bic.w	r3, r3, #3
   84e28:	441f      	add	r7, r3
   84e2a:	e6ef      	b.n	84c0c <_realloc_r+0xc0>
   84e2c:	68a1      	ldr	r1, [r4, #8]
   84e2e:	2a24      	cmp	r2, #36	; 0x24
   84e30:	f8ca 1010 	str.w	r1, [sl, #16]
   84e34:	68e1      	ldr	r1, [r4, #12]
   84e36:	f8ca 1014 	str.w	r1, [sl, #20]
   84e3a:	d00d      	beq.n	84e58 <_realloc_r+0x30c>
   84e3c:	f104 0010 	add.w	r0, r4, #16
   84e40:	f10a 0218 	add.w	r2, sl, #24
   84e44:	e7bf      	b.n	84dc6 <_realloc_r+0x27a>
   84e46:	6922      	ldr	r2, [r4, #16]
   84e48:	f100 0318 	add.w	r3, r0, #24
   84e4c:	6102      	str	r2, [r0, #16]
   84e4e:	6961      	ldr	r1, [r4, #20]
   84e50:	f104 0218 	add.w	r2, r4, #24
   84e54:	6141      	str	r1, [r0, #20]
   84e56:	e6c0      	b.n	84bda <_realloc_r+0x8e>
   84e58:	6922      	ldr	r2, [r4, #16]
   84e5a:	f104 0018 	add.w	r0, r4, #24
   84e5e:	f8ca 2018 	str.w	r2, [sl, #24]
   84e62:	6961      	ldr	r1, [r4, #20]
   84e64:	f10a 0220 	add.w	r2, sl, #32
   84e68:	f8ca 101c 	str.w	r1, [sl, #28]
   84e6c:	e7ab      	b.n	84dc6 <_realloc_r+0x27a>
   84e6e:	4621      	mov	r1, r4
   84e70:	462a      	mov	r2, r5
   84e72:	e782      	b.n	84d7a <_realloc_r+0x22e>
   84e74:	4621      	mov	r1, r4
   84e76:	4628      	mov	r0, r5
   84e78:	9301      	str	r3, [sp, #4]
   84e7a:	f7ff fdf7 	bl	84a6c <memmove>
   84e7e:	9b01      	ldr	r3, [sp, #4]
   84e80:	e781      	b.n	84d86 <_realloc_r+0x23a>
   84e82:	68a1      	ldr	r1, [r4, #8]
   84e84:	2a24      	cmp	r2, #36	; 0x24
   84e86:	f8ca 1010 	str.w	r1, [sl, #16]
   84e8a:	68e1      	ldr	r1, [r4, #12]
   84e8c:	f8ca 1014 	str.w	r1, [sl, #20]
   84e90:	d006      	beq.n	84ea0 <_realloc_r+0x354>
   84e92:	f104 0110 	add.w	r1, r4, #16
   84e96:	f10a 0218 	add.w	r2, sl, #24
   84e9a:	e76e      	b.n	84d7a <_realloc_r+0x22e>
   84e9c:	200706d0 	.word	0x200706d0
   84ea0:	6922      	ldr	r2, [r4, #16]
   84ea2:	f104 0118 	add.w	r1, r4, #24
   84ea6:	f8ca 2018 	str.w	r2, [sl, #24]
   84eaa:	6960      	ldr	r0, [r4, #20]
   84eac:	f10a 0220 	add.w	r2, sl, #32
   84eb0:	f8ca 001c 	str.w	r0, [sl, #28]
   84eb4:	e761      	b.n	84d7a <_realloc_r+0x22e>
   84eb6:	bf00      	nop

00084eb8 <_sbrk_r>:
   84eb8:	b538      	push	{r3, r4, r5, lr}
   84eba:	2300      	movs	r3, #0
   84ebc:	4c06      	ldr	r4, [pc, #24]	; (84ed8 <_sbrk_r+0x20>)
   84ebe:	4605      	mov	r5, r0
   84ec0:	4608      	mov	r0, r1
   84ec2:	6023      	str	r3, [r4, #0]
   84ec4:	f7fd fc1e 	bl	82704 <_sbrk>
   84ec8:	1c43      	adds	r3, r0, #1
   84eca:	d000      	beq.n	84ece <_sbrk_r+0x16>
   84ecc:	bd38      	pop	{r3, r4, r5, pc}
   84ece:	6823      	ldr	r3, [r4, #0]
   84ed0:	2b00      	cmp	r3, #0
   84ed2:	d0fb      	beq.n	84ecc <_sbrk_r+0x14>
   84ed4:	602b      	str	r3, [r5, #0]
   84ed6:	bd38      	pop	{r3, r4, r5, pc}
   84ed8:	2007c570 	.word	0x2007c570

00084edc <__sread>:
   84edc:	b510      	push	{r4, lr}
   84ede:	460c      	mov	r4, r1
   84ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ee4:	f000 f9f4 	bl	852d0 <_read_r>
   84ee8:	2800      	cmp	r0, #0
   84eea:	db03      	blt.n	84ef4 <__sread+0x18>
   84eec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84eee:	4403      	add	r3, r0
   84ef0:	6523      	str	r3, [r4, #80]	; 0x50
   84ef2:	bd10      	pop	{r4, pc}
   84ef4:	89a3      	ldrh	r3, [r4, #12]
   84ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84efa:	81a3      	strh	r3, [r4, #12]
   84efc:	bd10      	pop	{r4, pc}
   84efe:	bf00      	nop

00084f00 <__swrite>:
   84f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f04:	460c      	mov	r4, r1
   84f06:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84f0a:	461f      	mov	r7, r3
   84f0c:	05cb      	lsls	r3, r1, #23
   84f0e:	4616      	mov	r6, r2
   84f10:	4605      	mov	r5, r0
   84f12:	d507      	bpl.n	84f24 <__swrite+0x24>
   84f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f18:	2302      	movs	r3, #2
   84f1a:	2200      	movs	r2, #0
   84f1c:	f000 f9c2 	bl	852a4 <_lseek_r>
   84f20:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84f24:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84f28:	81a1      	strh	r1, [r4, #12]
   84f2a:	463b      	mov	r3, r7
   84f2c:	4632      	mov	r2, r6
   84f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f32:	4628      	mov	r0, r5
   84f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f38:	f000 b8a2 	b.w	85080 <_write_r>

00084f3c <__sseek>:
   84f3c:	b510      	push	{r4, lr}
   84f3e:	460c      	mov	r4, r1
   84f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f44:	f000 f9ae 	bl	852a4 <_lseek_r>
   84f48:	89a3      	ldrh	r3, [r4, #12]
   84f4a:	1c42      	adds	r2, r0, #1
   84f4c:	bf0e      	itee	eq
   84f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84f56:	6520      	strne	r0, [r4, #80]	; 0x50
   84f58:	81a3      	strh	r3, [r4, #12]
   84f5a:	bd10      	pop	{r4, pc}

00084f5c <__sclose>:
   84f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f60:	f000 b906 	b.w	85170 <_close_r>

00084f64 <__swbuf_r>:
   84f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f66:	460d      	mov	r5, r1
   84f68:	4614      	mov	r4, r2
   84f6a:	4606      	mov	r6, r0
   84f6c:	b110      	cbz	r0, 84f74 <__swbuf_r+0x10>
   84f6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f70:	2b00      	cmp	r3, #0
   84f72:	d04b      	beq.n	8500c <__swbuf_r+0xa8>
   84f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84f78:	69a3      	ldr	r3, [r4, #24]
   84f7a:	b291      	uxth	r1, r2
   84f7c:	0708      	lsls	r0, r1, #28
   84f7e:	60a3      	str	r3, [r4, #8]
   84f80:	d539      	bpl.n	84ff6 <__swbuf_r+0x92>
   84f82:	6923      	ldr	r3, [r4, #16]
   84f84:	2b00      	cmp	r3, #0
   84f86:	d036      	beq.n	84ff6 <__swbuf_r+0x92>
   84f88:	b2ed      	uxtb	r5, r5
   84f8a:	0489      	lsls	r1, r1, #18
   84f8c:	462f      	mov	r7, r5
   84f8e:	d515      	bpl.n	84fbc <__swbuf_r+0x58>
   84f90:	6822      	ldr	r2, [r4, #0]
   84f92:	6961      	ldr	r1, [r4, #20]
   84f94:	1ad3      	subs	r3, r2, r3
   84f96:	428b      	cmp	r3, r1
   84f98:	da1c      	bge.n	84fd4 <__swbuf_r+0x70>
   84f9a:	3301      	adds	r3, #1
   84f9c:	68a1      	ldr	r1, [r4, #8]
   84f9e:	1c50      	adds	r0, r2, #1
   84fa0:	3901      	subs	r1, #1
   84fa2:	60a1      	str	r1, [r4, #8]
   84fa4:	6020      	str	r0, [r4, #0]
   84fa6:	7015      	strb	r5, [r2, #0]
   84fa8:	6962      	ldr	r2, [r4, #20]
   84faa:	429a      	cmp	r2, r3
   84fac:	d01a      	beq.n	84fe4 <__swbuf_r+0x80>
   84fae:	89a3      	ldrh	r3, [r4, #12]
   84fb0:	07db      	lsls	r3, r3, #31
   84fb2:	d501      	bpl.n	84fb8 <__swbuf_r+0x54>
   84fb4:	2d0a      	cmp	r5, #10
   84fb6:	d015      	beq.n	84fe4 <__swbuf_r+0x80>
   84fb8:	4638      	mov	r0, r7
   84fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84fbc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84fc2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84fc6:	81a2      	strh	r2, [r4, #12]
   84fc8:	6822      	ldr	r2, [r4, #0]
   84fca:	6661      	str	r1, [r4, #100]	; 0x64
   84fcc:	6961      	ldr	r1, [r4, #20]
   84fce:	1ad3      	subs	r3, r2, r3
   84fd0:	428b      	cmp	r3, r1
   84fd2:	dbe2      	blt.n	84f9a <__swbuf_r+0x36>
   84fd4:	4621      	mov	r1, r4
   84fd6:	4630      	mov	r0, r6
   84fd8:	f7fe fdae 	bl	83b38 <_fflush_r>
   84fdc:	b940      	cbnz	r0, 84ff0 <__swbuf_r+0x8c>
   84fde:	2301      	movs	r3, #1
   84fe0:	6822      	ldr	r2, [r4, #0]
   84fe2:	e7db      	b.n	84f9c <__swbuf_r+0x38>
   84fe4:	4621      	mov	r1, r4
   84fe6:	4630      	mov	r0, r6
   84fe8:	f7fe fda6 	bl	83b38 <_fflush_r>
   84fec:	2800      	cmp	r0, #0
   84fee:	d0e3      	beq.n	84fb8 <__swbuf_r+0x54>
   84ff0:	f04f 37ff 	mov.w	r7, #4294967295
   84ff4:	e7e0      	b.n	84fb8 <__swbuf_r+0x54>
   84ff6:	4621      	mov	r1, r4
   84ff8:	4630      	mov	r0, r6
   84ffa:	f7fe fc8d 	bl	83918 <__swsetup_r>
   84ffe:	2800      	cmp	r0, #0
   85000:	d1f6      	bne.n	84ff0 <__swbuf_r+0x8c>
   85002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85006:	6923      	ldr	r3, [r4, #16]
   85008:	b291      	uxth	r1, r2
   8500a:	e7bd      	b.n	84f88 <__swbuf_r+0x24>
   8500c:	f7fe fdec 	bl	83be8 <__sinit>
   85010:	e7b0      	b.n	84f74 <__swbuf_r+0x10>
   85012:	bf00      	nop

00085014 <_wcrtomb_r>:
   85014:	b5f0      	push	{r4, r5, r6, r7, lr}
   85016:	4606      	mov	r6, r0
   85018:	b085      	sub	sp, #20
   8501a:	461f      	mov	r7, r3
   8501c:	b189      	cbz	r1, 85042 <_wcrtomb_r+0x2e>
   8501e:	4c10      	ldr	r4, [pc, #64]	; (85060 <_wcrtomb_r+0x4c>)
   85020:	4d10      	ldr	r5, [pc, #64]	; (85064 <_wcrtomb_r+0x50>)
   85022:	6824      	ldr	r4, [r4, #0]
   85024:	6b64      	ldr	r4, [r4, #52]	; 0x34
   85026:	2c00      	cmp	r4, #0
   85028:	bf08      	it	eq
   8502a:	462c      	moveq	r4, r5
   8502c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   85030:	47a0      	blx	r4
   85032:	1c43      	adds	r3, r0, #1
   85034:	d103      	bne.n	8503e <_wcrtomb_r+0x2a>
   85036:	2200      	movs	r2, #0
   85038:	238a      	movs	r3, #138	; 0x8a
   8503a:	603a      	str	r2, [r7, #0]
   8503c:	6033      	str	r3, [r6, #0]
   8503e:	b005      	add	sp, #20
   85040:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85042:	460c      	mov	r4, r1
   85044:	4a06      	ldr	r2, [pc, #24]	; (85060 <_wcrtomb_r+0x4c>)
   85046:	4d07      	ldr	r5, [pc, #28]	; (85064 <_wcrtomb_r+0x50>)
   85048:	6811      	ldr	r1, [r2, #0]
   8504a:	4622      	mov	r2, r4
   8504c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8504e:	a901      	add	r1, sp, #4
   85050:	2c00      	cmp	r4, #0
   85052:	bf08      	it	eq
   85054:	462c      	moveq	r4, r5
   85056:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8505a:	47a0      	blx	r4
   8505c:	e7e9      	b.n	85032 <_wcrtomb_r+0x1e>
   8505e:	bf00      	nop
   85060:	20070134 	.word	0x20070134
   85064:	20070564 	.word	0x20070564

00085068 <__ascii_wctomb>:
   85068:	b119      	cbz	r1, 85072 <__ascii_wctomb+0xa>
   8506a:	2aff      	cmp	r2, #255	; 0xff
   8506c:	d803      	bhi.n	85076 <__ascii_wctomb+0xe>
   8506e:	700a      	strb	r2, [r1, #0]
   85070:	2101      	movs	r1, #1
   85072:	4608      	mov	r0, r1
   85074:	4770      	bx	lr
   85076:	238a      	movs	r3, #138	; 0x8a
   85078:	f04f 31ff 	mov.w	r1, #4294967295
   8507c:	6003      	str	r3, [r0, #0]
   8507e:	e7f8      	b.n	85072 <__ascii_wctomb+0xa>

00085080 <_write_r>:
   85080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85082:	460e      	mov	r6, r1
   85084:	2500      	movs	r5, #0
   85086:	4c08      	ldr	r4, [pc, #32]	; (850a8 <_write_r+0x28>)
   85088:	4611      	mov	r1, r2
   8508a:	4607      	mov	r7, r0
   8508c:	461a      	mov	r2, r3
   8508e:	4630      	mov	r0, r6
   85090:	6025      	str	r5, [r4, #0]
   85092:	f7fb f9d5 	bl	80440 <_write>
   85096:	1c43      	adds	r3, r0, #1
   85098:	d000      	beq.n	8509c <_write_r+0x1c>
   8509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8509c:	6823      	ldr	r3, [r4, #0]
   8509e:	2b00      	cmp	r3, #0
   850a0:	d0fb      	beq.n	8509a <_write_r+0x1a>
   850a2:	603b      	str	r3, [r7, #0]
   850a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   850a6:	bf00      	nop
   850a8:	2007c570 	.word	0x2007c570

000850ac <__register_exitproc>:
   850ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   850b0:	4d2c      	ldr	r5, [pc, #176]	; (85164 <__register_exitproc+0xb8>)
   850b2:	4606      	mov	r6, r0
   850b4:	6828      	ldr	r0, [r5, #0]
   850b6:	4698      	mov	r8, r3
   850b8:	460f      	mov	r7, r1
   850ba:	4691      	mov	r9, r2
   850bc:	f7ff f954 	bl	84368 <__retarget_lock_acquire_recursive>
   850c0:	4b29      	ldr	r3, [pc, #164]	; (85168 <__register_exitproc+0xbc>)
   850c2:	681c      	ldr	r4, [r3, #0]
   850c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   850c8:	2b00      	cmp	r3, #0
   850ca:	d03e      	beq.n	8514a <__register_exitproc+0x9e>
   850cc:	685a      	ldr	r2, [r3, #4]
   850ce:	2a1f      	cmp	r2, #31
   850d0:	dc1c      	bgt.n	8510c <__register_exitproc+0x60>
   850d2:	f102 0e01 	add.w	lr, r2, #1
   850d6:	b176      	cbz	r6, 850f6 <__register_exitproc+0x4a>
   850d8:	2101      	movs	r1, #1
   850da:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   850de:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   850e2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   850e6:	4091      	lsls	r1, r2
   850e8:	4308      	orrs	r0, r1
   850ea:	2e02      	cmp	r6, #2
   850ec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   850f0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   850f4:	d023      	beq.n	8513e <__register_exitproc+0x92>
   850f6:	3202      	adds	r2, #2
   850f8:	f8c3 e004 	str.w	lr, [r3, #4]
   850fc:	6828      	ldr	r0, [r5, #0]
   850fe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85102:	f7ff f933 	bl	8436c <__retarget_lock_release_recursive>
   85106:	2000      	movs	r0, #0
   85108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8510c:	4b17      	ldr	r3, [pc, #92]	; (8516c <__register_exitproc+0xc0>)
   8510e:	b30b      	cbz	r3, 85154 <__register_exitproc+0xa8>
   85110:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85114:	f7ff f9a4 	bl	84460 <malloc>
   85118:	4603      	mov	r3, r0
   8511a:	b1d8      	cbz	r0, 85154 <__register_exitproc+0xa8>
   8511c:	2000      	movs	r0, #0
   8511e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85122:	f04f 0e01 	mov.w	lr, #1
   85126:	6058      	str	r0, [r3, #4]
   85128:	6019      	str	r1, [r3, #0]
   8512a:	4602      	mov	r2, r0
   8512c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85130:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85134:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85138:	2e00      	cmp	r6, #0
   8513a:	d0dc      	beq.n	850f6 <__register_exitproc+0x4a>
   8513c:	e7cc      	b.n	850d8 <__register_exitproc+0x2c>
   8513e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85142:	4301      	orrs	r1, r0
   85144:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85148:	e7d5      	b.n	850f6 <__register_exitproc+0x4a>
   8514a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8514e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85152:	e7bb      	b.n	850cc <__register_exitproc+0x20>
   85154:	6828      	ldr	r0, [r5, #0]
   85156:	f7ff f909 	bl	8436c <__retarget_lock_release_recursive>
   8515a:	f04f 30ff 	mov.w	r0, #4294967295
   8515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85162:	bf00      	nop
   85164:	20070560 	.word	0x20070560
   85168:	00085650 	.word	0x00085650
   8516c:	00084461 	.word	0x00084461

00085170 <_close_r>:
   85170:	b538      	push	{r3, r4, r5, lr}
   85172:	2300      	movs	r3, #0
   85174:	4c06      	ldr	r4, [pc, #24]	; (85190 <_close_r+0x20>)
   85176:	4605      	mov	r5, r0
   85178:	4608      	mov	r0, r1
   8517a:	6023      	str	r3, [r4, #0]
   8517c:	f7fd fade 	bl	8273c <_close>
   85180:	1c43      	adds	r3, r0, #1
   85182:	d000      	beq.n	85186 <_close_r+0x16>
   85184:	bd38      	pop	{r3, r4, r5, pc}
   85186:	6823      	ldr	r3, [r4, #0]
   85188:	2b00      	cmp	r3, #0
   8518a:	d0fb      	beq.n	85184 <_close_r+0x14>
   8518c:	602b      	str	r3, [r5, #0]
   8518e:	bd38      	pop	{r3, r4, r5, pc}
   85190:	2007c570 	.word	0x2007c570

00085194 <_fclose_r>:
   85194:	b570      	push	{r4, r5, r6, lr}
   85196:	b159      	cbz	r1, 851b0 <_fclose_r+0x1c>
   85198:	4605      	mov	r5, r0
   8519a:	460c      	mov	r4, r1
   8519c:	b110      	cbz	r0, 851a4 <_fclose_r+0x10>
   8519e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   851a0:	2b00      	cmp	r3, #0
   851a2:	d03c      	beq.n	8521e <_fclose_r+0x8a>
   851a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   851a6:	07d8      	lsls	r0, r3, #31
   851a8:	d505      	bpl.n	851b6 <_fclose_r+0x22>
   851aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   851ae:	b92b      	cbnz	r3, 851bc <_fclose_r+0x28>
   851b0:	2600      	movs	r6, #0
   851b2:	4630      	mov	r0, r6
   851b4:	bd70      	pop	{r4, r5, r6, pc}
   851b6:	89a3      	ldrh	r3, [r4, #12]
   851b8:	0599      	lsls	r1, r3, #22
   851ba:	d53c      	bpl.n	85236 <_fclose_r+0xa2>
   851bc:	4621      	mov	r1, r4
   851be:	4628      	mov	r0, r5
   851c0:	f7fe fc1e 	bl	83a00 <__sflush_r>
   851c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   851c6:	4606      	mov	r6, r0
   851c8:	b133      	cbz	r3, 851d8 <_fclose_r+0x44>
   851ca:	69e1      	ldr	r1, [r4, #28]
   851cc:	4628      	mov	r0, r5
   851ce:	4798      	blx	r3
   851d0:	2800      	cmp	r0, #0
   851d2:	bfb8      	it	lt
   851d4:	f04f 36ff 	movlt.w	r6, #4294967295
   851d8:	89a3      	ldrh	r3, [r4, #12]
   851da:	061a      	lsls	r2, r3, #24
   851dc:	d422      	bmi.n	85224 <_fclose_r+0x90>
   851de:	6b21      	ldr	r1, [r4, #48]	; 0x30
   851e0:	b141      	cbz	r1, 851f4 <_fclose_r+0x60>
   851e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   851e6:	4299      	cmp	r1, r3
   851e8:	d002      	beq.n	851f0 <_fclose_r+0x5c>
   851ea:	4628      	mov	r0, r5
   851ec:	f7fe fe22 	bl	83e34 <_free_r>
   851f0:	2300      	movs	r3, #0
   851f2:	6323      	str	r3, [r4, #48]	; 0x30
   851f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   851f6:	b121      	cbz	r1, 85202 <_fclose_r+0x6e>
   851f8:	4628      	mov	r0, r5
   851fa:	f7fe fe1b 	bl	83e34 <_free_r>
   851fe:	2300      	movs	r3, #0
   85200:	6463      	str	r3, [r4, #68]	; 0x44
   85202:	f7fe fd21 	bl	83c48 <__sfp_lock_acquire>
   85206:	2200      	movs	r2, #0
   85208:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8520a:	81a2      	strh	r2, [r4, #12]
   8520c:	07db      	lsls	r3, r3, #31
   8520e:	d50e      	bpl.n	8522e <_fclose_r+0x9a>
   85210:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85212:	f7ff f8a7 	bl	84364 <__retarget_lock_close_recursive>
   85216:	f7fe fd1d 	bl	83c54 <__sfp_lock_release>
   8521a:	4630      	mov	r0, r6
   8521c:	bd70      	pop	{r4, r5, r6, pc}
   8521e:	f7fe fce3 	bl	83be8 <__sinit>
   85222:	e7bf      	b.n	851a4 <_fclose_r+0x10>
   85224:	6921      	ldr	r1, [r4, #16]
   85226:	4628      	mov	r0, r5
   85228:	f7fe fe04 	bl	83e34 <_free_r>
   8522c:	e7d7      	b.n	851de <_fclose_r+0x4a>
   8522e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85230:	f7ff f89c 	bl	8436c <__retarget_lock_release_recursive>
   85234:	e7ec      	b.n	85210 <_fclose_r+0x7c>
   85236:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85238:	f7ff f896 	bl	84368 <__retarget_lock_acquire_recursive>
   8523c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85240:	2b00      	cmp	r3, #0
   85242:	d1bb      	bne.n	851bc <_fclose_r+0x28>
   85244:	6e66      	ldr	r6, [r4, #100]	; 0x64
   85246:	f016 0601 	ands.w	r6, r6, #1
   8524a:	d1b1      	bne.n	851b0 <_fclose_r+0x1c>
   8524c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8524e:	f7ff f88d 	bl	8436c <__retarget_lock_release_recursive>
   85252:	4630      	mov	r0, r6
   85254:	bd70      	pop	{r4, r5, r6, pc}
   85256:	bf00      	nop

00085258 <_fstat_r>:
   85258:	b570      	push	{r4, r5, r6, lr}
   8525a:	460d      	mov	r5, r1
   8525c:	2300      	movs	r3, #0
   8525e:	4c07      	ldr	r4, [pc, #28]	; (8527c <_fstat_r+0x24>)
   85260:	4606      	mov	r6, r0
   85262:	4611      	mov	r1, r2
   85264:	4628      	mov	r0, r5
   85266:	6023      	str	r3, [r4, #0]
   85268:	f7fd fa6b 	bl	82742 <_fstat>
   8526c:	1c43      	adds	r3, r0, #1
   8526e:	d000      	beq.n	85272 <_fstat_r+0x1a>
   85270:	bd70      	pop	{r4, r5, r6, pc}
   85272:	6823      	ldr	r3, [r4, #0]
   85274:	2b00      	cmp	r3, #0
   85276:	d0fb      	beq.n	85270 <_fstat_r+0x18>
   85278:	6033      	str	r3, [r6, #0]
   8527a:	bd70      	pop	{r4, r5, r6, pc}
   8527c:	2007c570 	.word	0x2007c570

00085280 <_isatty_r>:
   85280:	b538      	push	{r3, r4, r5, lr}
   85282:	2300      	movs	r3, #0
   85284:	4c06      	ldr	r4, [pc, #24]	; (852a0 <_isatty_r+0x20>)
   85286:	4605      	mov	r5, r0
   85288:	4608      	mov	r0, r1
   8528a:	6023      	str	r3, [r4, #0]
   8528c:	f7fd fa5e 	bl	8274c <_isatty>
   85290:	1c43      	adds	r3, r0, #1
   85292:	d000      	beq.n	85296 <_isatty_r+0x16>
   85294:	bd38      	pop	{r3, r4, r5, pc}
   85296:	6823      	ldr	r3, [r4, #0]
   85298:	2b00      	cmp	r3, #0
   8529a:	d0fb      	beq.n	85294 <_isatty_r+0x14>
   8529c:	602b      	str	r3, [r5, #0]
   8529e:	bd38      	pop	{r3, r4, r5, pc}
   852a0:	2007c570 	.word	0x2007c570

000852a4 <_lseek_r>:
   852a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   852a6:	460e      	mov	r6, r1
   852a8:	2500      	movs	r5, #0
   852aa:	4c08      	ldr	r4, [pc, #32]	; (852cc <_lseek_r+0x28>)
   852ac:	4611      	mov	r1, r2
   852ae:	4607      	mov	r7, r0
   852b0:	461a      	mov	r2, r3
   852b2:	4630      	mov	r0, r6
   852b4:	6025      	str	r5, [r4, #0]
   852b6:	f7fd fa4b 	bl	82750 <_lseek>
   852ba:	1c43      	adds	r3, r0, #1
   852bc:	d000      	beq.n	852c0 <_lseek_r+0x1c>
   852be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852c0:	6823      	ldr	r3, [r4, #0]
   852c2:	2b00      	cmp	r3, #0
   852c4:	d0fb      	beq.n	852be <_lseek_r+0x1a>
   852c6:	603b      	str	r3, [r7, #0]
   852c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852ca:	bf00      	nop
   852cc:	2007c570 	.word	0x2007c570

000852d0 <_read_r>:
   852d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   852d2:	460e      	mov	r6, r1
   852d4:	2500      	movs	r5, #0
   852d6:	4c08      	ldr	r4, [pc, #32]	; (852f8 <_read_r+0x28>)
   852d8:	4611      	mov	r1, r2
   852da:	4607      	mov	r7, r0
   852dc:	461a      	mov	r2, r3
   852de:	4630      	mov	r0, r6
   852e0:	6025      	str	r5, [r4, #0]
   852e2:	f7fb f88f 	bl	80404 <_read>
   852e6:	1c43      	adds	r3, r0, #1
   852e8:	d000      	beq.n	852ec <_read_r+0x1c>
   852ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852ec:	6823      	ldr	r3, [r4, #0]
   852ee:	2b00      	cmp	r3, #0
   852f0:	d0fb      	beq.n	852ea <_read_r+0x1a>
   852f2:	603b      	str	r3, [r7, #0]
   852f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852f6:	bf00      	nop
   852f8:	2007c570 	.word	0x2007c570

000852fc <__aeabi_uldivmod>:
   852fc:	b953      	cbnz	r3, 85314 <__aeabi_uldivmod+0x18>
   852fe:	b94a      	cbnz	r2, 85314 <__aeabi_uldivmod+0x18>
   85300:	2900      	cmp	r1, #0
   85302:	bf08      	it	eq
   85304:	2800      	cmpeq	r0, #0
   85306:	bf1c      	itt	ne
   85308:	f04f 31ff 	movne.w	r1, #4294967295
   8530c:	f04f 30ff 	movne.w	r0, #4294967295
   85310:	f000 b97a 	b.w	85608 <__aeabi_idiv0>
   85314:	f1ad 0c08 	sub.w	ip, sp, #8
   85318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8531c:	f000 f806 	bl	8532c <__udivmoddi4>
   85320:	f8dd e004 	ldr.w	lr, [sp, #4]
   85324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85328:	b004      	add	sp, #16
   8532a:	4770      	bx	lr

0008532c <__udivmoddi4>:
   8532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85330:	468c      	mov	ip, r1
   85332:	460e      	mov	r6, r1
   85334:	4604      	mov	r4, r0
   85336:	9d08      	ldr	r5, [sp, #32]
   85338:	2b00      	cmp	r3, #0
   8533a:	d150      	bne.n	853de <__udivmoddi4+0xb2>
   8533c:	428a      	cmp	r2, r1
   8533e:	4617      	mov	r7, r2
   85340:	d96c      	bls.n	8541c <__udivmoddi4+0xf0>
   85342:	fab2 fe82 	clz	lr, r2
   85346:	f1be 0f00 	cmp.w	lr, #0
   8534a:	d00b      	beq.n	85364 <__udivmoddi4+0x38>
   8534c:	f1ce 0c20 	rsb	ip, lr, #32
   85350:	fa01 f60e 	lsl.w	r6, r1, lr
   85354:	fa20 fc0c 	lsr.w	ip, r0, ip
   85358:	fa02 f70e 	lsl.w	r7, r2, lr
   8535c:	ea4c 0c06 	orr.w	ip, ip, r6
   85360:	fa00 f40e 	lsl.w	r4, r0, lr
   85364:	0c3a      	lsrs	r2, r7, #16
   85366:	fbbc f9f2 	udiv	r9, ip, r2
   8536a:	b2bb      	uxth	r3, r7
   8536c:	fb02 cc19 	mls	ip, r2, r9, ip
   85370:	fb09 fa03 	mul.w	sl, r9, r3
   85374:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85378:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8537c:	45b2      	cmp	sl, r6
   8537e:	d90a      	bls.n	85396 <__udivmoddi4+0x6a>
   85380:	19f6      	adds	r6, r6, r7
   85382:	f109 31ff 	add.w	r1, r9, #4294967295
   85386:	f080 8125 	bcs.w	855d4 <__udivmoddi4+0x2a8>
   8538a:	45b2      	cmp	sl, r6
   8538c:	f240 8122 	bls.w	855d4 <__udivmoddi4+0x2a8>
   85390:	f1a9 0902 	sub.w	r9, r9, #2
   85394:	443e      	add	r6, r7
   85396:	eba6 060a 	sub.w	r6, r6, sl
   8539a:	fbb6 f0f2 	udiv	r0, r6, r2
   8539e:	fb02 6610 	mls	r6, r2, r0, r6
   853a2:	fb00 f303 	mul.w	r3, r0, r3
   853a6:	b2a4      	uxth	r4, r4
   853a8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   853ac:	42a3      	cmp	r3, r4
   853ae:	d909      	bls.n	853c4 <__udivmoddi4+0x98>
   853b0:	19e4      	adds	r4, r4, r7
   853b2:	f100 32ff 	add.w	r2, r0, #4294967295
   853b6:	f080 810b 	bcs.w	855d0 <__udivmoddi4+0x2a4>
   853ba:	42a3      	cmp	r3, r4
   853bc:	f240 8108 	bls.w	855d0 <__udivmoddi4+0x2a4>
   853c0:	3802      	subs	r0, #2
   853c2:	443c      	add	r4, r7
   853c4:	2100      	movs	r1, #0
   853c6:	1ae4      	subs	r4, r4, r3
   853c8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   853cc:	2d00      	cmp	r5, #0
   853ce:	d062      	beq.n	85496 <__udivmoddi4+0x16a>
   853d0:	2300      	movs	r3, #0
   853d2:	fa24 f40e 	lsr.w	r4, r4, lr
   853d6:	602c      	str	r4, [r5, #0]
   853d8:	606b      	str	r3, [r5, #4]
   853da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   853de:	428b      	cmp	r3, r1
   853e0:	d907      	bls.n	853f2 <__udivmoddi4+0xc6>
   853e2:	2d00      	cmp	r5, #0
   853e4:	d055      	beq.n	85492 <__udivmoddi4+0x166>
   853e6:	2100      	movs	r1, #0
   853e8:	e885 0041 	stmia.w	r5, {r0, r6}
   853ec:	4608      	mov	r0, r1
   853ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   853f2:	fab3 f183 	clz	r1, r3
   853f6:	2900      	cmp	r1, #0
   853f8:	f040 808f 	bne.w	8551a <__udivmoddi4+0x1ee>
   853fc:	42b3      	cmp	r3, r6
   853fe:	d302      	bcc.n	85406 <__udivmoddi4+0xda>
   85400:	4282      	cmp	r2, r0
   85402:	f200 80fc 	bhi.w	855fe <__udivmoddi4+0x2d2>
   85406:	1a84      	subs	r4, r0, r2
   85408:	eb66 0603 	sbc.w	r6, r6, r3
   8540c:	2001      	movs	r0, #1
   8540e:	46b4      	mov	ip, r6
   85410:	2d00      	cmp	r5, #0
   85412:	d040      	beq.n	85496 <__udivmoddi4+0x16a>
   85414:	e885 1010 	stmia.w	r5, {r4, ip}
   85418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8541c:	b912      	cbnz	r2, 85424 <__udivmoddi4+0xf8>
   8541e:	2701      	movs	r7, #1
   85420:	fbb7 f7f2 	udiv	r7, r7, r2
   85424:	fab7 fe87 	clz	lr, r7
   85428:	f1be 0f00 	cmp.w	lr, #0
   8542c:	d135      	bne.n	8549a <__udivmoddi4+0x16e>
   8542e:	2101      	movs	r1, #1
   85430:	1bf6      	subs	r6, r6, r7
   85432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85436:	fa1f f887 	uxth.w	r8, r7
   8543a:	fbb6 f2fc 	udiv	r2, r6, ip
   8543e:	fb0c 6612 	mls	r6, ip, r2, r6
   85442:	fb08 f002 	mul.w	r0, r8, r2
   85446:	0c23      	lsrs	r3, r4, #16
   85448:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8544c:	42b0      	cmp	r0, r6
   8544e:	d907      	bls.n	85460 <__udivmoddi4+0x134>
   85450:	19f6      	adds	r6, r6, r7
   85452:	f102 33ff 	add.w	r3, r2, #4294967295
   85456:	d202      	bcs.n	8545e <__udivmoddi4+0x132>
   85458:	42b0      	cmp	r0, r6
   8545a:	f200 80d2 	bhi.w	85602 <__udivmoddi4+0x2d6>
   8545e:	461a      	mov	r2, r3
   85460:	1a36      	subs	r6, r6, r0
   85462:	fbb6 f0fc 	udiv	r0, r6, ip
   85466:	fb0c 6610 	mls	r6, ip, r0, r6
   8546a:	fb08 f800 	mul.w	r8, r8, r0
   8546e:	b2a3      	uxth	r3, r4
   85470:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   85474:	45a0      	cmp	r8, r4
   85476:	d907      	bls.n	85488 <__udivmoddi4+0x15c>
   85478:	19e4      	adds	r4, r4, r7
   8547a:	f100 33ff 	add.w	r3, r0, #4294967295
   8547e:	d202      	bcs.n	85486 <__udivmoddi4+0x15a>
   85480:	45a0      	cmp	r8, r4
   85482:	f200 80b9 	bhi.w	855f8 <__udivmoddi4+0x2cc>
   85486:	4618      	mov	r0, r3
   85488:	eba4 0408 	sub.w	r4, r4, r8
   8548c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   85490:	e79c      	b.n	853cc <__udivmoddi4+0xa0>
   85492:	4629      	mov	r1, r5
   85494:	4628      	mov	r0, r5
   85496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8549a:	fa07 f70e 	lsl.w	r7, r7, lr
   8549e:	f1ce 0320 	rsb	r3, lr, #32
   854a2:	fa26 f203 	lsr.w	r2, r6, r3
   854a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   854aa:	fbb2 f1fc 	udiv	r1, r2, ip
   854ae:	fa1f f887 	uxth.w	r8, r7
   854b2:	fb0c 2211 	mls	r2, ip, r1, r2
   854b6:	fa06 f60e 	lsl.w	r6, r6, lr
   854ba:	fa20 f303 	lsr.w	r3, r0, r3
   854be:	fb01 f908 	mul.w	r9, r1, r8
   854c2:	4333      	orrs	r3, r6
   854c4:	0c1e      	lsrs	r6, r3, #16
   854c6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   854ca:	45b1      	cmp	r9, r6
   854cc:	fa00 f40e 	lsl.w	r4, r0, lr
   854d0:	d909      	bls.n	854e6 <__udivmoddi4+0x1ba>
   854d2:	19f6      	adds	r6, r6, r7
   854d4:	f101 32ff 	add.w	r2, r1, #4294967295
   854d8:	f080 808c 	bcs.w	855f4 <__udivmoddi4+0x2c8>
   854dc:	45b1      	cmp	r9, r6
   854de:	f240 8089 	bls.w	855f4 <__udivmoddi4+0x2c8>
   854e2:	3902      	subs	r1, #2
   854e4:	443e      	add	r6, r7
   854e6:	eba6 0609 	sub.w	r6, r6, r9
   854ea:	fbb6 f0fc 	udiv	r0, r6, ip
   854ee:	fb0c 6210 	mls	r2, ip, r0, r6
   854f2:	fb00 f908 	mul.w	r9, r0, r8
   854f6:	b29e      	uxth	r6, r3
   854f8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   854fc:	45b1      	cmp	r9, r6
   854fe:	d907      	bls.n	85510 <__udivmoddi4+0x1e4>
   85500:	19f6      	adds	r6, r6, r7
   85502:	f100 33ff 	add.w	r3, r0, #4294967295
   85506:	d271      	bcs.n	855ec <__udivmoddi4+0x2c0>
   85508:	45b1      	cmp	r9, r6
   8550a:	d96f      	bls.n	855ec <__udivmoddi4+0x2c0>
   8550c:	3802      	subs	r0, #2
   8550e:	443e      	add	r6, r7
   85510:	eba6 0609 	sub.w	r6, r6, r9
   85514:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85518:	e78f      	b.n	8543a <__udivmoddi4+0x10e>
   8551a:	f1c1 0720 	rsb	r7, r1, #32
   8551e:	fa22 f807 	lsr.w	r8, r2, r7
   85522:	408b      	lsls	r3, r1
   85524:	ea48 0303 	orr.w	r3, r8, r3
   85528:	fa26 f407 	lsr.w	r4, r6, r7
   8552c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   85530:	fbb4 f9fe 	udiv	r9, r4, lr
   85534:	fa1f fc83 	uxth.w	ip, r3
   85538:	fb0e 4419 	mls	r4, lr, r9, r4
   8553c:	408e      	lsls	r6, r1
   8553e:	fa20 f807 	lsr.w	r8, r0, r7
   85542:	fb09 fa0c 	mul.w	sl, r9, ip
   85546:	ea48 0806 	orr.w	r8, r8, r6
   8554a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8554e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   85552:	45a2      	cmp	sl, r4
   85554:	fa02 f201 	lsl.w	r2, r2, r1
   85558:	fa00 f601 	lsl.w	r6, r0, r1
   8555c:	d908      	bls.n	85570 <__udivmoddi4+0x244>
   8555e:	18e4      	adds	r4, r4, r3
   85560:	f109 30ff 	add.w	r0, r9, #4294967295
   85564:	d244      	bcs.n	855f0 <__udivmoddi4+0x2c4>
   85566:	45a2      	cmp	sl, r4
   85568:	d942      	bls.n	855f0 <__udivmoddi4+0x2c4>
   8556a:	f1a9 0902 	sub.w	r9, r9, #2
   8556e:	441c      	add	r4, r3
   85570:	eba4 040a 	sub.w	r4, r4, sl
   85574:	fbb4 f0fe 	udiv	r0, r4, lr
   85578:	fb0e 4410 	mls	r4, lr, r0, r4
   8557c:	fb00 fc0c 	mul.w	ip, r0, ip
   85580:	fa1f f888 	uxth.w	r8, r8
   85584:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85588:	45a4      	cmp	ip, r4
   8558a:	d907      	bls.n	8559c <__udivmoddi4+0x270>
   8558c:	18e4      	adds	r4, r4, r3
   8558e:	f100 3eff 	add.w	lr, r0, #4294967295
   85592:	d229      	bcs.n	855e8 <__udivmoddi4+0x2bc>
   85594:	45a4      	cmp	ip, r4
   85596:	d927      	bls.n	855e8 <__udivmoddi4+0x2bc>
   85598:	3802      	subs	r0, #2
   8559a:	441c      	add	r4, r3
   8559c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   855a0:	fba0 8902 	umull	r8, r9, r0, r2
   855a4:	eba4 0c0c 	sub.w	ip, r4, ip
   855a8:	45cc      	cmp	ip, r9
   855aa:	46c2      	mov	sl, r8
   855ac:	46ce      	mov	lr, r9
   855ae:	d315      	bcc.n	855dc <__udivmoddi4+0x2b0>
   855b0:	d012      	beq.n	855d8 <__udivmoddi4+0x2ac>
   855b2:	b155      	cbz	r5, 855ca <__udivmoddi4+0x29e>
   855b4:	ebb6 030a 	subs.w	r3, r6, sl
   855b8:	eb6c 060e 	sbc.w	r6, ip, lr
   855bc:	fa06 f707 	lsl.w	r7, r6, r7
   855c0:	40cb      	lsrs	r3, r1
   855c2:	431f      	orrs	r7, r3
   855c4:	40ce      	lsrs	r6, r1
   855c6:	602f      	str	r7, [r5, #0]
   855c8:	606e      	str	r6, [r5, #4]
   855ca:	2100      	movs	r1, #0
   855cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   855d0:	4610      	mov	r0, r2
   855d2:	e6f7      	b.n	853c4 <__udivmoddi4+0x98>
   855d4:	4689      	mov	r9, r1
   855d6:	e6de      	b.n	85396 <__udivmoddi4+0x6a>
   855d8:	4546      	cmp	r6, r8
   855da:	d2ea      	bcs.n	855b2 <__udivmoddi4+0x286>
   855dc:	ebb8 0a02 	subs.w	sl, r8, r2
   855e0:	eb69 0e03 	sbc.w	lr, r9, r3
   855e4:	3801      	subs	r0, #1
   855e6:	e7e4      	b.n	855b2 <__udivmoddi4+0x286>
   855e8:	4670      	mov	r0, lr
   855ea:	e7d7      	b.n	8559c <__udivmoddi4+0x270>
   855ec:	4618      	mov	r0, r3
   855ee:	e78f      	b.n	85510 <__udivmoddi4+0x1e4>
   855f0:	4681      	mov	r9, r0
   855f2:	e7bd      	b.n	85570 <__udivmoddi4+0x244>
   855f4:	4611      	mov	r1, r2
   855f6:	e776      	b.n	854e6 <__udivmoddi4+0x1ba>
   855f8:	3802      	subs	r0, #2
   855fa:	443c      	add	r4, r7
   855fc:	e744      	b.n	85488 <__udivmoddi4+0x15c>
   855fe:	4608      	mov	r0, r1
   85600:	e706      	b.n	85410 <__udivmoddi4+0xe4>
   85602:	3a02      	subs	r2, #2
   85604:	443e      	add	r6, r7
   85606:	e72b      	b.n	85460 <__udivmoddi4+0x134>

00085608 <__aeabi_idiv0>:
   85608:	4770      	bx	lr
   8560a:	bf00      	nop
   8560c:	75657551 	.word	0x75657551
   85610:	6f642065 	.word	0x6f642065
   85614:	276e7365 	.word	0x276e7365
   85618:	78652074 	.word	0x78652074
   8561c:	00747369 	.word	0x00747369
   85620:	656c6554 	.word	0x656c6554
   85624:	6d6d6f63 	.word	0x6d6d6f63
   85628:	00646e61 	.word	0x00646e61
   8562c:	6e696c42 	.word	0x6e696c42
   85630:	6154206b 	.word	0x6154206b
   85634:	00006b73 	.word	0x00006b73
   85638:	454c4449 	.word	0x454c4449
   8563c:	00000000 	.word	0x00000000
   85640:	51726d54 	.word	0x51726d54
   85644:	00000000 	.word	0x00000000
   85648:	20726d54 	.word	0x20726d54
   8564c:	00637653 	.word	0x00637653

00085650 <_global_impure_ptr>:
   85650:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   85660:	46454443 00000000 33323130 37363534     CDEF....01234567
   85670:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85680:	0000296c                                l)..

00085684 <blanks.7217>:
   85684:	20202020 20202020 20202020 20202020                     

00085694 <zeroes.7218>:
   85694:	30303030 30303030 30303030 30303030     0000000000000000
   856a4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000856b4 <_ctype_>:
   856b4:	20202000 20202020 28282020 20282828     .         ((((( 
   856c4:	20202020 20202020 20202020 20202020                     
   856d4:	10108820 10101010 10101010 10101010      ...............
   856e4:	04040410 04040404 10040404 10101010     ................
   856f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   85704:	01010101 01010101 01010101 10101010     ................
   85714:	42421010 42424242 02020202 02020202     ..BBBBBB........
   85724:	02020202 02020202 02020202 10101010     ................
   85734:	00000020 00000000 00000000 00000000      ...............
	...

000857b8 <_init>:
   857b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857ba:	bf00      	nop
   857bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857be:	bc08      	pop	{r3}
   857c0:	469e      	mov	lr, r3
   857c2:	4770      	bx	lr

000857c4 <__init_array_start>:
   857c4:	000839e1 	.word	0x000839e1

000857c8 <__frame_dummy_init_array_entry>:
   857c8:	00080119                                ....

000857cc <_fini>:
   857cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857ce:	bf00      	nop
   857d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857d2:	bc08      	pop	{r3}
   857d4:	469e      	mov	lr, r3
   857d6:	4770      	bx	lr

000857d8 <__fini_array_start>:
   857d8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	2007c54c                                L.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00085069 000849b5 00000000 000856b4     iP...I.......V..
20070654:	000856b0 0008563c 0008563c 0008563c     .V..<V..<V..<V..
20070664:	0008563c 0008563c 0008563c 0008563c     <V..<V..<V..<V..
20070674:	0008563c 0008563c ffffffff ffffffff     <V..<V..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
