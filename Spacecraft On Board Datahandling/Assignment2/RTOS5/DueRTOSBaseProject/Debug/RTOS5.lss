
RTOS5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039d0  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  000839d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000ba98  20070974  00084344  00020974  2**2
                  ALLOC
  3 .stack        00002004  2007c40c  0008fddc  00020974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d97f  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004240  00000000  00000000  0003e375  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000085a2  00000000  00000000  000425b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dc0  00000000  00000000  0004ab57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f18  00000000  00000000  0004b917  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bd8c  00000000  00000000  0004c82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014a1f  00000000  00000000  000685bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006d160  00000000  00000000  0007cfda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027f0  00000000  00000000  000ea13c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 e4 07 20 8d 25 08 00 89 25 08 00 89 25 08 00     ... .%...%...%..
   80010:	89 25 08 00 89 25 08 00 89 25 08 00 00 00 00 00     .%...%...%......
	...
   8002c:	81 08 08 00 89 25 08 00 00 00 00 00 21 09 08 00     .....%......!...
   8003c:	69 09 08 00 89 25 08 00 89 25 08 00 89 25 08 00     i....%...%...%..
   8004c:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..
   8005c:	89 25 08 00 89 03 08 00 89 25 08 00 00 00 00 00     .%.......%......
   8006c:	31 24 08 00 45 24 08 00 59 24 08 00 6d 24 08 00     1$..E$..Y$..m$..
	...
   80084:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..
   80094:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..
   800a4:	00 00 00 00 89 25 08 00 89 25 08 00 89 25 08 00     .....%...%...%..
   800b4:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..
   800c4:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..
   800d4:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..
   800e4:	89 25 08 00 89 25 08 00 89 25 08 00 89 25 08 00     .%...%...%...%..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	000839d0 	.word	0x000839d0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000839d0 	.word	0x000839d0
   80154:	20070978 	.word	0x20070978
   80158:	000839d0 	.word	0x000839d0
   8015c:	00000000 	.word	0x00000000

00080160 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80160:	b5f0      	push	{r4, r5, r6, r7, lr}
   80162:	b083      	sub	sp, #12
   80164:	4604      	mov	r4, r0
   80166:	460d      	mov	r5, r1
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b20      	ldr	r3, [pc, #128]	; (801f0 <usart_serial_getchar+0x90>)
   8016e:	4298      	cmp	r0, r3
   80170:	d00d      	beq.n	8018e <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80172:	4b20      	ldr	r3, [pc, #128]	; (801f4 <usart_serial_getchar+0x94>)
   80174:	4298      	cmp	r0, r3
   80176:	d012      	beq.n	8019e <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80178:	4b1f      	ldr	r3, [pc, #124]	; (801f8 <usart_serial_getchar+0x98>)
   8017a:	4298      	cmp	r0, r3
   8017c:	d019      	beq.n	801b2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8017e:	4b1f      	ldr	r3, [pc, #124]	; (801fc <usart_serial_getchar+0x9c>)
   80180:	429c      	cmp	r4, r3
   80182:	d020      	beq.n	801c6 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80184:	4b1e      	ldr	r3, [pc, #120]	; (80200 <usart_serial_getchar+0xa0>)
   80186:	429c      	cmp	r4, r3
   80188:	d027      	beq.n	801da <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8018a:	b003      	add	sp, #12
   8018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8018e:	461f      	mov	r7, r3
   80190:	4e1c      	ldr	r6, [pc, #112]	; (80204 <usart_serial_getchar+0xa4>)
   80192:	4629      	mov	r1, r5
   80194:	4638      	mov	r0, r7
   80196:	47b0      	blx	r6
   80198:	2800      	cmp	r0, #0
   8019a:	d1fa      	bne.n	80192 <usart_serial_getchar+0x32>
   8019c:	e7ef      	b.n	8017e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8019e:	461f      	mov	r7, r3
   801a0:	4e19      	ldr	r6, [pc, #100]	; (80208 <usart_serial_getchar+0xa8>)
   801a2:	a901      	add	r1, sp, #4
   801a4:	4638      	mov	r0, r7
   801a6:	47b0      	blx	r6
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	702b      	strb	r3, [r5, #0]
   801b0:	e7e8      	b.n	80184 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   801b2:	461e      	mov	r6, r3
   801b4:	4c14      	ldr	r4, [pc, #80]	; (80208 <usart_serial_getchar+0xa8>)
   801b6:	a901      	add	r1, sp, #4
   801b8:	4630      	mov	r0, r6
   801ba:	47a0      	blx	r4
   801bc:	2800      	cmp	r0, #0
   801be:	d1fa      	bne.n	801b6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   801c0:	9b01      	ldr	r3, [sp, #4]
   801c2:	702b      	strb	r3, [r5, #0]
   801c4:	e7e1      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801c6:	461e      	mov	r6, r3
   801c8:	4c0f      	ldr	r4, [pc, #60]	; (80208 <usart_serial_getchar+0xa8>)
   801ca:	a901      	add	r1, sp, #4
   801cc:	4630      	mov	r0, r6
   801ce:	47a0      	blx	r4
   801d0:	2800      	cmp	r0, #0
   801d2:	d1fa      	bne.n	801ca <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   801d4:	9b01      	ldr	r3, [sp, #4]
   801d6:	702b      	strb	r3, [r5, #0]
   801d8:	e7d7      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801da:	461e      	mov	r6, r3
   801dc:	4c0a      	ldr	r4, [pc, #40]	; (80208 <usart_serial_getchar+0xa8>)
   801de:	a901      	add	r1, sp, #4
   801e0:	4630      	mov	r0, r6
   801e2:	47a0      	blx	r4
   801e4:	2800      	cmp	r0, #0
   801e6:	d1fa      	bne.n	801de <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   801e8:	9b01      	ldr	r3, [sp, #4]
   801ea:	702b      	strb	r3, [r5, #0]
}
   801ec:	e7cd      	b.n	8018a <usart_serial_getchar+0x2a>
   801ee:	bf00      	nop
   801f0:	400e0800 	.word	0x400e0800
   801f4:	40098000 	.word	0x40098000
   801f8:	4009c000 	.word	0x4009c000
   801fc:	400a0000 	.word	0x400a0000
   80200:	400a4000 	.word	0x400a4000
   80204:	00080753 	.word	0x00080753
   80208:	00080451 	.word	0x00080451

0008020c <usart_serial_putchar>:
{
   8020c:	b570      	push	{r4, r5, r6, lr}
   8020e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80210:	4b1e      	ldr	r3, [pc, #120]	; (8028c <usart_serial_putchar+0x80>)
   80212:	4298      	cmp	r0, r3
   80214:	d00d      	beq.n	80232 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80216:	4b1e      	ldr	r3, [pc, #120]	; (80290 <usart_serial_putchar+0x84>)
   80218:	4298      	cmp	r0, r3
   8021a:	d013      	beq.n	80244 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8021c:	4b1d      	ldr	r3, [pc, #116]	; (80294 <usart_serial_putchar+0x88>)
   8021e:	4298      	cmp	r0, r3
   80220:	d019      	beq.n	80256 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80222:	4b1d      	ldr	r3, [pc, #116]	; (80298 <usart_serial_putchar+0x8c>)
   80224:	4298      	cmp	r0, r3
   80226:	d01f      	beq.n	80268 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80228:	4b1c      	ldr	r3, [pc, #112]	; (8029c <usart_serial_putchar+0x90>)
   8022a:	4298      	cmp	r0, r3
   8022c:	d025      	beq.n	8027a <usart_serial_putchar+0x6e>
	return 0;
   8022e:	2000      	movs	r0, #0
}
   80230:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80232:	461e      	mov	r6, r3
   80234:	4d1a      	ldr	r5, [pc, #104]	; (802a0 <usart_serial_putchar+0x94>)
   80236:	4621      	mov	r1, r4
   80238:	4630      	mov	r0, r6
   8023a:	47a8      	blx	r5
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_putchar+0x2a>
		return 1;
   80240:	2001      	movs	r0, #1
   80242:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80244:	461e      	mov	r6, r3
   80246:	4d17      	ldr	r5, [pc, #92]	; (802a4 <usart_serial_putchar+0x98>)
   80248:	4621      	mov	r1, r4
   8024a:	4630      	mov	r0, r6
   8024c:	47a8      	blx	r5
   8024e:	2800      	cmp	r0, #0
   80250:	d1fa      	bne.n	80248 <usart_serial_putchar+0x3c>
		return 1;
   80252:	2001      	movs	r0, #1
   80254:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80256:	461e      	mov	r6, r3
   80258:	4d12      	ldr	r5, [pc, #72]	; (802a4 <usart_serial_putchar+0x98>)
   8025a:	4621      	mov	r1, r4
   8025c:	4630      	mov	r0, r6
   8025e:	47a8      	blx	r5
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_putchar+0x4e>
		return 1;
   80264:	2001      	movs	r0, #1
   80266:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80268:	461e      	mov	r6, r3
   8026a:	4d0e      	ldr	r5, [pc, #56]	; (802a4 <usart_serial_putchar+0x98>)
   8026c:	4621      	mov	r1, r4
   8026e:	4630      	mov	r0, r6
   80270:	47a8      	blx	r5
   80272:	2800      	cmp	r0, #0
   80274:	d1fa      	bne.n	8026c <usart_serial_putchar+0x60>
		return 1;
   80276:	2001      	movs	r0, #1
   80278:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8027a:	461e      	mov	r6, r3
   8027c:	4d09      	ldr	r5, [pc, #36]	; (802a4 <usart_serial_putchar+0x98>)
   8027e:	4621      	mov	r1, r4
   80280:	4630      	mov	r0, r6
   80282:	47a8      	blx	r5
   80284:	2800      	cmp	r0, #0
   80286:	d1fa      	bne.n	8027e <usart_serial_putchar+0x72>
		return 1;
   80288:	2001      	movs	r0, #1
   8028a:	bd70      	pop	{r4, r5, r6, pc}
   8028c:	400e0800 	.word	0x400e0800
   80290:	40098000 	.word	0x40098000
   80294:	4009c000 	.word	0x4009c000
   80298:	400a0000 	.word	0x400a0000
   8029c:	400a4000 	.word	0x400a4000
   802a0:	00080743 	.word	0x00080743
   802a4:	0008043d 	.word	0x0008043d

000802a8 <init_tc>:
/** 
 * Initializes UART console, UART interrupt, command queue
 * and creates TC task 
 */
void init_tc( )
{
   802a8:	b570      	push	{r4, r5, r6, lr}
   802aa:	b084      	sub	sp, #16
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802ac:	4c1a      	ldr	r4, [pc, #104]	; (80318 <init_tc+0x70>)
   802ae:	4b1b      	ldr	r3, [pc, #108]	; (8031c <init_tc+0x74>)
   802b0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802b2:	4a1b      	ldr	r2, [pc, #108]	; (80320 <init_tc+0x78>)
   802b4:	4b1b      	ldr	r3, [pc, #108]	; (80324 <init_tc+0x7c>)
   802b6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802b8:	4a1b      	ldr	r2, [pc, #108]	; (80328 <init_tc+0x80>)
   802ba:	4b1c      	ldr	r3, [pc, #112]	; (8032c <init_tc+0x84>)
   802bc:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802be:	4b1c      	ldr	r3, [pc, #112]	; (80330 <init_tc+0x88>)
   802c0:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802c2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802c6:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802cc:	9303      	str	r3, [sp, #12]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802ce:	2008      	movs	r0, #8
   802d0:	4b18      	ldr	r3, [pc, #96]	; (80334 <init_tc+0x8c>)
   802d2:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
   802d4:	a901      	add	r1, sp, #4
   802d6:	4620      	mov	r0, r4
   802d8:	4b17      	ldr	r3, [pc, #92]	; (80338 <init_tc+0x90>)
   802da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   802dc:	4e17      	ldr	r6, [pc, #92]	; (8033c <init_tc+0x94>)
   802de:	6833      	ldr	r3, [r6, #0]
   802e0:	2100      	movs	r1, #0
   802e2:	6898      	ldr	r0, [r3, #8]
   802e4:	4d16      	ldr	r5, [pc, #88]	; (80340 <init_tc+0x98>)
   802e6:	47a8      	blx	r5
	setbuf(stdin, NULL);
   802e8:	6833      	ldr	r3, [r6, #0]
   802ea:	2100      	movs	r1, #0
   802ec:	6858      	ldr	r0, [r3, #4]
   802ee:	47a8      	blx	r5
	
	/* redirect printf / scanf function calls to UART */
	stdio_serial_init(CONF_UART, &usart_serial_options);
	
    /* Enable UART Interrupt for RX ready */
	uart_enable_interrupt( CONF_UART, UART_IER_RXRDY );
   802f0:	2101      	movs	r1, #1
   802f2:	4620      	mov	r0, r4
   802f4:	4b13      	ldr	r3, [pc, #76]	; (80344 <init_tc+0x9c>)
   802f6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   802f8:	4b13      	ldr	r3, [pc, #76]	; (80348 <init_tc+0xa0>)
   802fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   802fe:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80300:	2250      	movs	r2, #80	; 0x50
   80302:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
	 * were not called from an ISR with higher or equal priority as 
	 * configMAX_SYSCALL_INTERRUPT_PRIORITY 
	*/
	NVIC_SetPriority(CONF_UART_ID, configMAX_PRIORITIES);
	
	xQueueTC = xQueueCreate( 4, sizeof( char ) );
   80306:	2200      	movs	r2, #0
   80308:	2101      	movs	r1, #1
   8030a:	2004      	movs	r0, #4
   8030c:	4b0f      	ldr	r3, [pc, #60]	; (8034c <init_tc+0xa4>)
   8030e:	4798      	blx	r3
   80310:	4b0f      	ldr	r3, [pc, #60]	; (80350 <init_tc+0xa8>)
   80312:	6018      	str	r0, [r3, #0]
	
}
   80314:	b004      	add	sp, #16
   80316:	bd70      	pop	{r4, r5, r6, pc}
   80318:	400e0800 	.word	0x400e0800
   8031c:	2007c39c 	.word	0x2007c39c
   80320:	0008020d 	.word	0x0008020d
   80324:	2007c398 	.word	0x2007c398
   80328:	00080161 	.word	0x00080161
   8032c:	2007c394 	.word	0x2007c394
   80330:	0501bd00 	.word	0x0501bd00
   80334:	00082569 	.word	0x00082569
   80338:	00080709 	.word	0x00080709
   8033c:	20070134 	.word	0x20070134
   80340:	00082999 	.word	0x00082999
   80344:	0008073f 	.word	0x0008073f
   80348:	e000e100 	.word	0xe000e100
   8034c:	00080d5d 	.word	0x00080d5d
   80350:	2007c390 	.word	0x2007c390

00080354 <handleInput>:
/** 
 * TC task function, interprets received data from UART
 */
void handleInput() {
   80354:	b508      	push	{r3, lr}
	
	switch (TC_input) {
   80356:	4b0a      	ldr	r3, [pc, #40]	; (80380 <handleInput+0x2c>)
   80358:	781b      	ldrb	r3, [r3, #0]
   8035a:	2b62      	cmp	r3, #98	; 0x62
   8035c:	d008      	beq.n	80370 <handleInput+0x1c>
   8035e:	2b63      	cmp	r3, #99	; 0x63
   80360:	d00a      	beq.n	80378 <handleInput+0x24>
   80362:	2b61      	cmp	r3, #97	; 0x61
   80364:	d000      	beq.n	80368 <handleInput+0x14>
   80366:	bd08      	pop	{r3, pc}
		case ('a'):
		set_cmd('0'); /* sets the command value to 0 */
   80368:	2030      	movs	r0, #48	; 0x30
   8036a:	4b06      	ldr	r3, [pc, #24]	; (80384 <handleInput+0x30>)
   8036c:	4798      	blx	r3
		break;
   8036e:	bd08      	pop	{r3, pc}
		case ('b'):
		set_cmd('1'); /* sets the command value to 1 */
   80370:	2031      	movs	r0, #49	; 0x31
   80372:	4b04      	ldr	r3, [pc, #16]	; (80384 <handleInput+0x30>)
   80374:	4798      	blx	r3
		break;
   80376:	bd08      	pop	{r3, pc}
		case ('c'):
		set_cmd('2'); /* sets the command value to 2 */
   80378:	2032      	movs	r0, #50	; 0x32
   8037a:	4b02      	ldr	r3, [pc, #8]	; (80384 <handleInput+0x30>)
   8037c:	4798      	blx	r3
		break;
	}

}
   8037e:	e7f2      	b.n	80366 <handleInput+0x12>
   80380:	20070990 	.word	0x20070990
   80384:	00080679 	.word	0x00080679

00080388 <UART_Handler>:

/** 
 * Interrupt service routine for UART RXTX
 */
void UART_Handler( )
{
   80388:	b508      	push	{r3, lr}
	/* The UART interrupt is triggered both for RX and TX, therefore
	   we have to see if RXRDY is set in the UART status register */
	if((CONF_UART->UART_SR & UART_SR_RXRDY) == UART_SR_RXRDY)
   8038a:	4b06      	ldr	r3, [pc, #24]	; (803a4 <UART_Handler+0x1c>)
   8038c:	695b      	ldr	r3, [r3, #20]
   8038e:	f013 0f01 	tst.w	r3, #1
   80392:	d100      	bne.n	80396 <UART_Handler+0xe>
   80394:	bd08      	pop	{r3, pc}
	{
		TC_input=CONF_UART->UART_RHR;
   80396:	4b03      	ldr	r3, [pc, #12]	; (803a4 <UART_Handler+0x1c>)
   80398:	699a      	ldr	r2, [r3, #24]
   8039a:	4b03      	ldr	r3, [pc, #12]	; (803a8 <UART_Handler+0x20>)
   8039c:	701a      	strb	r2, [r3, #0]
		handleInput();
   8039e:	4b03      	ldr	r3, [pc, #12]	; (803ac <UART_Handler+0x24>)
   803a0:	4798      	blx	r3
	}
}
   803a2:	e7f7      	b.n	80394 <UART_Handler+0xc>
   803a4:	400e0800 	.word	0x400e0800
   803a8:	20070990 	.word	0x20070990
   803ac:	00080355 	.word	0x00080355

000803b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   803b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   803b4:	b980      	cbnz	r0, 803d8 <_read+0x28>
   803b6:	460c      	mov	r4, r1
   803b8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   803ba:	2a00      	cmp	r2, #0
   803bc:	dd0f      	ble.n	803de <_read+0x2e>
   803be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   803c0:	4e08      	ldr	r6, [pc, #32]	; (803e4 <_read+0x34>)
   803c2:	4d09      	ldr	r5, [pc, #36]	; (803e8 <_read+0x38>)
   803c4:	6830      	ldr	r0, [r6, #0]
   803c6:	4621      	mov	r1, r4
   803c8:	682b      	ldr	r3, [r5, #0]
   803ca:	4798      	blx	r3
		ptr++;
   803cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   803ce:	42bc      	cmp	r4, r7
   803d0:	d1f8      	bne.n	803c4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   803d2:	4640      	mov	r0, r8
   803d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   803d8:	f04f 38ff 	mov.w	r8, #4294967295
   803dc:	e7f9      	b.n	803d2 <_read+0x22>
	for (; len > 0; --len) {
   803de:	4680      	mov	r8, r0
   803e0:	e7f7      	b.n	803d2 <_read+0x22>
   803e2:	bf00      	nop
   803e4:	2007c39c 	.word	0x2007c39c
   803e8:	2007c394 	.word	0x2007c394

000803ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   803ec:	3801      	subs	r0, #1
   803ee:	2802      	cmp	r0, #2
   803f0:	d815      	bhi.n	8041e <_write+0x32>
{
   803f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803f6:	460e      	mov	r6, r1
   803f8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   803fa:	b19a      	cbz	r2, 80424 <_write+0x38>
   803fc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   803fe:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80438 <_write+0x4c>
   80402:	4f0c      	ldr	r7, [pc, #48]	; (80434 <_write+0x48>)
   80404:	f8d8 0000 	ldr.w	r0, [r8]
   80408:	f815 1b01 	ldrb.w	r1, [r5], #1
   8040c:	683b      	ldr	r3, [r7, #0]
   8040e:	4798      	blx	r3
   80410:	2800      	cmp	r0, #0
   80412:	db0a      	blt.n	8042a <_write+0x3e>
   80414:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80416:	3c01      	subs	r4, #1
   80418:	d1f4      	bne.n	80404 <_write+0x18>
   8041a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8041e:	f04f 30ff 	mov.w	r0, #4294967295
   80422:	4770      	bx	lr
	for (; len != 0; --len) {
   80424:	4610      	mov	r0, r2
   80426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8042a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80432:	bf00      	nop
   80434:	2007c398 	.word	0x2007c398
   80438:	2007c39c 	.word	0x2007c39c

0008043c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8043c:	6943      	ldr	r3, [r0, #20]
   8043e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80442:	bf1d      	ittte	ne
   80444:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80448:	61c1      	strne	r1, [r0, #28]
	return 0;
   8044a:	2000      	movne	r0, #0
		return 1;
   8044c:	2001      	moveq	r0, #1
}
   8044e:	4770      	bx	lr

00080450 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80450:	6943      	ldr	r3, [r0, #20]
   80452:	f013 0f01 	tst.w	r3, #1
   80456:	d005      	beq.n	80464 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80458:	6983      	ldr	r3, [r0, #24]
   8045a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8045e:	600b      	str	r3, [r1, #0]

	return 0;
   80460:	2000      	movs	r0, #0
   80462:	4770      	bx	lr
		return 1;
   80464:	2001      	movs	r0, #1
}
   80466:	4770      	bx	lr

00080468 <blink>:

/* Prototypes */
int delay = 0;
bool ready = false;

void blink() {
   80468:	b500      	push	{lr}
   8046a:	b083      	sub	sp, #12
	
	TickType_t xLastWakeTime;		/* Last wake time of the task, needed for periodic execution */
	xLastWakeTime = xTaskGetTickCount();
   8046c:	4b1b      	ldr	r3, [pc, #108]	; (804dc <blink+0x74>)
   8046e:	4798      	blx	r3
   80470:	9001      	str	r0, [sp, #4]
	
	for( ;; ) {
		
		switch (get_cmd()) {    /* Get the command value */
   80472:	4d1b      	ldr	r5, [pc, #108]	; (804e0 <blink+0x78>)
			delay = 50;         /* High frequency blinking state */
			break;
		}
		
				
		if(!ready) {
   80474:	4c1b      	ldr	r4, [pc, #108]	; (804e4 <blink+0x7c>)
			/* If not ready -> keep LED off */
			PIOB->PIO_CODR = 1 << 27;
		} else if(delay == 0) {
   80476:	4e1c      	ldr	r6, [pc, #112]	; (804e8 <blink+0x80>)
   80478:	e013      	b.n	804a2 <blink+0x3a>
			ready = true;       /* Ready state */
   8047a:	2301      	movs	r3, #1
   8047c:	7023      	strb	r3, [r4, #0]
		} else if(delay == 0) {
   8047e:	6831      	ldr	r1, [r6, #0]
   80480:	b9f1      	cbnz	r1, 804c0 <blink+0x58>
			/* If ready -> keep LED on continuously */
			PIOB->PIO_SODR = 1 << 27;
   80482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80486:	4b19      	ldr	r3, [pc, #100]	; (804ec <blink+0x84>)
   80488:	631a      	str	r2, [r3, #48]	; 0x30
   8048a:	e007      	b.n	8049c <blink+0x34>
			delay = 250;        /* Low frequency blinking state */
   8048c:	23fa      	movs	r3, #250	; 0xfa
   8048e:	6033      	str	r3, [r6, #0]
		if(!ready) {
   80490:	7823      	ldrb	r3, [r4, #0]
   80492:	b9a3      	cbnz	r3, 804be <blink+0x56>
			PIOB->PIO_CODR = 1 << 27;
   80494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80498:	4b14      	ldr	r3, [pc, #80]	; (804ec <blink+0x84>)
   8049a:	635a      	str	r2, [r3, #52]	; 0x34
				/* If pin 27 is not active -> turn on via Set Output Data Register (SODR) */
				PIOB->PIO_SODR = 1 << 27;
			}
			vTaskDelayUntil(&xLastWakeTime, delay/portTICK_RATE_MS); /* Absolute delay */
		}
		vTaskDelay(10);
   8049c:	200a      	movs	r0, #10
   8049e:	4b14      	ldr	r3, [pc, #80]	; (804f0 <blink+0x88>)
   804a0:	4798      	blx	r3
		switch (get_cmd()) {    /* Get the command value */
   804a2:	47a8      	blx	r5
   804a4:	2831      	cmp	r0, #49	; 0x31
   804a6:	d0f1      	beq.n	8048c <blink+0x24>
   804a8:	2832      	cmp	r0, #50	; 0x32
   804aa:	d005      	beq.n	804b8 <blink+0x50>
   804ac:	2830      	cmp	r0, #48	; 0x30
   804ae:	d0e4      	beq.n	8047a <blink+0x12>
		if(!ready) {
   804b0:	7823      	ldrb	r3, [r4, #0]
   804b2:	2b00      	cmp	r3, #0
   804b4:	d0ee      	beq.n	80494 <blink+0x2c>
   804b6:	e7e2      	b.n	8047e <blink+0x16>
			delay = 50;         /* High frequency blinking state */
   804b8:	2332      	movs	r3, #50	; 0x32
   804ba:	6033      	str	r3, [r6, #0]
			break;
   804bc:	e7e8      	b.n	80490 <blink+0x28>
		} else if(delay == 0) {
   804be:	6831      	ldr	r1, [r6, #0]
			if((PIOB->PIO_ODSR & (1 << 27)) > 0) {
   804c0:	4b0a      	ldr	r3, [pc, #40]	; (804ec <blink+0x84>)
   804c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   804c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
				PIOB->PIO_CODR = 1 << 27;
   804c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   804cc:	4b07      	ldr	r3, [pc, #28]	; (804ec <blink+0x84>)
   804ce:	bf14      	ite	ne
   804d0:	635a      	strne	r2, [r3, #52]	; 0x34
				PIOB->PIO_SODR = 1 << 27;
   804d2:	631a      	streq	r2, [r3, #48]	; 0x30
			vTaskDelayUntil(&xLastWakeTime, delay/portTICK_RATE_MS); /* Absolute delay */
   804d4:	a801      	add	r0, sp, #4
   804d6:	4b07      	ldr	r3, [pc, #28]	; (804f4 <blink+0x8c>)
   804d8:	4798      	blx	r3
   804da:	e7df      	b.n	8049c <blink+0x34>
   804dc:	00081641 	.word	0x00081641
   804e0:	00080685 	.word	0x00080685
   804e4:	20070998 	.word	0x20070998
   804e8:	20070994 	.word	0x20070994
   804ec:	400e1000 	.word	0x400e1000
   804f0:	00081941 	.word	0x00081941
   804f4:	00081895 	.word	0x00081895

000804f8 <init_blink>:
}



void init_blink( )
{
   804f8:	b510      	push	{r4, lr}
   804fa:	b082      	sub	sp, #8
	/* Initialize LED0 on Port B Pin 27*/
	PIOB->PIO_PER = 1 << 27;		/* Pin Enable Register (PER) */
   804fc:	4b08      	ldr	r3, [pc, #32]	; (80520 <init_blink+0x28>)
   804fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80502:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER = 1 << 27;		/* Output Enable Register (OER) */
   80504:	611a      	str	r2, [r3, #16]
	PIOB->PIO_OWER = 1 << 27;		/* Output Write Enable Register (OWER) */
   80506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
		/* Create task */
		xTaskCreate(
   8050a:	2300      	movs	r3, #0
   8050c:	9301      	str	r3, [sp, #4]
   8050e:	2201      	movs	r2, #1
   80510:	9200      	str	r2, [sp, #0]
   80512:	22fa      	movs	r2, #250	; 0xfa
   80514:	4903      	ldr	r1, [pc, #12]	; (80524 <init_blink+0x2c>)
   80516:	4804      	ldr	r0, [pc, #16]	; (80528 <init_blink+0x30>)
   80518:	4c04      	ldr	r4, [pc, #16]	; (8052c <init_blink+0x34>)
   8051a:	47a0      	blx	r4
		250,				/* Stack size in words, not bytes. */
		NULL,				/* Parameter passed into the task. */
		1,					/* Priority at which the task is created. */
		NULL 				/* Used to pass out the created task's handle. */
		);
}
   8051c:	b002      	add	sp, #8
   8051e:	bd10      	pop	{r4, pc}
   80520:	400e1000 	.word	0x400e1000
   80524:	00083984 	.word	0x00083984
   80528:	00080469 	.word	0x00080469
   8052c:	000813b1 	.word	0x000813b1

00080530 <usart_serial_getchar>:
{
   80530:	b5f0      	push	{r4, r5, r6, r7, lr}
   80532:	b083      	sub	sp, #12
   80534:	4604      	mov	r4, r0
   80536:	460d      	mov	r5, r1
	uint32_t val = 0;
   80538:	2300      	movs	r3, #0
   8053a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8053c:	4b20      	ldr	r3, [pc, #128]	; (805c0 <usart_serial_getchar+0x90>)
   8053e:	4298      	cmp	r0, r3
   80540:	d00d      	beq.n	8055e <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80542:	4b20      	ldr	r3, [pc, #128]	; (805c4 <usart_serial_getchar+0x94>)
   80544:	4298      	cmp	r0, r3
   80546:	d012      	beq.n	8056e <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   80548:	4b1f      	ldr	r3, [pc, #124]	; (805c8 <usart_serial_getchar+0x98>)
   8054a:	4298      	cmp	r0, r3
   8054c:	d019      	beq.n	80582 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   8054e:	4b1f      	ldr	r3, [pc, #124]	; (805cc <usart_serial_getchar+0x9c>)
   80550:	429c      	cmp	r4, r3
   80552:	d020      	beq.n	80596 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   80554:	4b1e      	ldr	r3, [pc, #120]	; (805d0 <usart_serial_getchar+0xa0>)
   80556:	429c      	cmp	r4, r3
   80558:	d027      	beq.n	805aa <usart_serial_getchar+0x7a>
}
   8055a:	b003      	add	sp, #12
   8055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8055e:	461f      	mov	r7, r3
   80560:	4e1c      	ldr	r6, [pc, #112]	; (805d4 <usart_serial_getchar+0xa4>)
   80562:	4629      	mov	r1, r5
   80564:	4638      	mov	r0, r7
   80566:	47b0      	blx	r6
   80568:	2800      	cmp	r0, #0
   8056a:	d1fa      	bne.n	80562 <usart_serial_getchar+0x32>
   8056c:	e7ef      	b.n	8054e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8056e:	461f      	mov	r7, r3
   80570:	4e19      	ldr	r6, [pc, #100]	; (805d8 <usart_serial_getchar+0xa8>)
   80572:	a901      	add	r1, sp, #4
   80574:	4638      	mov	r0, r7
   80576:	47b0      	blx	r6
   80578:	2800      	cmp	r0, #0
   8057a:	d1fa      	bne.n	80572 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   8057c:	9b01      	ldr	r3, [sp, #4]
   8057e:	702b      	strb	r3, [r5, #0]
   80580:	e7e8      	b.n	80554 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80582:	461e      	mov	r6, r3
   80584:	4c14      	ldr	r4, [pc, #80]	; (805d8 <usart_serial_getchar+0xa8>)
   80586:	a901      	add	r1, sp, #4
   80588:	4630      	mov	r0, r6
   8058a:	47a0      	blx	r4
   8058c:	2800      	cmp	r0, #0
   8058e:	d1fa      	bne.n	80586 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80590:	9b01      	ldr	r3, [sp, #4]
   80592:	702b      	strb	r3, [r5, #0]
   80594:	e7e1      	b.n	8055a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80596:	461e      	mov	r6, r3
   80598:	4c0f      	ldr	r4, [pc, #60]	; (805d8 <usart_serial_getchar+0xa8>)
   8059a:	a901      	add	r1, sp, #4
   8059c:	4630      	mov	r0, r6
   8059e:	47a0      	blx	r4
   805a0:	2800      	cmp	r0, #0
   805a2:	d1fa      	bne.n	8059a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   805a4:	9b01      	ldr	r3, [sp, #4]
   805a6:	702b      	strb	r3, [r5, #0]
   805a8:	e7d7      	b.n	8055a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805aa:	461e      	mov	r6, r3
   805ac:	4c0a      	ldr	r4, [pc, #40]	; (805d8 <usart_serial_getchar+0xa8>)
   805ae:	a901      	add	r1, sp, #4
   805b0:	4630      	mov	r0, r6
   805b2:	47a0      	blx	r4
   805b4:	2800      	cmp	r0, #0
   805b6:	d1fa      	bne.n	805ae <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   805b8:	9b01      	ldr	r3, [sp, #4]
   805ba:	702b      	strb	r3, [r5, #0]
}
   805bc:	e7cd      	b.n	8055a <usart_serial_getchar+0x2a>
   805be:	bf00      	nop
   805c0:	400e0800 	.word	0x400e0800
   805c4:	40098000 	.word	0x40098000
   805c8:	4009c000 	.word	0x4009c000
   805cc:	400a0000 	.word	0x400a0000
   805d0:	400a4000 	.word	0x400a4000
   805d4:	00080753 	.word	0x00080753
   805d8:	00080451 	.word	0x00080451

000805dc <usart_serial_putchar>:
{
   805dc:	b570      	push	{r4, r5, r6, lr}
   805de:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   805e0:	4b1e      	ldr	r3, [pc, #120]	; (8065c <usart_serial_putchar+0x80>)
   805e2:	4298      	cmp	r0, r3
   805e4:	d00d      	beq.n	80602 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   805e6:	4b1e      	ldr	r3, [pc, #120]	; (80660 <usart_serial_putchar+0x84>)
   805e8:	4298      	cmp	r0, r3
   805ea:	d013      	beq.n	80614 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   805ec:	4b1d      	ldr	r3, [pc, #116]	; (80664 <usart_serial_putchar+0x88>)
   805ee:	4298      	cmp	r0, r3
   805f0:	d019      	beq.n	80626 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   805f2:	4b1d      	ldr	r3, [pc, #116]	; (80668 <usart_serial_putchar+0x8c>)
   805f4:	4298      	cmp	r0, r3
   805f6:	d01f      	beq.n	80638 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   805f8:	4b1c      	ldr	r3, [pc, #112]	; (8066c <usart_serial_putchar+0x90>)
   805fa:	4298      	cmp	r0, r3
   805fc:	d025      	beq.n	8064a <usart_serial_putchar+0x6e>
	return 0;
   805fe:	2000      	movs	r0, #0
}
   80600:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80602:	461e      	mov	r6, r3
   80604:	4d1a      	ldr	r5, [pc, #104]	; (80670 <usart_serial_putchar+0x94>)
   80606:	4621      	mov	r1, r4
   80608:	4630      	mov	r0, r6
   8060a:	47a8      	blx	r5
   8060c:	2800      	cmp	r0, #0
   8060e:	d1fa      	bne.n	80606 <usart_serial_putchar+0x2a>
		return 1;
   80610:	2001      	movs	r0, #1
   80612:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80614:	461e      	mov	r6, r3
   80616:	4d17      	ldr	r5, [pc, #92]	; (80674 <usart_serial_putchar+0x98>)
   80618:	4621      	mov	r1, r4
   8061a:	4630      	mov	r0, r6
   8061c:	47a8      	blx	r5
   8061e:	2800      	cmp	r0, #0
   80620:	d1fa      	bne.n	80618 <usart_serial_putchar+0x3c>
		return 1;
   80622:	2001      	movs	r0, #1
   80624:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80626:	461e      	mov	r6, r3
   80628:	4d12      	ldr	r5, [pc, #72]	; (80674 <usart_serial_putchar+0x98>)
   8062a:	4621      	mov	r1, r4
   8062c:	4630      	mov	r0, r6
   8062e:	47a8      	blx	r5
   80630:	2800      	cmp	r0, #0
   80632:	d1fa      	bne.n	8062a <usart_serial_putchar+0x4e>
		return 1;
   80634:	2001      	movs	r0, #1
   80636:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80638:	461e      	mov	r6, r3
   8063a:	4d0e      	ldr	r5, [pc, #56]	; (80674 <usart_serial_putchar+0x98>)
   8063c:	4621      	mov	r1, r4
   8063e:	4630      	mov	r0, r6
   80640:	47a8      	blx	r5
   80642:	2800      	cmp	r0, #0
   80644:	d1fa      	bne.n	8063c <usart_serial_putchar+0x60>
		return 1;
   80646:	2001      	movs	r0, #1
   80648:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8064a:	461e      	mov	r6, r3
   8064c:	4d09      	ldr	r5, [pc, #36]	; (80674 <usart_serial_putchar+0x98>)
   8064e:	4621      	mov	r1, r4
   80650:	4630      	mov	r0, r6
   80652:	47a8      	blx	r5
   80654:	2800      	cmp	r0, #0
   80656:	d1fa      	bne.n	8064e <usart_serial_putchar+0x72>
		return 1;
   80658:	2001      	movs	r0, #1
   8065a:	bd70      	pop	{r4, r5, r6, pc}
   8065c:	400e0800 	.word	0x400e0800
   80660:	40098000 	.word	0x40098000
   80664:	4009c000 	.word	0x4009c000
   80668:	400a0000 	.word	0x400a0000
   8066c:	400a4000 	.word	0x400a4000
   80670:	00080743 	.word	0x00080743
   80674:	0008043d 	.word	0x0008043d

00080678 <set_cmd>:

/* Prototypes */
unsigned char cmd;

void set_cmd ( unsigned char c) {
	cmd = c; /* sets the current command value to new the value*/
   80678:	4b01      	ldr	r3, [pc, #4]	; (80680 <set_cmd+0x8>)
   8067a:	7018      	strb	r0, [r3, #0]
   8067c:	4770      	bx	lr
   8067e:	bf00      	nop
   80680:	2007c3a0 	.word	0x2007c3a0

00080684 <get_cmd>:
}


unsigned char get_cmd() {
	return cmd; /* returns the current command value*/
}
   80684:	4b01      	ldr	r3, [pc, #4]	; (8068c <get_cmd+0x8>)
   80686:	7818      	ldrb	r0, [r3, #0]
   80688:	4770      	bx	lr
   8068a:	bf00      	nop
   8068c:	2007c3a0 	.word	0x2007c3a0

00080690 <init_cmd>:

/* Initializes command object
*/
void init_cmd() {
   80690:	b530      	push	{r4, r5, lr}
   80692:	b085      	sub	sp, #20
	stdio_base = (void *)usart;
   80694:	4c11      	ldr	r4, [pc, #68]	; (806dc <init_cmd+0x4c>)
   80696:	4b12      	ldr	r3, [pc, #72]	; (806e0 <init_cmd+0x50>)
   80698:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8069a:	4a12      	ldr	r2, [pc, #72]	; (806e4 <init_cmd+0x54>)
   8069c:	4b12      	ldr	r3, [pc, #72]	; (806e8 <init_cmd+0x58>)
   8069e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   806a0:	4a12      	ldr	r2, [pc, #72]	; (806ec <init_cmd+0x5c>)
   806a2:	4b13      	ldr	r3, [pc, #76]	; (806f0 <init_cmd+0x60>)
   806a4:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   806a6:	4b13      	ldr	r3, [pc, #76]	; (806f4 <init_cmd+0x64>)
   806a8:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   806aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   806ae:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   806b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806b4:	9303      	str	r3, [sp, #12]
   806b6:	2008      	movs	r0, #8
   806b8:	4b0f      	ldr	r3, [pc, #60]	; (806f8 <init_cmd+0x68>)
   806ba:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
   806bc:	a901      	add	r1, sp, #4
   806be:	4620      	mov	r0, r4
   806c0:	4b0e      	ldr	r3, [pc, #56]	; (806fc <init_cmd+0x6c>)
   806c2:	4798      	blx	r3
	setbuf(stdout, NULL);
   806c4:	4d0e      	ldr	r5, [pc, #56]	; (80700 <init_cmd+0x70>)
   806c6:	682b      	ldr	r3, [r5, #0]
   806c8:	2100      	movs	r1, #0
   806ca:	6898      	ldr	r0, [r3, #8]
   806cc:	4c0d      	ldr	r4, [pc, #52]	; (80704 <init_cmd+0x74>)
   806ce:	47a0      	blx	r4
	setbuf(stdin, NULL);
   806d0:	682b      	ldr	r3, [r5, #0]
   806d2:	2100      	movs	r1, #0
   806d4:	6858      	ldr	r0, [r3, #4]
   806d6:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS
	};
	
	stdio_serial_init(CONF_UART, &usart_serial_options);
}
   806d8:	b005      	add	sp, #20
   806da:	bd30      	pop	{r4, r5, pc}
   806dc:	400e0800 	.word	0x400e0800
   806e0:	2007c39c 	.word	0x2007c39c
   806e4:	000805dd 	.word	0x000805dd
   806e8:	2007c398 	.word	0x2007c398
   806ec:	00080531 	.word	0x00080531
   806f0:	2007c394 	.word	0x2007c394
   806f4:	0501bd00 	.word	0x0501bd00
   806f8:	00082569 	.word	0x00082569
   806fc:	00080709 	.word	0x00080709
   80700:	20070134 	.word	0x20070134
   80704:	00082999 	.word	0x00082999

00080708 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80708:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8070a:	23ac      	movs	r3, #172	; 0xac
   8070c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8070e:	680b      	ldr	r3, [r1, #0]
   80710:	684a      	ldr	r2, [r1, #4]
   80712:	fbb3 f3f2 	udiv	r3, r3, r2
   80716:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80718:	1e5c      	subs	r4, r3, #1
   8071a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8071e:	4294      	cmp	r4, r2
   80720:	d80b      	bhi.n	8073a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80722:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80724:	688b      	ldr	r3, [r1, #8]
   80726:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80728:	f240 2302 	movw	r3, #514	; 0x202
   8072c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80730:	2350      	movs	r3, #80	; 0x50
   80732:	6003      	str	r3, [r0, #0]

	return 0;
   80734:	2000      	movs	r0, #0
}
   80736:	bc10      	pop	{r4}
   80738:	4770      	bx	lr
		return 1;
   8073a:	2001      	movs	r0, #1
   8073c:	e7fb      	b.n	80736 <uart_init+0x2e>

0008073e <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   8073e:	6081      	str	r1, [r0, #8]
   80740:	4770      	bx	lr

00080742 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80742:	6943      	ldr	r3, [r0, #20]
   80744:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80748:	bf1a      	itte	ne
   8074a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8074c:	2000      	movne	r0, #0
		return 1;
   8074e:	2001      	moveq	r0, #1
}
   80750:	4770      	bx	lr

00080752 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80752:	6943      	ldr	r3, [r0, #20]
   80754:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80758:	bf1d      	ittte	ne
   8075a:	6983      	ldrne	r3, [r0, #24]
   8075c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8075e:	2000      	movne	r0, #0
		return 1;
   80760:	2001      	moveq	r0, #1
}
   80762:	4770      	bx	lr

00080764 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80764:	f100 0308 	add.w	r3, r0, #8
   80768:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8076a:	f04f 32ff 	mov.w	r2, #4294967295
   8076e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80770:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   80772:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   80774:	2300      	movs	r3, #0
   80776:	6003      	str	r3, [r0, #0]
   80778:	4770      	bx	lr

0008077a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8077a:	2300      	movs	r3, #0
   8077c:	6103      	str	r3, [r0, #16]
   8077e:	4770      	bx	lr

00080780 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   80780:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   80782:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   80784:	689a      	ldr	r2, [r3, #8]
   80786:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   80788:	689a      	ldr	r2, [r3, #8]
   8078a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8078c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8078e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80790:	6803      	ldr	r3, [r0, #0]
   80792:	3301      	adds	r3, #1
   80794:	6003      	str	r3, [r0, #0]
   80796:	4770      	bx	lr

00080798 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   80798:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   8079a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8079c:	f1b5 3fff 	cmp.w	r5, #4294967295
   807a0:	d002      	beq.n	807a8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   807a2:	f100 0208 	add.w	r2, r0, #8
   807a6:	e002      	b.n	807ae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   807a8:	6902      	ldr	r2, [r0, #16]
   807aa:	e004      	b.n	807b6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   807ac:	461a      	mov	r2, r3
   807ae:	6853      	ldr	r3, [r2, #4]
   807b0:	681c      	ldr	r4, [r3, #0]
   807b2:	42a5      	cmp	r5, r4
   807b4:	d2fa      	bcs.n	807ac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   807b6:	6853      	ldr	r3, [r2, #4]
   807b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   807ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   807bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   807be:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807c2:	6803      	ldr	r3, [r0, #0]
   807c4:	3301      	adds	r3, #1
   807c6:	6003      	str	r3, [r0, #0]
}
   807c8:	bc30      	pop	{r4, r5}
   807ca:	4770      	bx	lr

000807cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   807cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   807ce:	6842      	ldr	r2, [r0, #4]
   807d0:	6881      	ldr	r1, [r0, #8]
   807d2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   807d4:	6882      	ldr	r2, [r0, #8]
   807d6:	6841      	ldr	r1, [r0, #4]
   807d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   807da:	685a      	ldr	r2, [r3, #4]
   807dc:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   807de:	bf04      	itt	eq
   807e0:	6882      	ldreq	r2, [r0, #8]
   807e2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   807e4:	2200      	movs	r2, #0
   807e6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   807e8:	681a      	ldr	r2, [r3, #0]
   807ea:	3a01      	subs	r2, #1
   807ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   807ee:	6818      	ldr	r0, [r3, #0]
}
   807f0:	4770      	bx	lr
	...

000807f4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   807f4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   807f6:	2300      	movs	r3, #0
   807f8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   807fa:	4b0d      	ldr	r3, [pc, #52]	; (80830 <prvTaskExitError+0x3c>)
   807fc:	681b      	ldr	r3, [r3, #0]
   807fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   80802:	d008      	beq.n	80816 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   80804:	f04f 0340 	mov.w	r3, #64	; 0x40
   80808:	f383 8811 	msr	BASEPRI, r3
   8080c:	f3bf 8f6f 	isb	sy
   80810:	f3bf 8f4f 	dsb	sy
   80814:	e7fe      	b.n	80814 <prvTaskExitError+0x20>
   80816:	f04f 0340 	mov.w	r3, #64	; 0x40
   8081a:	f383 8811 	msr	BASEPRI, r3
   8081e:	f3bf 8f6f 	isb	sy
   80822:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   80826:	9b01      	ldr	r3, [sp, #4]
   80828:	2b00      	cmp	r3, #0
   8082a:	d0fc      	beq.n	80826 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   8082c:	b002      	add	sp, #8
   8082e:	4770      	bx	lr
   80830:	2007012c 	.word	0x2007012c

00080834 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80834:	4806      	ldr	r0, [pc, #24]	; (80850 <prvPortStartFirstTask+0x1c>)
   80836:	6800      	ldr	r0, [r0, #0]
   80838:	6800      	ldr	r0, [r0, #0]
   8083a:	f380 8808 	msr	MSP, r0
   8083e:	b662      	cpsie	i
   80840:	b661      	cpsie	f
   80842:	f3bf 8f4f 	dsb	sy
   80846:	f3bf 8f6f 	isb	sy
   8084a:	df00      	svc	0
   8084c:	bf00      	nop
   8084e:	0000      	.short	0x0000
   80850:	e000ed08 	.word	0xe000ed08

00080854 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80858:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   8085c:	f021 0101 	bic.w	r1, r1, #1
   80860:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   80864:	4b03      	ldr	r3, [pc, #12]	; (80874 <pxPortInitialiseStack+0x20>)
   80866:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   8086a:	f840 2c20 	str.w	r2, [r0, #-32]
}
   8086e:	3840      	subs	r0, #64	; 0x40
   80870:	4770      	bx	lr
   80872:	bf00      	nop
   80874:	000807f5 	.word	0x000807f5
	...

00080880 <SVC_Handler>:
	__asm volatile (
   80880:	4b07      	ldr	r3, [pc, #28]	; (808a0 <pxCurrentTCBConst2>)
   80882:	6819      	ldr	r1, [r3, #0]
   80884:	6808      	ldr	r0, [r1, #0]
   80886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8088a:	f380 8809 	msr	PSP, r0
   8088e:	f3bf 8f6f 	isb	sy
   80892:	f04f 0000 	mov.w	r0, #0
   80896:	f380 8811 	msr	BASEPRI, r0
   8089a:	f04e 0e0d 	orr.w	lr, lr, #13
   8089e:	4770      	bx	lr

000808a0 <pxCurrentTCBConst2>:
   808a0:	2007c1a8 	.word	0x2007c1a8
   808a4:	4770      	bx	lr
   808a6:	bf00      	nop

000808a8 <vPortEnterCritical>:
   808a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   808ac:	f383 8811 	msr	BASEPRI, r3
   808b0:	f3bf 8f6f 	isb	sy
   808b4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   808b8:	4a0a      	ldr	r2, [pc, #40]	; (808e4 <vPortEnterCritical+0x3c>)
   808ba:	6813      	ldr	r3, [r2, #0]
   808bc:	3301      	adds	r3, #1
   808be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   808c0:	2b01      	cmp	r3, #1
   808c2:	d10d      	bne.n	808e0 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   808c4:	4b08      	ldr	r3, [pc, #32]	; (808e8 <vPortEnterCritical+0x40>)
   808c6:	681b      	ldr	r3, [r3, #0]
   808c8:	f013 0fff 	tst.w	r3, #255	; 0xff
   808cc:	d008      	beq.n	808e0 <vPortEnterCritical+0x38>
   808ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   808d2:	f383 8811 	msr	BASEPRI, r3
   808d6:	f3bf 8f6f 	isb	sy
   808da:	f3bf 8f4f 	dsb	sy
   808de:	e7fe      	b.n	808de <vPortEnterCritical+0x36>
   808e0:	4770      	bx	lr
   808e2:	bf00      	nop
   808e4:	2007012c 	.word	0x2007012c
   808e8:	e000ed04 	.word	0xe000ed04

000808ec <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   808ec:	4b09      	ldr	r3, [pc, #36]	; (80914 <vPortExitCritical+0x28>)
   808ee:	681b      	ldr	r3, [r3, #0]
   808f0:	b943      	cbnz	r3, 80904 <vPortExitCritical+0x18>
   808f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   808f6:	f383 8811 	msr	BASEPRI, r3
   808fa:	f3bf 8f6f 	isb	sy
   808fe:	f3bf 8f4f 	dsb	sy
   80902:	e7fe      	b.n	80902 <vPortExitCritical+0x16>
	uxCriticalNesting--;
   80904:	3b01      	subs	r3, #1
   80906:	4a03      	ldr	r2, [pc, #12]	; (80914 <vPortExitCritical+0x28>)
   80908:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8090a:	b90b      	cbnz	r3, 80910 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   8090c:	f383 8811 	msr	BASEPRI, r3
   80910:	4770      	bx	lr
   80912:	bf00      	nop
   80914:	2007012c 	.word	0x2007012c
	...

00080920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   80920:	f3ef 8009 	mrs	r0, PSP
   80924:	f3bf 8f6f 	isb	sy
   80928:	4b0d      	ldr	r3, [pc, #52]	; (80960 <pxCurrentTCBConst>)
   8092a:	681a      	ldr	r2, [r3, #0]
   8092c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80930:	6010      	str	r0, [r2, #0]
   80932:	e92d 4008 	stmdb	sp!, {r3, lr}
   80936:	f04f 0040 	mov.w	r0, #64	; 0x40
   8093a:	f380 8811 	msr	BASEPRI, r0
   8093e:	f001 f82b 	bl	81998 <vTaskSwitchContext>
   80942:	f04f 0000 	mov.w	r0, #0
   80946:	f380 8811 	msr	BASEPRI, r0
   8094a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8094e:	6819      	ldr	r1, [r3, #0]
   80950:	6808      	ldr	r0, [r1, #0]
   80952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80956:	f380 8809 	msr	PSP, r0
   8095a:	f3bf 8f6f 	isb	sy
   8095e:	4770      	bx	lr

00080960 <pxCurrentTCBConst>:
   80960:	2007c1a8 	.word	0x2007c1a8
   80964:	4770      	bx	lr
   80966:	bf00      	nop

00080968 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   80968:	b508      	push	{r3, lr}
	__asm volatile
   8096a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8096e:	f383 8811 	msr	BASEPRI, r3
   80972:	f3bf 8f6f 	isb	sy
   80976:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   8097a:	4b05      	ldr	r3, [pc, #20]	; (80990 <SysTick_Handler+0x28>)
   8097c:	4798      	blx	r3
   8097e:	b118      	cbz	r0, 80988 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80984:	4b03      	ldr	r3, [pc, #12]	; (80994 <SysTick_Handler+0x2c>)
   80986:	601a      	str	r2, [r3, #0]
	__asm volatile
   80988:	2300      	movs	r3, #0
   8098a:	f383 8811 	msr	BASEPRI, r3
   8098e:	bd08      	pop	{r3, pc}
   80990:	0008164d 	.word	0x0008164d
   80994:	e000ed04 	.word	0xe000ed04

00080998 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   80998:	4b05      	ldr	r3, [pc, #20]	; (809b0 <vPortSetupTimerInterrupt+0x18>)
   8099a:	2200      	movs	r2, #0
   8099c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   8099e:	4905      	ldr	r1, [pc, #20]	; (809b4 <vPortSetupTimerInterrupt+0x1c>)
   809a0:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   809a2:	4905      	ldr	r1, [pc, #20]	; (809b8 <vPortSetupTimerInterrupt+0x20>)
   809a4:	4a05      	ldr	r2, [pc, #20]	; (809bc <vPortSetupTimerInterrupt+0x24>)
   809a6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   809a8:	2207      	movs	r2, #7
   809aa:	601a      	str	r2, [r3, #0]
   809ac:	4770      	bx	lr
   809ae:	bf00      	nop
   809b0:	e000e010 	.word	0xe000e010
   809b4:	e000e018 	.word	0xe000e018
   809b8:	0001481f 	.word	0x0001481f
   809bc:	e000e014 	.word	0xe000e014

000809c0 <xPortStartScheduler>:
{
   809c0:	b510      	push	{r4, lr}
   809c2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   809c4:	4b29      	ldr	r3, [pc, #164]	; (80a6c <xPortStartScheduler+0xac>)
   809c6:	781a      	ldrb	r2, [r3, #0]
   809c8:	b2d2      	uxtb	r2, r2
   809ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   809cc:	22ff      	movs	r2, #255	; 0xff
   809ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   809d0:	781b      	ldrb	r3, [r3, #0]
   809d2:	b2db      	uxtb	r3, r3
   809d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   809d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   809dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   809e0:	4a23      	ldr	r2, [pc, #140]	; (80a70 <xPortStartScheduler+0xb0>)
   809e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   809e4:	2207      	movs	r2, #7
   809e6:	4b23      	ldr	r3, [pc, #140]	; (80a74 <xPortStartScheduler+0xb4>)
   809e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   809ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   809ee:	f013 0f80 	tst.w	r3, #128	; 0x80
   809f2:	d012      	beq.n	80a1a <xPortStartScheduler+0x5a>
   809f4:	2306      	movs	r3, #6
   809f6:	e000      	b.n	809fa <xPortStartScheduler+0x3a>
   809f8:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   809fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   809fe:	0052      	lsls	r2, r2, #1
   80a00:	b2d2      	uxtb	r2, r2
   80a02:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   80a06:	f89d 2003 	ldrb.w	r2, [sp, #3]
   80a0a:	1e59      	subs	r1, r3, #1
   80a0c:	f012 0f80 	tst.w	r2, #128	; 0x80
   80a10:	d1f2      	bne.n	809f8 <xPortStartScheduler+0x38>
   80a12:	4a18      	ldr	r2, [pc, #96]	; (80a74 <xPortStartScheduler+0xb4>)
   80a14:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   80a16:	2b03      	cmp	r3, #3
   80a18:	d008      	beq.n	80a2c <xPortStartScheduler+0x6c>
	__asm volatile
   80a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   80a1e:	f383 8811 	msr	BASEPRI, r3
   80a22:	f3bf 8f6f 	isb	sy
   80a26:	f3bf 8f4f 	dsb	sy
   80a2a:	e7fe      	b.n	80a2a <xPortStartScheduler+0x6a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   80a2c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   80a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80a32:	4a10      	ldr	r2, [pc, #64]	; (80a74 <xPortStartScheduler+0xb4>)
   80a34:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   80a36:	9b01      	ldr	r3, [sp, #4]
   80a38:	b2db      	uxtb	r3, r3
   80a3a:	4a0c      	ldr	r2, [pc, #48]	; (80a6c <xPortStartScheduler+0xac>)
   80a3c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80a3e:	4b0e      	ldr	r3, [pc, #56]	; (80a78 <xPortStartScheduler+0xb8>)
   80a40:	681a      	ldr	r2, [r3, #0]
   80a42:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   80a46:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80a48:	681a      	ldr	r2, [r3, #0]
   80a4a:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
   80a4e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80a50:	4b0a      	ldr	r3, [pc, #40]	; (80a7c <xPortStartScheduler+0xbc>)
   80a52:	4798      	blx	r3
	uxCriticalNesting = 0;
   80a54:	2400      	movs	r4, #0
   80a56:	4b0a      	ldr	r3, [pc, #40]	; (80a80 <xPortStartScheduler+0xc0>)
   80a58:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   80a5a:	4b0a      	ldr	r3, [pc, #40]	; (80a84 <xPortStartScheduler+0xc4>)
   80a5c:	4798      	blx	r3
	vTaskSwitchContext();
   80a5e:	4b0a      	ldr	r3, [pc, #40]	; (80a88 <xPortStartScheduler+0xc8>)
   80a60:	4798      	blx	r3
	prvTaskExitError();
   80a62:	4b0a      	ldr	r3, [pc, #40]	; (80a8c <xPortStartScheduler+0xcc>)
   80a64:	4798      	blx	r3
}
   80a66:	4620      	mov	r0, r4
   80a68:	b002      	add	sp, #8
   80a6a:	bd10      	pop	{r4, pc}
   80a6c:	e000e400 	.word	0xe000e400
   80a70:	20070999 	.word	0x20070999
   80a74:	2007099c 	.word	0x2007099c
   80a78:	e000ed20 	.word	0xe000ed20
   80a7c:	00080999 	.word	0x00080999
   80a80:	2007012c 	.word	0x2007012c
   80a84:	00080835 	.word	0x00080835
   80a88:	00081999 	.word	0x00081999
   80a8c:	000807f5 	.word	0x000807f5

00080a90 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   80a90:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   80a94:	2b0f      	cmp	r3, #15
   80a96:	d90f      	bls.n	80ab8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   80a98:	4a10      	ldr	r2, [pc, #64]	; (80adc <vPortValidateInterruptPriority+0x4c>)
   80a9a:	5c9b      	ldrb	r3, [r3, r2]
   80a9c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   80a9e:	4a10      	ldr	r2, [pc, #64]	; (80ae0 <vPortValidateInterruptPriority+0x50>)
   80aa0:	7812      	ldrb	r2, [r2, #0]
   80aa2:	429a      	cmp	r2, r3
   80aa4:	d908      	bls.n	80ab8 <vPortValidateInterruptPriority+0x28>
   80aa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   80aaa:	f383 8811 	msr	BASEPRI, r3
   80aae:	f3bf 8f6f 	isb	sy
   80ab2:	f3bf 8f4f 	dsb	sy
   80ab6:	e7fe      	b.n	80ab6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   80ab8:	4b0a      	ldr	r3, [pc, #40]	; (80ae4 <vPortValidateInterruptPriority+0x54>)
   80aba:	681b      	ldr	r3, [r3, #0]
   80abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80ac0:	4a09      	ldr	r2, [pc, #36]	; (80ae8 <vPortValidateInterruptPriority+0x58>)
   80ac2:	6812      	ldr	r2, [r2, #0]
   80ac4:	4293      	cmp	r3, r2
   80ac6:	d908      	bls.n	80ada <vPortValidateInterruptPriority+0x4a>
   80ac8:	f04f 0340 	mov.w	r3, #64	; 0x40
   80acc:	f383 8811 	msr	BASEPRI, r3
   80ad0:	f3bf 8f6f 	isb	sy
   80ad4:	f3bf 8f4f 	dsb	sy
   80ad8:	e7fe      	b.n	80ad8 <vPortValidateInterruptPriority+0x48>
   80ada:	4770      	bx	lr
   80adc:	e000e3f0 	.word	0xe000e3f0
   80ae0:	20070999 	.word	0x20070999
   80ae4:	e000ed0c 	.word	0xe000ed0c
   80ae8:	2007099c 	.word	0x2007099c

00080aec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80aec:	b538      	push	{r3, r4, r5, lr}
   80aee:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80af0:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80af4:	bf1c      	itt	ne
   80af6:	f020 0407 	bicne.w	r4, r0, #7
   80afa:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   80afc:	4b10      	ldr	r3, [pc, #64]	; (80b40 <pvPortMalloc+0x54>)
   80afe:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   80b00:	4b10      	ldr	r3, [pc, #64]	; (80b44 <pvPortMalloc+0x58>)
   80b02:	681b      	ldr	r3, [r3, #0]
   80b04:	b18b      	cbz	r3, 80b2a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   80b06:	4b10      	ldr	r3, [pc, #64]	; (80b48 <pvPortMalloc+0x5c>)
   80b08:	681b      	ldr	r3, [r3, #0]
   80b0a:	441c      	add	r4, r3
   80b0c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
   80b10:	4294      	cmp	r4, r2
   80b12:	d810      	bhi.n	80b36 <pvPortMalloc+0x4a>
   80b14:	42a3      	cmp	r3, r4
   80b16:	d210      	bcs.n	80b3a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   80b18:	4a0a      	ldr	r2, [pc, #40]	; (80b44 <pvPortMalloc+0x58>)
   80b1a:	6815      	ldr	r5, [r2, #0]
   80b1c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   80b1e:	4b0a      	ldr	r3, [pc, #40]	; (80b48 <pvPortMalloc+0x5c>)
   80b20:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   80b22:	4b0a      	ldr	r3, [pc, #40]	; (80b4c <pvPortMalloc+0x60>)
   80b24:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80b26:	4628      	mov	r0, r5
   80b28:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   80b2a:	4b09      	ldr	r3, [pc, #36]	; (80b50 <pvPortMalloc+0x64>)
   80b2c:	f023 0307 	bic.w	r3, r3, #7
   80b30:	4a04      	ldr	r2, [pc, #16]	; (80b44 <pvPortMalloc+0x58>)
   80b32:	6013      	str	r3, [r2, #0]
   80b34:	e7e7      	b.n	80b06 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
   80b36:	2500      	movs	r5, #0
   80b38:	e7f3      	b.n	80b22 <pvPortMalloc+0x36>
   80b3a:	2500      	movs	r5, #0
   80b3c:	e7f1      	b.n	80b22 <pvPortMalloc+0x36>
   80b3e:	bf00      	nop
   80b40:	00081631 	.word	0x00081631
   80b44:	200709a0 	.word	0x200709a0
   80b48:	2007c1a4 	.word	0x2007c1a4
   80b4c:	00081781 	.word	0x00081781
   80b50:	200709ac 	.word	0x200709ac

00080b54 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   80b54:	b140      	cbz	r0, 80b68 <vPortFree+0x14>
   80b56:	f04f 0340 	mov.w	r3, #64	; 0x40
   80b5a:	f383 8811 	msr	BASEPRI, r3
   80b5e:	f3bf 8f6f 	isb	sy
   80b62:	f3bf 8f4f 	dsb	sy
   80b66:	e7fe      	b.n	80b66 <vPortFree+0x12>
   80b68:	4770      	bx	lr
	...

00080b6c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   80b6c:	b510      	push	{r4, lr}
   80b6e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80b70:	4b04      	ldr	r3, [pc, #16]	; (80b84 <prvIsQueueEmpty+0x18>)
   80b72:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   80b74:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80b76:	4b04      	ldr	r3, [pc, #16]	; (80b88 <prvIsQueueEmpty+0x1c>)
   80b78:	4798      	blx	r3

	return xReturn;
}
   80b7a:	fab4 f084 	clz	r0, r4
   80b7e:	0940      	lsrs	r0, r0, #5
   80b80:	bd10      	pop	{r4, pc}
   80b82:	bf00      	nop
   80b84:	000808a9 	.word	0x000808a9
   80b88:	000808ed 	.word	0x000808ed

00080b8c <prvCopyDataToQueue>:
{
   80b8c:	b570      	push	{r4, r5, r6, lr}
   80b8e:	4604      	mov	r4, r0
   80b90:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   80b92:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   80b94:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80b96:	b952      	cbnz	r2, 80bae <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b98:	6803      	ldr	r3, [r0, #0]
   80b9a:	2b00      	cmp	r3, #0
   80b9c:	d12a      	bne.n	80bf4 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80b9e:	6840      	ldr	r0, [r0, #4]
   80ba0:	4b18      	ldr	r3, [pc, #96]	; (80c04 <prvCopyDataToQueue+0x78>)
   80ba2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80ba4:	2300      	movs	r3, #0
   80ba6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   80ba8:	3501      	adds	r5, #1
   80baa:	63a5      	str	r5, [r4, #56]	; 0x38
}
   80bac:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   80bae:	b96e      	cbnz	r6, 80bcc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   80bb0:	6880      	ldr	r0, [r0, #8]
   80bb2:	4b15      	ldr	r3, [pc, #84]	; (80c08 <prvCopyDataToQueue+0x7c>)
   80bb4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80bb6:	68a3      	ldr	r3, [r4, #8]
   80bb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80bba:	4413      	add	r3, r2
   80bbc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   80bbe:	6862      	ldr	r2, [r4, #4]
   80bc0:	4293      	cmp	r3, r2
   80bc2:	d319      	bcc.n	80bf8 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80bc4:	6823      	ldr	r3, [r4, #0]
   80bc6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   80bc8:	2000      	movs	r0, #0
   80bca:	e7ed      	b.n	80ba8 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80bcc:	68c0      	ldr	r0, [r0, #12]
   80bce:	4b0e      	ldr	r3, [pc, #56]	; (80c08 <prvCopyDataToQueue+0x7c>)
   80bd0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   80bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80bd4:	425b      	negs	r3, r3
   80bd6:	68e2      	ldr	r2, [r4, #12]
   80bd8:	441a      	add	r2, r3
   80bda:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   80bdc:	6821      	ldr	r1, [r4, #0]
   80bde:	428a      	cmp	r2, r1
   80be0:	d202      	bcs.n	80be8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80be2:	6862      	ldr	r2, [r4, #4]
   80be4:	4413      	add	r3, r2
   80be6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   80be8:	2e02      	cmp	r6, #2
   80bea:	d107      	bne.n	80bfc <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   80bec:	b145      	cbz	r5, 80c00 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
   80bee:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   80bf0:	2000      	movs	r0, #0
   80bf2:	e7d9      	b.n	80ba8 <prvCopyDataToQueue+0x1c>
   80bf4:	2000      	movs	r0, #0
   80bf6:	e7d7      	b.n	80ba8 <prvCopyDataToQueue+0x1c>
   80bf8:	2000      	movs	r0, #0
   80bfa:	e7d5      	b.n	80ba8 <prvCopyDataToQueue+0x1c>
   80bfc:	2000      	movs	r0, #0
   80bfe:	e7d3      	b.n	80ba8 <prvCopyDataToQueue+0x1c>
   80c00:	2000      	movs	r0, #0
   80c02:	e7d1      	b.n	80ba8 <prvCopyDataToQueue+0x1c>
   80c04:	00081c09 	.word	0x00081c09
   80c08:	00082811 	.word	0x00082811

00080c0c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   80c0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80c0e:	b172      	cbz	r2, 80c2e <prvCopyDataFromQueue+0x22>
{
   80c10:	b510      	push	{r4, lr}
   80c12:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   80c14:	68c4      	ldr	r4, [r0, #12]
   80c16:	4414      	add	r4, r2
   80c18:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   80c1a:	6840      	ldr	r0, [r0, #4]
   80c1c:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   80c1e:	bf24      	itt	cs
   80c20:	6818      	ldrcs	r0, [r3, #0]
   80c22:	60d8      	strcs	r0, [r3, #12]
   80c24:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   80c26:	68d9      	ldr	r1, [r3, #12]
   80c28:	4b01      	ldr	r3, [pc, #4]	; (80c30 <prvCopyDataFromQueue+0x24>)
   80c2a:	4798      	blx	r3
   80c2c:	bd10      	pop	{r4, pc}
   80c2e:	4770      	bx	lr
   80c30:	00082811 	.word	0x00082811

00080c34 <prvUnlockQueue>:
{
   80c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c38:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   80c3a:	4b20      	ldr	r3, [pc, #128]	; (80cbc <prvUnlockQueue+0x88>)
   80c3c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   80c3e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   80c42:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80c44:	2c00      	cmp	r4, #0
   80c46:	dd12      	ble.n	80c6e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80c4a:	b183      	cbz	r3, 80c6e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c4c:	f105 0724 	add.w	r7, r5, #36	; 0x24
   80c50:	4e1b      	ldr	r6, [pc, #108]	; (80cc0 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   80c52:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80cc8 <prvUnlockQueue+0x94>
   80c56:	e004      	b.n	80c62 <prvUnlockQueue+0x2e>
   80c58:	3c01      	subs	r4, #1
   80c5a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   80c5c:	b13c      	cbz	r4, 80c6e <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80c60:	b12b      	cbz	r3, 80c6e <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c62:	4638      	mov	r0, r7
   80c64:	47b0      	blx	r6
   80c66:	2800      	cmp	r0, #0
   80c68:	d0f6      	beq.n	80c58 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   80c6a:	47c0      	blx	r8
   80c6c:	e7f4      	b.n	80c58 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   80c6e:	23ff      	movs	r3, #255	; 0xff
   80c70:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   80c74:	4b13      	ldr	r3, [pc, #76]	; (80cc4 <prvUnlockQueue+0x90>)
   80c76:	4798      	blx	r3
	taskENTER_CRITICAL();
   80c78:	4b10      	ldr	r3, [pc, #64]	; (80cbc <prvUnlockQueue+0x88>)
   80c7a:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   80c7c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   80c80:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   80c82:	2c00      	cmp	r4, #0
   80c84:	dd12      	ble.n	80cac <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c86:	692b      	ldr	r3, [r5, #16]
   80c88:	b183      	cbz	r3, 80cac <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80c8a:	f105 0710 	add.w	r7, r5, #16
   80c8e:	4e0c      	ldr	r6, [pc, #48]	; (80cc0 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   80c90:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80cc8 <prvUnlockQueue+0x94>
   80c94:	e004      	b.n	80ca0 <prvUnlockQueue+0x6c>
   80c96:	3c01      	subs	r4, #1
   80c98:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   80c9a:	b13c      	cbz	r4, 80cac <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c9c:	692b      	ldr	r3, [r5, #16]
   80c9e:	b12b      	cbz	r3, 80cac <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80ca0:	4638      	mov	r0, r7
   80ca2:	47b0      	blx	r6
   80ca4:	2800      	cmp	r0, #0
   80ca6:	d0f6      	beq.n	80c96 <prvUnlockQueue+0x62>
					vTaskMissedYield();
   80ca8:	47c0      	blx	r8
   80caa:	e7f4      	b.n	80c96 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   80cac:	23ff      	movs	r3, #255	; 0xff
   80cae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   80cb2:	4b04      	ldr	r3, [pc, #16]	; (80cc4 <prvUnlockQueue+0x90>)
   80cb4:	4798      	blx	r3
   80cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80cba:	bf00      	nop
   80cbc:	000808a9 	.word	0x000808a9
   80cc0:	00081aa9 	.word	0x00081aa9
   80cc4:	000808ed 	.word	0x000808ed
   80cc8:	00081bdd 	.word	0x00081bdd

00080ccc <xQueueGenericReset>:
{
   80ccc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80cce:	b330      	cbz	r0, 80d1e <xQueueGenericReset+0x52>
   80cd0:	4604      	mov	r4, r0
   80cd2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
   80cd4:	4b1c      	ldr	r3, [pc, #112]	; (80d48 <xQueueGenericReset+0x7c>)
   80cd6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80cd8:	6822      	ldr	r2, [r4, #0]
   80cda:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80cdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80cde:	fb03 f301 	mul.w	r3, r3, r1
   80ce2:	18d0      	adds	r0, r2, r3
   80ce4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   80ce6:	2000      	movs	r0, #0
   80ce8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80cea:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   80cec:	1a5b      	subs	r3, r3, r1
   80cee:	4413      	add	r3, r2
   80cf0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   80cf2:	23ff      	movs	r3, #255	; 0xff
   80cf4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   80cf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   80cfc:	b9c5      	cbnz	r5, 80d30 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80cfe:	6923      	ldr	r3, [r4, #16]
   80d00:	b1eb      	cbz	r3, 80d3e <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80d02:	f104 0010 	add.w	r0, r4, #16
   80d06:	4b11      	ldr	r3, [pc, #68]	; (80d4c <xQueueGenericReset+0x80>)
   80d08:	4798      	blx	r3
   80d0a:	b1c0      	cbz	r0, 80d3e <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
   80d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d10:	4b0f      	ldr	r3, [pc, #60]	; (80d50 <xQueueGenericReset+0x84>)
   80d12:	601a      	str	r2, [r3, #0]
   80d14:	f3bf 8f4f 	dsb	sy
   80d18:	f3bf 8f6f 	isb	sy
   80d1c:	e00f      	b.n	80d3e <xQueueGenericReset+0x72>
   80d1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d22:	f383 8811 	msr	BASEPRI, r3
   80d26:	f3bf 8f6f 	isb	sy
   80d2a:	f3bf 8f4f 	dsb	sy
   80d2e:	e7fe      	b.n	80d2e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80d30:	f104 0010 	add.w	r0, r4, #16
   80d34:	4d07      	ldr	r5, [pc, #28]	; (80d54 <xQueueGenericReset+0x88>)
   80d36:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80d38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d3c:	47a8      	blx	r5
	taskEXIT_CRITICAL();
   80d3e:	4b06      	ldr	r3, [pc, #24]	; (80d58 <xQueueGenericReset+0x8c>)
   80d40:	4798      	blx	r3
}
   80d42:	2001      	movs	r0, #1
   80d44:	bd38      	pop	{r3, r4, r5, pc}
   80d46:	bf00      	nop
   80d48:	000808a9 	.word	0x000808a9
   80d4c:	00081aa9 	.word	0x00081aa9
   80d50:	e000ed04 	.word	0xe000ed04
   80d54:	00080765 	.word	0x00080765
   80d58:	000808ed 	.word	0x000808ed

00080d5c <xQueueGenericCreate>:
	{
   80d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   80d5e:	b940      	cbnz	r0, 80d72 <xQueueGenericCreate+0x16>
   80d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   80d64:	f383 8811 	msr	BASEPRI, r3
   80d68:	f3bf 8f6f 	isb	sy
   80d6c:	f3bf 8f4f 	dsb	sy
   80d70:	e7fe      	b.n	80d70 <xQueueGenericCreate+0x14>
   80d72:	4606      	mov	r6, r0
   80d74:	4617      	mov	r7, r2
   80d76:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   80d78:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   80d7c:	3050      	adds	r0, #80	; 0x50
   80d7e:	4b0a      	ldr	r3, [pc, #40]	; (80da8 <xQueueGenericCreate+0x4c>)
   80d80:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80d82:	4604      	mov	r4, r0
   80d84:	b168      	cbz	r0, 80da2 <xQueueGenericCreate+0x46>
	if( uxItemSize == ( UBaseType_t ) 0 )
   80d86:	b11d      	cbz	r5, 80d90 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   80d88:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   80d8c:	6003      	str	r3, [r0, #0]
   80d8e:	e000      	b.n	80d92 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   80d90:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   80d92:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   80d94:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   80d96:	2101      	movs	r1, #1
   80d98:	4620      	mov	r0, r4
   80d9a:	4b04      	ldr	r3, [pc, #16]	; (80dac <xQueueGenericCreate+0x50>)
   80d9c:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   80d9e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   80da2:	4620      	mov	r0, r4
   80da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80da6:	bf00      	nop
   80da8:	00080aed 	.word	0x00080aed
   80dac:	00080ccd 	.word	0x00080ccd

00080db0 <xQueueGenericSend>:
{
   80db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80db4:	b085      	sub	sp, #20
   80db6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80db8:	b198      	cbz	r0, 80de2 <xQueueGenericSend+0x32>
   80dba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80dbc:	b1d1      	cbz	r1, 80df4 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80dbe:	2b02      	cmp	r3, #2
   80dc0:	d024      	beq.n	80e0c <xQueueGenericSend+0x5c>
   80dc2:	461e      	mov	r6, r3
   80dc4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   80dc6:	4b5b      	ldr	r3, [pc, #364]	; (80f34 <xQueueGenericSend+0x184>)
   80dc8:	4798      	blx	r3
   80dca:	bb58      	cbnz	r0, 80e24 <xQueueGenericSend+0x74>
   80dcc:	9b01      	ldr	r3, [sp, #4]
   80dce:	b38b      	cbz	r3, 80e34 <xQueueGenericSend+0x84>
   80dd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   80dd4:	f383 8811 	msr	BASEPRI, r3
   80dd8:	f3bf 8f6f 	isb	sy
   80ddc:	f3bf 8f4f 	dsb	sy
   80de0:	e7fe      	b.n	80de0 <xQueueGenericSend+0x30>
   80de2:	f04f 0340 	mov.w	r3, #64	; 0x40
   80de6:	f383 8811 	msr	BASEPRI, r3
   80dea:	f3bf 8f6f 	isb	sy
   80dee:	f3bf 8f4f 	dsb	sy
   80df2:	e7fe      	b.n	80df2 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80df4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80df6:	2a00      	cmp	r2, #0
   80df8:	d0e1      	beq.n	80dbe <xQueueGenericSend+0xe>
   80dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   80dfe:	f383 8811 	msr	BASEPRI, r3
   80e02:	f3bf 8f6f 	isb	sy
   80e06:	f3bf 8f4f 	dsb	sy
   80e0a:	e7fe      	b.n	80e0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80e0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   80e0e:	2a01      	cmp	r2, #1
   80e10:	d0d7      	beq.n	80dc2 <xQueueGenericSend+0x12>
   80e12:	f04f 0340 	mov.w	r3, #64	; 0x40
   80e16:	f383 8811 	msr	BASEPRI, r3
   80e1a:	f3bf 8f6f 	isb	sy
   80e1e:	f3bf 8f4f 	dsb	sy
   80e22:	e7fe      	b.n	80e22 <xQueueGenericSend+0x72>
   80e24:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   80e26:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80f5c <xQueueGenericSend+0x1ac>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80e2a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80f60 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   80e2e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80f40 <xQueueGenericSend+0x190>
   80e32:	e030      	b.n	80e96 <xQueueGenericSend+0xe6>
   80e34:	2500      	movs	r5, #0
   80e36:	e7f6      	b.n	80e26 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80e38:	4632      	mov	r2, r6
   80e3a:	4639      	mov	r1, r7
   80e3c:	4620      	mov	r0, r4
   80e3e:	4b3e      	ldr	r3, [pc, #248]	; (80f38 <xQueueGenericSend+0x188>)
   80e40:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e44:	b193      	cbz	r3, 80e6c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e46:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e4a:	4b3c      	ldr	r3, [pc, #240]	; (80f3c <xQueueGenericSend+0x18c>)
   80e4c:	4798      	blx	r3
   80e4e:	b138      	cbz	r0, 80e60 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
   80e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e54:	4b3a      	ldr	r3, [pc, #232]	; (80f40 <xQueueGenericSend+0x190>)
   80e56:	601a      	str	r2, [r3, #0]
   80e58:	f3bf 8f4f 	dsb	sy
   80e5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   80e60:	4b38      	ldr	r3, [pc, #224]	; (80f44 <xQueueGenericSend+0x194>)
   80e62:	4798      	blx	r3
				return pdPASS;
   80e64:	2001      	movs	r0, #1
}
   80e66:	b005      	add	sp, #20
   80e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if( xYieldRequired != pdFALSE )
   80e6c:	2800      	cmp	r0, #0
   80e6e:	d0f7      	beq.n	80e60 <xQueueGenericSend+0xb0>
						queueYIELD_IF_USING_PREEMPTION();
   80e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e74:	4b32      	ldr	r3, [pc, #200]	; (80f40 <xQueueGenericSend+0x190>)
   80e76:	601a      	str	r2, [r3, #0]
   80e78:	f3bf 8f4f 	dsb	sy
   80e7c:	f3bf 8f6f 	isb	sy
   80e80:	e7ee      	b.n	80e60 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
   80e82:	4b30      	ldr	r3, [pc, #192]	; (80f44 <xQueueGenericSend+0x194>)
   80e84:	4798      	blx	r3
					return errQUEUE_FULL;
   80e86:	2000      	movs	r0, #0
   80e88:	e7ed      	b.n	80e66 <xQueueGenericSend+0xb6>
				prvUnlockQueue( pxQueue );
   80e8a:	4620      	mov	r0, r4
   80e8c:	4b2e      	ldr	r3, [pc, #184]	; (80f48 <xQueueGenericSend+0x198>)
   80e8e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e90:	4b2e      	ldr	r3, [pc, #184]	; (80f4c <xQueueGenericSend+0x19c>)
   80e92:	4798      	blx	r3
   80e94:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   80e96:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80e98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80e9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80e9c:	429a      	cmp	r2, r3
   80e9e:	d3cb      	bcc.n	80e38 <xQueueGenericSend+0x88>
   80ea0:	2e02      	cmp	r6, #2
   80ea2:	d0c9      	beq.n	80e38 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
   80ea4:	9b01      	ldr	r3, [sp, #4]
   80ea6:	2b00      	cmp	r3, #0
   80ea8:	d0eb      	beq.n	80e82 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   80eaa:	b90d      	cbnz	r5, 80eb0 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
   80eac:	a802      	add	r0, sp, #8
   80eae:	47d0      	blx	sl
		taskEXIT_CRITICAL();
   80eb0:	4b24      	ldr	r3, [pc, #144]	; (80f44 <xQueueGenericSend+0x194>)
   80eb2:	4798      	blx	r3
		vTaskSuspendAll();
   80eb4:	4b26      	ldr	r3, [pc, #152]	; (80f50 <xQueueGenericSend+0x1a0>)
   80eb6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80eb8:	47c0      	blx	r8
   80eba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   80ebe:	b25b      	sxtb	r3, r3
   80ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ec4:	bf04      	itt	eq
   80ec6:	2300      	moveq	r3, #0
   80ec8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   80ecc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   80ed0:	b25b      	sxtb	r3, r3
   80ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ed6:	bf04      	itt	eq
   80ed8:	2300      	moveq	r3, #0
   80eda:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   80ede:	4b19      	ldr	r3, [pc, #100]	; (80f44 <xQueueGenericSend+0x194>)
   80ee0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80ee2:	a901      	add	r1, sp, #4
   80ee4:	a802      	add	r0, sp, #8
   80ee6:	4b1b      	ldr	r3, [pc, #108]	; (80f54 <xQueueGenericSend+0x1a4>)
   80ee8:	4798      	blx	r3
   80eea:	b9e0      	cbnz	r0, 80f26 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   80eec:	47c0      	blx	r8
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   80eee:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80ef2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   80ef4:	4b13      	ldr	r3, [pc, #76]	; (80f44 <xQueueGenericSend+0x194>)
   80ef6:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80ef8:	45ab      	cmp	fp, r5
   80efa:	d1c6      	bne.n	80e8a <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80efc:	9901      	ldr	r1, [sp, #4]
   80efe:	f104 0010 	add.w	r0, r4, #16
   80f02:	4b15      	ldr	r3, [pc, #84]	; (80f58 <xQueueGenericSend+0x1a8>)
   80f04:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80f06:	4620      	mov	r0, r4
   80f08:	4b0f      	ldr	r3, [pc, #60]	; (80f48 <xQueueGenericSend+0x198>)
   80f0a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80f0c:	4b0f      	ldr	r3, [pc, #60]	; (80f4c <xQueueGenericSend+0x19c>)
   80f0e:	4798      	blx	r3
   80f10:	2800      	cmp	r0, #0
   80f12:	d1bf      	bne.n	80e94 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
   80f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80f18:	f8c9 3000 	str.w	r3, [r9]
   80f1c:	f3bf 8f4f 	dsb	sy
   80f20:	f3bf 8f6f 	isb	sy
   80f24:	e7b6      	b.n	80e94 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
   80f26:	4620      	mov	r0, r4
   80f28:	4b07      	ldr	r3, [pc, #28]	; (80f48 <xQueueGenericSend+0x198>)
   80f2a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80f2c:	4b07      	ldr	r3, [pc, #28]	; (80f4c <xQueueGenericSend+0x19c>)
   80f2e:	4798      	blx	r3
			return errQUEUE_FULL;
   80f30:	2000      	movs	r0, #0
   80f32:	e798      	b.n	80e66 <xQueueGenericSend+0xb6>
   80f34:	00081be9 	.word	0x00081be9
   80f38:	00080b8d 	.word	0x00080b8d
   80f3c:	00081aa9 	.word	0x00081aa9
   80f40:	e000ed04 	.word	0xe000ed04
   80f44:	000808ed 	.word	0x000808ed
   80f48:	00080c35 	.word	0x00080c35
   80f4c:	00081781 	.word	0x00081781
   80f50:	00081631 	.word	0x00081631
   80f54:	00081b51 	.word	0x00081b51
   80f58:	00081a2d 	.word	0x00081a2d
   80f5c:	000808a9 	.word	0x000808a9
   80f60:	00081b39 	.word	0x00081b39

00080f64 <xQueueGenericSendFromISR>:
{
   80f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
   80f68:	2800      	cmp	r0, #0
   80f6a:	d037      	beq.n	80fdc <xQueueGenericSendFromISR+0x78>
   80f6c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80f6e:	2900      	cmp	r1, #0
   80f70:	d03d      	beq.n	80fee <xQueueGenericSendFromISR+0x8a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   80f72:	2b02      	cmp	r3, #2
   80f74:	d047      	beq.n	81006 <xQueueGenericSendFromISR+0xa2>
   80f76:	461f      	mov	r7, r3
   80f78:	4690      	mov	r8, r2
   80f7a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   80f7c:	4b2f      	ldr	r3, [pc, #188]	; (8103c <xQueueGenericSendFromISR+0xd8>)
   80f7e:	4798      	blx	r3
	__asm volatile
   80f80:	f3ef 8611 	mrs	r6, BASEPRI
   80f84:	f04f 0340 	mov.w	r3, #64	; 0x40
   80f88:	f383 8811 	msr	BASEPRI, r3
   80f8c:	f3bf 8f6f 	isb	sy
   80f90:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   80f94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80f96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80f98:	429a      	cmp	r2, r3
   80f9a:	d301      	bcc.n	80fa0 <xQueueGenericSendFromISR+0x3c>
   80f9c:	2f02      	cmp	r7, #2
   80f9e:	d144      	bne.n	8102a <xQueueGenericSendFromISR+0xc6>
			const int8_t cTxLock = pxQueue->cTxLock;
   80fa0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   80fa4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80fa6:	463a      	mov	r2, r7
   80fa8:	4649      	mov	r1, r9
   80faa:	4620      	mov	r0, r4
   80fac:	4b24      	ldr	r3, [pc, #144]	; (81040 <xQueueGenericSendFromISR+0xdc>)
   80fae:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   80fb0:	f1b5 3fff 	cmp.w	r5, #4294967295
   80fb4:	d133      	bne.n	8101e <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fb8:	2b00      	cmp	r3, #0
   80fba:	d038      	beq.n	8102e <xQueueGenericSendFromISR+0xca>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80fc0:	4b20      	ldr	r3, [pc, #128]	; (81044 <xQueueGenericSendFromISR+0xe0>)
   80fc2:	4798      	blx	r3
   80fc4:	2800      	cmp	r0, #0
   80fc6:	d034      	beq.n	81032 <xQueueGenericSendFromISR+0xce>
							if( pxHigherPriorityTaskWoken != NULL )
   80fc8:	f1b8 0f00 	cmp.w	r8, #0
   80fcc:	d033      	beq.n	81036 <xQueueGenericSendFromISR+0xd2>
								*pxHigherPriorityTaskWoken = pdTRUE;
   80fce:	2001      	movs	r0, #1
   80fd0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
   80fd4:	f386 8811 	msr	BASEPRI, r6
}
   80fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
   80fdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   80fe0:	f383 8811 	msr	BASEPRI, r3
   80fe4:	f3bf 8f6f 	isb	sy
   80fe8:	f3bf 8f4f 	dsb	sy
   80fec:	e7fe      	b.n	80fec <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   80fee:	6c00      	ldr	r0, [r0, #64]	; 0x40
   80ff0:	2800      	cmp	r0, #0
   80ff2:	d0be      	beq.n	80f72 <xQueueGenericSendFromISR+0xe>
   80ff4:	f04f 0340 	mov.w	r3, #64	; 0x40
   80ff8:	f383 8811 	msr	BASEPRI, r3
   80ffc:	f3bf 8f6f 	isb	sy
   81000:	f3bf 8f4f 	dsb	sy
   81004:	e7fe      	b.n	81004 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81006:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81008:	2801      	cmp	r0, #1
   8100a:	d0b4      	beq.n	80f76 <xQueueGenericSendFromISR+0x12>
   8100c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81010:	f383 8811 	msr	BASEPRI, r3
   81014:	f3bf 8f6f 	isb	sy
   81018:	f3bf 8f4f 	dsb	sy
   8101c:	e7fe      	b.n	8101c <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   8101e:	1c6b      	adds	r3, r5, #1
   81020:	b25b      	sxtb	r3, r3
   81022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   81026:	2001      	movs	r0, #1
   81028:	e7d4      	b.n	80fd4 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
   8102a:	2000      	movs	r0, #0
   8102c:	e7d2      	b.n	80fd4 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
   8102e:	2001      	movs	r0, #1
   81030:	e7d0      	b.n	80fd4 <xQueueGenericSendFromISR+0x70>
   81032:	2001      	movs	r0, #1
   81034:	e7ce      	b.n	80fd4 <xQueueGenericSendFromISR+0x70>
   81036:	2001      	movs	r0, #1
   81038:	e7cc      	b.n	80fd4 <xQueueGenericSendFromISR+0x70>
   8103a:	bf00      	nop
   8103c:	00080a91 	.word	0x00080a91
   81040:	00080b8d 	.word	0x00080b8d
   81044:	00081aa9 	.word	0x00081aa9

00081048 <xQueueReceive>:
{
   81048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8104c:	b084      	sub	sp, #16
   8104e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   81050:	b180      	cbz	r0, 81074 <xQueueReceive+0x2c>
   81052:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81054:	b1b9      	cbz	r1, 81086 <xQueueReceive+0x3e>
   81056:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   81058:	4b50      	ldr	r3, [pc, #320]	; (8119c <xQueueReceive+0x154>)
   8105a:	4798      	blx	r3
   8105c:	b9f8      	cbnz	r0, 8109e <xQueueReceive+0x56>
   8105e:	9b01      	ldr	r3, [sp, #4]
   81060:	b32b      	cbz	r3, 810ae <xQueueReceive+0x66>
   81062:	f04f 0340 	mov.w	r3, #64	; 0x40
   81066:	f383 8811 	msr	BASEPRI, r3
   8106a:	f3bf 8f6f 	isb	sy
   8106e:	f3bf 8f4f 	dsb	sy
   81072:	e7fe      	b.n	81072 <xQueueReceive+0x2a>
   81074:	f04f 0340 	mov.w	r3, #64	; 0x40
   81078:	f383 8811 	msr	BASEPRI, r3
   8107c:	f3bf 8f6f 	isb	sy
   81080:	f3bf 8f4f 	dsb	sy
   81084:	e7fe      	b.n	81084 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81086:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81088:	2b00      	cmp	r3, #0
   8108a:	d0e4      	beq.n	81056 <xQueueReceive+0xe>
   8108c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81090:	f383 8811 	msr	BASEPRI, r3
   81094:	f3bf 8f6f 	isb	sy
   81098:	f3bf 8f4f 	dsb	sy
   8109c:	e7fe      	b.n	8109c <xQueueReceive+0x54>
   8109e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   810a0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 811c8 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
   810a4:	f8df a124 	ldr.w	sl, [pc, #292]	; 811cc <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
   810a8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 811a8 <xQueueReceive+0x160>
   810ac:	e029      	b.n	81102 <xQueueReceive+0xba>
   810ae:	2700      	movs	r7, #0
   810b0:	e7f6      	b.n	810a0 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   810b2:	4631      	mov	r1, r6
   810b4:	4620      	mov	r0, r4
   810b6:	4b3a      	ldr	r3, [pc, #232]	; (811a0 <xQueueReceive+0x158>)
   810b8:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   810ba:	3d01      	subs	r5, #1
   810bc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   810be:	6923      	ldr	r3, [r4, #16]
   810c0:	b163      	cbz	r3, 810dc <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   810c2:	f104 0010 	add.w	r0, r4, #16
   810c6:	4b37      	ldr	r3, [pc, #220]	; (811a4 <xQueueReceive+0x15c>)
   810c8:	4798      	blx	r3
   810ca:	b138      	cbz	r0, 810dc <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
   810cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   810d0:	4b35      	ldr	r3, [pc, #212]	; (811a8 <xQueueReceive+0x160>)
   810d2:	601a      	str	r2, [r3, #0]
   810d4:	f3bf 8f4f 	dsb	sy
   810d8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   810dc:	4b33      	ldr	r3, [pc, #204]	; (811ac <xQueueReceive+0x164>)
   810de:	4798      	blx	r3
				return pdPASS;
   810e0:	2001      	movs	r0, #1
}
   810e2:	b004      	add	sp, #16
   810e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
   810e8:	4b30      	ldr	r3, [pc, #192]	; (811ac <xQueueReceive+0x164>)
   810ea:	4798      	blx	r3
					return errQUEUE_EMPTY;
   810ec:	2000      	movs	r0, #0
   810ee:	e7f8      	b.n	810e2 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   810f0:	a802      	add	r0, sp, #8
   810f2:	47d0      	blx	sl
   810f4:	e00e      	b.n	81114 <xQueueReceive+0xcc>
				prvUnlockQueue( pxQueue );
   810f6:	4620      	mov	r0, r4
   810f8:	4b2d      	ldr	r3, [pc, #180]	; (811b0 <xQueueReceive+0x168>)
   810fa:	4798      	blx	r3
				( void ) xTaskResumeAll();
   810fc:	4b2d      	ldr	r3, [pc, #180]	; (811b4 <xQueueReceive+0x16c>)
   810fe:	4798      	blx	r3
   81100:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   81102:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   81104:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   81106:	2d00      	cmp	r5, #0
   81108:	d1d3      	bne.n	810b2 <xQueueReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
   8110a:	9b01      	ldr	r3, [sp, #4]
   8110c:	2b00      	cmp	r3, #0
   8110e:	d0eb      	beq.n	810e8 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
   81110:	2f00      	cmp	r7, #0
   81112:	d0ed      	beq.n	810f0 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
   81114:	4b25      	ldr	r3, [pc, #148]	; (811ac <xQueueReceive+0x164>)
   81116:	4798      	blx	r3
		vTaskSuspendAll();
   81118:	4b27      	ldr	r3, [pc, #156]	; (811b8 <xQueueReceive+0x170>)
   8111a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8111c:	47c0      	blx	r8
   8111e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   81122:	b25b      	sxtb	r3, r3
   81124:	f1b3 3fff 	cmp.w	r3, #4294967295
   81128:	bf04      	itt	eq
   8112a:	2300      	moveq	r3, #0
   8112c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   81130:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   81134:	b25b      	sxtb	r3, r3
   81136:	f1b3 3fff 	cmp.w	r3, #4294967295
   8113a:	bf04      	itt	eq
   8113c:	2300      	moveq	r3, #0
   8113e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   81142:	4b1a      	ldr	r3, [pc, #104]	; (811ac <xQueueReceive+0x164>)
   81144:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81146:	a901      	add	r1, sp, #4
   81148:	a802      	add	r0, sp, #8
   8114a:	4b1c      	ldr	r3, [pc, #112]	; (811bc <xQueueReceive+0x174>)
   8114c:	4798      	blx	r3
   8114e:	b9c8      	cbnz	r0, 81184 <xQueueReceive+0x13c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81150:	4620      	mov	r0, r4
   81152:	4b1b      	ldr	r3, [pc, #108]	; (811c0 <xQueueReceive+0x178>)
   81154:	4798      	blx	r3
   81156:	2800      	cmp	r0, #0
   81158:	d0cd      	beq.n	810f6 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8115a:	9901      	ldr	r1, [sp, #4]
   8115c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81160:	4b18      	ldr	r3, [pc, #96]	; (811c4 <xQueueReceive+0x17c>)
   81162:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81164:	4620      	mov	r0, r4
   81166:	4b12      	ldr	r3, [pc, #72]	; (811b0 <xQueueReceive+0x168>)
   81168:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8116a:	4b12      	ldr	r3, [pc, #72]	; (811b4 <xQueueReceive+0x16c>)
   8116c:	4798      	blx	r3
   8116e:	2800      	cmp	r0, #0
   81170:	d1c6      	bne.n	81100 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
   81172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81176:	f8c9 3000 	str.w	r3, [r9]
   8117a:	f3bf 8f4f 	dsb	sy
   8117e:	f3bf 8f6f 	isb	sy
   81182:	e7bd      	b.n	81100 <xQueueReceive+0xb8>
			prvUnlockQueue( pxQueue );
   81184:	4620      	mov	r0, r4
   81186:	4b0a      	ldr	r3, [pc, #40]	; (811b0 <xQueueReceive+0x168>)
   81188:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8118a:	4b0a      	ldr	r3, [pc, #40]	; (811b4 <xQueueReceive+0x16c>)
   8118c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8118e:	4620      	mov	r0, r4
   81190:	4b0b      	ldr	r3, [pc, #44]	; (811c0 <xQueueReceive+0x178>)
   81192:	4798      	blx	r3
   81194:	2800      	cmp	r0, #0
   81196:	d0b3      	beq.n	81100 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
   81198:	2000      	movs	r0, #0
   8119a:	e7a2      	b.n	810e2 <xQueueReceive+0x9a>
   8119c:	00081be9 	.word	0x00081be9
   811a0:	00080c0d 	.word	0x00080c0d
   811a4:	00081aa9 	.word	0x00081aa9
   811a8:	e000ed04 	.word	0xe000ed04
   811ac:	000808ed 	.word	0x000808ed
   811b0:	00080c35 	.word	0x00080c35
   811b4:	00081781 	.word	0x00081781
   811b8:	00081631 	.word	0x00081631
   811bc:	00081b51 	.word	0x00081b51
   811c0:	00080b6d 	.word	0x00080b6d
   811c4:	00081a2d 	.word	0x00081a2d
   811c8:	000808a9 	.word	0x000808a9
   811cc:	00081b39 	.word	0x00081b39

000811d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   811d0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   811d2:	4b0a      	ldr	r3, [pc, #40]	; (811fc <vQueueAddToRegistry+0x2c>)
   811d4:	681b      	ldr	r3, [r3, #0]
   811d6:	b14b      	cbz	r3, 811ec <vQueueAddToRegistry+0x1c>
   811d8:	2301      	movs	r3, #1
   811da:	4c08      	ldr	r4, [pc, #32]	; (811fc <vQueueAddToRegistry+0x2c>)
   811dc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   811e0:	b12a      	cbz	r2, 811ee <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   811e2:	3301      	adds	r3, #1
   811e4:	2b08      	cmp	r3, #8
   811e6:	d1f9      	bne.n	811dc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   811e8:	bc10      	pop	{r4}
   811ea:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   811ec:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   811ee:	4a03      	ldr	r2, [pc, #12]	; (811fc <vQueueAddToRegistry+0x2c>)
   811f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   811f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   811f8:	6058      	str	r0, [r3, #4]
				break;
   811fa:	e7f5      	b.n	811e8 <vQueueAddToRegistry+0x18>
   811fc:	2007c3a4 	.word	0x2007c3a4

00081200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   81200:	b570      	push	{r4, r5, r6, lr}
   81202:	4604      	mov	r4, r0
   81204:	460d      	mov	r5, r1
   81206:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81208:	4b11      	ldr	r3, [pc, #68]	; (81250 <vQueueWaitForMessageRestricted+0x50>)
   8120a:	4798      	blx	r3
   8120c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   81210:	b25b      	sxtb	r3, r3
   81212:	f1b3 3fff 	cmp.w	r3, #4294967295
   81216:	bf04      	itt	eq
   81218:	2300      	moveq	r3, #0
   8121a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8121e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   81222:	b25b      	sxtb	r3, r3
   81224:	f1b3 3fff 	cmp.w	r3, #4294967295
   81228:	bf04      	itt	eq
   8122a:	2300      	moveq	r3, #0
   8122c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   81230:	4b08      	ldr	r3, [pc, #32]	; (81254 <vQueueWaitForMessageRestricted+0x54>)
   81232:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   81234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81236:	b11b      	cbz	r3, 81240 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   81238:	4620      	mov	r0, r4
   8123a:	4b07      	ldr	r3, [pc, #28]	; (81258 <vQueueWaitForMessageRestricted+0x58>)
   8123c:	4798      	blx	r3
   8123e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   81240:	4632      	mov	r2, r6
   81242:	4629      	mov	r1, r5
   81244:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81248:	4b04      	ldr	r3, [pc, #16]	; (8125c <vQueueWaitForMessageRestricted+0x5c>)
   8124a:	4798      	blx	r3
   8124c:	e7f4      	b.n	81238 <vQueueWaitForMessageRestricted+0x38>
   8124e:	bf00      	nop
   81250:	000808a9 	.word	0x000808a9
   81254:	000808ed 	.word	0x000808ed
   81258:	00080c35 	.word	0x00080c35
   8125c:	00081a65 	.word	0x00081a65

00081260 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81260:	4b08      	ldr	r3, [pc, #32]	; (81284 <prvResetNextTaskUnblockTime+0x24>)
   81262:	681b      	ldr	r3, [r3, #0]
   81264:	681b      	ldr	r3, [r3, #0]
   81266:	b13b      	cbz	r3, 81278 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81268:	4b06      	ldr	r3, [pc, #24]	; (81284 <prvResetNextTaskUnblockTime+0x24>)
   8126a:	681b      	ldr	r3, [r3, #0]
   8126c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   8126e:	68db      	ldr	r3, [r3, #12]
   81270:	685a      	ldr	r2, [r3, #4]
   81272:	4b05      	ldr	r3, [pc, #20]	; (81288 <prvResetNextTaskUnblockTime+0x28>)
   81274:	601a      	str	r2, [r3, #0]
   81276:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   81278:	f04f 32ff 	mov.w	r2, #4294967295
   8127c:	4b02      	ldr	r3, [pc, #8]	; (81288 <prvResetNextTaskUnblockTime+0x28>)
   8127e:	601a      	str	r2, [r3, #0]
   81280:	4770      	bx	lr
   81282:	bf00      	nop
   81284:	2007c1ac 	.word	0x2007c1ac
   81288:	2007c25c 	.word	0x2007c25c

0008128c <prvIdleTask>:
{
   8128c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   8128e:	4d16      	ldr	r5, [pc, #88]	; (812e8 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   81290:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81300 <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   81294:	4f15      	ldr	r7, [pc, #84]	; (812ec <prvIdleTask+0x60>)
				taskYIELD();
   81296:	f8df 906c 	ldr.w	r9, [pc, #108]	; 81304 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   8129a:	682b      	ldr	r3, [r5, #0]
   8129c:	b1bb      	cbz	r3, 812ce <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   8129e:	4e14      	ldr	r6, [pc, #80]	; (812f0 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   812a0:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   812a2:	68fb      	ldr	r3, [r7, #12]
   812a4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   812a6:	1d20      	adds	r0, r4, #4
   812a8:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   812aa:	4a12      	ldr	r2, [pc, #72]	; (812f4 <prvIdleTask+0x68>)
   812ac:	6813      	ldr	r3, [r2, #0]
   812ae:	3b01      	subs	r3, #1
   812b0:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   812b2:	682b      	ldr	r3, [r5, #0]
   812b4:	3b01      	subs	r3, #1
   812b6:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   812b8:	4b0f      	ldr	r3, [pc, #60]	; (812f8 <prvIdleTask+0x6c>)
   812ba:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   812bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   812be:	f8df a048 	ldr.w	sl, [pc, #72]	; 81308 <prvIdleTask+0x7c>
   812c2:	47d0      	blx	sl
			vPortFree( pxTCB );
   812c4:	4620      	mov	r0, r4
   812c6:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   812c8:	682b      	ldr	r3, [r5, #0]
   812ca:	2b00      	cmp	r3, #0
   812cc:	d1e8      	bne.n	812a0 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   812ce:	4b0b      	ldr	r3, [pc, #44]	; (812fc <prvIdleTask+0x70>)
   812d0:	681b      	ldr	r3, [r3, #0]
   812d2:	2b01      	cmp	r3, #1
   812d4:	d9e1      	bls.n	8129a <prvIdleTask+0xe>
				taskYIELD();
   812d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   812da:	f8c9 3000 	str.w	r3, [r9]
   812de:	f3bf 8f4f 	dsb	sy
   812e2:	f3bf 8f6f 	isb	sy
   812e6:	e7d8      	b.n	8129a <prvIdleTask+0xe>
   812e8:	2007c21c 	.word	0x2007c21c
   812ec:	2007c290 	.word	0x2007c290
   812f0:	000807cd 	.word	0x000807cd
   812f4:	2007c218 	.word	0x2007c218
   812f8:	000808ed 	.word	0x000808ed
   812fc:	2007c1b4 	.word	0x2007c1b4
   81300:	000808a9 	.word	0x000808a9
   81304:	e000ed04 	.word	0xe000ed04
   81308:	00080b55 	.word	0x00080b55

0008130c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   8130c:	b570      	push	{r4, r5, r6, lr}
   8130e:	4604      	mov	r4, r0
   81310:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   81312:	4b1d      	ldr	r3, [pc, #116]	; (81388 <prvAddCurrentTaskToDelayedList+0x7c>)
   81314:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81316:	4b1d      	ldr	r3, [pc, #116]	; (8138c <prvAddCurrentTaskToDelayedList+0x80>)
   81318:	6818      	ldr	r0, [r3, #0]
   8131a:	3004      	adds	r0, #4
   8131c:	4b1c      	ldr	r3, [pc, #112]	; (81390 <prvAddCurrentTaskToDelayedList+0x84>)
   8131e:	4798      	blx	r3
   81320:	b948      	cbnz	r0, 81336 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   81322:	4b1a      	ldr	r3, [pc, #104]	; (8138c <prvAddCurrentTaskToDelayedList+0x80>)
   81324:	681a      	ldr	r2, [r3, #0]
   81326:	491b      	ldr	r1, [pc, #108]	; (81394 <prvAddCurrentTaskToDelayedList+0x88>)
   81328:	680b      	ldr	r3, [r1, #0]
   8132a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   8132c:	2201      	movs	r2, #1
   8132e:	4082      	lsls	r2, r0
   81330:	ea23 0302 	bic.w	r3, r3, r2
   81334:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81336:	f1b4 3fff 	cmp.w	r4, #4294967295
   8133a:	d013      	beq.n	81364 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   8133c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   8133e:	4b13      	ldr	r3, [pc, #76]	; (8138c <prvAddCurrentTaskToDelayedList+0x80>)
   81340:	681b      	ldr	r3, [r3, #0]
   81342:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   81344:	42a5      	cmp	r5, r4
   81346:	d816      	bhi.n	81376 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81348:	4b13      	ldr	r3, [pc, #76]	; (81398 <prvAddCurrentTaskToDelayedList+0x8c>)
   8134a:	6818      	ldr	r0, [r3, #0]
   8134c:	4b0f      	ldr	r3, [pc, #60]	; (8138c <prvAddCurrentTaskToDelayedList+0x80>)
   8134e:	6819      	ldr	r1, [r3, #0]
   81350:	3104      	adds	r1, #4
   81352:	4b12      	ldr	r3, [pc, #72]	; (8139c <prvAddCurrentTaskToDelayedList+0x90>)
   81354:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   81356:	4b12      	ldr	r3, [pc, #72]	; (813a0 <prvAddCurrentTaskToDelayedList+0x94>)
   81358:	681b      	ldr	r3, [r3, #0]
   8135a:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   8135c:	bf3c      	itt	cc
   8135e:	4b10      	ldrcc	r3, [pc, #64]	; (813a0 <prvAddCurrentTaskToDelayedList+0x94>)
   81360:	601c      	strcc	r4, [r3, #0]
   81362:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   81364:	2e00      	cmp	r6, #0
   81366:	d0e9      	beq.n	8133c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81368:	4b08      	ldr	r3, [pc, #32]	; (8138c <prvAddCurrentTaskToDelayedList+0x80>)
   8136a:	6819      	ldr	r1, [r3, #0]
   8136c:	3104      	adds	r1, #4
   8136e:	480d      	ldr	r0, [pc, #52]	; (813a4 <prvAddCurrentTaskToDelayedList+0x98>)
   81370:	4b0d      	ldr	r3, [pc, #52]	; (813a8 <prvAddCurrentTaskToDelayedList+0x9c>)
   81372:	4798      	blx	r3
   81374:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   81376:	4b0d      	ldr	r3, [pc, #52]	; (813ac <prvAddCurrentTaskToDelayedList+0xa0>)
   81378:	6818      	ldr	r0, [r3, #0]
   8137a:	4b04      	ldr	r3, [pc, #16]	; (8138c <prvAddCurrentTaskToDelayedList+0x80>)
   8137c:	6819      	ldr	r1, [r3, #0]
   8137e:	3104      	adds	r1, #4
   81380:	4b06      	ldr	r3, [pc, #24]	; (8139c <prvAddCurrentTaskToDelayedList+0x90>)
   81382:	4798      	blx	r3
   81384:	bd70      	pop	{r4, r5, r6, pc}
   81386:	bf00      	nop
   81388:	2007c2a4 	.word	0x2007c2a4
   8138c:	2007c1a8 	.word	0x2007c1a8
   81390:	000807cd 	.word	0x000807cd
   81394:	2007c22c 	.word	0x2007c22c
   81398:	2007c1ac 	.word	0x2007c1ac
   8139c:	00080799 	.word	0x00080799
   813a0:	2007c25c 	.word	0x2007c25c
   813a4:	2007c27c 	.word	0x2007c27c
   813a8:	00080781 	.word	0x00080781
   813ac:	2007c1b0 	.word	0x2007c1b0

000813b0 <xTaskCreate>:
	{
   813b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   813b4:	b083      	sub	sp, #12
   813b6:	4683      	mov	fp, r0
   813b8:	460d      	mov	r5, r1
   813ba:	9301      	str	r3, [sp, #4]
   813bc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   813c0:	0096      	lsls	r6, r2, #2
   813c2:	4630      	mov	r0, r6
   813c4:	4b60      	ldr	r3, [pc, #384]	; (81548 <xTaskCreate+0x198>)
   813c6:	4798      	blx	r3
			if( pxStack != NULL )
   813c8:	2800      	cmp	r0, #0
   813ca:	f000 808d 	beq.w	814e8 <xTaskCreate+0x138>
   813ce:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   813d0:	2060      	movs	r0, #96	; 0x60
   813d2:	4b5d      	ldr	r3, [pc, #372]	; (81548 <xTaskCreate+0x198>)
   813d4:	4798      	blx	r3
				if( pxNewTCB != NULL )
   813d6:	4604      	mov	r4, r0
   813d8:	2800      	cmp	r0, #0
   813da:	f000 8082 	beq.w	814e2 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
   813de:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   813e0:	4632      	mov	r2, r6
   813e2:	21a5      	movs	r1, #165	; 0xa5
   813e4:	4638      	mov	r0, r7
   813e6:	4b59      	ldr	r3, [pc, #356]	; (8154c <xTaskCreate+0x19c>)
   813e8:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   813ea:	3e04      	subs	r6, #4
   813ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   813ee:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   813f0:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   813f4:	782b      	ldrb	r3, [r5, #0]
   813f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   813fa:	782b      	ldrb	r3, [r5, #0]
   813fc:	b163      	cbz	r3, 81418 <xTaskCreate+0x68>
   813fe:	462b      	mov	r3, r5
   81400:	f104 0234 	add.w	r2, r4, #52	; 0x34
   81404:	f105 0113 	add.w	r1, r5, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   81408:	7858      	ldrb	r0, [r3, #1]
   8140a:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   8140e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   81412:	b108      	cbz	r0, 81418 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   81414:	428b      	cmp	r3, r1
   81416:	d1f7      	bne.n	81408 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   81418:	2700      	movs	r7, #0
   8141a:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
   8141e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   81420:	2d04      	cmp	r5, #4
   81422:	bf28      	it	cs
   81424:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   81426:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   81428:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
   8142a:	6567      	str	r7, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   8142c:	f104 0804 	add.w	r8, r4, #4
   81430:	4640      	mov	r0, r8
   81432:	f8df 916c 	ldr.w	r9, [pc, #364]	; 815a0 <xTaskCreate+0x1f0>
   81436:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   81438:	f104 0018 	add.w	r0, r4, #24
   8143c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   8143e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81440:	f1c5 0505 	rsb	r5, r5, #5
   81444:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   81446:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   81448:	65a7      	str	r7, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   8144a:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8144e:	9a01      	ldr	r2, [sp, #4]
   81450:	4659      	mov	r1, fp
   81452:	4630      	mov	r0, r6
   81454:	4b3e      	ldr	r3, [pc, #248]	; (81550 <xTaskCreate+0x1a0>)
   81456:	4798      	blx	r3
   81458:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   8145a:	f1ba 0f00 	cmp.w	sl, #0
   8145e:	d001      	beq.n	81464 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   81460:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   81464:	4b3b      	ldr	r3, [pc, #236]	; (81554 <xTaskCreate+0x1a4>)
   81466:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   81468:	4a3b      	ldr	r2, [pc, #236]	; (81558 <xTaskCreate+0x1a8>)
   8146a:	6813      	ldr	r3, [r2, #0]
   8146c:	3301      	adds	r3, #1
   8146e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   81470:	4b3a      	ldr	r3, [pc, #232]	; (8155c <xTaskCreate+0x1ac>)
   81472:	681b      	ldr	r3, [r3, #0]
   81474:	2b00      	cmp	r3, #0
   81476:	d03a      	beq.n	814ee <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
   81478:	4b39      	ldr	r3, [pc, #228]	; (81560 <xTaskCreate+0x1b0>)
   8147a:	681b      	ldr	r3, [r3, #0]
   8147c:	b93b      	cbnz	r3, 8148e <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   8147e:	4b37      	ldr	r3, [pc, #220]	; (8155c <xTaskCreate+0x1ac>)
   81480:	681b      	ldr	r3, [r3, #0]
   81482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81484:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81486:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   81488:	bf9c      	itt	ls
   8148a:	4b34      	ldrls	r3, [pc, #208]	; (8155c <xTaskCreate+0x1ac>)
   8148c:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   8148e:	4a35      	ldr	r2, [pc, #212]	; (81564 <xTaskCreate+0x1b4>)
   81490:	6813      	ldr	r3, [r2, #0]
   81492:	3301      	adds	r3, #1
   81494:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   81496:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
   81498:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8149a:	4a33      	ldr	r2, [pc, #204]	; (81568 <xTaskCreate+0x1b8>)
   8149c:	6811      	ldr	r1, [r2, #0]
   8149e:	2301      	movs	r3, #1
   814a0:	4083      	lsls	r3, r0
   814a2:	430b      	orrs	r3, r1
   814a4:	6013      	str	r3, [r2, #0]
   814a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814aa:	4641      	mov	r1, r8
   814ac:	4b2f      	ldr	r3, [pc, #188]	; (8156c <xTaskCreate+0x1bc>)
   814ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   814b2:	4b2f      	ldr	r3, [pc, #188]	; (81570 <xTaskCreate+0x1c0>)
   814b4:	4798      	blx	r3
	taskEXIT_CRITICAL();
   814b6:	4b2f      	ldr	r3, [pc, #188]	; (81574 <xTaskCreate+0x1c4>)
   814b8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   814ba:	4b29      	ldr	r3, [pc, #164]	; (81560 <xTaskCreate+0x1b0>)
   814bc:	681b      	ldr	r3, [r3, #0]
   814be:	2b00      	cmp	r3, #0
   814c0:	d03b      	beq.n	8153a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   814c2:	4b26      	ldr	r3, [pc, #152]	; (8155c <xTaskCreate+0x1ac>)
   814c4:	681b      	ldr	r3, [r3, #0]
   814c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   814c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   814ca:	429a      	cmp	r2, r3
   814cc:	d239      	bcs.n	81542 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
   814ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   814d2:	4b29      	ldr	r3, [pc, #164]	; (81578 <xTaskCreate+0x1c8>)
   814d4:	601a      	str	r2, [r3, #0]
   814d6:	f3bf 8f4f 	dsb	sy
   814da:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   814de:	2001      	movs	r0, #1
   814e0:	e02c      	b.n	8153c <xTaskCreate+0x18c>
					vPortFree( pxStack );
   814e2:	4638      	mov	r0, r7
   814e4:	4b25      	ldr	r3, [pc, #148]	; (8157c <xTaskCreate+0x1cc>)
   814e6:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   814e8:	f04f 30ff 	mov.w	r0, #4294967295
   814ec:	e026      	b.n	8153c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
   814ee:	4b1b      	ldr	r3, [pc, #108]	; (8155c <xTaskCreate+0x1ac>)
   814f0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   814f2:	6813      	ldr	r3, [r2, #0]
   814f4:	2b01      	cmp	r3, #1
   814f6:	d1ca      	bne.n	8148e <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   814f8:	4e1c      	ldr	r6, [pc, #112]	; (8156c <xTaskCreate+0x1bc>)
   814fa:	4630      	mov	r0, r6
   814fc:	4d20      	ldr	r5, [pc, #128]	; (81580 <xTaskCreate+0x1d0>)
   814fe:	47a8      	blx	r5
   81500:	f106 0014 	add.w	r0, r6, #20
   81504:	47a8      	blx	r5
   81506:	f106 0028 	add.w	r0, r6, #40	; 0x28
   8150a:	47a8      	blx	r5
   8150c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   81510:	47a8      	blx	r5
   81512:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81516:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   81518:	4f1a      	ldr	r7, [pc, #104]	; (81584 <xTaskCreate+0x1d4>)
   8151a:	4638      	mov	r0, r7
   8151c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   8151e:	4e1a      	ldr	r6, [pc, #104]	; (81588 <xTaskCreate+0x1d8>)
   81520:	4630      	mov	r0, r6
   81522:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   81524:	4819      	ldr	r0, [pc, #100]	; (8158c <xTaskCreate+0x1dc>)
   81526:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   81528:	4819      	ldr	r0, [pc, #100]	; (81590 <xTaskCreate+0x1e0>)
   8152a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   8152c:	4819      	ldr	r0, [pc, #100]	; (81594 <xTaskCreate+0x1e4>)
   8152e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   81530:	4b19      	ldr	r3, [pc, #100]	; (81598 <xTaskCreate+0x1e8>)
   81532:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81534:	4b19      	ldr	r3, [pc, #100]	; (8159c <xTaskCreate+0x1ec>)
   81536:	601e      	str	r6, [r3, #0]
   81538:	e7a9      	b.n	8148e <xTaskCreate+0xde>
			xReturn = pdPASS;
   8153a:	2001      	movs	r0, #1
	}
   8153c:	b003      	add	sp, #12
   8153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   81542:	2001      	movs	r0, #1
		return xReturn;
   81544:	e7fa      	b.n	8153c <xTaskCreate+0x18c>
   81546:	bf00      	nop
   81548:	00080aed 	.word	0x00080aed
   8154c:	000828fd 	.word	0x000828fd
   81550:	00080855 	.word	0x00080855
   81554:	000808a9 	.word	0x000808a9
   81558:	2007c218 	.word	0x2007c218
   8155c:	2007c1a8 	.word	0x2007c1a8
   81560:	2007c278 	.word	0x2007c278
   81564:	2007c228 	.word	0x2007c228
   81568:	2007c22c 	.word	0x2007c22c
   8156c:	2007c1b4 	.word	0x2007c1b4
   81570:	00080781 	.word	0x00080781
   81574:	000808ed 	.word	0x000808ed
   81578:	e000ed04 	.word	0xe000ed04
   8157c:	00080b55 	.word	0x00080b55
   81580:	00080765 	.word	0x00080765
   81584:	2007c230 	.word	0x2007c230
   81588:	2007c244 	.word	0x2007c244
   8158c:	2007c264 	.word	0x2007c264
   81590:	2007c290 	.word	0x2007c290
   81594:	2007c27c 	.word	0x2007c27c
   81598:	2007c1ac 	.word	0x2007c1ac
   8159c:	2007c1b0 	.word	0x2007c1b0
   815a0:	0008077b 	.word	0x0008077b

000815a4 <vTaskStartScheduler>:
{
   815a4:	b510      	push	{r4, lr}
   815a6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   815a8:	4b18      	ldr	r3, [pc, #96]	; (8160c <vTaskStartScheduler+0x68>)
   815aa:	9301      	str	r3, [sp, #4]
   815ac:	2300      	movs	r3, #0
   815ae:	9300      	str	r3, [sp, #0]
   815b0:	2282      	movs	r2, #130	; 0x82
   815b2:	4917      	ldr	r1, [pc, #92]	; (81610 <vTaskStartScheduler+0x6c>)
   815b4:	4817      	ldr	r0, [pc, #92]	; (81614 <vTaskStartScheduler+0x70>)
   815b6:	4c18      	ldr	r4, [pc, #96]	; (81618 <vTaskStartScheduler+0x74>)
   815b8:	47a0      	blx	r4
		if( xReturn == pdPASS )
   815ba:	2801      	cmp	r0, #1
   815bc:	d004      	beq.n	815c8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   815be:	f1b0 3fff 	cmp.w	r0, #4294967295
   815c2:	d01a      	beq.n	815fa <vTaskStartScheduler+0x56>
}
   815c4:	b002      	add	sp, #8
   815c6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   815c8:	4b14      	ldr	r3, [pc, #80]	; (8161c <vTaskStartScheduler+0x78>)
   815ca:	4798      	blx	r3
	if( xReturn == pdPASS )
   815cc:	2801      	cmp	r0, #1
   815ce:	d1f6      	bne.n	815be <vTaskStartScheduler+0x1a>
   815d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   815d4:	f383 8811 	msr	BASEPRI, r3
   815d8:	f3bf 8f6f 	isb	sy
   815dc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   815e0:	f04f 32ff 	mov.w	r2, #4294967295
   815e4:	4b0e      	ldr	r3, [pc, #56]	; (81620 <vTaskStartScheduler+0x7c>)
   815e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   815e8:	2201      	movs	r2, #1
   815ea:	4b0e      	ldr	r3, [pc, #56]	; (81624 <vTaskStartScheduler+0x80>)
   815ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   815ee:	2200      	movs	r2, #0
   815f0:	4b0d      	ldr	r3, [pc, #52]	; (81628 <vTaskStartScheduler+0x84>)
   815f2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   815f4:	4b0d      	ldr	r3, [pc, #52]	; (8162c <vTaskStartScheduler+0x88>)
   815f6:	4798      	blx	r3
   815f8:	e7e4      	b.n	815c4 <vTaskStartScheduler+0x20>
   815fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   815fe:	f383 8811 	msr	BASEPRI, r3
   81602:	f3bf 8f6f 	isb	sy
   81606:	f3bf 8f4f 	dsb	sy
   8160a:	e7fe      	b.n	8160a <vTaskStartScheduler+0x66>
   8160c:	2007c258 	.word	0x2007c258
   81610:	00083990 	.word	0x00083990
   81614:	0008128d 	.word	0x0008128d
   81618:	000813b1 	.word	0x000813b1
   8161c:	00081d81 	.word	0x00081d81
   81620:	2007c25c 	.word	0x2007c25c
   81624:	2007c278 	.word	0x2007c278
   81628:	2007c2a4 	.word	0x2007c2a4
   8162c:	000809c1 	.word	0x000809c1

00081630 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   81630:	4a02      	ldr	r2, [pc, #8]	; (8163c <vTaskSuspendAll+0xc>)
   81632:	6813      	ldr	r3, [r2, #0]
   81634:	3301      	adds	r3, #1
   81636:	6013      	str	r3, [r2, #0]
   81638:	4770      	bx	lr
   8163a:	bf00      	nop
   8163c:	2007c224 	.word	0x2007c224

00081640 <xTaskGetTickCount>:
		xTicks = xTickCount;
   81640:	4b01      	ldr	r3, [pc, #4]	; (81648 <xTaskGetTickCount+0x8>)
   81642:	6818      	ldr	r0, [r3, #0]
}
   81644:	4770      	bx	lr
   81646:	bf00      	nop
   81648:	2007c2a4 	.word	0x2007c2a4

0008164c <xTaskIncrementTick>:
{
   8164c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81650:	4b3d      	ldr	r3, [pc, #244]	; (81748 <xTaskIncrementTick+0xfc>)
   81652:	681b      	ldr	r3, [r3, #0]
   81654:	2b00      	cmp	r3, #0
   81656:	d169      	bne.n	8172c <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   81658:	4b3c      	ldr	r3, [pc, #240]	; (8174c <xTaskIncrementTick+0x100>)
   8165a:	681d      	ldr	r5, [r3, #0]
   8165c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   8165e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   81660:	b9c5      	cbnz	r5, 81694 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
   81662:	4b3b      	ldr	r3, [pc, #236]	; (81750 <xTaskIncrementTick+0x104>)
   81664:	681b      	ldr	r3, [r3, #0]
   81666:	681b      	ldr	r3, [r3, #0]
   81668:	b143      	cbz	r3, 8167c <xTaskIncrementTick+0x30>
   8166a:	f04f 0340 	mov.w	r3, #64	; 0x40
   8166e:	f383 8811 	msr	BASEPRI, r3
   81672:	f3bf 8f6f 	isb	sy
   81676:	f3bf 8f4f 	dsb	sy
   8167a:	e7fe      	b.n	8167a <xTaskIncrementTick+0x2e>
   8167c:	4a34      	ldr	r2, [pc, #208]	; (81750 <xTaskIncrementTick+0x104>)
   8167e:	6811      	ldr	r1, [r2, #0]
   81680:	4b34      	ldr	r3, [pc, #208]	; (81754 <xTaskIncrementTick+0x108>)
   81682:	6818      	ldr	r0, [r3, #0]
   81684:	6010      	str	r0, [r2, #0]
   81686:	6019      	str	r1, [r3, #0]
   81688:	4a33      	ldr	r2, [pc, #204]	; (81758 <xTaskIncrementTick+0x10c>)
   8168a:	6813      	ldr	r3, [r2, #0]
   8168c:	3301      	adds	r3, #1
   8168e:	6013      	str	r3, [r2, #0]
   81690:	4b32      	ldr	r3, [pc, #200]	; (8175c <xTaskIncrementTick+0x110>)
   81692:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   81694:	4b32      	ldr	r3, [pc, #200]	; (81760 <xTaskIncrementTick+0x114>)
   81696:	681b      	ldr	r3, [r3, #0]
   81698:	429d      	cmp	r5, r3
   8169a:	d20c      	bcs.n	816b6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
   8169c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8169e:	4b31      	ldr	r3, [pc, #196]	; (81764 <xTaskIncrementTick+0x118>)
   816a0:	681b      	ldr	r3, [r3, #0]
   816a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   816a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816a8:	009b      	lsls	r3, r3, #2
   816aa:	4a2f      	ldr	r2, [pc, #188]	; (81768 <xTaskIncrementTick+0x11c>)
   816ac:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   816ae:	2b02      	cmp	r3, #2
   816b0:	bf28      	it	cs
   816b2:	2401      	movcs	r4, #1
   816b4:	e03f      	b.n	81736 <xTaskIncrementTick+0xea>
   816b6:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   816b8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 81750 <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   816bc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8177c <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
   816c0:	4f2a      	ldr	r7, [pc, #168]	; (8176c <xTaskIncrementTick+0x120>)
   816c2:	e01f      	b.n	81704 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   816c4:	f04f 32ff 	mov.w	r2, #4294967295
   816c8:	4b25      	ldr	r3, [pc, #148]	; (81760 <xTaskIncrementTick+0x114>)
   816ca:	601a      	str	r2, [r3, #0]
					break;
   816cc:	e7e7      	b.n	8169e <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
   816ce:	4a24      	ldr	r2, [pc, #144]	; (81760 <xTaskIncrementTick+0x114>)
   816d0:	6013      	str	r3, [r2, #0]
						break;
   816d2:	e7e4      	b.n	8169e <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   816d4:	f106 0018 	add.w	r0, r6, #24
   816d8:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   816da:	6af0      	ldr	r0, [r6, #44]	; 0x2c
   816dc:	683a      	ldr	r2, [r7, #0]
   816de:	2301      	movs	r3, #1
   816e0:	4083      	lsls	r3, r0
   816e2:	4313      	orrs	r3, r2
   816e4:	603b      	str	r3, [r7, #0]
   816e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   816ea:	4651      	mov	r1, sl
   816ec:	4b1e      	ldr	r3, [pc, #120]	; (81768 <xTaskIncrementTick+0x11c>)
   816ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   816f2:	4b1f      	ldr	r3, [pc, #124]	; (81770 <xTaskIncrementTick+0x124>)
   816f4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   816f6:	4b1b      	ldr	r3, [pc, #108]	; (81764 <xTaskIncrementTick+0x118>)
   816f8:	681b      	ldr	r3, [r3, #0]
   816fa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   816fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   816fe:	429a      	cmp	r2, r3
   81700:	bf28      	it	cs
   81702:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81704:	f8d9 3000 	ldr.w	r3, [r9]
   81708:	681b      	ldr	r3, [r3, #0]
   8170a:	2b00      	cmp	r3, #0
   8170c:	d0da      	beq.n	816c4 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8170e:	f8d9 3000 	ldr.w	r3, [r9]
   81712:	68db      	ldr	r3, [r3, #12]
   81714:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   81716:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   81718:	429d      	cmp	r5, r3
   8171a:	d3d8      	bcc.n	816ce <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   8171c:	f106 0a04 	add.w	sl, r6, #4
   81720:	4650      	mov	r0, sl
   81722:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81724:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   81726:	2b00      	cmp	r3, #0
   81728:	d1d4      	bne.n	816d4 <xTaskIncrementTick+0x88>
   8172a:	e7d6      	b.n	816da <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
   8172c:	4a11      	ldr	r2, [pc, #68]	; (81774 <xTaskIncrementTick+0x128>)
   8172e:	6813      	ldr	r3, [r2, #0]
   81730:	3301      	adds	r3, #1
   81732:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   81734:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   81736:	4b10      	ldr	r3, [pc, #64]	; (81778 <xTaskIncrementTick+0x12c>)
   81738:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   8173a:	2b00      	cmp	r3, #0
}
   8173c:	bf0c      	ite	eq
   8173e:	4620      	moveq	r0, r4
   81740:	2001      	movne	r0, #1
   81742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81746:	bf00      	nop
   81748:	2007c224 	.word	0x2007c224
   8174c:	2007c2a4 	.word	0x2007c2a4
   81750:	2007c1ac 	.word	0x2007c1ac
   81754:	2007c1b0 	.word	0x2007c1b0
   81758:	2007c260 	.word	0x2007c260
   8175c:	00081261 	.word	0x00081261
   81760:	2007c25c 	.word	0x2007c25c
   81764:	2007c1a8 	.word	0x2007c1a8
   81768:	2007c1b4 	.word	0x2007c1b4
   8176c:	2007c22c 	.word	0x2007c22c
   81770:	00080781 	.word	0x00080781
   81774:	2007c220 	.word	0x2007c220
   81778:	2007c2a8 	.word	0x2007c2a8
   8177c:	000807cd 	.word	0x000807cd

00081780 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   81780:	4b35      	ldr	r3, [pc, #212]	; (81858 <xTaskResumeAll+0xd8>)
   81782:	681b      	ldr	r3, [r3, #0]
   81784:	b943      	cbnz	r3, 81798 <xTaskResumeAll+0x18>
   81786:	f04f 0340 	mov.w	r3, #64	; 0x40
   8178a:	f383 8811 	msr	BASEPRI, r3
   8178e:	f3bf 8f6f 	isb	sy
   81792:	f3bf 8f4f 	dsb	sy
   81796:	e7fe      	b.n	81796 <xTaskResumeAll+0x16>
{
   81798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
   8179c:	4b2f      	ldr	r3, [pc, #188]	; (8185c <xTaskResumeAll+0xdc>)
   8179e:	4798      	blx	r3
		--uxSchedulerSuspended;
   817a0:	4b2d      	ldr	r3, [pc, #180]	; (81858 <xTaskResumeAll+0xd8>)
   817a2:	681a      	ldr	r2, [r3, #0]
   817a4:	3a01      	subs	r2, #1
   817a6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   817a8:	681b      	ldr	r3, [r3, #0]
   817aa:	2b00      	cmp	r3, #0
   817ac:	d150      	bne.n	81850 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   817ae:	4b2c      	ldr	r3, [pc, #176]	; (81860 <xTaskResumeAll+0xe0>)
   817b0:	681b      	ldr	r3, [r3, #0]
   817b2:	b92b      	cbnz	r3, 817c0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
   817b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   817b6:	4b2b      	ldr	r3, [pc, #172]	; (81864 <xTaskResumeAll+0xe4>)
   817b8:	4798      	blx	r3
}
   817ba:	4620      	mov	r0, r4
   817bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   817c0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   817c2:	4f29      	ldr	r7, [pc, #164]	; (81868 <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   817c4:	4e29      	ldr	r6, [pc, #164]	; (8186c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
   817c6:	4d2a      	ldr	r5, [pc, #168]	; (81870 <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   817c8:	683b      	ldr	r3, [r7, #0]
   817ca:	b303      	cbz	r3, 8180e <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   817cc:	68fb      	ldr	r3, [r7, #12]
   817ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   817d0:	f104 0018 	add.w	r0, r4, #24
   817d4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   817d6:	f104 0804 	add.w	r8, r4, #4
   817da:	4640      	mov	r0, r8
   817dc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   817de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817e0:	682a      	ldr	r2, [r5, #0]
   817e2:	2301      	movs	r3, #1
   817e4:	4083      	lsls	r3, r0
   817e6:	4313      	orrs	r3, r2
   817e8:	602b      	str	r3, [r5, #0]
   817ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817ee:	4641      	mov	r1, r8
   817f0:	4b20      	ldr	r3, [pc, #128]	; (81874 <xTaskResumeAll+0xf4>)
   817f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817f6:	4b20      	ldr	r3, [pc, #128]	; (81878 <xTaskResumeAll+0xf8>)
   817f8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   817fa:	4b20      	ldr	r3, [pc, #128]	; (8187c <xTaskResumeAll+0xfc>)
   817fc:	681b      	ldr	r3, [r3, #0]
   817fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81802:	429a      	cmp	r2, r3
   81804:	d3e0      	bcc.n	817c8 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
   81806:	2201      	movs	r2, #1
   81808:	4b1d      	ldr	r3, [pc, #116]	; (81880 <xTaskResumeAll+0x100>)
   8180a:	601a      	str	r2, [r3, #0]
   8180c:	e7dc      	b.n	817c8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
   8180e:	b10c      	cbz	r4, 81814 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
   81810:	4b1c      	ldr	r3, [pc, #112]	; (81884 <xTaskResumeAll+0x104>)
   81812:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   81814:	4b1c      	ldr	r3, [pc, #112]	; (81888 <xTaskResumeAll+0x108>)
   81816:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   81818:	b16c      	cbz	r4, 81836 <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
   8181a:	4f1c      	ldr	r7, [pc, #112]	; (8188c <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   8181c:	4e18      	ldr	r6, [pc, #96]	; (81880 <xTaskResumeAll+0x100>)
   8181e:	2501      	movs	r5, #1
   81820:	e001      	b.n	81826 <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   81822:	3c01      	subs	r4, #1
   81824:	d004      	beq.n	81830 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   81826:	47b8      	blx	r7
   81828:	2800      	cmp	r0, #0
   8182a:	d0fa      	beq.n	81822 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
   8182c:	6035      	str	r5, [r6, #0]
   8182e:	e7f8      	b.n	81822 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
   81830:	2200      	movs	r2, #0
   81832:	4b15      	ldr	r3, [pc, #84]	; (81888 <xTaskResumeAll+0x108>)
   81834:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   81836:	4b12      	ldr	r3, [pc, #72]	; (81880 <xTaskResumeAll+0x100>)
   81838:	681b      	ldr	r3, [r3, #0]
   8183a:	b15b      	cbz	r3, 81854 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
   8183c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81840:	4b13      	ldr	r3, [pc, #76]	; (81890 <xTaskResumeAll+0x110>)
   81842:	601a      	str	r2, [r3, #0]
   81844:	f3bf 8f4f 	dsb	sy
   81848:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   8184c:	2401      	movs	r4, #1
   8184e:	e7b2      	b.n	817b6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
   81850:	2400      	movs	r4, #0
   81852:	e7b0      	b.n	817b6 <xTaskResumeAll+0x36>
   81854:	2400      	movs	r4, #0
   81856:	e7ae      	b.n	817b6 <xTaskResumeAll+0x36>
   81858:	2007c224 	.word	0x2007c224
   8185c:	000808a9 	.word	0x000808a9
   81860:	2007c218 	.word	0x2007c218
   81864:	000808ed 	.word	0x000808ed
   81868:	2007c264 	.word	0x2007c264
   8186c:	000807cd 	.word	0x000807cd
   81870:	2007c22c 	.word	0x2007c22c
   81874:	2007c1b4 	.word	0x2007c1b4
   81878:	00080781 	.word	0x00080781
   8187c:	2007c1a8 	.word	0x2007c1a8
   81880:	2007c2a8 	.word	0x2007c2a8
   81884:	00081261 	.word	0x00081261
   81888:	2007c220 	.word	0x2007c220
   8188c:	0008164d 	.word	0x0008164d
   81890:	e000ed04 	.word	0xe000ed04

00081894 <vTaskDelayUntil>:
	{
   81894:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   81896:	b150      	cbz	r0, 818ae <vTaskDelayUntil+0x1a>
   81898:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   8189a:	b989      	cbnz	r1, 818c0 <vTaskDelayUntil+0x2c>
   8189c:	f04f 0340 	mov.w	r3, #64	; 0x40
   818a0:	f383 8811 	msr	BASEPRI, r3
   818a4:	f3bf 8f6f 	isb	sy
   818a8:	f3bf 8f4f 	dsb	sy
   818ac:	e7fe      	b.n	818ac <vTaskDelayUntil+0x18>
   818ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   818b2:	f383 8811 	msr	BASEPRI, r3
   818b6:	f3bf 8f6f 	isb	sy
   818ba:	f3bf 8f4f 	dsb	sy
   818be:	e7fe      	b.n	818be <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
   818c0:	4b19      	ldr	r3, [pc, #100]	; (81928 <vTaskDelayUntil+0x94>)
   818c2:	681b      	ldr	r3, [r3, #0]
   818c4:	b143      	cbz	r3, 818d8 <vTaskDelayUntil+0x44>
   818c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   818ca:	f383 8811 	msr	BASEPRI, r3
   818ce:	f3bf 8f6f 	isb	sy
   818d2:	f3bf 8f4f 	dsb	sy
   818d6:	e7fe      	b.n	818d6 <vTaskDelayUntil+0x42>
   818d8:	460c      	mov	r4, r1
		vTaskSuspendAll();
   818da:	4b14      	ldr	r3, [pc, #80]	; (8192c <vTaskDelayUntil+0x98>)
   818dc:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
   818de:	4b14      	ldr	r3, [pc, #80]	; (81930 <vTaskDelayUntil+0x9c>)
   818e0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   818e2:	682a      	ldr	r2, [r5, #0]
   818e4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
   818e6:	4290      	cmp	r0, r2
   818e8:	d214      	bcs.n	81914 <vTaskDelayUntil+0x80>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   818ea:	42a2      	cmp	r2, r4
   818ec:	d916      	bls.n	8191c <vTaskDelayUntil+0x88>
			*pxPreviousWakeTime = xTimeToWake;
   818ee:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   818f0:	42a0      	cmp	r0, r4
   818f2:	d203      	bcs.n	818fc <vTaskDelayUntil+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   818f4:	2100      	movs	r1, #0
   818f6:	1a20      	subs	r0, r4, r0
   818f8:	4b0e      	ldr	r3, [pc, #56]	; (81934 <vTaskDelayUntil+0xa0>)
   818fa:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
   818fc:	4b0e      	ldr	r3, [pc, #56]	; (81938 <vTaskDelayUntil+0xa4>)
   818fe:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81900:	b980      	cbnz	r0, 81924 <vTaskDelayUntil+0x90>
			portYIELD_WITHIN_API();
   81902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81906:	4b0d      	ldr	r3, [pc, #52]	; (8193c <vTaskDelayUntil+0xa8>)
   81908:	601a      	str	r2, [r3, #0]
   8190a:	f3bf 8f4f 	dsb	sy
   8190e:	f3bf 8f6f 	isb	sy
	}
   81912:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   81914:	42a2      	cmp	r2, r4
   81916:	d803      	bhi.n	81920 <vTaskDelayUntil+0x8c>
   81918:	42a0      	cmp	r0, r4
   8191a:	d301      	bcc.n	81920 <vTaskDelayUntil+0x8c>
			*pxPreviousWakeTime = xTimeToWake;
   8191c:	602c      	str	r4, [r5, #0]
   8191e:	e7ed      	b.n	818fc <vTaskDelayUntil+0x68>
   81920:	602c      	str	r4, [r5, #0]
   81922:	e7e7      	b.n	818f4 <vTaskDelayUntil+0x60>
   81924:	bd38      	pop	{r3, r4, r5, pc}
   81926:	bf00      	nop
   81928:	2007c224 	.word	0x2007c224
   8192c:	00081631 	.word	0x00081631
   81930:	2007c2a4 	.word	0x2007c2a4
   81934:	0008130d 	.word	0x0008130d
   81938:	00081781 	.word	0x00081781
   8193c:	e000ed04 	.word	0xe000ed04

00081940 <vTaskDelay>:
	{
   81940:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
   81942:	b1a8      	cbz	r0, 81970 <vTaskDelay+0x30>
   81944:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
   81946:	4b0f      	ldr	r3, [pc, #60]	; (81984 <vTaskDelay+0x44>)
   81948:	681b      	ldr	r3, [r3, #0]
   8194a:	b143      	cbz	r3, 8195e <vTaskDelay+0x1e>
   8194c:	f04f 0340 	mov.w	r3, #64	; 0x40
   81950:	f383 8811 	msr	BASEPRI, r3
   81954:	f3bf 8f6f 	isb	sy
   81958:	f3bf 8f4f 	dsb	sy
   8195c:	e7fe      	b.n	8195c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   8195e:	4b0a      	ldr	r3, [pc, #40]	; (81988 <vTaskDelay+0x48>)
   81960:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   81962:	2100      	movs	r1, #0
   81964:	4620      	mov	r0, r4
   81966:	4b09      	ldr	r3, [pc, #36]	; (8198c <vTaskDelay+0x4c>)
   81968:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   8196a:	4b09      	ldr	r3, [pc, #36]	; (81990 <vTaskDelay+0x50>)
   8196c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   8196e:	b938      	cbnz	r0, 81980 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
   81970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81974:	4b07      	ldr	r3, [pc, #28]	; (81994 <vTaskDelay+0x54>)
   81976:	601a      	str	r2, [r3, #0]
   81978:	f3bf 8f4f 	dsb	sy
   8197c:	f3bf 8f6f 	isb	sy
   81980:	bd10      	pop	{r4, pc}
   81982:	bf00      	nop
   81984:	2007c224 	.word	0x2007c224
   81988:	00081631 	.word	0x00081631
   8198c:	0008130d 	.word	0x0008130d
   81990:	00081781 	.word	0x00081781
   81994:	e000ed04 	.word	0xe000ed04

00081998 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   81998:	4b1f      	ldr	r3, [pc, #124]	; (81a18 <vTaskSwitchContext+0x80>)
   8199a:	681b      	ldr	r3, [r3, #0]
   8199c:	b9c3      	cbnz	r3, 819d0 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
   8199e:	2200      	movs	r2, #0
   819a0:	4b1e      	ldr	r3, [pc, #120]	; (81a1c <vTaskSwitchContext+0x84>)
   819a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   819a4:	4b1e      	ldr	r3, [pc, #120]	; (81a20 <vTaskSwitchContext+0x88>)
   819a6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   819a8:	fab3 f383 	clz	r3, r3
   819ac:	b2db      	uxtb	r3, r3
   819ae:	f1c3 031f 	rsb	r3, r3, #31
   819b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   819b6:	0092      	lsls	r2, r2, #2
   819b8:	491a      	ldr	r1, [pc, #104]	; (81a24 <vTaskSwitchContext+0x8c>)
   819ba:	588a      	ldr	r2, [r1, r2]
   819bc:	b962      	cbnz	r2, 819d8 <vTaskSwitchContext+0x40>
	__asm volatile
   819be:	f04f 0340 	mov.w	r3, #64	; 0x40
   819c2:	f383 8811 	msr	BASEPRI, r3
   819c6:	f3bf 8f6f 	isb	sy
   819ca:	f3bf 8f4f 	dsb	sy
   819ce:	e7fe      	b.n	819ce <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
   819d0:	2201      	movs	r2, #1
   819d2:	4b12      	ldr	r3, [pc, #72]	; (81a1c <vTaskSwitchContext+0x84>)
   819d4:	601a      	str	r2, [r3, #0]
   819d6:	4770      	bx	lr
{
   819d8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   819da:	4a12      	ldr	r2, [pc, #72]	; (81a24 <vTaskSwitchContext+0x8c>)
   819dc:	0099      	lsls	r1, r3, #2
   819de:	18c8      	adds	r0, r1, r3
   819e0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   819e4:	6844      	ldr	r4, [r0, #4]
   819e6:	6864      	ldr	r4, [r4, #4]
   819e8:	6044      	str	r4, [r0, #4]
   819ea:	4419      	add	r1, r3
   819ec:	4602      	mov	r2, r0
   819ee:	3208      	adds	r2, #8
   819f0:	4294      	cmp	r4, r2
   819f2:	d00a      	beq.n	81a0a <vTaskSwitchContext+0x72>
   819f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   819f8:	4a0a      	ldr	r2, [pc, #40]	; (81a24 <vTaskSwitchContext+0x8c>)
   819fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   819fe:	685b      	ldr	r3, [r3, #4]
   81a00:	68da      	ldr	r2, [r3, #12]
   81a02:	4b09      	ldr	r3, [pc, #36]	; (81a28 <vTaskSwitchContext+0x90>)
   81a04:	601a      	str	r2, [r3, #0]
}
   81a06:	bc10      	pop	{r4}
   81a08:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81a0a:	6860      	ldr	r0, [r4, #4]
   81a0c:	4a05      	ldr	r2, [pc, #20]	; (81a24 <vTaskSwitchContext+0x8c>)
   81a0e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81a12:	6050      	str	r0, [r2, #4]
   81a14:	e7ee      	b.n	819f4 <vTaskSwitchContext+0x5c>
   81a16:	bf00      	nop
   81a18:	2007c224 	.word	0x2007c224
   81a1c:	2007c2a8 	.word	0x2007c2a8
   81a20:	2007c22c 	.word	0x2007c22c
   81a24:	2007c1b4 	.word	0x2007c1b4
   81a28:	2007c1a8 	.word	0x2007c1a8

00081a2c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   81a2c:	b940      	cbnz	r0, 81a40 <vTaskPlaceOnEventList+0x14>
   81a2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a32:	f383 8811 	msr	BASEPRI, r3
   81a36:	f3bf 8f6f 	isb	sy
   81a3a:	f3bf 8f4f 	dsb	sy
   81a3e:	e7fe      	b.n	81a3e <vTaskPlaceOnEventList+0x12>
{
   81a40:	b510      	push	{r4, lr}
   81a42:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81a44:	4b04      	ldr	r3, [pc, #16]	; (81a58 <vTaskPlaceOnEventList+0x2c>)
   81a46:	6819      	ldr	r1, [r3, #0]
   81a48:	3118      	adds	r1, #24
   81a4a:	4b04      	ldr	r3, [pc, #16]	; (81a5c <vTaskPlaceOnEventList+0x30>)
   81a4c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   81a4e:	2101      	movs	r1, #1
   81a50:	4620      	mov	r0, r4
   81a52:	4b03      	ldr	r3, [pc, #12]	; (81a60 <vTaskPlaceOnEventList+0x34>)
   81a54:	4798      	blx	r3
   81a56:	bd10      	pop	{r4, pc}
   81a58:	2007c1a8 	.word	0x2007c1a8
   81a5c:	00080799 	.word	0x00080799
   81a60:	0008130d 	.word	0x0008130d

00081a64 <vTaskPlaceOnEventListRestricted>:
	{
   81a64:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   81a66:	b178      	cbz	r0, 81a88 <vTaskPlaceOnEventListRestricted+0x24>
   81a68:	4614      	mov	r4, r2
   81a6a:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   81a6c:	4b0b      	ldr	r3, [pc, #44]	; (81a9c <vTaskPlaceOnEventListRestricted+0x38>)
   81a6e:	6819      	ldr	r1, [r3, #0]
   81a70:	3118      	adds	r1, #24
   81a72:	4b0b      	ldr	r3, [pc, #44]	; (81aa0 <vTaskPlaceOnEventListRestricted+0x3c>)
   81a74:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   81a76:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   81a78:	4621      	mov	r1, r4
   81a7a:	bf0c      	ite	eq
   81a7c:	4628      	moveq	r0, r5
   81a7e:	f04f 30ff 	movne.w	r0, #4294967295
   81a82:	4b08      	ldr	r3, [pc, #32]	; (81aa4 <vTaskPlaceOnEventListRestricted+0x40>)
   81a84:	4798      	blx	r3
   81a86:	bd38      	pop	{r3, r4, r5, pc}
   81a88:	f04f 0340 	mov.w	r3, #64	; 0x40
   81a8c:	f383 8811 	msr	BASEPRI, r3
   81a90:	f3bf 8f6f 	isb	sy
   81a94:	f3bf 8f4f 	dsb	sy
   81a98:	e7fe      	b.n	81a98 <vTaskPlaceOnEventListRestricted+0x34>
   81a9a:	bf00      	nop
   81a9c:	2007c1a8 	.word	0x2007c1a8
   81aa0:	00080781 	.word	0x00080781
   81aa4:	0008130d 	.word	0x0008130d

00081aa8 <xTaskRemoveFromEventList>:
{
   81aa8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81aaa:	68c3      	ldr	r3, [r0, #12]
   81aac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81aae:	b32c      	cbz	r4, 81afc <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81ab0:	f104 0518 	add.w	r5, r4, #24
   81ab4:	4628      	mov	r0, r5
   81ab6:	4b18      	ldr	r3, [pc, #96]	; (81b18 <xTaskRemoveFromEventList+0x70>)
   81ab8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81aba:	4b18      	ldr	r3, [pc, #96]	; (81b1c <xTaskRemoveFromEventList+0x74>)
   81abc:	681b      	ldr	r3, [r3, #0]
   81abe:	bb33      	cbnz	r3, 81b0e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   81ac0:	1d25      	adds	r5, r4, #4
   81ac2:	4628      	mov	r0, r5
   81ac4:	4b14      	ldr	r3, [pc, #80]	; (81b18 <xTaskRemoveFromEventList+0x70>)
   81ac6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   81ac8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81aca:	4a15      	ldr	r2, [pc, #84]	; (81b20 <xTaskRemoveFromEventList+0x78>)
   81acc:	6811      	ldr	r1, [r2, #0]
   81ace:	2301      	movs	r3, #1
   81ad0:	4083      	lsls	r3, r0
   81ad2:	430b      	orrs	r3, r1
   81ad4:	6013      	str	r3, [r2, #0]
   81ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ada:	4629      	mov	r1, r5
   81adc:	4b11      	ldr	r3, [pc, #68]	; (81b24 <xTaskRemoveFromEventList+0x7c>)
   81ade:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81ae2:	4b11      	ldr	r3, [pc, #68]	; (81b28 <xTaskRemoveFromEventList+0x80>)
   81ae4:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   81ae6:	4b11      	ldr	r3, [pc, #68]	; (81b2c <xTaskRemoveFromEventList+0x84>)
   81ae8:	681b      	ldr	r3, [r3, #0]
   81aea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81aee:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   81af0:	bf83      	ittte	hi
   81af2:	2001      	movhi	r0, #1
   81af4:	4b0e      	ldrhi	r3, [pc, #56]	; (81b30 <xTaskRemoveFromEventList+0x88>)
   81af6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   81af8:	2000      	movls	r0, #0
}
   81afa:	bd38      	pop	{r3, r4, r5, pc}
   81afc:	f04f 0340 	mov.w	r3, #64	; 0x40
   81b00:	f383 8811 	msr	BASEPRI, r3
   81b04:	f3bf 8f6f 	isb	sy
   81b08:	f3bf 8f4f 	dsb	sy
   81b0c:	e7fe      	b.n	81b0c <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81b0e:	4629      	mov	r1, r5
   81b10:	4808      	ldr	r0, [pc, #32]	; (81b34 <xTaskRemoveFromEventList+0x8c>)
   81b12:	4b05      	ldr	r3, [pc, #20]	; (81b28 <xTaskRemoveFromEventList+0x80>)
   81b14:	4798      	blx	r3
   81b16:	e7e6      	b.n	81ae6 <xTaskRemoveFromEventList+0x3e>
   81b18:	000807cd 	.word	0x000807cd
   81b1c:	2007c224 	.word	0x2007c224
   81b20:	2007c22c 	.word	0x2007c22c
   81b24:	2007c1b4 	.word	0x2007c1b4
   81b28:	00080781 	.word	0x00080781
   81b2c:	2007c1a8 	.word	0x2007c1a8
   81b30:	2007c2a8 	.word	0x2007c2a8
   81b34:	2007c264 	.word	0x2007c264

00081b38 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81b38:	4b03      	ldr	r3, [pc, #12]	; (81b48 <vTaskInternalSetTimeOutState+0x10>)
   81b3a:	681b      	ldr	r3, [r3, #0]
   81b3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81b3e:	4b03      	ldr	r3, [pc, #12]	; (81b4c <vTaskInternalSetTimeOutState+0x14>)
   81b40:	681b      	ldr	r3, [r3, #0]
   81b42:	6043      	str	r3, [r0, #4]
   81b44:	4770      	bx	lr
   81b46:	bf00      	nop
   81b48:	2007c260 	.word	0x2007c260
   81b4c:	2007c2a4 	.word	0x2007c2a4

00081b50 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   81b50:	b1e8      	cbz	r0, 81b8e <xTaskCheckForTimeOut+0x3e>
{
   81b52:	b570      	push	{r4, r5, r6, lr}
   81b54:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
   81b56:	b319      	cbz	r1, 81ba0 <xTaskCheckForTimeOut+0x50>
   81b58:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
   81b5a:	4b1b      	ldr	r3, [pc, #108]	; (81bc8 <xTaskCheckForTimeOut+0x78>)
   81b5c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   81b5e:	4b1b      	ldr	r3, [pc, #108]	; (81bcc <xTaskCheckForTimeOut+0x7c>)
   81b60:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81b62:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   81b64:	6823      	ldr	r3, [r4, #0]
   81b66:	f1b3 3fff 	cmp.w	r3, #4294967295
   81b6a:	d029      	beq.n	81bc0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   81b6c:	4818      	ldr	r0, [pc, #96]	; (81bd0 <xTaskCheckForTimeOut+0x80>)
   81b6e:	6800      	ldr	r0, [r0, #0]
   81b70:	682e      	ldr	r6, [r5, #0]
   81b72:	4286      	cmp	r6, r0
   81b74:	d001      	beq.n	81b7a <xTaskCheckForTimeOut+0x2a>
   81b76:	428a      	cmp	r2, r1
   81b78:	d224      	bcs.n	81bc4 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   81b7a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   81b7c:	429a      	cmp	r2, r3
   81b7e:	d318      	bcc.n	81bb2 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
   81b80:	2300      	movs	r3, #0
   81b82:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   81b84:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81b86:	4b13      	ldr	r3, [pc, #76]	; (81bd4 <xTaskCheckForTimeOut+0x84>)
   81b88:	4798      	blx	r3
}
   81b8a:	4620      	mov	r0, r4
   81b8c:	bd70      	pop	{r4, r5, r6, pc}
   81b8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   81b92:	f383 8811 	msr	BASEPRI, r3
   81b96:	f3bf 8f6f 	isb	sy
   81b9a:	f3bf 8f4f 	dsb	sy
   81b9e:	e7fe      	b.n	81b9e <xTaskCheckForTimeOut+0x4e>
   81ba0:	f04f 0340 	mov.w	r3, #64	; 0x40
   81ba4:	f383 8811 	msr	BASEPRI, r3
   81ba8:	f3bf 8f6f 	isb	sy
   81bac:	f3bf 8f4f 	dsb	sy
   81bb0:	e7fe      	b.n	81bb0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   81bb2:	1a9b      	subs	r3, r3, r2
   81bb4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   81bb6:	4628      	mov	r0, r5
   81bb8:	4b07      	ldr	r3, [pc, #28]	; (81bd8 <xTaskCheckForTimeOut+0x88>)
   81bba:	4798      	blx	r3
			xReturn = pdFALSE;
   81bbc:	2400      	movs	r4, #0
   81bbe:	e7e2      	b.n	81b86 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   81bc0:	2400      	movs	r4, #0
   81bc2:	e7e0      	b.n	81b86 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   81bc4:	2401      	movs	r4, #1
   81bc6:	e7de      	b.n	81b86 <xTaskCheckForTimeOut+0x36>
   81bc8:	000808a9 	.word	0x000808a9
   81bcc:	2007c2a4 	.word	0x2007c2a4
   81bd0:	2007c260 	.word	0x2007c260
   81bd4:	000808ed 	.word	0x000808ed
   81bd8:	00081b39 	.word	0x00081b39

00081bdc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   81bdc:	2201      	movs	r2, #1
   81bde:	4b01      	ldr	r3, [pc, #4]	; (81be4 <vTaskMissedYield+0x8>)
   81be0:	601a      	str	r2, [r3, #0]
   81be2:	4770      	bx	lr
   81be4:	2007c2a8 	.word	0x2007c2a8

00081be8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   81be8:	4b05      	ldr	r3, [pc, #20]	; (81c00 <xTaskGetSchedulerState+0x18>)
   81bea:	681b      	ldr	r3, [r3, #0]
   81bec:	b133      	cbz	r3, 81bfc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81bee:	4b05      	ldr	r3, [pc, #20]	; (81c04 <xTaskGetSchedulerState+0x1c>)
   81bf0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   81bf2:	2b00      	cmp	r3, #0
   81bf4:	bf0c      	ite	eq
   81bf6:	2002      	moveq	r0, #2
   81bf8:	2000      	movne	r0, #0
   81bfa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81bfc:	2001      	movs	r0, #1
	}
   81bfe:	4770      	bx	lr
   81c00:	2007c278 	.word	0x2007c278
   81c04:	2007c224 	.word	0x2007c224

00081c08 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   81c08:	2800      	cmp	r0, #0
   81c0a:	d04a      	beq.n	81ca2 <xTaskPriorityDisinherit+0x9a>
	{
   81c0c:	b538      	push	{r3, r4, r5, lr}
   81c0e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   81c10:	4a27      	ldr	r2, [pc, #156]	; (81cb0 <xTaskPriorityDisinherit+0xa8>)
   81c12:	6812      	ldr	r2, [r2, #0]
   81c14:	4290      	cmp	r0, r2
   81c16:	d008      	beq.n	81c2a <xTaskPriorityDisinherit+0x22>
   81c18:	f04f 0340 	mov.w	r3, #64	; 0x40
   81c1c:	f383 8811 	msr	BASEPRI, r3
   81c20:	f3bf 8f6f 	isb	sy
   81c24:	f3bf 8f4f 	dsb	sy
   81c28:	e7fe      	b.n	81c28 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
   81c2a:	6d42      	ldr	r2, [r0, #84]	; 0x54
   81c2c:	b942      	cbnz	r2, 81c40 <xTaskPriorityDisinherit+0x38>
   81c2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   81c32:	f383 8811 	msr	BASEPRI, r3
   81c36:	f3bf 8f6f 	isb	sy
   81c3a:	f3bf 8f4f 	dsb	sy
   81c3e:	e7fe      	b.n	81c3e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
   81c40:	3a01      	subs	r2, #1
   81c42:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81c44:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81c46:	6d21      	ldr	r1, [r4, #80]	; 0x50
   81c48:	4288      	cmp	r0, r1
   81c4a:	d02c      	beq.n	81ca6 <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   81c4c:	2a00      	cmp	r2, #0
   81c4e:	d12c      	bne.n	81caa <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   81c50:	1d25      	adds	r5, r4, #4
   81c52:	4628      	mov	r0, r5
   81c54:	4b17      	ldr	r3, [pc, #92]	; (81cb4 <xTaskPriorityDisinherit+0xac>)
   81c56:	4798      	blx	r3
   81c58:	b968      	cbnz	r0, 81c76 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   81c5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81c5c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   81c60:	009b      	lsls	r3, r3, #2
   81c62:	4a15      	ldr	r2, [pc, #84]	; (81cb8 <xTaskPriorityDisinherit+0xb0>)
   81c64:	58d3      	ldr	r3, [r2, r3]
   81c66:	b933      	cbnz	r3, 81c76 <xTaskPriorityDisinherit+0x6e>
   81c68:	4814      	ldr	r0, [pc, #80]	; (81cbc <xTaskPriorityDisinherit+0xb4>)
   81c6a:	6803      	ldr	r3, [r0, #0]
   81c6c:	2201      	movs	r2, #1
   81c6e:	408a      	lsls	r2, r1
   81c70:	ea23 0302 	bic.w	r3, r3, r2
   81c74:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   81c76:	6d20      	ldr	r0, [r4, #80]	; 0x50
   81c78:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81c7a:	f1c0 0305 	rsb	r3, r0, #5
   81c7e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   81c80:	4a0e      	ldr	r2, [pc, #56]	; (81cbc <xTaskPriorityDisinherit+0xb4>)
   81c82:	6811      	ldr	r1, [r2, #0]
   81c84:	2401      	movs	r4, #1
   81c86:	fa04 f300 	lsl.w	r3, r4, r0
   81c8a:	430b      	orrs	r3, r1
   81c8c:	6013      	str	r3, [r2, #0]
   81c8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c92:	4629      	mov	r1, r5
   81c94:	4b08      	ldr	r3, [pc, #32]	; (81cb8 <xTaskPriorityDisinherit+0xb0>)
   81c96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81c9a:	4b09      	ldr	r3, [pc, #36]	; (81cc0 <xTaskPriorityDisinherit+0xb8>)
   81c9c:	4798      	blx	r3
					xReturn = pdTRUE;
   81c9e:	4620      	mov	r0, r4
   81ca0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   81ca2:	2000      	movs	r0, #0
   81ca4:	4770      	bx	lr
   81ca6:	2000      	movs	r0, #0
   81ca8:	bd38      	pop	{r3, r4, r5, pc}
   81caa:	2000      	movs	r0, #0
	}
   81cac:	bd38      	pop	{r3, r4, r5, pc}
   81cae:	bf00      	nop
   81cb0:	2007c1a8 	.word	0x2007c1a8
   81cb4:	000807cd 	.word	0x000807cd
   81cb8:	2007c1b4 	.word	0x2007c1b4
   81cbc:	2007c22c 	.word	0x2007c22c
   81cc0:	00080781 	.word	0x00080781

00081cc4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   81cc4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81cc6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81cc8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81cca:	4291      	cmp	r1, r2
   81ccc:	d80c      	bhi.n	81ce8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81cce:	1ad2      	subs	r2, r2, r3
   81cd0:	6983      	ldr	r3, [r0, #24]
   81cd2:	429a      	cmp	r2, r3
   81cd4:	d301      	bcc.n	81cda <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81cd6:	2001      	movs	r0, #1
   81cd8:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81cda:	1d01      	adds	r1, r0, #4
   81cdc:	4b09      	ldr	r3, [pc, #36]	; (81d04 <prvInsertTimerInActiveList+0x40>)
   81cde:	6818      	ldr	r0, [r3, #0]
   81ce0:	4b09      	ldr	r3, [pc, #36]	; (81d08 <prvInsertTimerInActiveList+0x44>)
   81ce2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81ce4:	2000      	movs	r0, #0
   81ce6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81ce8:	429a      	cmp	r2, r3
   81cea:	d201      	bcs.n	81cf0 <prvInsertTimerInActiveList+0x2c>
   81cec:	4299      	cmp	r1, r3
   81cee:	d206      	bcs.n	81cfe <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81cf0:	1d01      	adds	r1, r0, #4
   81cf2:	4b06      	ldr	r3, [pc, #24]	; (81d0c <prvInsertTimerInActiveList+0x48>)
   81cf4:	6818      	ldr	r0, [r3, #0]
   81cf6:	4b04      	ldr	r3, [pc, #16]	; (81d08 <prvInsertTimerInActiveList+0x44>)
   81cf8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   81cfa:	2000      	movs	r0, #0
   81cfc:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   81cfe:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   81d00:	bd08      	pop	{r3, pc}
   81d02:	bf00      	nop
   81d04:	2007c2b0 	.word	0x2007c2b0
   81d08:	00080799 	.word	0x00080799
   81d0c:	2007c2ac 	.word	0x2007c2ac

00081d10 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81d10:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81d12:	4b10      	ldr	r3, [pc, #64]	; (81d54 <prvCheckForValidListAndQueue+0x44>)
   81d14:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81d16:	4b10      	ldr	r3, [pc, #64]	; (81d58 <prvCheckForValidListAndQueue+0x48>)
   81d18:	681b      	ldr	r3, [r3, #0]
   81d1a:	b113      	cbz	r3, 81d22 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   81d1c:	4b0f      	ldr	r3, [pc, #60]	; (81d5c <prvCheckForValidListAndQueue+0x4c>)
   81d1e:	4798      	blx	r3
   81d20:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   81d22:	4d0f      	ldr	r5, [pc, #60]	; (81d60 <prvCheckForValidListAndQueue+0x50>)
   81d24:	4628      	mov	r0, r5
   81d26:	4e0f      	ldr	r6, [pc, #60]	; (81d64 <prvCheckForValidListAndQueue+0x54>)
   81d28:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81d2a:	4c0f      	ldr	r4, [pc, #60]	; (81d68 <prvCheckForValidListAndQueue+0x58>)
   81d2c:	4620      	mov	r0, r4
   81d2e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81d30:	4b0e      	ldr	r3, [pc, #56]	; (81d6c <prvCheckForValidListAndQueue+0x5c>)
   81d32:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81d34:	4b0e      	ldr	r3, [pc, #56]	; (81d70 <prvCheckForValidListAndQueue+0x60>)
   81d36:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   81d38:	2200      	movs	r2, #0
   81d3a:	2110      	movs	r1, #16
   81d3c:	2005      	movs	r0, #5
   81d3e:	4b0d      	ldr	r3, [pc, #52]	; (81d74 <prvCheckForValidListAndQueue+0x64>)
   81d40:	4798      	blx	r3
   81d42:	4b05      	ldr	r3, [pc, #20]	; (81d58 <prvCheckForValidListAndQueue+0x48>)
   81d44:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   81d46:	2800      	cmp	r0, #0
   81d48:	d0e8      	beq.n	81d1c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   81d4a:	490b      	ldr	r1, [pc, #44]	; (81d78 <prvCheckForValidListAndQueue+0x68>)
   81d4c:	4b0b      	ldr	r3, [pc, #44]	; (81d7c <prvCheckForValidListAndQueue+0x6c>)
   81d4e:	4798      	blx	r3
   81d50:	e7e4      	b.n	81d1c <prvCheckForValidListAndQueue+0xc>
   81d52:	bf00      	nop
   81d54:	000808a9 	.word	0x000808a9
   81d58:	2007c2e0 	.word	0x2007c2e0
   81d5c:	000808ed 	.word	0x000808ed
   81d60:	2007c2b4 	.word	0x2007c2b4
   81d64:	00080765 	.word	0x00080765
   81d68:	2007c2c8 	.word	0x2007c2c8
   81d6c:	2007c2ac 	.word	0x2007c2ac
   81d70:	2007c2b0 	.word	0x2007c2b0
   81d74:	00080d5d 	.word	0x00080d5d
   81d78:	00083998 	.word	0x00083998
   81d7c:	000811d1 	.word	0x000811d1

00081d80 <xTimerCreateTimerTask>:
{
   81d80:	b510      	push	{r4, lr}
   81d82:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   81d84:	4b0d      	ldr	r3, [pc, #52]	; (81dbc <xTimerCreateTimerTask+0x3c>)
   81d86:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81d88:	4b0d      	ldr	r3, [pc, #52]	; (81dc0 <xTimerCreateTimerTask+0x40>)
   81d8a:	681b      	ldr	r3, [r3, #0]
   81d8c:	b16b      	cbz	r3, 81daa <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
   81d8e:	4b0d      	ldr	r3, [pc, #52]	; (81dc4 <xTimerCreateTimerTask+0x44>)
   81d90:	9301      	str	r3, [sp, #4]
   81d92:	2304      	movs	r3, #4
   81d94:	9300      	str	r3, [sp, #0]
   81d96:	2300      	movs	r3, #0
   81d98:	f44f 7282 	mov.w	r2, #260	; 0x104
   81d9c:	490a      	ldr	r1, [pc, #40]	; (81dc8 <xTimerCreateTimerTask+0x48>)
   81d9e:	480b      	ldr	r0, [pc, #44]	; (81dcc <xTimerCreateTimerTask+0x4c>)
   81da0:	4c0b      	ldr	r4, [pc, #44]	; (81dd0 <xTimerCreateTimerTask+0x50>)
   81da2:	47a0      	blx	r4
	configASSERT( xReturn );
   81da4:	b108      	cbz	r0, 81daa <xTimerCreateTimerTask+0x2a>
}
   81da6:	b002      	add	sp, #8
   81da8:	bd10      	pop	{r4, pc}
   81daa:	f04f 0340 	mov.w	r3, #64	; 0x40
   81dae:	f383 8811 	msr	BASEPRI, r3
   81db2:	f3bf 8f6f 	isb	sy
   81db6:	f3bf 8f4f 	dsb	sy
   81dba:	e7fe      	b.n	81dba <xTimerCreateTimerTask+0x3a>
   81dbc:	00081d11 	.word	0x00081d11
   81dc0:	2007c2e0 	.word	0x2007c2e0
   81dc4:	2007c2e4 	.word	0x2007c2e4
   81dc8:	000839a0 	.word	0x000839a0
   81dcc:	00081ef5 	.word	0x00081ef5
   81dd0:	000813b1 	.word	0x000813b1

00081dd4 <xTimerGenericCommand>:
	configASSERT( xTimer );
   81dd4:	b1d8      	cbz	r0, 81e0e <xTimerGenericCommand+0x3a>
{
   81dd6:	b530      	push	{r4, r5, lr}
   81dd8:	b085      	sub	sp, #20
   81dda:	4615      	mov	r5, r2
   81ddc:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
   81dde:	4a14      	ldr	r2, [pc, #80]	; (81e30 <xTimerGenericCommand+0x5c>)
   81de0:	6810      	ldr	r0, [r2, #0]
   81de2:	b310      	cbz	r0, 81e2a <xTimerGenericCommand+0x56>
   81de4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
   81de6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   81de8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   81dea:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   81dec:	2905      	cmp	r1, #5
   81dee:	dc17      	bgt.n	81e20 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81df0:	4b10      	ldr	r3, [pc, #64]	; (81e34 <xTimerGenericCommand+0x60>)
   81df2:	4798      	blx	r3
   81df4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   81df6:	f04f 0300 	mov.w	r3, #0
   81dfa:	bf0c      	ite	eq
   81dfc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81dfe:	461a      	movne	r2, r3
   81e00:	4669      	mov	r1, sp
   81e02:	480b      	ldr	r0, [pc, #44]	; (81e30 <xTimerGenericCommand+0x5c>)
   81e04:	6800      	ldr	r0, [r0, #0]
   81e06:	4c0c      	ldr	r4, [pc, #48]	; (81e38 <xTimerGenericCommand+0x64>)
   81e08:	47a0      	blx	r4
}
   81e0a:	b005      	add	sp, #20
   81e0c:	bd30      	pop	{r4, r5, pc}
   81e0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e12:	f383 8811 	msr	BASEPRI, r3
   81e16:	f3bf 8f6f 	isb	sy
   81e1a:	f3bf 8f4f 	dsb	sy
   81e1e:	e7fe      	b.n	81e1e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81e20:	2300      	movs	r3, #0
   81e22:	4669      	mov	r1, sp
   81e24:	4c05      	ldr	r4, [pc, #20]	; (81e3c <xTimerGenericCommand+0x68>)
   81e26:	47a0      	blx	r4
   81e28:	e7ef      	b.n	81e0a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
   81e2a:	2000      	movs	r0, #0
	return xReturn;
   81e2c:	e7ed      	b.n	81e0a <xTimerGenericCommand+0x36>
   81e2e:	bf00      	nop
   81e30:	2007c2e0 	.word	0x2007c2e0
   81e34:	00081be9 	.word	0x00081be9
   81e38:	00080db1 	.word	0x00080db1
   81e3c:	00080f65 	.word	0x00080f65

00081e40 <prvSampleTimeNow>:
{
   81e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e44:	b082      	sub	sp, #8
   81e46:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   81e48:	4b23      	ldr	r3, [pc, #140]	; (81ed8 <prvSampleTimeNow+0x98>)
   81e4a:	4798      	blx	r3
   81e4c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   81e4e:	4b23      	ldr	r3, [pc, #140]	; (81edc <prvSampleTimeNow+0x9c>)
   81e50:	681b      	ldr	r3, [r3, #0]
   81e52:	4298      	cmp	r0, r3
   81e54:	d319      	bcc.n	81e8a <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
   81e56:	2300      	movs	r3, #0
   81e58:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   81e5c:	4b1f      	ldr	r3, [pc, #124]	; (81edc <prvSampleTimeNow+0x9c>)
   81e5e:	601f      	str	r7, [r3, #0]
}
   81e60:	4638      	mov	r0, r7
   81e62:	b002      	add	sp, #8
   81e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81e68:	2100      	movs	r1, #0
   81e6a:	9100      	str	r1, [sp, #0]
   81e6c:	460b      	mov	r3, r1
   81e6e:	4652      	mov	r2, sl
   81e70:	4620      	mov	r0, r4
   81e72:	4c1b      	ldr	r4, [pc, #108]	; (81ee0 <prvSampleTimeNow+0xa0>)
   81e74:	47a0      	blx	r4
				configASSERT( xResult );
   81e76:	b950      	cbnz	r0, 81e8e <prvSampleTimeNow+0x4e>
   81e78:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e7c:	f383 8811 	msr	BASEPRI, r3
   81e80:	f3bf 8f6f 	isb	sy
   81e84:	f3bf 8f4f 	dsb	sy
   81e88:	e7fe      	b.n	81e88 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e8a:	4d16      	ldr	r5, [pc, #88]	; (81ee4 <prvSampleTimeNow+0xa4>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81e8c:	4e16      	ldr	r6, [pc, #88]	; (81ee8 <prvSampleTimeNow+0xa8>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e8e:	682b      	ldr	r3, [r5, #0]
   81e90:	681a      	ldr	r2, [r3, #0]
   81e92:	b1c2      	cbz	r2, 81ec6 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e94:	68db      	ldr	r3, [r3, #12]
   81e96:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e9a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81e9c:	f104 0904 	add.w	r9, r4, #4
   81ea0:	4648      	mov	r0, r9
   81ea2:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81ea6:	4620      	mov	r0, r4
   81ea8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81eaa:	69e3      	ldr	r3, [r4, #28]
   81eac:	2b01      	cmp	r3, #1
   81eae:	d1ee      	bne.n	81e8e <prvSampleTimeNow+0x4e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81eb0:	69a3      	ldr	r3, [r4, #24]
   81eb2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81eb4:	459a      	cmp	sl, r3
   81eb6:	d2d7      	bcs.n	81e68 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81eb8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81eba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ebc:	4649      	mov	r1, r9
   81ebe:	6828      	ldr	r0, [r5, #0]
   81ec0:	4b0a      	ldr	r3, [pc, #40]	; (81eec <prvSampleTimeNow+0xac>)
   81ec2:	4798      	blx	r3
   81ec4:	e7e3      	b.n	81e8e <prvSampleTimeNow+0x4e>
	pxCurrentTimerList = pxOverflowTimerList;
   81ec6:	4a0a      	ldr	r2, [pc, #40]	; (81ef0 <prvSampleTimeNow+0xb0>)
   81ec8:	6810      	ldr	r0, [r2, #0]
   81eca:	4906      	ldr	r1, [pc, #24]	; (81ee4 <prvSampleTimeNow+0xa4>)
   81ecc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81ece:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81ed0:	2301      	movs	r3, #1
   81ed2:	f8c8 3000 	str.w	r3, [r8]
   81ed6:	e7c1      	b.n	81e5c <prvSampleTimeNow+0x1c>
   81ed8:	00081641 	.word	0x00081641
   81edc:	2007c2dc 	.word	0x2007c2dc
   81ee0:	00081dd5 	.word	0x00081dd5
   81ee4:	2007c2ac 	.word	0x2007c2ac
   81ee8:	000807cd 	.word	0x000807cd
   81eec:	00080799 	.word	0x00080799
   81ef0:	2007c2b0 	.word	0x2007c2b0

00081ef4 <prvTimerTask>:
{
   81ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ef8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81efa:	4e70      	ldr	r6, [pc, #448]	; (820bc <prvTimerTask+0x1c8>)
			( void ) xTaskResumeAll();
   81efc:	4f70      	ldr	r7, [pc, #448]	; (820c0 <prvTimerTask+0x1cc>)
					portYIELD_WITHIN_API();
   81efe:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 820e8 <prvTimerTask+0x1f4>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f02:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 820ec <prvTimerTask+0x1f8>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81f06:	6833      	ldr	r3, [r6, #0]
   81f08:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81f0a:	b172      	cbz	r2, 81f2a <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f0c:	68db      	ldr	r3, [r3, #12]
   81f0e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   81f10:	4b6c      	ldr	r3, [pc, #432]	; (820c4 <prvTimerTask+0x1d0>)
   81f12:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81f14:	a804      	add	r0, sp, #16
   81f16:	4b6c      	ldr	r3, [pc, #432]	; (820c8 <prvTimerTask+0x1d4>)
   81f18:	4798      	blx	r3
   81f1a:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81f1c:	9b04      	ldr	r3, [sp, #16]
   81f1e:	2b00      	cmp	r3, #0
   81f20:	d152      	bne.n	81fc8 <prvTimerTask+0xd4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81f22:	42a0      	cmp	r0, r4
   81f24:	d223      	bcs.n	81f6e <prvTimerTask+0x7a>
   81f26:	2200      	movs	r2, #0
   81f28:	e00f      	b.n	81f4a <prvTimerTask+0x56>
	vTaskSuspendAll();
   81f2a:	4b66      	ldr	r3, [pc, #408]	; (820c4 <prvTimerTask+0x1d0>)
   81f2c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81f2e:	a804      	add	r0, sp, #16
   81f30:	4b65      	ldr	r3, [pc, #404]	; (820c8 <prvTimerTask+0x1d4>)
   81f32:	4798      	blx	r3
   81f34:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81f36:	9b04      	ldr	r3, [sp, #16]
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d145      	bne.n	81fc8 <prvTimerTask+0xd4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   81f3c:	4b63      	ldr	r3, [pc, #396]	; (820cc <prvTimerTask+0x1d8>)
   81f3e:	681b      	ldr	r3, [r3, #0]
   81f40:	681a      	ldr	r2, [r3, #0]
   81f42:	fab2 f282 	clz	r2, r2
   81f46:	0952      	lsrs	r2, r2, #5
   81f48:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   81f4a:	1b61      	subs	r1, r4, r5
   81f4c:	4b60      	ldr	r3, [pc, #384]	; (820d0 <prvTimerTask+0x1dc>)
   81f4e:	6818      	ldr	r0, [r3, #0]
   81f50:	4b60      	ldr	r3, [pc, #384]	; (820d4 <prvTimerTask+0x1e0>)
   81f52:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81f54:	47b8      	blx	r7
   81f56:	b938      	cbnz	r0, 81f68 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
   81f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81f5c:	f8c9 3000 	str.w	r3, [r9]
   81f60:	f3bf 8f4f 	dsb	sy
   81f64:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81f68:	4d59      	ldr	r5, [pc, #356]	; (820d0 <prvTimerTask+0x1dc>)
   81f6a:	4c5b      	ldr	r4, [pc, #364]	; (820d8 <prvTimerTask+0x1e4>)
   81f6c:	e035      	b.n	81fda <prvTimerTask+0xe6>
				( void ) xTaskResumeAll();
   81f6e:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f70:	6833      	ldr	r3, [r6, #0]
   81f72:	68db      	ldr	r3, [r3, #12]
   81f74:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81f78:	f10a 0004 	add.w	r0, sl, #4
   81f7c:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   81f7e:	f8da 301c 	ldr.w	r3, [sl, #28]
   81f82:	2b01      	cmp	r3, #1
   81f84:	d004      	beq.n	81f90 <prvTimerTask+0x9c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   81f86:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   81f8a:	4650      	mov	r0, sl
   81f8c:	4798      	blx	r3
   81f8e:	e7eb      	b.n	81f68 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   81f90:	f8da 1018 	ldr.w	r1, [sl, #24]
   81f94:	4623      	mov	r3, r4
   81f96:	462a      	mov	r2, r5
   81f98:	4421      	add	r1, r4
   81f9a:	4650      	mov	r0, sl
   81f9c:	4d4f      	ldr	r5, [pc, #316]	; (820dc <prvTimerTask+0x1e8>)
   81f9e:	47a8      	blx	r5
   81fa0:	2800      	cmp	r0, #0
   81fa2:	d0f0      	beq.n	81f86 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   81fa4:	2100      	movs	r1, #0
   81fa6:	9100      	str	r1, [sp, #0]
   81fa8:	460b      	mov	r3, r1
   81faa:	4622      	mov	r2, r4
   81fac:	4650      	mov	r0, sl
   81fae:	4c4c      	ldr	r4, [pc, #304]	; (820e0 <prvTimerTask+0x1ec>)
   81fb0:	47a0      	blx	r4
			configASSERT( xResult );
   81fb2:	2800      	cmp	r0, #0
   81fb4:	d1e7      	bne.n	81f86 <prvTimerTask+0x92>
   81fb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   81fba:	f383 8811 	msr	BASEPRI, r3
   81fbe:	f3bf 8f6f 	isb	sy
   81fc2:	f3bf 8f4f 	dsb	sy
   81fc6:	e7fe      	b.n	81fc6 <prvTimerTask+0xd2>
			( void ) xTaskResumeAll();
   81fc8:	47b8      	blx	r7
   81fca:	e7cd      	b.n	81f68 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   81fcc:	9907      	ldr	r1, [sp, #28]
   81fce:	9806      	ldr	r0, [sp, #24]
   81fd0:	9b05      	ldr	r3, [sp, #20]
   81fd2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   81fd4:	9b04      	ldr	r3, [sp, #16]
   81fd6:	2b00      	cmp	r3, #0
   81fd8:	da08      	bge.n	81fec <prvTimerTask+0xf8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   81fda:	2200      	movs	r2, #0
   81fdc:	a904      	add	r1, sp, #16
   81fde:	6828      	ldr	r0, [r5, #0]
   81fe0:	47a0      	blx	r4
   81fe2:	2800      	cmp	r0, #0
   81fe4:	d08f      	beq.n	81f06 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   81fe6:	9b04      	ldr	r3, [sp, #16]
   81fe8:	2b00      	cmp	r3, #0
   81fea:	dbef      	blt.n	81fcc <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   81fec:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   81ff0:	f8da 3014 	ldr.w	r3, [sl, #20]
   81ff4:	b113      	cbz	r3, 81ffc <prvTimerTask+0x108>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   81ff6:	f10a 0004 	add.w	r0, sl, #4
   81ffa:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ffc:	a803      	add	r0, sp, #12
   81ffe:	4b32      	ldr	r3, [pc, #200]	; (820c8 <prvTimerTask+0x1d4>)
   82000:	4798      	blx	r3
			switch( xMessage.xMessageID )
   82002:	9b04      	ldr	r3, [sp, #16]
   82004:	2b09      	cmp	r3, #9
   82006:	d8e8      	bhi.n	81fda <prvTimerTask+0xe6>
   82008:	a201      	add	r2, pc, #4	; (adr r2, 82010 <prvTimerTask+0x11c>)
   8200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8200e:	bf00      	nop
   82010:	00082039 	.word	0x00082039
   82014:	00082039 	.word	0x00082039
   82018:	00082039 	.word	0x00082039
   8201c:	00081fdb 	.word	0x00081fdb
   82020:	0008208b 	.word	0x0008208b
   82024:	000820b3 	.word	0x000820b3
   82028:	00082039 	.word	0x00082039
   8202c:	00082039 	.word	0x00082039
   82030:	00081fdb 	.word	0x00081fdb
   82034:	0008208b 	.word	0x0008208b
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   82038:	9c05      	ldr	r4, [sp, #20]
   8203a:	f8da 1018 	ldr.w	r1, [sl, #24]
   8203e:	4623      	mov	r3, r4
   82040:	4602      	mov	r2, r0
   82042:	4421      	add	r1, r4
   82044:	4650      	mov	r0, sl
   82046:	4c25      	ldr	r4, [pc, #148]	; (820dc <prvTimerTask+0x1e8>)
   82048:	47a0      	blx	r4
   8204a:	2800      	cmp	r0, #0
   8204c:	d08d      	beq.n	81f6a <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8204e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   82052:	4650      	mov	r0, sl
   82054:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   82056:	f8da 301c 	ldr.w	r3, [sl, #28]
   8205a:	2b01      	cmp	r3, #1
   8205c:	d185      	bne.n	81f6a <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8205e:	f8da 2018 	ldr.w	r2, [sl, #24]
   82062:	2100      	movs	r1, #0
   82064:	9100      	str	r1, [sp, #0]
   82066:	460b      	mov	r3, r1
   82068:	9805      	ldr	r0, [sp, #20]
   8206a:	4402      	add	r2, r0
   8206c:	4650      	mov	r0, sl
   8206e:	4c1c      	ldr	r4, [pc, #112]	; (820e0 <prvTimerTask+0x1ec>)
   82070:	47a0      	blx	r4
							configASSERT( xResult );
   82072:	2800      	cmp	r0, #0
   82074:	f47f af79 	bne.w	81f6a <prvTimerTask+0x76>
   82078:	f04f 0340 	mov.w	r3, #64	; 0x40
   8207c:	f383 8811 	msr	BASEPRI, r3
   82080:	f3bf 8f6f 	isb	sy
   82084:	f3bf 8f4f 	dsb	sy
   82088:	e7fe      	b.n	82088 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   8208a:	9905      	ldr	r1, [sp, #20]
   8208c:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82090:	b131      	cbz	r1, 820a0 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82092:	4603      	mov	r3, r0
   82094:	4602      	mov	r2, r0
   82096:	4401      	add	r1, r0
   82098:	4650      	mov	r0, sl
   8209a:	4c10      	ldr	r4, [pc, #64]	; (820dc <prvTimerTask+0x1e8>)
   8209c:	47a0      	blx	r4
   8209e:	e764      	b.n	81f6a <prvTimerTask+0x76>
   820a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   820a4:	f383 8811 	msr	BASEPRI, r3
   820a8:	f3bf 8f6f 	isb	sy
   820ac:	f3bf 8f4f 	dsb	sy
   820b0:	e7fe      	b.n	820b0 <prvTimerTask+0x1bc>
						vPortFree( pxTimer );
   820b2:	4650      	mov	r0, sl
   820b4:	4b0b      	ldr	r3, [pc, #44]	; (820e4 <prvTimerTask+0x1f0>)
   820b6:	4798      	blx	r3
   820b8:	e757      	b.n	81f6a <prvTimerTask+0x76>
   820ba:	bf00      	nop
   820bc:	2007c2ac 	.word	0x2007c2ac
   820c0:	00081781 	.word	0x00081781
   820c4:	00081631 	.word	0x00081631
   820c8:	00081e41 	.word	0x00081e41
   820cc:	2007c2b0 	.word	0x2007c2b0
   820d0:	2007c2e0 	.word	0x2007c2e0
   820d4:	00081201 	.word	0x00081201
   820d8:	00081049 	.word	0x00081049
   820dc:	00081cc5 	.word	0x00081cc5
   820e0:	00081dd5 	.word	0x00081dd5
   820e4:	00080b55 	.word	0x00080b55
   820e8:	e000ed04 	.word	0xe000ed04
   820ec:	000807cd 	.word	0x000807cd

000820f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   820f0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   820f2:	480e      	ldr	r0, [pc, #56]	; (8212c <sysclk_init+0x3c>)
   820f4:	4b0e      	ldr	r3, [pc, #56]	; (82130 <sysclk_init+0x40>)
   820f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   820f8:	213e      	movs	r1, #62	; 0x3e
   820fa:	2000      	movs	r0, #0
   820fc:	4b0d      	ldr	r3, [pc, #52]	; (82134 <sysclk_init+0x44>)
   820fe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82100:	4c0d      	ldr	r4, [pc, #52]	; (82138 <sysclk_init+0x48>)
   82102:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82104:	2800      	cmp	r0, #0
   82106:	d0fc      	beq.n	82102 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82108:	4b0c      	ldr	r3, [pc, #48]	; (8213c <sysclk_init+0x4c>)
   8210a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8210c:	4a0c      	ldr	r2, [pc, #48]	; (82140 <sysclk_init+0x50>)
   8210e:	4b0d      	ldr	r3, [pc, #52]	; (82144 <sysclk_init+0x54>)
   82110:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82112:	4c0d      	ldr	r4, [pc, #52]	; (82148 <sysclk_init+0x58>)
   82114:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82116:	2800      	cmp	r0, #0
   82118:	d0fc      	beq.n	82114 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8211a:	2010      	movs	r0, #16
   8211c:	4b0b      	ldr	r3, [pc, #44]	; (8214c <sysclk_init+0x5c>)
   8211e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82120:	4b0b      	ldr	r3, [pc, #44]	; (82150 <sysclk_init+0x60>)
   82122:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82124:	4801      	ldr	r0, [pc, #4]	; (8212c <sysclk_init+0x3c>)
   82126:	4b02      	ldr	r3, [pc, #8]	; (82130 <sysclk_init+0x40>)
   82128:	4798      	blx	r3
   8212a:	bd10      	pop	{r4, pc}
   8212c:	0501bd00 	.word	0x0501bd00
   82130:	200700a5 	.word	0x200700a5
   82134:	000824e5 	.word	0x000824e5
   82138:	00082539 	.word	0x00082539
   8213c:	00082549 	.word	0x00082549
   82140:	200d3f01 	.word	0x200d3f01
   82144:	400e0600 	.word	0x400e0600
   82148:	00082559 	.word	0x00082559
   8214c:	00082481 	.word	0x00082481
   82150:	00082625 	.word	0x00082625

00082154 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82154:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8215a:	4b16      	ldr	r3, [pc, #88]	; (821b4 <board_init+0x60>)
   8215c:	605a      	str	r2, [r3, #4]
   8215e:	200b      	movs	r0, #11
   82160:	4c15      	ldr	r4, [pc, #84]	; (821b8 <board_init+0x64>)
   82162:	47a0      	blx	r4
   82164:	200c      	movs	r0, #12
   82166:	47a0      	blx	r4
   82168:	200d      	movs	r0, #13
   8216a:	47a0      	blx	r4
   8216c:	200e      	movs	r0, #14
   8216e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82170:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82174:	203b      	movs	r0, #59	; 0x3b
   82176:	4c11      	ldr	r4, [pc, #68]	; (821bc <board_init+0x68>)
   82178:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8217a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8217e:	2055      	movs	r0, #85	; 0x55
   82180:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82182:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82186:	2056      	movs	r0, #86	; 0x56
   82188:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8218a:	490d      	ldr	r1, [pc, #52]	; (821c0 <board_init+0x6c>)
   8218c:	2068      	movs	r0, #104	; 0x68
   8218e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82190:	490c      	ldr	r1, [pc, #48]	; (821c4 <board_init+0x70>)
   82192:	205c      	movs	r0, #92	; 0x5c
   82194:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82196:	4a0c      	ldr	r2, [pc, #48]	; (821c8 <board_init+0x74>)
   82198:	f44f 7140 	mov.w	r1, #768	; 0x300
   8219c:	480b      	ldr	r0, [pc, #44]	; (821cc <board_init+0x78>)
   8219e:	4b0c      	ldr	r3, [pc, #48]	; (821d0 <board_init+0x7c>)
   821a0:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   821a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   821a6:	202b      	movs	r0, #43	; 0x2b
   821a8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   821aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   821ae:	202a      	movs	r0, #42	; 0x2a
   821b0:	47a0      	blx	r4
   821b2:	bd10      	pop	{r4, pc}
   821b4:	400e1a50 	.word	0x400e1a50
   821b8:	00082569 	.word	0x00082569
   821bc:	00082275 	.word	0x00082275
   821c0:	28000079 	.word	0x28000079
   821c4:	28000001 	.word	0x28000001
   821c8:	08000001 	.word	0x08000001
   821cc:	400e0e00 	.word	0x400e0e00
   821d0:	00082345 	.word	0x00082345

000821d4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   821d4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   821d6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   821da:	d016      	beq.n	8220a <pio_set_peripheral+0x36>
   821dc:	d80b      	bhi.n	821f6 <pio_set_peripheral+0x22>
   821de:	b149      	cbz	r1, 821f4 <pio_set_peripheral+0x20>
   821e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   821e4:	d105      	bne.n	821f2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   821e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   821e8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   821ea:	400b      	ands	r3, r1
   821ec:	ea23 0302 	bic.w	r3, r3, r2
   821f0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   821f2:	6042      	str	r2, [r0, #4]
   821f4:	4770      	bx	lr
	switch (ul_type) {
   821f6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   821fa:	d0fb      	beq.n	821f4 <pio_set_peripheral+0x20>
   821fc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82200:	d0f8      	beq.n	821f4 <pio_set_peripheral+0x20>
   82202:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82206:	d1f4      	bne.n	821f2 <pio_set_peripheral+0x1e>
   82208:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8220a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8220c:	4313      	orrs	r3, r2
   8220e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82210:	e7ef      	b.n	821f2 <pio_set_peripheral+0x1e>

00082212 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82212:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82214:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82218:	bf14      	ite	ne
   8221a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8221c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8221e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82222:	bf14      	ite	ne
   82224:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   82226:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82228:	f012 0f02 	tst.w	r2, #2
   8222c:	d107      	bne.n	8223e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8222e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82232:	bf18      	it	ne
   82234:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82238:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8223a:	6001      	str	r1, [r0, #0]
   8223c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8223e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82242:	e7f9      	b.n	82238 <pio_set_input+0x26>

00082244 <pio_set_output>:
{
   82244:	b410      	push	{r4}
   82246:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82248:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8224a:	b944      	cbnz	r4, 8225e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8224c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8224e:	b143      	cbz	r3, 82262 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82250:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   82252:	b942      	cbnz	r2, 82266 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   82254:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   82256:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82258:	6001      	str	r1, [r0, #0]
}
   8225a:	bc10      	pop	{r4}
   8225c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8225e:	6641      	str	r1, [r0, #100]	; 0x64
   82260:	e7f5      	b.n	8224e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   82262:	6541      	str	r1, [r0, #84]	; 0x54
   82264:	e7f5      	b.n	82252 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   82266:	6301      	str	r1, [r0, #48]	; 0x30
   82268:	e7f5      	b.n	82256 <pio_set_output+0x12>

0008226a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8226a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8226c:	4770      	bx	lr

0008226e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8226e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82270:	4770      	bx	lr
	...

00082274 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82274:	b570      	push	{r4, r5, r6, lr}
   82276:	b082      	sub	sp, #8
   82278:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8227a:	0943      	lsrs	r3, r0, #5
   8227c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82280:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82284:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82286:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8228a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8228e:	d031      	beq.n	822f4 <pio_configure_pin+0x80>
   82290:	d816      	bhi.n	822c0 <pio_configure_pin+0x4c>
   82292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82296:	d01b      	beq.n	822d0 <pio_configure_pin+0x5c>
   82298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8229c:	d116      	bne.n	822cc <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8229e:	f000 001f 	and.w	r0, r0, #31
   822a2:	2601      	movs	r6, #1
   822a4:	4086      	lsls	r6, r0
   822a6:	4632      	mov	r2, r6
   822a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   822ac:	4620      	mov	r0, r4
   822ae:	4b22      	ldr	r3, [pc, #136]	; (82338 <pio_configure_pin+0xc4>)
   822b0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   822b2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822b6:	bf14      	ite	ne
   822b8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   822ba:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   822bc:	2001      	movs	r0, #1
   822be:	e017      	b.n	822f0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   822c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   822c4:	d021      	beq.n	8230a <pio_configure_pin+0x96>
   822c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   822ca:	d01e      	beq.n	8230a <pio_configure_pin+0x96>
		return 0;
   822cc:	2000      	movs	r0, #0
   822ce:	e00f      	b.n	822f0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   822d0:	f000 001f 	and.w	r0, r0, #31
   822d4:	2601      	movs	r6, #1
   822d6:	4086      	lsls	r6, r0
   822d8:	4632      	mov	r2, r6
   822da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   822de:	4620      	mov	r0, r4
   822e0:	4b15      	ldr	r3, [pc, #84]	; (82338 <pio_configure_pin+0xc4>)
   822e2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   822e4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822e8:	bf14      	ite	ne
   822ea:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   822ec:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   822ee:	2001      	movs	r0, #1
}
   822f0:	b002      	add	sp, #8
   822f2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   822f4:	f000 011f 	and.w	r1, r0, #31
   822f8:	2601      	movs	r6, #1
   822fa:	462a      	mov	r2, r5
   822fc:	fa06 f101 	lsl.w	r1, r6, r1
   82300:	4620      	mov	r0, r4
   82302:	4b0e      	ldr	r3, [pc, #56]	; (8233c <pio_configure_pin+0xc8>)
   82304:	4798      	blx	r3
	return 1;
   82306:	4630      	mov	r0, r6
		break;
   82308:	e7f2      	b.n	822f0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8230a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8230e:	f000 011f 	and.w	r1, r0, #31
   82312:	2601      	movs	r6, #1
   82314:	ea05 0306 	and.w	r3, r5, r6
   82318:	9300      	str	r3, [sp, #0]
   8231a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8231e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82322:	bf14      	ite	ne
   82324:	2200      	movne	r2, #0
   82326:	2201      	moveq	r2, #1
   82328:	fa06 f101 	lsl.w	r1, r6, r1
   8232c:	4620      	mov	r0, r4
   8232e:	4c04      	ldr	r4, [pc, #16]	; (82340 <pio_configure_pin+0xcc>)
   82330:	47a0      	blx	r4
	return 1;
   82332:	4630      	mov	r0, r6
		break;
   82334:	e7dc      	b.n	822f0 <pio_configure_pin+0x7c>
   82336:	bf00      	nop
   82338:	000821d5 	.word	0x000821d5
   8233c:	00082213 	.word	0x00082213
   82340:	00082245 	.word	0x00082245

00082344 <pio_configure_pin_group>:
{
   82344:	b570      	push	{r4, r5, r6, lr}
   82346:	b082      	sub	sp, #8
   82348:	4605      	mov	r5, r0
   8234a:	460e      	mov	r6, r1
   8234c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8234e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82352:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82356:	d027      	beq.n	823a8 <pio_configure_pin_group+0x64>
   82358:	d811      	bhi.n	8237e <pio_configure_pin_group+0x3a>
   8235a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8235e:	d016      	beq.n	8238e <pio_configure_pin_group+0x4a>
   82360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82364:	d111      	bne.n	8238a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82366:	460a      	mov	r2, r1
   82368:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8236c:	4b19      	ldr	r3, [pc, #100]	; (823d4 <pio_configure_pin_group+0x90>)
   8236e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82370:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82374:	bf14      	ite	ne
   82376:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82378:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8237a:	2001      	movs	r0, #1
   8237c:	e012      	b.n	823a4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8237e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82382:	d015      	beq.n	823b0 <pio_configure_pin_group+0x6c>
   82384:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82388:	d012      	beq.n	823b0 <pio_configure_pin_group+0x6c>
		return 0;
   8238a:	2000      	movs	r0, #0
   8238c:	e00a      	b.n	823a4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8238e:	460a      	mov	r2, r1
   82390:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82394:	4b0f      	ldr	r3, [pc, #60]	; (823d4 <pio_configure_pin_group+0x90>)
   82396:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82398:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8239c:	bf14      	ite	ne
   8239e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   823a0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   823a2:	2001      	movs	r0, #1
}
   823a4:	b002      	add	sp, #8
   823a6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   823a8:	4b0b      	ldr	r3, [pc, #44]	; (823d8 <pio_configure_pin_group+0x94>)
   823aa:	4798      	blx	r3
	return 1;
   823ac:	2001      	movs	r0, #1
		break;
   823ae:	e7f9      	b.n	823a4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   823b0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   823b4:	f004 0301 	and.w	r3, r4, #1
   823b8:	9300      	str	r3, [sp, #0]
   823ba:	f3c4 0380 	ubfx	r3, r4, #2, #1
   823be:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   823c2:	bf14      	ite	ne
   823c4:	2200      	movne	r2, #0
   823c6:	2201      	moveq	r2, #1
   823c8:	4631      	mov	r1, r6
   823ca:	4628      	mov	r0, r5
   823cc:	4c03      	ldr	r4, [pc, #12]	; (823dc <pio_configure_pin_group+0x98>)
   823ce:	47a0      	blx	r4
	return 1;
   823d0:	2001      	movs	r0, #1
		break;
   823d2:	e7e7      	b.n	823a4 <pio_configure_pin_group+0x60>
   823d4:	000821d5 	.word	0x000821d5
   823d8:	00082213 	.word	0x00082213
   823dc:	00082245 	.word	0x00082245

000823e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   823e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823e4:	4604      	mov	r4, r0
   823e6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   823e8:	4b0e      	ldr	r3, [pc, #56]	; (82424 <pio_handler_process+0x44>)
   823ea:	4798      	blx	r3
   823ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   823ee:	4620      	mov	r0, r4
   823f0:	4b0d      	ldr	r3, [pc, #52]	; (82428 <pio_handler_process+0x48>)
   823f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   823f4:	4005      	ands	r5, r0
   823f6:	d013      	beq.n	82420 <pio_handler_process+0x40>
   823f8:	4c0c      	ldr	r4, [pc, #48]	; (8242c <pio_handler_process+0x4c>)
   823fa:	f104 0660 	add.w	r6, r4, #96	; 0x60
   823fe:	e003      	b.n	82408 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82400:	42b4      	cmp	r4, r6
   82402:	d00d      	beq.n	82420 <pio_handler_process+0x40>
   82404:	3410      	adds	r4, #16
		while (status != 0) {
   82406:	b15d      	cbz	r5, 82420 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82408:	6820      	ldr	r0, [r4, #0]
   8240a:	4540      	cmp	r0, r8
   8240c:	d1f8      	bne.n	82400 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8240e:	6861      	ldr	r1, [r4, #4]
   82410:	4229      	tst	r1, r5
   82412:	d0f5      	beq.n	82400 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82414:	68e3      	ldr	r3, [r4, #12]
   82416:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82418:	6863      	ldr	r3, [r4, #4]
   8241a:	ea25 0503 	bic.w	r5, r5, r3
   8241e:	e7ef      	b.n	82400 <pio_handler_process+0x20>
   82420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82424:	0008226b 	.word	0x0008226b
   82428:	0008226f 	.word	0x0008226f
   8242c:	2007c2e8 	.word	0x2007c2e8

00082430 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82430:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82432:	210b      	movs	r1, #11
   82434:	4801      	ldr	r0, [pc, #4]	; (8243c <PIOA_Handler+0xc>)
   82436:	4b02      	ldr	r3, [pc, #8]	; (82440 <PIOA_Handler+0x10>)
   82438:	4798      	blx	r3
   8243a:	bd08      	pop	{r3, pc}
   8243c:	400e0e00 	.word	0x400e0e00
   82440:	000823e1 	.word	0x000823e1

00082444 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82444:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82446:	210c      	movs	r1, #12
   82448:	4801      	ldr	r0, [pc, #4]	; (82450 <PIOB_Handler+0xc>)
   8244a:	4b02      	ldr	r3, [pc, #8]	; (82454 <PIOB_Handler+0x10>)
   8244c:	4798      	blx	r3
   8244e:	bd08      	pop	{r3, pc}
   82450:	400e1000 	.word	0x400e1000
   82454:	000823e1 	.word	0x000823e1

00082458 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82458:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8245a:	210d      	movs	r1, #13
   8245c:	4801      	ldr	r0, [pc, #4]	; (82464 <PIOC_Handler+0xc>)
   8245e:	4b02      	ldr	r3, [pc, #8]	; (82468 <PIOC_Handler+0x10>)
   82460:	4798      	blx	r3
   82462:	bd08      	pop	{r3, pc}
   82464:	400e1200 	.word	0x400e1200
   82468:	000823e1 	.word	0x000823e1

0008246c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8246c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8246e:	210e      	movs	r1, #14
   82470:	4801      	ldr	r0, [pc, #4]	; (82478 <PIOD_Handler+0xc>)
   82472:	4b02      	ldr	r3, [pc, #8]	; (8247c <PIOD_Handler+0x10>)
   82474:	4798      	blx	r3
   82476:	bd08      	pop	{r3, pc}
   82478:	400e1400 	.word	0x400e1400
   8247c:	000823e1 	.word	0x000823e1

00082480 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82480:	4a17      	ldr	r2, [pc, #92]	; (824e0 <pmc_switch_mck_to_pllack+0x60>)
   82482:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82488:	4318      	orrs	r0, r3
   8248a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8248c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8248e:	f013 0f08 	tst.w	r3, #8
   82492:	d10a      	bne.n	824aa <pmc_switch_mck_to_pllack+0x2a>
   82494:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82498:	4911      	ldr	r1, [pc, #68]	; (824e0 <pmc_switch_mck_to_pllack+0x60>)
   8249a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8249c:	f012 0f08 	tst.w	r2, #8
   824a0:	d103      	bne.n	824aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   824a2:	3b01      	subs	r3, #1
   824a4:	d1f9      	bne.n	8249a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   824a6:	2001      	movs	r0, #1
   824a8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   824aa:	4a0d      	ldr	r2, [pc, #52]	; (824e0 <pmc_switch_mck_to_pllack+0x60>)
   824ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   824ae:	f023 0303 	bic.w	r3, r3, #3
   824b2:	f043 0302 	orr.w	r3, r3, #2
   824b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   824ba:	f013 0f08 	tst.w	r3, #8
   824be:	d10a      	bne.n	824d6 <pmc_switch_mck_to_pllack+0x56>
   824c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   824c4:	4906      	ldr	r1, [pc, #24]	; (824e0 <pmc_switch_mck_to_pllack+0x60>)
   824c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   824c8:	f012 0f08 	tst.w	r2, #8
   824cc:	d105      	bne.n	824da <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   824ce:	3b01      	subs	r3, #1
   824d0:	d1f9      	bne.n	824c6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   824d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   824d4:	4770      	bx	lr
	return 0;
   824d6:	2000      	movs	r0, #0
   824d8:	4770      	bx	lr
   824da:	2000      	movs	r0, #0
   824dc:	4770      	bx	lr
   824de:	bf00      	nop
   824e0:	400e0600 	.word	0x400e0600

000824e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   824e4:	b9c8      	cbnz	r0, 8251a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824e6:	4a11      	ldr	r2, [pc, #68]	; (8252c <pmc_switch_mainck_to_xtal+0x48>)
   824e8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   824ea:	0209      	lsls	r1, r1, #8
   824ec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   824ee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824f2:	f023 0303 	bic.w	r3, r3, #3
   824f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   824fa:	f043 0301 	orr.w	r3, r3, #1
   824fe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82500:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82502:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82504:	f013 0f01 	tst.w	r3, #1
   82508:	d0fb      	beq.n	82502 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8250a:	4a08      	ldr	r2, [pc, #32]	; (8252c <pmc_switch_mainck_to_xtal+0x48>)
   8250c:	6a13      	ldr	r3, [r2, #32]
   8250e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82516:	6213      	str	r3, [r2, #32]
   82518:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8251a:	4904      	ldr	r1, [pc, #16]	; (8252c <pmc_switch_mainck_to_xtal+0x48>)
   8251c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8251e:	4a04      	ldr	r2, [pc, #16]	; (82530 <pmc_switch_mainck_to_xtal+0x4c>)
   82520:	401a      	ands	r2, r3
   82522:	4b04      	ldr	r3, [pc, #16]	; (82534 <pmc_switch_mainck_to_xtal+0x50>)
   82524:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82526:	620b      	str	r3, [r1, #32]
   82528:	4770      	bx	lr
   8252a:	bf00      	nop
   8252c:	400e0600 	.word	0x400e0600
   82530:	fec8fffc 	.word	0xfec8fffc
   82534:	01370002 	.word	0x01370002

00082538 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82538:	4b02      	ldr	r3, [pc, #8]	; (82544 <pmc_osc_is_ready_mainck+0xc>)
   8253a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8253c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82540:	4770      	bx	lr
   82542:	bf00      	nop
   82544:	400e0600 	.word	0x400e0600

00082548 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82548:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8254c:	4b01      	ldr	r3, [pc, #4]	; (82554 <pmc_disable_pllack+0xc>)
   8254e:	629a      	str	r2, [r3, #40]	; 0x28
   82550:	4770      	bx	lr
   82552:	bf00      	nop
   82554:	400e0600 	.word	0x400e0600

00082558 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82558:	4b02      	ldr	r3, [pc, #8]	; (82564 <pmc_is_locked_pllack+0xc>)
   8255a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8255c:	f000 0002 	and.w	r0, r0, #2
   82560:	4770      	bx	lr
   82562:	bf00      	nop
   82564:	400e0600 	.word	0x400e0600

00082568 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   82568:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8256c:	4b05      	ldr	r3, [pc, #20]	; (82584 <pmc_enable_periph_clk+0x1c>)
   8256e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   82572:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   82576:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   8257a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   8257e:	2000      	movs	r0, #0
   82580:	4770      	bx	lr
   82582:	bf00      	nop
   82584:	400e0600 	.word	0x400e0600

00082588 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82588:	e7fe      	b.n	82588 <Dummy_Handler>
	...

0008258c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8258c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8258e:	4b1c      	ldr	r3, [pc, #112]	; (82600 <Reset_Handler+0x74>)
   82590:	4a1c      	ldr	r2, [pc, #112]	; (82604 <Reset_Handler+0x78>)
   82592:	429a      	cmp	r2, r3
   82594:	d010      	beq.n	825b8 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   82596:	4b1c      	ldr	r3, [pc, #112]	; (82608 <Reset_Handler+0x7c>)
   82598:	4a19      	ldr	r2, [pc, #100]	; (82600 <Reset_Handler+0x74>)
   8259a:	429a      	cmp	r2, r3
   8259c:	d20c      	bcs.n	825b8 <Reset_Handler+0x2c>
   8259e:	3b01      	subs	r3, #1
   825a0:	1a9b      	subs	r3, r3, r2
   825a2:	f023 0303 	bic.w	r3, r3, #3
   825a6:	3304      	adds	r3, #4
   825a8:	4413      	add	r3, r2
   825aa:	4916      	ldr	r1, [pc, #88]	; (82604 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   825ac:	f851 0b04 	ldr.w	r0, [r1], #4
   825b0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   825b4:	429a      	cmp	r2, r3
   825b6:	d1f9      	bne.n	825ac <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   825b8:	4b14      	ldr	r3, [pc, #80]	; (8260c <Reset_Handler+0x80>)
   825ba:	4a15      	ldr	r2, [pc, #84]	; (82610 <Reset_Handler+0x84>)
   825bc:	429a      	cmp	r2, r3
   825be:	d20a      	bcs.n	825d6 <Reset_Handler+0x4a>
   825c0:	3b01      	subs	r3, #1
   825c2:	1a9b      	subs	r3, r3, r2
   825c4:	f023 0303 	bic.w	r3, r3, #3
   825c8:	3304      	adds	r3, #4
   825ca:	4413      	add	r3, r2
		*pDest++ = 0;
   825cc:	2100      	movs	r1, #0
   825ce:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   825d2:	4293      	cmp	r3, r2
   825d4:	d1fb      	bne.n	825ce <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   825d6:	4b0f      	ldr	r3, [pc, #60]	; (82614 <Reset_Handler+0x88>)
   825d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   825dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   825e0:	490d      	ldr	r1, [pc, #52]	; (82618 <Reset_Handler+0x8c>)
   825e2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   825e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   825e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   825ec:	d203      	bcs.n	825f6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   825ee:	688b      	ldr	r3, [r1, #8]
   825f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   825f4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   825f6:	4b09      	ldr	r3, [pc, #36]	; (8261c <Reset_Handler+0x90>)
   825f8:	4798      	blx	r3

	/* Branch to main function */
	main();
   825fa:	4b09      	ldr	r3, [pc, #36]	; (82620 <Reset_Handler+0x94>)
   825fc:	4798      	blx	r3
   825fe:	e7fe      	b.n	825fe <Reset_Handler+0x72>
   82600:	20070000 	.word	0x20070000
   82604:	000839d0 	.word	0x000839d0
   82608:	20070974 	.word	0x20070974
   8260c:	2007c40c 	.word	0x2007c40c
   82610:	20070974 	.word	0x20070974
   82614:	00080000 	.word	0x00080000
   82618:	e000ed00 	.word	0xe000ed00
   8261c:	000827c1 	.word	0x000827c1
   82620:	00082789 	.word	0x00082789

00082624 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82624:	4b3d      	ldr	r3, [pc, #244]	; (8271c <SystemCoreClockUpdate+0xf8>)
   82626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82628:	f003 0303 	and.w	r3, r3, #3
   8262c:	2b03      	cmp	r3, #3
   8262e:	d80e      	bhi.n	8264e <SystemCoreClockUpdate+0x2a>
   82630:	e8df f003 	tbb	[pc, r3]
   82634:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82638:	4b39      	ldr	r3, [pc, #228]	; (82720 <SystemCoreClockUpdate+0xfc>)
   8263a:	695b      	ldr	r3, [r3, #20]
   8263c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82640:	bf14      	ite	ne
   82642:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82646:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8264a:	4b36      	ldr	r3, [pc, #216]	; (82724 <SystemCoreClockUpdate+0x100>)
   8264c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8264e:	4b33      	ldr	r3, [pc, #204]	; (8271c <SystemCoreClockUpdate+0xf8>)
   82650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82652:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82656:	2b70      	cmp	r3, #112	; 0x70
   82658:	d057      	beq.n	8270a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8265a:	4b30      	ldr	r3, [pc, #192]	; (8271c <SystemCoreClockUpdate+0xf8>)
   8265c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8265e:	4931      	ldr	r1, [pc, #196]	; (82724 <SystemCoreClockUpdate+0x100>)
   82660:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82664:	680b      	ldr	r3, [r1, #0]
   82666:	40d3      	lsrs	r3, r2
   82668:	600b      	str	r3, [r1, #0]
   8266a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8266c:	4b2b      	ldr	r3, [pc, #172]	; (8271c <SystemCoreClockUpdate+0xf8>)
   8266e:	6a1b      	ldr	r3, [r3, #32]
   82670:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82674:	d003      	beq.n	8267e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82676:	4a2c      	ldr	r2, [pc, #176]	; (82728 <SystemCoreClockUpdate+0x104>)
   82678:	4b2a      	ldr	r3, [pc, #168]	; (82724 <SystemCoreClockUpdate+0x100>)
   8267a:	601a      	str	r2, [r3, #0]
   8267c:	e7e7      	b.n	8264e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8267e:	4a2b      	ldr	r2, [pc, #172]	; (8272c <SystemCoreClockUpdate+0x108>)
   82680:	4b28      	ldr	r3, [pc, #160]	; (82724 <SystemCoreClockUpdate+0x100>)
   82682:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82684:	4b25      	ldr	r3, [pc, #148]	; (8271c <SystemCoreClockUpdate+0xf8>)
   82686:	6a1b      	ldr	r3, [r3, #32]
   82688:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8268c:	2b10      	cmp	r3, #16
   8268e:	d005      	beq.n	8269c <SystemCoreClockUpdate+0x78>
   82690:	2b20      	cmp	r3, #32
   82692:	d1dc      	bne.n	8264e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82694:	4a24      	ldr	r2, [pc, #144]	; (82728 <SystemCoreClockUpdate+0x104>)
   82696:	4b23      	ldr	r3, [pc, #140]	; (82724 <SystemCoreClockUpdate+0x100>)
   82698:	601a      	str	r2, [r3, #0]
				break;
   8269a:	e7d8      	b.n	8264e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8269c:	4a24      	ldr	r2, [pc, #144]	; (82730 <SystemCoreClockUpdate+0x10c>)
   8269e:	4b21      	ldr	r3, [pc, #132]	; (82724 <SystemCoreClockUpdate+0x100>)
   826a0:	601a      	str	r2, [r3, #0]
				break;
   826a2:	e7d4      	b.n	8264e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   826a4:	4b1d      	ldr	r3, [pc, #116]	; (8271c <SystemCoreClockUpdate+0xf8>)
   826a6:	6a1b      	ldr	r3, [r3, #32]
   826a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   826ac:	d00c      	beq.n	826c8 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   826ae:	4a1e      	ldr	r2, [pc, #120]	; (82728 <SystemCoreClockUpdate+0x104>)
   826b0:	4b1c      	ldr	r3, [pc, #112]	; (82724 <SystemCoreClockUpdate+0x100>)
   826b2:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   826b4:	4b19      	ldr	r3, [pc, #100]	; (8271c <SystemCoreClockUpdate+0xf8>)
   826b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826b8:	f003 0303 	and.w	r3, r3, #3
   826bc:	2b02      	cmp	r3, #2
   826be:	d016      	beq.n	826ee <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   826c0:	4a1c      	ldr	r2, [pc, #112]	; (82734 <SystemCoreClockUpdate+0x110>)
   826c2:	4b18      	ldr	r3, [pc, #96]	; (82724 <SystemCoreClockUpdate+0x100>)
   826c4:	601a      	str	r2, [r3, #0]
   826c6:	e7c2      	b.n	8264e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   826c8:	4a18      	ldr	r2, [pc, #96]	; (8272c <SystemCoreClockUpdate+0x108>)
   826ca:	4b16      	ldr	r3, [pc, #88]	; (82724 <SystemCoreClockUpdate+0x100>)
   826cc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   826ce:	4b13      	ldr	r3, [pc, #76]	; (8271c <SystemCoreClockUpdate+0xf8>)
   826d0:	6a1b      	ldr	r3, [r3, #32]
   826d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   826d6:	2b10      	cmp	r3, #16
   826d8:	d005      	beq.n	826e6 <SystemCoreClockUpdate+0xc2>
   826da:	2b20      	cmp	r3, #32
   826dc:	d1ea      	bne.n	826b4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   826de:	4a12      	ldr	r2, [pc, #72]	; (82728 <SystemCoreClockUpdate+0x104>)
   826e0:	4b10      	ldr	r3, [pc, #64]	; (82724 <SystemCoreClockUpdate+0x100>)
   826e2:	601a      	str	r2, [r3, #0]
				break;
   826e4:	e7e6      	b.n	826b4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   826e6:	4a12      	ldr	r2, [pc, #72]	; (82730 <SystemCoreClockUpdate+0x10c>)
   826e8:	4b0e      	ldr	r3, [pc, #56]	; (82724 <SystemCoreClockUpdate+0x100>)
   826ea:	601a      	str	r2, [r3, #0]
				break;
   826ec:	e7e2      	b.n	826b4 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826ee:	4a0b      	ldr	r2, [pc, #44]	; (8271c <SystemCoreClockUpdate+0xf8>)
   826f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   826f4:	480b      	ldr	r0, [pc, #44]	; (82724 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826f6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   826fa:	6803      	ldr	r3, [r0, #0]
   826fc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82700:	b2d2      	uxtb	r2, r2
   82702:	fbb3 f3f2 	udiv	r3, r3, r2
   82706:	6003      	str	r3, [r0, #0]
   82708:	e7a1      	b.n	8264e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8270a:	4a06      	ldr	r2, [pc, #24]	; (82724 <SystemCoreClockUpdate+0x100>)
   8270c:	6813      	ldr	r3, [r2, #0]
   8270e:	490a      	ldr	r1, [pc, #40]	; (82738 <SystemCoreClockUpdate+0x114>)
   82710:	fba1 1303 	umull	r1, r3, r1, r3
   82714:	085b      	lsrs	r3, r3, #1
   82716:	6013      	str	r3, [r2, #0]
   82718:	4770      	bx	lr
   8271a:	bf00      	nop
   8271c:	400e0600 	.word	0x400e0600
   82720:	400e1a10 	.word	0x400e1a10
   82724:	20070130 	.word	0x20070130
   82728:	00b71b00 	.word	0x00b71b00
   8272c:	003d0900 	.word	0x003d0900
   82730:	007a1200 	.word	0x007a1200
   82734:	0e4e1c00 	.word	0x0e4e1c00
   82738:	aaaaaaab 	.word	0xaaaaaaab

0008273c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8273c:	4b0a      	ldr	r3, [pc, #40]	; (82768 <_sbrk+0x2c>)
   8273e:	681b      	ldr	r3, [r3, #0]
   82740:	b153      	cbz	r3, 82758 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82742:	4b09      	ldr	r3, [pc, #36]	; (82768 <_sbrk+0x2c>)
   82744:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82746:	181a      	adds	r2, r3, r0
   82748:	4908      	ldr	r1, [pc, #32]	; (8276c <_sbrk+0x30>)
   8274a:	4291      	cmp	r1, r2
   8274c:	db08      	blt.n	82760 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8274e:	4610      	mov	r0, r2
   82750:	4a05      	ldr	r2, [pc, #20]	; (82768 <_sbrk+0x2c>)
   82752:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82754:	4618      	mov	r0, r3
   82756:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82758:	4a05      	ldr	r2, [pc, #20]	; (82770 <_sbrk+0x34>)
   8275a:	4b03      	ldr	r3, [pc, #12]	; (82768 <_sbrk+0x2c>)
   8275c:	601a      	str	r2, [r3, #0]
   8275e:	e7f0      	b.n	82742 <_sbrk+0x6>
		return (caddr_t) -1;	
   82760:	f04f 30ff 	mov.w	r0, #4294967295
}
   82764:	4770      	bx	lr
   82766:	bf00      	nop
   82768:	2007c358 	.word	0x2007c358
   8276c:	20087ffc 	.word	0x20087ffc
   82770:	2007e410 	.word	0x2007e410

00082774 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82774:	f04f 30ff 	mov.w	r0, #4294967295
   82778:	4770      	bx	lr

0008277a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8277a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8277e:	604b      	str	r3, [r1, #4]

	return 0;
}
   82780:	2000      	movs	r0, #0
   82782:	4770      	bx	lr

00082784 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82784:	2000      	movs	r0, #0
   82786:	4770      	bx	lr

00082788 <main>:
#include <command_po.h>
#include <tc.h>


int main (void)
{
   82788:	b508      	push	{r3, lr}
	/* System clock initialization */
	sysclk_init();
   8278a:	4b07      	ldr	r3, [pc, #28]	; (827a8 <main+0x20>)
   8278c:	4798      	blx	r3
	
	/* Board peripherals initialization */
	board_init();
   8278e:	4b07      	ldr	r3, [pc, #28]	; (827ac <main+0x24>)
   82790:	4798      	blx	r3
	
	/* Init tasks */
	init_blink();
   82792:	4b07      	ldr	r3, [pc, #28]	; (827b0 <main+0x28>)
   82794:	4798      	blx	r3
	init_cmd();
   82796:	4b07      	ldr	r3, [pc, #28]	; (827b4 <main+0x2c>)
   82798:	4798      	blx	r3
	init_tc();
   8279a:	4b07      	ldr	r3, [pc, #28]	; (827b8 <main+0x30>)
   8279c:	4798      	blx	r3
	
	/* Start scheduler */
	vTaskStartScheduler();
   8279e:	4b07      	ldr	r3, [pc, #28]	; (827bc <main+0x34>)
   827a0:	4798      	blx	r3
	
	/* Should never reach here ... */
	return 1;
}
   827a2:	2001      	movs	r0, #1
   827a4:	bd08      	pop	{r3, pc}
   827a6:	bf00      	nop
   827a8:	000820f1 	.word	0x000820f1
   827ac:	00082155 	.word	0x00082155
   827b0:	000804f9 	.word	0x000804f9
   827b4:	00080691 	.word	0x00080691
   827b8:	000802a9 	.word	0x000802a9
   827bc:	000815a5 	.word	0x000815a5

000827c0 <__libc_init_array>:
   827c0:	b570      	push	{r4, r5, r6, lr}
   827c2:	4e0f      	ldr	r6, [pc, #60]	; (82800 <__libc_init_array+0x40>)
   827c4:	4d0f      	ldr	r5, [pc, #60]	; (82804 <__libc_init_array+0x44>)
   827c6:	1b76      	subs	r6, r6, r5
   827c8:	10b6      	asrs	r6, r6, #2
   827ca:	bf18      	it	ne
   827cc:	2400      	movne	r4, #0
   827ce:	d005      	beq.n	827dc <__libc_init_array+0x1c>
   827d0:	3401      	adds	r4, #1
   827d2:	f855 3b04 	ldr.w	r3, [r5], #4
   827d6:	4798      	blx	r3
   827d8:	42a6      	cmp	r6, r4
   827da:	d1f9      	bne.n	827d0 <__libc_init_array+0x10>
   827dc:	4e0a      	ldr	r6, [pc, #40]	; (82808 <__libc_init_array+0x48>)
   827de:	4d0b      	ldr	r5, [pc, #44]	; (8280c <__libc_init_array+0x4c>)
   827e0:	f001 f8e4 	bl	839ac <_init>
   827e4:	1b76      	subs	r6, r6, r5
   827e6:	10b6      	asrs	r6, r6, #2
   827e8:	bf18      	it	ne
   827ea:	2400      	movne	r4, #0
   827ec:	d006      	beq.n	827fc <__libc_init_array+0x3c>
   827ee:	3401      	adds	r4, #1
   827f0:	f855 3b04 	ldr.w	r3, [r5], #4
   827f4:	4798      	blx	r3
   827f6:	42a6      	cmp	r6, r4
   827f8:	d1f9      	bne.n	827ee <__libc_init_array+0x2e>
   827fa:	bd70      	pop	{r4, r5, r6, pc}
   827fc:	bd70      	pop	{r4, r5, r6, pc}
   827fe:	bf00      	nop
   82800:	000839b8 	.word	0x000839b8
   82804:	000839b8 	.word	0x000839b8
   82808:	000839c0 	.word	0x000839c0
   8280c:	000839b8 	.word	0x000839b8

00082810 <memcpy>:
   82810:	4684      	mov	ip, r0
   82812:	ea41 0300 	orr.w	r3, r1, r0
   82816:	f013 0303 	ands.w	r3, r3, #3
   8281a:	d149      	bne.n	828b0 <memcpy+0xa0>
   8281c:	3a40      	subs	r2, #64	; 0x40
   8281e:	d323      	bcc.n	82868 <memcpy+0x58>
   82820:	680b      	ldr	r3, [r1, #0]
   82822:	6003      	str	r3, [r0, #0]
   82824:	684b      	ldr	r3, [r1, #4]
   82826:	6043      	str	r3, [r0, #4]
   82828:	688b      	ldr	r3, [r1, #8]
   8282a:	6083      	str	r3, [r0, #8]
   8282c:	68cb      	ldr	r3, [r1, #12]
   8282e:	60c3      	str	r3, [r0, #12]
   82830:	690b      	ldr	r3, [r1, #16]
   82832:	6103      	str	r3, [r0, #16]
   82834:	694b      	ldr	r3, [r1, #20]
   82836:	6143      	str	r3, [r0, #20]
   82838:	698b      	ldr	r3, [r1, #24]
   8283a:	6183      	str	r3, [r0, #24]
   8283c:	69cb      	ldr	r3, [r1, #28]
   8283e:	61c3      	str	r3, [r0, #28]
   82840:	6a0b      	ldr	r3, [r1, #32]
   82842:	6203      	str	r3, [r0, #32]
   82844:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82846:	6243      	str	r3, [r0, #36]	; 0x24
   82848:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8284a:	6283      	str	r3, [r0, #40]	; 0x28
   8284c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8284e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82850:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82852:	6303      	str	r3, [r0, #48]	; 0x30
   82854:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82856:	6343      	str	r3, [r0, #52]	; 0x34
   82858:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8285a:	6383      	str	r3, [r0, #56]	; 0x38
   8285c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8285e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82860:	3040      	adds	r0, #64	; 0x40
   82862:	3140      	adds	r1, #64	; 0x40
   82864:	3a40      	subs	r2, #64	; 0x40
   82866:	d2db      	bcs.n	82820 <memcpy+0x10>
   82868:	3230      	adds	r2, #48	; 0x30
   8286a:	d30b      	bcc.n	82884 <memcpy+0x74>
   8286c:	680b      	ldr	r3, [r1, #0]
   8286e:	6003      	str	r3, [r0, #0]
   82870:	684b      	ldr	r3, [r1, #4]
   82872:	6043      	str	r3, [r0, #4]
   82874:	688b      	ldr	r3, [r1, #8]
   82876:	6083      	str	r3, [r0, #8]
   82878:	68cb      	ldr	r3, [r1, #12]
   8287a:	60c3      	str	r3, [r0, #12]
   8287c:	3010      	adds	r0, #16
   8287e:	3110      	adds	r1, #16
   82880:	3a10      	subs	r2, #16
   82882:	d2f3      	bcs.n	8286c <memcpy+0x5c>
   82884:	320c      	adds	r2, #12
   82886:	d305      	bcc.n	82894 <memcpy+0x84>
   82888:	f851 3b04 	ldr.w	r3, [r1], #4
   8288c:	f840 3b04 	str.w	r3, [r0], #4
   82890:	3a04      	subs	r2, #4
   82892:	d2f9      	bcs.n	82888 <memcpy+0x78>
   82894:	3204      	adds	r2, #4
   82896:	d008      	beq.n	828aa <memcpy+0x9a>
   82898:	07d2      	lsls	r2, r2, #31
   8289a:	bf1c      	itt	ne
   8289c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   828a0:	f800 3b01 	strbne.w	r3, [r0], #1
   828a4:	d301      	bcc.n	828aa <memcpy+0x9a>
   828a6:	880b      	ldrh	r3, [r1, #0]
   828a8:	8003      	strh	r3, [r0, #0]
   828aa:	4660      	mov	r0, ip
   828ac:	4770      	bx	lr
   828ae:	bf00      	nop
   828b0:	2a08      	cmp	r2, #8
   828b2:	d313      	bcc.n	828dc <memcpy+0xcc>
   828b4:	078b      	lsls	r3, r1, #30
   828b6:	d0b1      	beq.n	8281c <memcpy+0xc>
   828b8:	f010 0303 	ands.w	r3, r0, #3
   828bc:	d0ae      	beq.n	8281c <memcpy+0xc>
   828be:	f1c3 0304 	rsb	r3, r3, #4
   828c2:	1ad2      	subs	r2, r2, r3
   828c4:	07db      	lsls	r3, r3, #31
   828c6:	bf1c      	itt	ne
   828c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   828cc:	f800 3b01 	strbne.w	r3, [r0], #1
   828d0:	d3a4      	bcc.n	8281c <memcpy+0xc>
   828d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   828d6:	f820 3b02 	strh.w	r3, [r0], #2
   828da:	e79f      	b.n	8281c <memcpy+0xc>
   828dc:	3a04      	subs	r2, #4
   828de:	d3d9      	bcc.n	82894 <memcpy+0x84>
   828e0:	3a01      	subs	r2, #1
   828e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   828e6:	f800 3b01 	strb.w	r3, [r0], #1
   828ea:	d2f9      	bcs.n	828e0 <memcpy+0xd0>
   828ec:	780b      	ldrb	r3, [r1, #0]
   828ee:	7003      	strb	r3, [r0, #0]
   828f0:	784b      	ldrb	r3, [r1, #1]
   828f2:	7043      	strb	r3, [r0, #1]
   828f4:	788b      	ldrb	r3, [r1, #2]
   828f6:	7083      	strb	r3, [r0, #2]
   828f8:	4660      	mov	r0, ip
   828fa:	4770      	bx	lr

000828fc <memset>:
   828fc:	b470      	push	{r4, r5, r6}
   828fe:	0786      	lsls	r6, r0, #30
   82900:	d046      	beq.n	82990 <memset+0x94>
   82902:	1e54      	subs	r4, r2, #1
   82904:	2a00      	cmp	r2, #0
   82906:	d041      	beq.n	8298c <memset+0x90>
   82908:	b2ca      	uxtb	r2, r1
   8290a:	4603      	mov	r3, r0
   8290c:	e002      	b.n	82914 <memset+0x18>
   8290e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82912:	d33b      	bcc.n	8298c <memset+0x90>
   82914:	f803 2b01 	strb.w	r2, [r3], #1
   82918:	079d      	lsls	r5, r3, #30
   8291a:	d1f8      	bne.n	8290e <memset+0x12>
   8291c:	2c03      	cmp	r4, #3
   8291e:	d92e      	bls.n	8297e <memset+0x82>
   82920:	b2cd      	uxtb	r5, r1
   82922:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82926:	2c0f      	cmp	r4, #15
   82928:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8292c:	d919      	bls.n	82962 <memset+0x66>
   8292e:	4626      	mov	r6, r4
   82930:	f103 0210 	add.w	r2, r3, #16
   82934:	3e10      	subs	r6, #16
   82936:	2e0f      	cmp	r6, #15
   82938:	f842 5c10 	str.w	r5, [r2, #-16]
   8293c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82940:	f842 5c08 	str.w	r5, [r2, #-8]
   82944:	f842 5c04 	str.w	r5, [r2, #-4]
   82948:	f102 0210 	add.w	r2, r2, #16
   8294c:	d8f2      	bhi.n	82934 <memset+0x38>
   8294e:	f1a4 0210 	sub.w	r2, r4, #16
   82952:	f022 020f 	bic.w	r2, r2, #15
   82956:	f004 040f 	and.w	r4, r4, #15
   8295a:	3210      	adds	r2, #16
   8295c:	2c03      	cmp	r4, #3
   8295e:	4413      	add	r3, r2
   82960:	d90d      	bls.n	8297e <memset+0x82>
   82962:	461e      	mov	r6, r3
   82964:	4622      	mov	r2, r4
   82966:	3a04      	subs	r2, #4
   82968:	2a03      	cmp	r2, #3
   8296a:	f846 5b04 	str.w	r5, [r6], #4
   8296e:	d8fa      	bhi.n	82966 <memset+0x6a>
   82970:	1f22      	subs	r2, r4, #4
   82972:	f022 0203 	bic.w	r2, r2, #3
   82976:	3204      	adds	r2, #4
   82978:	4413      	add	r3, r2
   8297a:	f004 0403 	and.w	r4, r4, #3
   8297e:	b12c      	cbz	r4, 8298c <memset+0x90>
   82980:	b2c9      	uxtb	r1, r1
   82982:	441c      	add	r4, r3
   82984:	f803 1b01 	strb.w	r1, [r3], #1
   82988:	429c      	cmp	r4, r3
   8298a:	d1fb      	bne.n	82984 <memset+0x88>
   8298c:	bc70      	pop	{r4, r5, r6}
   8298e:	4770      	bx	lr
   82990:	4614      	mov	r4, r2
   82992:	4603      	mov	r3, r0
   82994:	e7c2      	b.n	8291c <memset+0x20>
   82996:	bf00      	nop

00082998 <setbuf>:
   82998:	2900      	cmp	r1, #0
   8299a:	bf0c      	ite	eq
   8299c:	2202      	moveq	r2, #2
   8299e:	2200      	movne	r2, #0
   829a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   829a4:	f000 b800 	b.w	829a8 <setvbuf>

000829a8 <setvbuf>:
   829a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   829ac:	4d61      	ldr	r5, [pc, #388]	; (82b34 <setvbuf+0x18c>)
   829ae:	b083      	sub	sp, #12
   829b0:	682d      	ldr	r5, [r5, #0]
   829b2:	4604      	mov	r4, r0
   829b4:	460f      	mov	r7, r1
   829b6:	4690      	mov	r8, r2
   829b8:	461e      	mov	r6, r3
   829ba:	b115      	cbz	r5, 829c2 <setvbuf+0x1a>
   829bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   829be:	2b00      	cmp	r3, #0
   829c0:	d064      	beq.n	82a8c <setvbuf+0xe4>
   829c2:	f1b8 0f02 	cmp.w	r8, #2
   829c6:	d006      	beq.n	829d6 <setvbuf+0x2e>
   829c8:	f1b8 0f01 	cmp.w	r8, #1
   829cc:	f200 809f 	bhi.w	82b0e <setvbuf+0x166>
   829d0:	2e00      	cmp	r6, #0
   829d2:	f2c0 809c 	blt.w	82b0e <setvbuf+0x166>
   829d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   829d8:	07d8      	lsls	r0, r3, #31
   829da:	d534      	bpl.n	82a46 <setvbuf+0x9e>
   829dc:	4621      	mov	r1, r4
   829de:	4628      	mov	r0, r5
   829e0:	f000 f956 	bl	82c90 <_fflush_r>
   829e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   829e6:	b141      	cbz	r1, 829fa <setvbuf+0x52>
   829e8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   829ec:	4299      	cmp	r1, r3
   829ee:	d002      	beq.n	829f6 <setvbuf+0x4e>
   829f0:	4628      	mov	r0, r5
   829f2:	f000 fa4b 	bl	82e8c <_free_r>
   829f6:	2300      	movs	r3, #0
   829f8:	6323      	str	r3, [r4, #48]	; 0x30
   829fa:	2200      	movs	r2, #0
   829fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a00:	61a2      	str	r2, [r4, #24]
   82a02:	6062      	str	r2, [r4, #4]
   82a04:	061a      	lsls	r2, r3, #24
   82a06:	d43a      	bmi.n	82a7e <setvbuf+0xd6>
   82a08:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82a0c:	f023 0303 	bic.w	r3, r3, #3
   82a10:	f1b8 0f02 	cmp.w	r8, #2
   82a14:	81a3      	strh	r3, [r4, #12]
   82a16:	d01d      	beq.n	82a54 <setvbuf+0xac>
   82a18:	ab01      	add	r3, sp, #4
   82a1a:	466a      	mov	r2, sp
   82a1c:	4621      	mov	r1, r4
   82a1e:	4628      	mov	r0, r5
   82a20:	f000 fb4a 	bl	830b8 <__swhatbuf_r>
   82a24:	89a3      	ldrh	r3, [r4, #12]
   82a26:	4318      	orrs	r0, r3
   82a28:	81a0      	strh	r0, [r4, #12]
   82a2a:	2e00      	cmp	r6, #0
   82a2c:	d132      	bne.n	82a94 <setvbuf+0xec>
   82a2e:	9e00      	ldr	r6, [sp, #0]
   82a30:	4630      	mov	r0, r6
   82a32:	f000 fb6f 	bl	83114 <malloc>
   82a36:	4607      	mov	r7, r0
   82a38:	2800      	cmp	r0, #0
   82a3a:	d06b      	beq.n	82b14 <setvbuf+0x16c>
   82a3c:	89a3      	ldrh	r3, [r4, #12]
   82a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a42:	81a3      	strh	r3, [r4, #12]
   82a44:	e028      	b.n	82a98 <setvbuf+0xf0>
   82a46:	89a3      	ldrh	r3, [r4, #12]
   82a48:	0599      	lsls	r1, r3, #22
   82a4a:	d4c7      	bmi.n	829dc <setvbuf+0x34>
   82a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82a4e:	f000 fb2f 	bl	830b0 <__retarget_lock_acquire_recursive>
   82a52:	e7c3      	b.n	829dc <setvbuf+0x34>
   82a54:	2500      	movs	r5, #0
   82a56:	2600      	movs	r6, #0
   82a58:	2001      	movs	r0, #1
   82a5a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a60:	f043 0302 	orr.w	r3, r3, #2
   82a64:	60a6      	str	r6, [r4, #8]
   82a66:	07ce      	lsls	r6, r1, #31
   82a68:	81a3      	strh	r3, [r4, #12]
   82a6a:	6160      	str	r0, [r4, #20]
   82a6c:	6022      	str	r2, [r4, #0]
   82a6e:	6122      	str	r2, [r4, #16]
   82a70:	d401      	bmi.n	82a76 <setvbuf+0xce>
   82a72:	0598      	lsls	r0, r3, #22
   82a74:	d53e      	bpl.n	82af4 <setvbuf+0x14c>
   82a76:	4628      	mov	r0, r5
   82a78:	b003      	add	sp, #12
   82a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82a7e:	6921      	ldr	r1, [r4, #16]
   82a80:	4628      	mov	r0, r5
   82a82:	f000 fa03 	bl	82e8c <_free_r>
   82a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a8a:	e7bd      	b.n	82a08 <setvbuf+0x60>
   82a8c:	4628      	mov	r0, r5
   82a8e:	f000 f957 	bl	82d40 <__sinit>
   82a92:	e796      	b.n	829c2 <setvbuf+0x1a>
   82a94:	2f00      	cmp	r7, #0
   82a96:	d0cb      	beq.n	82a30 <setvbuf+0x88>
   82a98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	d033      	beq.n	82b06 <setvbuf+0x15e>
   82a9e:	9b00      	ldr	r3, [sp, #0]
   82aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82aa4:	429e      	cmp	r6, r3
   82aa6:	bf1c      	itt	ne
   82aa8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82aac:	81a2      	strhne	r2, [r4, #12]
   82aae:	f1b8 0f01 	cmp.w	r8, #1
   82ab2:	bf04      	itt	eq
   82ab4:	f042 0201 	orreq.w	r2, r2, #1
   82ab8:	81a2      	strheq	r2, [r4, #12]
   82aba:	b292      	uxth	r2, r2
   82abc:	f012 0308 	ands.w	r3, r2, #8
   82ac0:	6027      	str	r7, [r4, #0]
   82ac2:	6127      	str	r7, [r4, #16]
   82ac4:	6166      	str	r6, [r4, #20]
   82ac6:	d00e      	beq.n	82ae6 <setvbuf+0x13e>
   82ac8:	07d1      	lsls	r1, r2, #31
   82aca:	d51a      	bpl.n	82b02 <setvbuf+0x15a>
   82acc:	2300      	movs	r3, #0
   82ace:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82ad0:	4276      	negs	r6, r6
   82ad2:	f015 0501 	ands.w	r5, r5, #1
   82ad6:	61a6      	str	r6, [r4, #24]
   82ad8:	60a3      	str	r3, [r4, #8]
   82ada:	d009      	beq.n	82af0 <setvbuf+0x148>
   82adc:	2500      	movs	r5, #0
   82ade:	4628      	mov	r0, r5
   82ae0:	b003      	add	sp, #12
   82ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82ae6:	60a3      	str	r3, [r4, #8]
   82ae8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82aea:	f015 0501 	ands.w	r5, r5, #1
   82aee:	d1f5      	bne.n	82adc <setvbuf+0x134>
   82af0:	0593      	lsls	r3, r2, #22
   82af2:	d4c0      	bmi.n	82a76 <setvbuf+0xce>
   82af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82af6:	f000 fadd 	bl	830b4 <__retarget_lock_release_recursive>
   82afa:	4628      	mov	r0, r5
   82afc:	b003      	add	sp, #12
   82afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82b02:	60a6      	str	r6, [r4, #8]
   82b04:	e7f0      	b.n	82ae8 <setvbuf+0x140>
   82b06:	4628      	mov	r0, r5
   82b08:	f000 f91a 	bl	82d40 <__sinit>
   82b0c:	e7c7      	b.n	82a9e <setvbuf+0xf6>
   82b0e:	f04f 35ff 	mov.w	r5, #4294967295
   82b12:	e7b0      	b.n	82a76 <setvbuf+0xce>
   82b14:	f8dd 9000 	ldr.w	r9, [sp]
   82b18:	45b1      	cmp	r9, r6
   82b1a:	d004      	beq.n	82b26 <setvbuf+0x17e>
   82b1c:	4648      	mov	r0, r9
   82b1e:	f000 faf9 	bl	83114 <malloc>
   82b22:	4607      	mov	r7, r0
   82b24:	b920      	cbnz	r0, 82b30 <setvbuf+0x188>
   82b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b2a:	f04f 35ff 	mov.w	r5, #4294967295
   82b2e:	e792      	b.n	82a56 <setvbuf+0xae>
   82b30:	464e      	mov	r6, r9
   82b32:	e783      	b.n	82a3c <setvbuf+0x94>
   82b34:	20070134 	.word	0x20070134

00082b38 <register_fini>:
   82b38:	4b02      	ldr	r3, [pc, #8]	; (82b44 <register_fini+0xc>)
   82b3a:	b113      	cbz	r3, 82b42 <register_fini+0xa>
   82b3c:	4802      	ldr	r0, [pc, #8]	; (82b48 <register_fini+0x10>)
   82b3e:	f000 b805 	b.w	82b4c <atexit>
   82b42:	4770      	bx	lr
   82b44:	00000000 	.word	0x00000000
   82b48:	00082db9 	.word	0x00082db9

00082b4c <atexit>:
   82b4c:	2300      	movs	r3, #0
   82b4e:	4601      	mov	r1, r0
   82b50:	461a      	mov	r2, r3
   82b52:	4618      	mov	r0, r3
   82b54:	f000 be00 	b.w	83758 <__register_exitproc>

00082b58 <__sflush_r>:
   82b58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b60:	b29a      	uxth	r2, r3
   82b62:	460d      	mov	r5, r1
   82b64:	0711      	lsls	r1, r2, #28
   82b66:	4680      	mov	r8, r0
   82b68:	d43a      	bmi.n	82be0 <__sflush_r+0x88>
   82b6a:	686a      	ldr	r2, [r5, #4]
   82b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b70:	2a00      	cmp	r2, #0
   82b72:	81ab      	strh	r3, [r5, #12]
   82b74:	dd70      	ble.n	82c58 <__sflush_r+0x100>
   82b76:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82b78:	2c00      	cmp	r4, #0
   82b7a:	d04a      	beq.n	82c12 <__sflush_r+0xba>
   82b7c:	2200      	movs	r2, #0
   82b7e:	b29b      	uxth	r3, r3
   82b80:	f8d8 6000 	ldr.w	r6, [r8]
   82b84:	f8c8 2000 	str.w	r2, [r8]
   82b88:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82b8c:	d068      	beq.n	82c60 <__sflush_r+0x108>
   82b8e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82b90:	075f      	lsls	r7, r3, #29
   82b92:	d505      	bpl.n	82ba0 <__sflush_r+0x48>
   82b94:	6869      	ldr	r1, [r5, #4]
   82b96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82b98:	1a52      	subs	r2, r2, r1
   82b9a:	b10b      	cbz	r3, 82ba0 <__sflush_r+0x48>
   82b9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82b9e:	1ad2      	subs	r2, r2, r3
   82ba0:	2300      	movs	r3, #0
   82ba2:	69e9      	ldr	r1, [r5, #28]
   82ba4:	4640      	mov	r0, r8
   82ba6:	47a0      	blx	r4
   82ba8:	1c44      	adds	r4, r0, #1
   82baa:	d03d      	beq.n	82c28 <__sflush_r+0xd0>
   82bac:	2100      	movs	r1, #0
   82bae:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82bb2:	692a      	ldr	r2, [r5, #16]
   82bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82bb8:	81ab      	strh	r3, [r5, #12]
   82bba:	04db      	lsls	r3, r3, #19
   82bbc:	6069      	str	r1, [r5, #4]
   82bbe:	602a      	str	r2, [r5, #0]
   82bc0:	d448      	bmi.n	82c54 <__sflush_r+0xfc>
   82bc2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82bc4:	f8c8 6000 	str.w	r6, [r8]
   82bc8:	b319      	cbz	r1, 82c12 <__sflush_r+0xba>
   82bca:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82bce:	4299      	cmp	r1, r3
   82bd0:	d002      	beq.n	82bd8 <__sflush_r+0x80>
   82bd2:	4640      	mov	r0, r8
   82bd4:	f000 f95a 	bl	82e8c <_free_r>
   82bd8:	2000      	movs	r0, #0
   82bda:	6328      	str	r0, [r5, #48]	; 0x30
   82bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82be0:	692e      	ldr	r6, [r5, #16]
   82be2:	b1b6      	cbz	r6, 82c12 <__sflush_r+0xba>
   82be4:	0791      	lsls	r1, r2, #30
   82be6:	bf18      	it	ne
   82be8:	2300      	movne	r3, #0
   82bea:	682c      	ldr	r4, [r5, #0]
   82bec:	bf08      	it	eq
   82bee:	696b      	ldreq	r3, [r5, #20]
   82bf0:	602e      	str	r6, [r5, #0]
   82bf2:	1ba4      	subs	r4, r4, r6
   82bf4:	60ab      	str	r3, [r5, #8]
   82bf6:	e00a      	b.n	82c0e <__sflush_r+0xb6>
   82bf8:	4623      	mov	r3, r4
   82bfa:	4632      	mov	r2, r6
   82bfc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82bfe:	69e9      	ldr	r1, [r5, #28]
   82c00:	4640      	mov	r0, r8
   82c02:	47b8      	blx	r7
   82c04:	2800      	cmp	r0, #0
   82c06:	eba4 0400 	sub.w	r4, r4, r0
   82c0a:	4406      	add	r6, r0
   82c0c:	dd04      	ble.n	82c18 <__sflush_r+0xc0>
   82c0e:	2c00      	cmp	r4, #0
   82c10:	dcf2      	bgt.n	82bf8 <__sflush_r+0xa0>
   82c12:	2000      	movs	r0, #0
   82c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c18:	89ab      	ldrh	r3, [r5, #12]
   82c1a:	f04f 30ff 	mov.w	r0, #4294967295
   82c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c22:	81ab      	strh	r3, [r5, #12]
   82c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c28:	f8d8 4000 	ldr.w	r4, [r8]
   82c2c:	2c1d      	cmp	r4, #29
   82c2e:	d8f3      	bhi.n	82c18 <__sflush_r+0xc0>
   82c30:	4b16      	ldr	r3, [pc, #88]	; (82c8c <__sflush_r+0x134>)
   82c32:	40e3      	lsrs	r3, r4
   82c34:	43db      	mvns	r3, r3
   82c36:	f013 0301 	ands.w	r3, r3, #1
   82c3a:	d1ed      	bne.n	82c18 <__sflush_r+0xc0>
   82c3c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82c40:	6929      	ldr	r1, [r5, #16]
   82c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82c46:	81aa      	strh	r2, [r5, #12]
   82c48:	04d2      	lsls	r2, r2, #19
   82c4a:	606b      	str	r3, [r5, #4]
   82c4c:	6029      	str	r1, [r5, #0]
   82c4e:	d5b8      	bpl.n	82bc2 <__sflush_r+0x6a>
   82c50:	2c00      	cmp	r4, #0
   82c52:	d1b6      	bne.n	82bc2 <__sflush_r+0x6a>
   82c54:	6528      	str	r0, [r5, #80]	; 0x50
   82c56:	e7b4      	b.n	82bc2 <__sflush_r+0x6a>
   82c58:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82c5a:	2a00      	cmp	r2, #0
   82c5c:	dc8b      	bgt.n	82b76 <__sflush_r+0x1e>
   82c5e:	e7d8      	b.n	82c12 <__sflush_r+0xba>
   82c60:	2301      	movs	r3, #1
   82c62:	69e9      	ldr	r1, [r5, #28]
   82c64:	4640      	mov	r0, r8
   82c66:	47a0      	blx	r4
   82c68:	1c43      	adds	r3, r0, #1
   82c6a:	4602      	mov	r2, r0
   82c6c:	d002      	beq.n	82c74 <__sflush_r+0x11c>
   82c6e:	89ab      	ldrh	r3, [r5, #12]
   82c70:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82c72:	e78d      	b.n	82b90 <__sflush_r+0x38>
   82c74:	f8d8 3000 	ldr.w	r3, [r8]
   82c78:	2b00      	cmp	r3, #0
   82c7a:	d0f8      	beq.n	82c6e <__sflush_r+0x116>
   82c7c:	2b1d      	cmp	r3, #29
   82c7e:	d001      	beq.n	82c84 <__sflush_r+0x12c>
   82c80:	2b16      	cmp	r3, #22
   82c82:	d1c9      	bne.n	82c18 <__sflush_r+0xc0>
   82c84:	f8c8 6000 	str.w	r6, [r8]
   82c88:	e7c3      	b.n	82c12 <__sflush_r+0xba>
   82c8a:	bf00      	nop
   82c8c:	20400001 	.word	0x20400001

00082c90 <_fflush_r>:
   82c90:	b538      	push	{r3, r4, r5, lr}
   82c92:	460d      	mov	r5, r1
   82c94:	4604      	mov	r4, r0
   82c96:	b108      	cbz	r0, 82c9c <_fflush_r+0xc>
   82c98:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c9a:	b1bb      	cbz	r3, 82ccc <_fflush_r+0x3c>
   82c9c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82ca0:	b188      	cbz	r0, 82cc6 <_fflush_r+0x36>
   82ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82ca4:	07db      	lsls	r3, r3, #31
   82ca6:	d401      	bmi.n	82cac <_fflush_r+0x1c>
   82ca8:	0581      	lsls	r1, r0, #22
   82caa:	d517      	bpl.n	82cdc <_fflush_r+0x4c>
   82cac:	4620      	mov	r0, r4
   82cae:	4629      	mov	r1, r5
   82cb0:	f7ff ff52 	bl	82b58 <__sflush_r>
   82cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82cb6:	4604      	mov	r4, r0
   82cb8:	07da      	lsls	r2, r3, #31
   82cba:	d402      	bmi.n	82cc2 <_fflush_r+0x32>
   82cbc:	89ab      	ldrh	r3, [r5, #12]
   82cbe:	059b      	lsls	r3, r3, #22
   82cc0:	d507      	bpl.n	82cd2 <_fflush_r+0x42>
   82cc2:	4620      	mov	r0, r4
   82cc4:	bd38      	pop	{r3, r4, r5, pc}
   82cc6:	4604      	mov	r4, r0
   82cc8:	4620      	mov	r0, r4
   82cca:	bd38      	pop	{r3, r4, r5, pc}
   82ccc:	f000 f838 	bl	82d40 <__sinit>
   82cd0:	e7e4      	b.n	82c9c <_fflush_r+0xc>
   82cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82cd4:	f000 f9ee 	bl	830b4 <__retarget_lock_release_recursive>
   82cd8:	4620      	mov	r0, r4
   82cda:	bd38      	pop	{r3, r4, r5, pc}
   82cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82cde:	f000 f9e7 	bl	830b0 <__retarget_lock_acquire_recursive>
   82ce2:	e7e3      	b.n	82cac <_fflush_r+0x1c>

00082ce4 <_cleanup_r>:
   82ce4:	4901      	ldr	r1, [pc, #4]	; (82cec <_cleanup_r+0x8>)
   82ce6:	f000 b9b7 	b.w	83058 <_fwalk_reent>
   82cea:	bf00      	nop
   82cec:	00083841 	.word	0x00083841

00082cf0 <std.isra.0>:
   82cf0:	2300      	movs	r3, #0
   82cf2:	b510      	push	{r4, lr}
   82cf4:	4604      	mov	r4, r0
   82cf6:	8181      	strh	r1, [r0, #12]
   82cf8:	81c2      	strh	r2, [r0, #14]
   82cfa:	6003      	str	r3, [r0, #0]
   82cfc:	6043      	str	r3, [r0, #4]
   82cfe:	6083      	str	r3, [r0, #8]
   82d00:	6643      	str	r3, [r0, #100]	; 0x64
   82d02:	6103      	str	r3, [r0, #16]
   82d04:	6143      	str	r3, [r0, #20]
   82d06:	6183      	str	r3, [r0, #24]
   82d08:	4619      	mov	r1, r3
   82d0a:	2208      	movs	r2, #8
   82d0c:	305c      	adds	r0, #92	; 0x5c
   82d0e:	f7ff fdf5 	bl	828fc <memset>
   82d12:	4807      	ldr	r0, [pc, #28]	; (82d30 <std.isra.0+0x40>)
   82d14:	4907      	ldr	r1, [pc, #28]	; (82d34 <std.isra.0+0x44>)
   82d16:	4a08      	ldr	r2, [pc, #32]	; (82d38 <std.isra.0+0x48>)
   82d18:	4b08      	ldr	r3, [pc, #32]	; (82d3c <std.isra.0+0x4c>)
   82d1a:	6220      	str	r0, [r4, #32]
   82d1c:	61e4      	str	r4, [r4, #28]
   82d1e:	6261      	str	r1, [r4, #36]	; 0x24
   82d20:	62a2      	str	r2, [r4, #40]	; 0x28
   82d22:	62e3      	str	r3, [r4, #44]	; 0x2c
   82d24:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82d2c:	f000 b9bc 	b.w	830a8 <__retarget_lock_init_recursive>
   82d30:	000836a5 	.word	0x000836a5
   82d34:	000836c9 	.word	0x000836c9
   82d38:	00083705 	.word	0x00083705
   82d3c:	00083725 	.word	0x00083725

00082d40 <__sinit>:
   82d40:	b510      	push	{r4, lr}
   82d42:	4604      	mov	r4, r0
   82d44:	4814      	ldr	r0, [pc, #80]	; (82d98 <__sinit+0x58>)
   82d46:	f000 f9b3 	bl	830b0 <__retarget_lock_acquire_recursive>
   82d4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82d4c:	b9fa      	cbnz	r2, 82d8e <__sinit+0x4e>
   82d4e:	2003      	movs	r0, #3
   82d50:	4912      	ldr	r1, [pc, #72]	; (82d9c <__sinit+0x5c>)
   82d52:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82d56:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82d5a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82d5e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82d62:	63e1      	str	r1, [r4, #60]	; 0x3c
   82d64:	6860      	ldr	r0, [r4, #4]
   82d66:	2104      	movs	r1, #4
   82d68:	f7ff ffc2 	bl	82cf0 <std.isra.0>
   82d6c:	68a0      	ldr	r0, [r4, #8]
   82d6e:	2201      	movs	r2, #1
   82d70:	2109      	movs	r1, #9
   82d72:	f7ff ffbd 	bl	82cf0 <std.isra.0>
   82d76:	68e0      	ldr	r0, [r4, #12]
   82d78:	2202      	movs	r2, #2
   82d7a:	2112      	movs	r1, #18
   82d7c:	f7ff ffb8 	bl	82cf0 <std.isra.0>
   82d80:	2301      	movs	r3, #1
   82d82:	4805      	ldr	r0, [pc, #20]	; (82d98 <__sinit+0x58>)
   82d84:	63a3      	str	r3, [r4, #56]	; 0x38
   82d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82d8a:	f000 b993 	b.w	830b4 <__retarget_lock_release_recursive>
   82d8e:	4802      	ldr	r0, [pc, #8]	; (82d98 <__sinit+0x58>)
   82d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82d94:	f000 b98e 	b.w	830b4 <__retarget_lock_release_recursive>
   82d98:	2007c3f0 	.word	0x2007c3f0
   82d9c:	00082ce5 	.word	0x00082ce5

00082da0 <__sfp_lock_acquire>:
   82da0:	4801      	ldr	r0, [pc, #4]	; (82da8 <__sfp_lock_acquire+0x8>)
   82da2:	f000 b985 	b.w	830b0 <__retarget_lock_acquire_recursive>
   82da6:	bf00      	nop
   82da8:	2007c404 	.word	0x2007c404

00082dac <__sfp_lock_release>:
   82dac:	4801      	ldr	r0, [pc, #4]	; (82db4 <__sfp_lock_release+0x8>)
   82dae:	f000 b981 	b.w	830b4 <__retarget_lock_release_recursive>
   82db2:	bf00      	nop
   82db4:	2007c404 	.word	0x2007c404

00082db8 <__libc_fini_array>:
   82db8:	b538      	push	{r3, r4, r5, lr}
   82dba:	4c0a      	ldr	r4, [pc, #40]	; (82de4 <__libc_fini_array+0x2c>)
   82dbc:	4d0a      	ldr	r5, [pc, #40]	; (82de8 <__libc_fini_array+0x30>)
   82dbe:	1b64      	subs	r4, r4, r5
   82dc0:	10a4      	asrs	r4, r4, #2
   82dc2:	d00a      	beq.n	82dda <__libc_fini_array+0x22>
   82dc4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82dc8:	3b01      	subs	r3, #1
   82dca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82dce:	3c01      	subs	r4, #1
   82dd0:	f855 3904 	ldr.w	r3, [r5], #-4
   82dd4:	4798      	blx	r3
   82dd6:	2c00      	cmp	r4, #0
   82dd8:	d1f9      	bne.n	82dce <__libc_fini_array+0x16>
   82dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82dde:	f000 bdef 	b.w	839c0 <_fini>
   82de2:	bf00      	nop
   82de4:	000839d0 	.word	0x000839d0
   82de8:	000839cc 	.word	0x000839cc

00082dec <_malloc_trim_r>:
   82dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82dee:	460c      	mov	r4, r1
   82df0:	4f23      	ldr	r7, [pc, #140]	; (82e80 <_malloc_trim_r+0x94>)
   82df2:	4606      	mov	r6, r0
   82df4:	f000 fc38 	bl	83668 <__malloc_lock>
   82df8:	68bb      	ldr	r3, [r7, #8]
   82dfa:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82dfe:	685d      	ldr	r5, [r3, #4]
   82e00:	310f      	adds	r1, #15
   82e02:	f025 0503 	bic.w	r5, r5, #3
   82e06:	4429      	add	r1, r5
   82e08:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82e0c:	f021 010f 	bic.w	r1, r1, #15
   82e10:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82e14:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82e18:	db07      	blt.n	82e2a <_malloc_trim_r+0x3e>
   82e1a:	2100      	movs	r1, #0
   82e1c:	4630      	mov	r0, r6
   82e1e:	f000 fc2f 	bl	83680 <_sbrk_r>
   82e22:	68bb      	ldr	r3, [r7, #8]
   82e24:	442b      	add	r3, r5
   82e26:	4298      	cmp	r0, r3
   82e28:	d004      	beq.n	82e34 <_malloc_trim_r+0x48>
   82e2a:	4630      	mov	r0, r6
   82e2c:	f000 fc22 	bl	83674 <__malloc_unlock>
   82e30:	2000      	movs	r0, #0
   82e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e34:	4261      	negs	r1, r4
   82e36:	4630      	mov	r0, r6
   82e38:	f000 fc22 	bl	83680 <_sbrk_r>
   82e3c:	3001      	adds	r0, #1
   82e3e:	d00d      	beq.n	82e5c <_malloc_trim_r+0x70>
   82e40:	4b10      	ldr	r3, [pc, #64]	; (82e84 <_malloc_trim_r+0x98>)
   82e42:	68ba      	ldr	r2, [r7, #8]
   82e44:	6819      	ldr	r1, [r3, #0]
   82e46:	1b2d      	subs	r5, r5, r4
   82e48:	f045 0501 	orr.w	r5, r5, #1
   82e4c:	4630      	mov	r0, r6
   82e4e:	1b09      	subs	r1, r1, r4
   82e50:	6055      	str	r5, [r2, #4]
   82e52:	6019      	str	r1, [r3, #0]
   82e54:	f000 fc0e 	bl	83674 <__malloc_unlock>
   82e58:	2001      	movs	r0, #1
   82e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e5c:	2100      	movs	r1, #0
   82e5e:	4630      	mov	r0, r6
   82e60:	f000 fc0e 	bl	83680 <_sbrk_r>
   82e64:	68ba      	ldr	r2, [r7, #8]
   82e66:	1a83      	subs	r3, r0, r2
   82e68:	2b0f      	cmp	r3, #15
   82e6a:	ddde      	ble.n	82e2a <_malloc_trim_r+0x3e>
   82e6c:	4c06      	ldr	r4, [pc, #24]	; (82e88 <_malloc_trim_r+0x9c>)
   82e6e:	4905      	ldr	r1, [pc, #20]	; (82e84 <_malloc_trim_r+0x98>)
   82e70:	6824      	ldr	r4, [r4, #0]
   82e72:	f043 0301 	orr.w	r3, r3, #1
   82e76:	1b00      	subs	r0, r0, r4
   82e78:	6053      	str	r3, [r2, #4]
   82e7a:	6008      	str	r0, [r1, #0]
   82e7c:	e7d5      	b.n	82e2a <_malloc_trim_r+0x3e>
   82e7e:	bf00      	nop
   82e80:	20070564 	.word	0x20070564
   82e84:	2007c35c 	.word	0x2007c35c
   82e88:	2007096c 	.word	0x2007096c

00082e8c <_free_r>:
   82e8c:	2900      	cmp	r1, #0
   82e8e:	d044      	beq.n	82f1a <_free_r+0x8e>
   82e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e94:	460d      	mov	r5, r1
   82e96:	4680      	mov	r8, r0
   82e98:	f000 fbe6 	bl	83668 <__malloc_lock>
   82e9c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82ea0:	4969      	ldr	r1, [pc, #420]	; (83048 <_free_r+0x1bc>)
   82ea2:	f1a5 0408 	sub.w	r4, r5, #8
   82ea6:	f027 0301 	bic.w	r3, r7, #1
   82eaa:	18e2      	adds	r2, r4, r3
   82eac:	688e      	ldr	r6, [r1, #8]
   82eae:	6850      	ldr	r0, [r2, #4]
   82eb0:	42b2      	cmp	r2, r6
   82eb2:	f020 0003 	bic.w	r0, r0, #3
   82eb6:	d05e      	beq.n	82f76 <_free_r+0xea>
   82eb8:	07fe      	lsls	r6, r7, #31
   82eba:	6050      	str	r0, [r2, #4]
   82ebc:	d40b      	bmi.n	82ed6 <_free_r+0x4a>
   82ebe:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82ec2:	f101 0e08 	add.w	lr, r1, #8
   82ec6:	1be4      	subs	r4, r4, r7
   82ec8:	68a5      	ldr	r5, [r4, #8]
   82eca:	443b      	add	r3, r7
   82ecc:	4575      	cmp	r5, lr
   82ece:	d06d      	beq.n	82fac <_free_r+0x120>
   82ed0:	68e7      	ldr	r7, [r4, #12]
   82ed2:	60ef      	str	r7, [r5, #12]
   82ed4:	60bd      	str	r5, [r7, #8]
   82ed6:	1815      	adds	r5, r2, r0
   82ed8:	686d      	ldr	r5, [r5, #4]
   82eda:	07ed      	lsls	r5, r5, #31
   82edc:	d53e      	bpl.n	82f5c <_free_r+0xd0>
   82ede:	f043 0201 	orr.w	r2, r3, #1
   82ee2:	6062      	str	r2, [r4, #4]
   82ee4:	50e3      	str	r3, [r4, r3]
   82ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82eea:	d217      	bcs.n	82f1c <_free_r+0x90>
   82eec:	2201      	movs	r2, #1
   82eee:	08db      	lsrs	r3, r3, #3
   82ef0:	1098      	asrs	r0, r3, #2
   82ef2:	684d      	ldr	r5, [r1, #4]
   82ef4:	4413      	add	r3, r2
   82ef6:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82efa:	4082      	lsls	r2, r0
   82efc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82f00:	432a      	orrs	r2, r5
   82f02:	3808      	subs	r0, #8
   82f04:	60e0      	str	r0, [r4, #12]
   82f06:	60a7      	str	r7, [r4, #8]
   82f08:	604a      	str	r2, [r1, #4]
   82f0a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82f0e:	60fc      	str	r4, [r7, #12]
   82f10:	4640      	mov	r0, r8
   82f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82f16:	f000 bbad 	b.w	83674 <__malloc_unlock>
   82f1a:	4770      	bx	lr
   82f1c:	0a5a      	lsrs	r2, r3, #9
   82f1e:	2a04      	cmp	r2, #4
   82f20:	d852      	bhi.n	82fc8 <_free_r+0x13c>
   82f22:	099a      	lsrs	r2, r3, #6
   82f24:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82f28:	00ff      	lsls	r7, r7, #3
   82f2a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82f2e:	19c8      	adds	r0, r1, r7
   82f30:	59ca      	ldr	r2, [r1, r7]
   82f32:	3808      	subs	r0, #8
   82f34:	4290      	cmp	r0, r2
   82f36:	d04f      	beq.n	82fd8 <_free_r+0x14c>
   82f38:	6851      	ldr	r1, [r2, #4]
   82f3a:	f021 0103 	bic.w	r1, r1, #3
   82f3e:	428b      	cmp	r3, r1
   82f40:	d232      	bcs.n	82fa8 <_free_r+0x11c>
   82f42:	6892      	ldr	r2, [r2, #8]
   82f44:	4290      	cmp	r0, r2
   82f46:	d1f7      	bne.n	82f38 <_free_r+0xac>
   82f48:	68c3      	ldr	r3, [r0, #12]
   82f4a:	60a0      	str	r0, [r4, #8]
   82f4c:	60e3      	str	r3, [r4, #12]
   82f4e:	609c      	str	r4, [r3, #8]
   82f50:	60c4      	str	r4, [r0, #12]
   82f52:	4640      	mov	r0, r8
   82f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82f58:	f000 bb8c 	b.w	83674 <__malloc_unlock>
   82f5c:	6895      	ldr	r5, [r2, #8]
   82f5e:	4f3b      	ldr	r7, [pc, #236]	; (8304c <_free_r+0x1c0>)
   82f60:	4403      	add	r3, r0
   82f62:	42bd      	cmp	r5, r7
   82f64:	d040      	beq.n	82fe8 <_free_r+0x15c>
   82f66:	68d0      	ldr	r0, [r2, #12]
   82f68:	f043 0201 	orr.w	r2, r3, #1
   82f6c:	60e8      	str	r0, [r5, #12]
   82f6e:	6085      	str	r5, [r0, #8]
   82f70:	6062      	str	r2, [r4, #4]
   82f72:	50e3      	str	r3, [r4, r3]
   82f74:	e7b7      	b.n	82ee6 <_free_r+0x5a>
   82f76:	07ff      	lsls	r7, r7, #31
   82f78:	4403      	add	r3, r0
   82f7a:	d407      	bmi.n	82f8c <_free_r+0x100>
   82f7c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82f80:	1b64      	subs	r4, r4, r5
   82f82:	68e2      	ldr	r2, [r4, #12]
   82f84:	68a0      	ldr	r0, [r4, #8]
   82f86:	442b      	add	r3, r5
   82f88:	60c2      	str	r2, [r0, #12]
   82f8a:	6090      	str	r0, [r2, #8]
   82f8c:	4a30      	ldr	r2, [pc, #192]	; (83050 <_free_r+0x1c4>)
   82f8e:	f043 0001 	orr.w	r0, r3, #1
   82f92:	6812      	ldr	r2, [r2, #0]
   82f94:	6060      	str	r0, [r4, #4]
   82f96:	4293      	cmp	r3, r2
   82f98:	608c      	str	r4, [r1, #8]
   82f9a:	d3b9      	bcc.n	82f10 <_free_r+0x84>
   82f9c:	4b2d      	ldr	r3, [pc, #180]	; (83054 <_free_r+0x1c8>)
   82f9e:	4640      	mov	r0, r8
   82fa0:	6819      	ldr	r1, [r3, #0]
   82fa2:	f7ff ff23 	bl	82dec <_malloc_trim_r>
   82fa6:	e7b3      	b.n	82f10 <_free_r+0x84>
   82fa8:	4610      	mov	r0, r2
   82faa:	e7cd      	b.n	82f48 <_free_r+0xbc>
   82fac:	1811      	adds	r1, r2, r0
   82fae:	6849      	ldr	r1, [r1, #4]
   82fb0:	07c9      	lsls	r1, r1, #31
   82fb2:	d444      	bmi.n	8303e <_free_r+0x1b2>
   82fb4:	6891      	ldr	r1, [r2, #8]
   82fb6:	4403      	add	r3, r0
   82fb8:	68d2      	ldr	r2, [r2, #12]
   82fba:	f043 0001 	orr.w	r0, r3, #1
   82fbe:	60ca      	str	r2, [r1, #12]
   82fc0:	6091      	str	r1, [r2, #8]
   82fc2:	6060      	str	r0, [r4, #4]
   82fc4:	50e3      	str	r3, [r4, r3]
   82fc6:	e7a3      	b.n	82f10 <_free_r+0x84>
   82fc8:	2a14      	cmp	r2, #20
   82fca:	d816      	bhi.n	82ffa <_free_r+0x16e>
   82fcc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82fd0:	00ff      	lsls	r7, r7, #3
   82fd2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82fd6:	e7aa      	b.n	82f2e <_free_r+0xa2>
   82fd8:	2301      	movs	r3, #1
   82fda:	10aa      	asrs	r2, r5, #2
   82fdc:	684d      	ldr	r5, [r1, #4]
   82fde:	4093      	lsls	r3, r2
   82fe0:	432b      	orrs	r3, r5
   82fe2:	604b      	str	r3, [r1, #4]
   82fe4:	4603      	mov	r3, r0
   82fe6:	e7b0      	b.n	82f4a <_free_r+0xbe>
   82fe8:	f043 0201 	orr.w	r2, r3, #1
   82fec:	614c      	str	r4, [r1, #20]
   82fee:	610c      	str	r4, [r1, #16]
   82ff0:	60e5      	str	r5, [r4, #12]
   82ff2:	60a5      	str	r5, [r4, #8]
   82ff4:	6062      	str	r2, [r4, #4]
   82ff6:	50e3      	str	r3, [r4, r3]
   82ff8:	e78a      	b.n	82f10 <_free_r+0x84>
   82ffa:	2a54      	cmp	r2, #84	; 0x54
   82ffc:	d806      	bhi.n	8300c <_free_r+0x180>
   82ffe:	0b1a      	lsrs	r2, r3, #12
   83000:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83004:	00ff      	lsls	r7, r7, #3
   83006:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8300a:	e790      	b.n	82f2e <_free_r+0xa2>
   8300c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83010:	d806      	bhi.n	83020 <_free_r+0x194>
   83012:	0bda      	lsrs	r2, r3, #15
   83014:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83018:	00ff      	lsls	r7, r7, #3
   8301a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8301e:	e786      	b.n	82f2e <_free_r+0xa2>
   83020:	f240 5054 	movw	r0, #1364	; 0x554
   83024:	4282      	cmp	r2, r0
   83026:	d806      	bhi.n	83036 <_free_r+0x1aa>
   83028:	0c9a      	lsrs	r2, r3, #18
   8302a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8302e:	00ff      	lsls	r7, r7, #3
   83030:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83034:	e77b      	b.n	82f2e <_free_r+0xa2>
   83036:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8303a:	257e      	movs	r5, #126	; 0x7e
   8303c:	e777      	b.n	82f2e <_free_r+0xa2>
   8303e:	f043 0101 	orr.w	r1, r3, #1
   83042:	6061      	str	r1, [r4, #4]
   83044:	6013      	str	r3, [r2, #0]
   83046:	e763      	b.n	82f10 <_free_r+0x84>
   83048:	20070564 	.word	0x20070564
   8304c:	2007056c 	.word	0x2007056c
   83050:	20070970 	.word	0x20070970
   83054:	2007c38c 	.word	0x2007c38c

00083058 <_fwalk_reent>:
   83058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8305c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83060:	d01e      	beq.n	830a0 <_fwalk_reent+0x48>
   83062:	4688      	mov	r8, r1
   83064:	4607      	mov	r7, r0
   83066:	f04f 0900 	mov.w	r9, #0
   8306a:	6875      	ldr	r5, [r6, #4]
   8306c:	68b4      	ldr	r4, [r6, #8]
   8306e:	3d01      	subs	r5, #1
   83070:	d410      	bmi.n	83094 <_fwalk_reent+0x3c>
   83072:	89a3      	ldrh	r3, [r4, #12]
   83074:	3d01      	subs	r5, #1
   83076:	2b01      	cmp	r3, #1
   83078:	d908      	bls.n	8308c <_fwalk_reent+0x34>
   8307a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8307e:	3301      	adds	r3, #1
   83080:	d004      	beq.n	8308c <_fwalk_reent+0x34>
   83082:	4621      	mov	r1, r4
   83084:	4638      	mov	r0, r7
   83086:	47c0      	blx	r8
   83088:	ea49 0900 	orr.w	r9, r9, r0
   8308c:	1c6b      	adds	r3, r5, #1
   8308e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83092:	d1ee      	bne.n	83072 <_fwalk_reent+0x1a>
   83094:	6836      	ldr	r6, [r6, #0]
   83096:	2e00      	cmp	r6, #0
   83098:	d1e7      	bne.n	8306a <_fwalk_reent+0x12>
   8309a:	4648      	mov	r0, r9
   8309c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   830a0:	46b1      	mov	r9, r6
   830a2:	4648      	mov	r0, r9
   830a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000830a8 <__retarget_lock_init_recursive>:
   830a8:	4770      	bx	lr
   830aa:	bf00      	nop

000830ac <__retarget_lock_close_recursive>:
   830ac:	4770      	bx	lr
   830ae:	bf00      	nop

000830b0 <__retarget_lock_acquire_recursive>:
   830b0:	4770      	bx	lr
   830b2:	bf00      	nop

000830b4 <__retarget_lock_release_recursive>:
   830b4:	4770      	bx	lr
   830b6:	bf00      	nop

000830b8 <__swhatbuf_r>:
   830b8:	b570      	push	{r4, r5, r6, lr}
   830ba:	460c      	mov	r4, r1
   830bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   830c0:	b090      	sub	sp, #64	; 0x40
   830c2:	2900      	cmp	r1, #0
   830c4:	4615      	mov	r5, r2
   830c6:	461e      	mov	r6, r3
   830c8:	db14      	blt.n	830f4 <__swhatbuf_r+0x3c>
   830ca:	aa01      	add	r2, sp, #4
   830cc:	f000 fc1a 	bl	83904 <_fstat_r>
   830d0:	2800      	cmp	r0, #0
   830d2:	db0f      	blt.n	830f4 <__swhatbuf_r+0x3c>
   830d4:	9a02      	ldr	r2, [sp, #8]
   830d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   830da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   830de:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   830e2:	fab2 f282 	clz	r2, r2
   830e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   830ea:	0952      	lsrs	r2, r2, #5
   830ec:	6032      	str	r2, [r6, #0]
   830ee:	602b      	str	r3, [r5, #0]
   830f0:	b010      	add	sp, #64	; 0x40
   830f2:	bd70      	pop	{r4, r5, r6, pc}
   830f4:	2300      	movs	r3, #0
   830f6:	89a2      	ldrh	r2, [r4, #12]
   830f8:	6033      	str	r3, [r6, #0]
   830fa:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   830fe:	d004      	beq.n	8310a <__swhatbuf_r+0x52>
   83100:	2240      	movs	r2, #64	; 0x40
   83102:	4618      	mov	r0, r3
   83104:	602a      	str	r2, [r5, #0]
   83106:	b010      	add	sp, #64	; 0x40
   83108:	bd70      	pop	{r4, r5, r6, pc}
   8310a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8310e:	602b      	str	r3, [r5, #0]
   83110:	b010      	add	sp, #64	; 0x40
   83112:	bd70      	pop	{r4, r5, r6, pc}

00083114 <malloc>:
   83114:	4b02      	ldr	r3, [pc, #8]	; (83120 <malloc+0xc>)
   83116:	4601      	mov	r1, r0
   83118:	6818      	ldr	r0, [r3, #0]
   8311a:	f000 b803 	b.w	83124 <_malloc_r>
   8311e:	bf00      	nop
   83120:	20070134 	.word	0x20070134

00083124 <_malloc_r>:
   83124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83128:	f101 060b 	add.w	r6, r1, #11
   8312c:	2e16      	cmp	r6, #22
   8312e:	b083      	sub	sp, #12
   83130:	4605      	mov	r5, r0
   83132:	f240 809e 	bls.w	83272 <_malloc_r+0x14e>
   83136:	f036 0607 	bics.w	r6, r6, #7
   8313a:	f100 80bd 	bmi.w	832b8 <_malloc_r+0x194>
   8313e:	42b1      	cmp	r1, r6
   83140:	f200 80ba 	bhi.w	832b8 <_malloc_r+0x194>
   83144:	f000 fa90 	bl	83668 <__malloc_lock>
   83148:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8314c:	f0c0 8285 	bcc.w	8365a <_malloc_r+0x536>
   83150:	0a73      	lsrs	r3, r6, #9
   83152:	f000 80b8 	beq.w	832c6 <_malloc_r+0x1a2>
   83156:	2b04      	cmp	r3, #4
   83158:	f200 816c 	bhi.w	83434 <_malloc_r+0x310>
   8315c:	09b3      	lsrs	r3, r6, #6
   8315e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83162:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83166:	00c1      	lsls	r1, r0, #3
   83168:	4fb8      	ldr	r7, [pc, #736]	; (8344c <_malloc_r+0x328>)
   8316a:	4439      	add	r1, r7
   8316c:	684c      	ldr	r4, [r1, #4]
   8316e:	3908      	subs	r1, #8
   83170:	42a1      	cmp	r1, r4
   83172:	d106      	bne.n	83182 <_malloc_r+0x5e>
   83174:	e00c      	b.n	83190 <_malloc_r+0x6c>
   83176:	2a00      	cmp	r2, #0
   83178:	f280 80ab 	bge.w	832d2 <_malloc_r+0x1ae>
   8317c:	68e4      	ldr	r4, [r4, #12]
   8317e:	42a1      	cmp	r1, r4
   83180:	d006      	beq.n	83190 <_malloc_r+0x6c>
   83182:	6863      	ldr	r3, [r4, #4]
   83184:	f023 0303 	bic.w	r3, r3, #3
   83188:	1b9a      	subs	r2, r3, r6
   8318a:	2a0f      	cmp	r2, #15
   8318c:	ddf3      	ble.n	83176 <_malloc_r+0x52>
   8318e:	4670      	mov	r0, lr
   83190:	693c      	ldr	r4, [r7, #16]
   83192:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83460 <_malloc_r+0x33c>
   83196:	4574      	cmp	r4, lr
   83198:	f000 819e 	beq.w	834d8 <_malloc_r+0x3b4>
   8319c:	6863      	ldr	r3, [r4, #4]
   8319e:	f023 0303 	bic.w	r3, r3, #3
   831a2:	1b9a      	subs	r2, r3, r6
   831a4:	2a0f      	cmp	r2, #15
   831a6:	f300 8183 	bgt.w	834b0 <_malloc_r+0x38c>
   831aa:	2a00      	cmp	r2, #0
   831ac:	f8c7 e014 	str.w	lr, [r7, #20]
   831b0:	f8c7 e010 	str.w	lr, [r7, #16]
   831b4:	f280 8091 	bge.w	832da <_malloc_r+0x1b6>
   831b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   831bc:	f080 8154 	bcs.w	83468 <_malloc_r+0x344>
   831c0:	2201      	movs	r2, #1
   831c2:	08db      	lsrs	r3, r3, #3
   831c4:	6879      	ldr	r1, [r7, #4]
   831c6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   831ca:	4413      	add	r3, r2
   831cc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   831d0:	fa02 f20c 	lsl.w	r2, r2, ip
   831d4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   831d8:	430a      	orrs	r2, r1
   831da:	f1ac 0108 	sub.w	r1, ip, #8
   831de:	60e1      	str	r1, [r4, #12]
   831e0:	f8c4 8008 	str.w	r8, [r4, #8]
   831e4:	607a      	str	r2, [r7, #4]
   831e6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   831ea:	f8c8 400c 	str.w	r4, [r8, #12]
   831ee:	2401      	movs	r4, #1
   831f0:	1083      	asrs	r3, r0, #2
   831f2:	409c      	lsls	r4, r3
   831f4:	4294      	cmp	r4, r2
   831f6:	d87d      	bhi.n	832f4 <_malloc_r+0x1d0>
   831f8:	4214      	tst	r4, r2
   831fa:	d106      	bne.n	8320a <_malloc_r+0xe6>
   831fc:	f020 0003 	bic.w	r0, r0, #3
   83200:	0064      	lsls	r4, r4, #1
   83202:	4214      	tst	r4, r2
   83204:	f100 0004 	add.w	r0, r0, #4
   83208:	d0fa      	beq.n	83200 <_malloc_r+0xdc>
   8320a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8320e:	46cc      	mov	ip, r9
   83210:	4680      	mov	r8, r0
   83212:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83216:	459c      	cmp	ip, r3
   83218:	d107      	bne.n	8322a <_malloc_r+0x106>
   8321a:	e15f      	b.n	834dc <_malloc_r+0x3b8>
   8321c:	2a00      	cmp	r2, #0
   8321e:	f280 816d 	bge.w	834fc <_malloc_r+0x3d8>
   83222:	68db      	ldr	r3, [r3, #12]
   83224:	459c      	cmp	ip, r3
   83226:	f000 8159 	beq.w	834dc <_malloc_r+0x3b8>
   8322a:	6859      	ldr	r1, [r3, #4]
   8322c:	f021 0103 	bic.w	r1, r1, #3
   83230:	1b8a      	subs	r2, r1, r6
   83232:	2a0f      	cmp	r2, #15
   83234:	ddf2      	ble.n	8321c <_malloc_r+0xf8>
   83236:	68dc      	ldr	r4, [r3, #12]
   83238:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8323c:	f046 0801 	orr.w	r8, r6, #1
   83240:	4628      	mov	r0, r5
   83242:	441e      	add	r6, r3
   83244:	f042 0501 	orr.w	r5, r2, #1
   83248:	f8c3 8004 	str.w	r8, [r3, #4]
   8324c:	f8cc 400c 	str.w	r4, [ip, #12]
   83250:	f8c4 c008 	str.w	ip, [r4, #8]
   83254:	617e      	str	r6, [r7, #20]
   83256:	613e      	str	r6, [r7, #16]
   83258:	f8c6 e00c 	str.w	lr, [r6, #12]
   8325c:	f8c6 e008 	str.w	lr, [r6, #8]
   83260:	6075      	str	r5, [r6, #4]
   83262:	505a      	str	r2, [r3, r1]
   83264:	9300      	str	r3, [sp, #0]
   83266:	f000 fa05 	bl	83674 <__malloc_unlock>
   8326a:	9b00      	ldr	r3, [sp, #0]
   8326c:	f103 0408 	add.w	r4, r3, #8
   83270:	e01e      	b.n	832b0 <_malloc_r+0x18c>
   83272:	2910      	cmp	r1, #16
   83274:	d820      	bhi.n	832b8 <_malloc_r+0x194>
   83276:	f000 f9f7 	bl	83668 <__malloc_lock>
   8327a:	2610      	movs	r6, #16
   8327c:	2318      	movs	r3, #24
   8327e:	2002      	movs	r0, #2
   83280:	4f72      	ldr	r7, [pc, #456]	; (8344c <_malloc_r+0x328>)
   83282:	443b      	add	r3, r7
   83284:	685c      	ldr	r4, [r3, #4]
   83286:	f1a3 0208 	sub.w	r2, r3, #8
   8328a:	4294      	cmp	r4, r2
   8328c:	f000 812f 	beq.w	834ee <_malloc_r+0x3ca>
   83290:	6863      	ldr	r3, [r4, #4]
   83292:	68e1      	ldr	r1, [r4, #12]
   83294:	f023 0303 	bic.w	r3, r3, #3
   83298:	4423      	add	r3, r4
   8329a:	685a      	ldr	r2, [r3, #4]
   8329c:	68a6      	ldr	r6, [r4, #8]
   8329e:	f042 0201 	orr.w	r2, r2, #1
   832a2:	60f1      	str	r1, [r6, #12]
   832a4:	4628      	mov	r0, r5
   832a6:	608e      	str	r6, [r1, #8]
   832a8:	605a      	str	r2, [r3, #4]
   832aa:	f000 f9e3 	bl	83674 <__malloc_unlock>
   832ae:	3408      	adds	r4, #8
   832b0:	4620      	mov	r0, r4
   832b2:	b003      	add	sp, #12
   832b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832b8:	2400      	movs	r4, #0
   832ba:	230c      	movs	r3, #12
   832bc:	4620      	mov	r0, r4
   832be:	602b      	str	r3, [r5, #0]
   832c0:	b003      	add	sp, #12
   832c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832c6:	2040      	movs	r0, #64	; 0x40
   832c8:	f44f 7100 	mov.w	r1, #512	; 0x200
   832cc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   832d0:	e74a      	b.n	83168 <_malloc_r+0x44>
   832d2:	4423      	add	r3, r4
   832d4:	685a      	ldr	r2, [r3, #4]
   832d6:	68e1      	ldr	r1, [r4, #12]
   832d8:	e7e0      	b.n	8329c <_malloc_r+0x178>
   832da:	4423      	add	r3, r4
   832dc:	685a      	ldr	r2, [r3, #4]
   832de:	4628      	mov	r0, r5
   832e0:	f042 0201 	orr.w	r2, r2, #1
   832e4:	605a      	str	r2, [r3, #4]
   832e6:	3408      	adds	r4, #8
   832e8:	f000 f9c4 	bl	83674 <__malloc_unlock>
   832ec:	4620      	mov	r0, r4
   832ee:	b003      	add	sp, #12
   832f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832f4:	68bc      	ldr	r4, [r7, #8]
   832f6:	6863      	ldr	r3, [r4, #4]
   832f8:	f023 0803 	bic.w	r8, r3, #3
   832fc:	45b0      	cmp	r8, r6
   832fe:	d304      	bcc.n	8330a <_malloc_r+0x1e6>
   83300:	eba8 0306 	sub.w	r3, r8, r6
   83304:	2b0f      	cmp	r3, #15
   83306:	f300 8085 	bgt.w	83414 <_malloc_r+0x2f0>
   8330a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83464 <_malloc_r+0x340>
   8330e:	4b50      	ldr	r3, [pc, #320]	; (83450 <_malloc_r+0x32c>)
   83310:	f8d9 2000 	ldr.w	r2, [r9]
   83314:	681b      	ldr	r3, [r3, #0]
   83316:	3201      	adds	r2, #1
   83318:	4433      	add	r3, r6
   8331a:	eb04 0a08 	add.w	sl, r4, r8
   8331e:	f000 8154 	beq.w	835ca <_malloc_r+0x4a6>
   83322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83326:	330f      	adds	r3, #15
   83328:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8332c:	f02b 0b0f 	bic.w	fp, fp, #15
   83330:	4659      	mov	r1, fp
   83332:	4628      	mov	r0, r5
   83334:	f000 f9a4 	bl	83680 <_sbrk_r>
   83338:	1c41      	adds	r1, r0, #1
   8333a:	4602      	mov	r2, r0
   8333c:	f000 80fb 	beq.w	83536 <_malloc_r+0x412>
   83340:	4582      	cmp	sl, r0
   83342:	f200 80f6 	bhi.w	83532 <_malloc_r+0x40e>
   83346:	4b43      	ldr	r3, [pc, #268]	; (83454 <_malloc_r+0x330>)
   83348:	6819      	ldr	r1, [r3, #0]
   8334a:	4459      	add	r1, fp
   8334c:	6019      	str	r1, [r3, #0]
   8334e:	f000 814c 	beq.w	835ea <_malloc_r+0x4c6>
   83352:	f8d9 0000 	ldr.w	r0, [r9]
   83356:	3001      	adds	r0, #1
   83358:	bf1b      	ittet	ne
   8335a:	eba2 0a0a 	subne.w	sl, r2, sl
   8335e:	4451      	addne	r1, sl
   83360:	f8c9 2000 	streq.w	r2, [r9]
   83364:	6019      	strne	r1, [r3, #0]
   83366:	f012 0107 	ands.w	r1, r2, #7
   8336a:	f000 8114 	beq.w	83596 <_malloc_r+0x472>
   8336e:	f1c1 0008 	rsb	r0, r1, #8
   83372:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83376:	4402      	add	r2, r0
   83378:	3108      	adds	r1, #8
   8337a:	eb02 090b 	add.w	r9, r2, fp
   8337e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   83382:	eba1 0909 	sub.w	r9, r1, r9
   83386:	4649      	mov	r1, r9
   83388:	4628      	mov	r0, r5
   8338a:	9301      	str	r3, [sp, #4]
   8338c:	9200      	str	r2, [sp, #0]
   8338e:	f000 f977 	bl	83680 <_sbrk_r>
   83392:	1c43      	adds	r3, r0, #1
   83394:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83398:	f000 8142 	beq.w	83620 <_malloc_r+0x4fc>
   8339c:	1a80      	subs	r0, r0, r2
   8339e:	4448      	add	r0, r9
   833a0:	f040 0001 	orr.w	r0, r0, #1
   833a4:	6819      	ldr	r1, [r3, #0]
   833a6:	42bc      	cmp	r4, r7
   833a8:	4449      	add	r1, r9
   833aa:	60ba      	str	r2, [r7, #8]
   833ac:	6019      	str	r1, [r3, #0]
   833ae:	6050      	str	r0, [r2, #4]
   833b0:	d017      	beq.n	833e2 <_malloc_r+0x2be>
   833b2:	f1b8 0f0f 	cmp.w	r8, #15
   833b6:	f240 80fa 	bls.w	835ae <_malloc_r+0x48a>
   833ba:	f04f 0c05 	mov.w	ip, #5
   833be:	6862      	ldr	r2, [r4, #4]
   833c0:	f1a8 000c 	sub.w	r0, r8, #12
   833c4:	f020 0007 	bic.w	r0, r0, #7
   833c8:	f002 0201 	and.w	r2, r2, #1
   833cc:	eb04 0e00 	add.w	lr, r4, r0
   833d0:	4302      	orrs	r2, r0
   833d2:	280f      	cmp	r0, #15
   833d4:	6062      	str	r2, [r4, #4]
   833d6:	f8ce c004 	str.w	ip, [lr, #4]
   833da:	f8ce c008 	str.w	ip, [lr, #8]
   833de:	f200 8116 	bhi.w	8360e <_malloc_r+0x4ea>
   833e2:	4b1d      	ldr	r3, [pc, #116]	; (83458 <_malloc_r+0x334>)
   833e4:	68bc      	ldr	r4, [r7, #8]
   833e6:	681a      	ldr	r2, [r3, #0]
   833e8:	4291      	cmp	r1, r2
   833ea:	bf88      	it	hi
   833ec:	6019      	strhi	r1, [r3, #0]
   833ee:	4b1b      	ldr	r3, [pc, #108]	; (8345c <_malloc_r+0x338>)
   833f0:	681a      	ldr	r2, [r3, #0]
   833f2:	4291      	cmp	r1, r2
   833f4:	6862      	ldr	r2, [r4, #4]
   833f6:	bf88      	it	hi
   833f8:	6019      	strhi	r1, [r3, #0]
   833fa:	f022 0203 	bic.w	r2, r2, #3
   833fe:	4296      	cmp	r6, r2
   83400:	eba2 0306 	sub.w	r3, r2, r6
   83404:	d801      	bhi.n	8340a <_malloc_r+0x2e6>
   83406:	2b0f      	cmp	r3, #15
   83408:	dc04      	bgt.n	83414 <_malloc_r+0x2f0>
   8340a:	4628      	mov	r0, r5
   8340c:	f000 f932 	bl	83674 <__malloc_unlock>
   83410:	2400      	movs	r4, #0
   83412:	e74d      	b.n	832b0 <_malloc_r+0x18c>
   83414:	f046 0201 	orr.w	r2, r6, #1
   83418:	f043 0301 	orr.w	r3, r3, #1
   8341c:	4426      	add	r6, r4
   8341e:	6062      	str	r2, [r4, #4]
   83420:	4628      	mov	r0, r5
   83422:	60be      	str	r6, [r7, #8]
   83424:	3408      	adds	r4, #8
   83426:	6073      	str	r3, [r6, #4]
   83428:	f000 f924 	bl	83674 <__malloc_unlock>
   8342c:	4620      	mov	r0, r4
   8342e:	b003      	add	sp, #12
   83430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83434:	2b14      	cmp	r3, #20
   83436:	d970      	bls.n	8351a <_malloc_r+0x3f6>
   83438:	2b54      	cmp	r3, #84	; 0x54
   8343a:	f200 80a2 	bhi.w	83582 <_malloc_r+0x45e>
   8343e:	0b33      	lsrs	r3, r6, #12
   83440:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83444:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83448:	00c1      	lsls	r1, r0, #3
   8344a:	e68d      	b.n	83168 <_malloc_r+0x44>
   8344c:	20070564 	.word	0x20070564
   83450:	2007c38c 	.word	0x2007c38c
   83454:	2007c35c 	.word	0x2007c35c
   83458:	2007c384 	.word	0x2007c384
   8345c:	2007c388 	.word	0x2007c388
   83460:	2007056c 	.word	0x2007056c
   83464:	2007096c 	.word	0x2007096c
   83468:	0a5a      	lsrs	r2, r3, #9
   8346a:	2a04      	cmp	r2, #4
   8346c:	d95b      	bls.n	83526 <_malloc_r+0x402>
   8346e:	2a14      	cmp	r2, #20
   83470:	f200 80ae 	bhi.w	835d0 <_malloc_r+0x4ac>
   83474:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83478:	00c9      	lsls	r1, r1, #3
   8347a:	325b      	adds	r2, #91	; 0x5b
   8347c:	eb07 0c01 	add.w	ip, r7, r1
   83480:	5879      	ldr	r1, [r7, r1]
   83482:	f1ac 0c08 	sub.w	ip, ip, #8
   83486:	458c      	cmp	ip, r1
   83488:	f000 8088 	beq.w	8359c <_malloc_r+0x478>
   8348c:	684a      	ldr	r2, [r1, #4]
   8348e:	f022 0203 	bic.w	r2, r2, #3
   83492:	4293      	cmp	r3, r2
   83494:	d273      	bcs.n	8357e <_malloc_r+0x45a>
   83496:	6889      	ldr	r1, [r1, #8]
   83498:	458c      	cmp	ip, r1
   8349a:	d1f7      	bne.n	8348c <_malloc_r+0x368>
   8349c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   834a0:	687a      	ldr	r2, [r7, #4]
   834a2:	60e3      	str	r3, [r4, #12]
   834a4:	f8c4 c008 	str.w	ip, [r4, #8]
   834a8:	609c      	str	r4, [r3, #8]
   834aa:	f8cc 400c 	str.w	r4, [ip, #12]
   834ae:	e69e      	b.n	831ee <_malloc_r+0xca>
   834b0:	f046 0c01 	orr.w	ip, r6, #1
   834b4:	f042 0101 	orr.w	r1, r2, #1
   834b8:	4426      	add	r6, r4
   834ba:	f8c4 c004 	str.w	ip, [r4, #4]
   834be:	4628      	mov	r0, r5
   834c0:	617e      	str	r6, [r7, #20]
   834c2:	613e      	str	r6, [r7, #16]
   834c4:	f8c6 e00c 	str.w	lr, [r6, #12]
   834c8:	f8c6 e008 	str.w	lr, [r6, #8]
   834cc:	6071      	str	r1, [r6, #4]
   834ce:	50e2      	str	r2, [r4, r3]
   834d0:	f000 f8d0 	bl	83674 <__malloc_unlock>
   834d4:	3408      	adds	r4, #8
   834d6:	e6eb      	b.n	832b0 <_malloc_r+0x18c>
   834d8:	687a      	ldr	r2, [r7, #4]
   834da:	e688      	b.n	831ee <_malloc_r+0xca>
   834dc:	f108 0801 	add.w	r8, r8, #1
   834e0:	f018 0f03 	tst.w	r8, #3
   834e4:	f10c 0c08 	add.w	ip, ip, #8
   834e8:	f47f ae93 	bne.w	83212 <_malloc_r+0xee>
   834ec:	e02d      	b.n	8354a <_malloc_r+0x426>
   834ee:	68dc      	ldr	r4, [r3, #12]
   834f0:	42a3      	cmp	r3, r4
   834f2:	bf08      	it	eq
   834f4:	3002      	addeq	r0, #2
   834f6:	f43f ae4b 	beq.w	83190 <_malloc_r+0x6c>
   834fa:	e6c9      	b.n	83290 <_malloc_r+0x16c>
   834fc:	461c      	mov	r4, r3
   834fe:	4419      	add	r1, r3
   83500:	684a      	ldr	r2, [r1, #4]
   83502:	68db      	ldr	r3, [r3, #12]
   83504:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83508:	f042 0201 	orr.w	r2, r2, #1
   8350c:	604a      	str	r2, [r1, #4]
   8350e:	4628      	mov	r0, r5
   83510:	60f3      	str	r3, [r6, #12]
   83512:	609e      	str	r6, [r3, #8]
   83514:	f000 f8ae 	bl	83674 <__malloc_unlock>
   83518:	e6ca      	b.n	832b0 <_malloc_r+0x18c>
   8351a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8351e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83522:	00c1      	lsls	r1, r0, #3
   83524:	e620      	b.n	83168 <_malloc_r+0x44>
   83526:	099a      	lsrs	r2, r3, #6
   83528:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8352c:	00c9      	lsls	r1, r1, #3
   8352e:	3238      	adds	r2, #56	; 0x38
   83530:	e7a4      	b.n	8347c <_malloc_r+0x358>
   83532:	42bc      	cmp	r4, r7
   83534:	d054      	beq.n	835e0 <_malloc_r+0x4bc>
   83536:	68bc      	ldr	r4, [r7, #8]
   83538:	6862      	ldr	r2, [r4, #4]
   8353a:	f022 0203 	bic.w	r2, r2, #3
   8353e:	e75e      	b.n	833fe <_malloc_r+0x2da>
   83540:	f859 3908 	ldr.w	r3, [r9], #-8
   83544:	4599      	cmp	r9, r3
   83546:	f040 8086 	bne.w	83656 <_malloc_r+0x532>
   8354a:	f010 0f03 	tst.w	r0, #3
   8354e:	f100 30ff 	add.w	r0, r0, #4294967295
   83552:	d1f5      	bne.n	83540 <_malloc_r+0x41c>
   83554:	687b      	ldr	r3, [r7, #4]
   83556:	ea23 0304 	bic.w	r3, r3, r4
   8355a:	607b      	str	r3, [r7, #4]
   8355c:	0064      	lsls	r4, r4, #1
   8355e:	429c      	cmp	r4, r3
   83560:	f63f aec8 	bhi.w	832f4 <_malloc_r+0x1d0>
   83564:	2c00      	cmp	r4, #0
   83566:	f43f aec5 	beq.w	832f4 <_malloc_r+0x1d0>
   8356a:	421c      	tst	r4, r3
   8356c:	4640      	mov	r0, r8
   8356e:	f47f ae4c 	bne.w	8320a <_malloc_r+0xe6>
   83572:	0064      	lsls	r4, r4, #1
   83574:	421c      	tst	r4, r3
   83576:	f100 0004 	add.w	r0, r0, #4
   8357a:	d0fa      	beq.n	83572 <_malloc_r+0x44e>
   8357c:	e645      	b.n	8320a <_malloc_r+0xe6>
   8357e:	468c      	mov	ip, r1
   83580:	e78c      	b.n	8349c <_malloc_r+0x378>
   83582:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83586:	d815      	bhi.n	835b4 <_malloc_r+0x490>
   83588:	0bf3      	lsrs	r3, r6, #15
   8358a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8358e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83592:	00c1      	lsls	r1, r0, #3
   83594:	e5e8      	b.n	83168 <_malloc_r+0x44>
   83596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8359a:	e6ee      	b.n	8337a <_malloc_r+0x256>
   8359c:	2101      	movs	r1, #1
   8359e:	687b      	ldr	r3, [r7, #4]
   835a0:	1092      	asrs	r2, r2, #2
   835a2:	fa01 f202 	lsl.w	r2, r1, r2
   835a6:	431a      	orrs	r2, r3
   835a8:	607a      	str	r2, [r7, #4]
   835aa:	4663      	mov	r3, ip
   835ac:	e779      	b.n	834a2 <_malloc_r+0x37e>
   835ae:	2301      	movs	r3, #1
   835b0:	6053      	str	r3, [r2, #4]
   835b2:	e72a      	b.n	8340a <_malloc_r+0x2e6>
   835b4:	f240 5254 	movw	r2, #1364	; 0x554
   835b8:	4293      	cmp	r3, r2
   835ba:	d822      	bhi.n	83602 <_malloc_r+0x4de>
   835bc:	0cb3      	lsrs	r3, r6, #18
   835be:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   835c2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   835c6:	00c1      	lsls	r1, r0, #3
   835c8:	e5ce      	b.n	83168 <_malloc_r+0x44>
   835ca:	f103 0b10 	add.w	fp, r3, #16
   835ce:	e6af      	b.n	83330 <_malloc_r+0x20c>
   835d0:	2a54      	cmp	r2, #84	; 0x54
   835d2:	d829      	bhi.n	83628 <_malloc_r+0x504>
   835d4:	0b1a      	lsrs	r2, r3, #12
   835d6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   835da:	00c9      	lsls	r1, r1, #3
   835dc:	326e      	adds	r2, #110	; 0x6e
   835de:	e74d      	b.n	8347c <_malloc_r+0x358>
   835e0:	4b20      	ldr	r3, [pc, #128]	; (83664 <_malloc_r+0x540>)
   835e2:	6819      	ldr	r1, [r3, #0]
   835e4:	4459      	add	r1, fp
   835e6:	6019      	str	r1, [r3, #0]
   835e8:	e6b3      	b.n	83352 <_malloc_r+0x22e>
   835ea:	f3ca 000b 	ubfx	r0, sl, #0, #12
   835ee:	2800      	cmp	r0, #0
   835f0:	f47f aeaf 	bne.w	83352 <_malloc_r+0x22e>
   835f4:	eb08 030b 	add.w	r3, r8, fp
   835f8:	68ba      	ldr	r2, [r7, #8]
   835fa:	f043 0301 	orr.w	r3, r3, #1
   835fe:	6053      	str	r3, [r2, #4]
   83600:	e6ef      	b.n	833e2 <_malloc_r+0x2be>
   83602:	207f      	movs	r0, #127	; 0x7f
   83604:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83608:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8360c:	e5ac      	b.n	83168 <_malloc_r+0x44>
   8360e:	f104 0108 	add.w	r1, r4, #8
   83612:	4628      	mov	r0, r5
   83614:	9300      	str	r3, [sp, #0]
   83616:	f7ff fc39 	bl	82e8c <_free_r>
   8361a:	9b00      	ldr	r3, [sp, #0]
   8361c:	6819      	ldr	r1, [r3, #0]
   8361e:	e6e0      	b.n	833e2 <_malloc_r+0x2be>
   83620:	2001      	movs	r0, #1
   83622:	f04f 0900 	mov.w	r9, #0
   83626:	e6bd      	b.n	833a4 <_malloc_r+0x280>
   83628:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8362c:	d805      	bhi.n	8363a <_malloc_r+0x516>
   8362e:	0bda      	lsrs	r2, r3, #15
   83630:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83634:	00c9      	lsls	r1, r1, #3
   83636:	3277      	adds	r2, #119	; 0x77
   83638:	e720      	b.n	8347c <_malloc_r+0x358>
   8363a:	f240 5154 	movw	r1, #1364	; 0x554
   8363e:	428a      	cmp	r2, r1
   83640:	d805      	bhi.n	8364e <_malloc_r+0x52a>
   83642:	0c9a      	lsrs	r2, r3, #18
   83644:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83648:	00c9      	lsls	r1, r1, #3
   8364a:	327c      	adds	r2, #124	; 0x7c
   8364c:	e716      	b.n	8347c <_malloc_r+0x358>
   8364e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83652:	227e      	movs	r2, #126	; 0x7e
   83654:	e712      	b.n	8347c <_malloc_r+0x358>
   83656:	687b      	ldr	r3, [r7, #4]
   83658:	e780      	b.n	8355c <_malloc_r+0x438>
   8365a:	08f0      	lsrs	r0, r6, #3
   8365c:	f106 0308 	add.w	r3, r6, #8
   83660:	e60e      	b.n	83280 <_malloc_r+0x15c>
   83662:	bf00      	nop
   83664:	2007c35c 	.word	0x2007c35c

00083668 <__malloc_lock>:
   83668:	4801      	ldr	r0, [pc, #4]	; (83670 <__malloc_lock+0x8>)
   8366a:	f7ff bd21 	b.w	830b0 <__retarget_lock_acquire_recursive>
   8366e:	bf00      	nop
   83670:	2007c3f4 	.word	0x2007c3f4

00083674 <__malloc_unlock>:
   83674:	4801      	ldr	r0, [pc, #4]	; (8367c <__malloc_unlock+0x8>)
   83676:	f7ff bd1d 	b.w	830b4 <__retarget_lock_release_recursive>
   8367a:	bf00      	nop
   8367c:	2007c3f4 	.word	0x2007c3f4

00083680 <_sbrk_r>:
   83680:	b538      	push	{r3, r4, r5, lr}
   83682:	2300      	movs	r3, #0
   83684:	4c06      	ldr	r4, [pc, #24]	; (836a0 <_sbrk_r+0x20>)
   83686:	4605      	mov	r5, r0
   83688:	4608      	mov	r0, r1
   8368a:	6023      	str	r3, [r4, #0]
   8368c:	f7ff f856 	bl	8273c <_sbrk>
   83690:	1c43      	adds	r3, r0, #1
   83692:	d000      	beq.n	83696 <_sbrk_r+0x16>
   83694:	bd38      	pop	{r3, r4, r5, pc}
   83696:	6823      	ldr	r3, [r4, #0]
   83698:	2b00      	cmp	r3, #0
   8369a:	d0fb      	beq.n	83694 <_sbrk_r+0x14>
   8369c:	602b      	str	r3, [r5, #0]
   8369e:	bd38      	pop	{r3, r4, r5, pc}
   836a0:	2007c408 	.word	0x2007c408

000836a4 <__sread>:
   836a4:	b510      	push	{r4, lr}
   836a6:	460c      	mov	r4, r1
   836a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836ac:	f000 f954 	bl	83958 <_read_r>
   836b0:	2800      	cmp	r0, #0
   836b2:	db03      	blt.n	836bc <__sread+0x18>
   836b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   836b6:	4403      	add	r3, r0
   836b8:	6523      	str	r3, [r4, #80]	; 0x50
   836ba:	bd10      	pop	{r4, pc}
   836bc:	89a3      	ldrh	r3, [r4, #12]
   836be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   836c2:	81a3      	strh	r3, [r4, #12]
   836c4:	bd10      	pop	{r4, pc}
   836c6:	bf00      	nop

000836c8 <__swrite>:
   836c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836cc:	460c      	mov	r4, r1
   836ce:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   836d2:	461f      	mov	r7, r3
   836d4:	05cb      	lsls	r3, r1, #23
   836d6:	4616      	mov	r6, r2
   836d8:	4605      	mov	r5, r0
   836da:	d507      	bpl.n	836ec <__swrite+0x24>
   836dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836e0:	2302      	movs	r3, #2
   836e2:	2200      	movs	r2, #0
   836e4:	f000 f922 	bl	8392c <_lseek_r>
   836e8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   836ec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   836f0:	81a1      	strh	r1, [r4, #12]
   836f2:	463b      	mov	r3, r7
   836f4:	4632      	mov	r2, r6
   836f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836fa:	4628      	mov	r0, r5
   836fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83700:	f000 b814 	b.w	8372c <_write_r>

00083704 <__sseek>:
   83704:	b510      	push	{r4, lr}
   83706:	460c      	mov	r4, r1
   83708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8370c:	f000 f90e 	bl	8392c <_lseek_r>
   83710:	89a3      	ldrh	r3, [r4, #12]
   83712:	1c42      	adds	r2, r0, #1
   83714:	bf0e      	itee	eq
   83716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8371a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8371e:	6520      	strne	r0, [r4, #80]	; 0x50
   83720:	81a3      	strh	r3, [r4, #12]
   83722:	bd10      	pop	{r4, pc}

00083724 <__sclose>:
   83724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83728:	f000 b878 	b.w	8381c <_close_r>

0008372c <_write_r>:
   8372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8372e:	460e      	mov	r6, r1
   83730:	2500      	movs	r5, #0
   83732:	4c08      	ldr	r4, [pc, #32]	; (83754 <_write_r+0x28>)
   83734:	4611      	mov	r1, r2
   83736:	4607      	mov	r7, r0
   83738:	461a      	mov	r2, r3
   8373a:	4630      	mov	r0, r6
   8373c:	6025      	str	r5, [r4, #0]
   8373e:	f7fc fe55 	bl	803ec <_write>
   83742:	1c43      	adds	r3, r0, #1
   83744:	d000      	beq.n	83748 <_write_r+0x1c>
   83746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83748:	6823      	ldr	r3, [r4, #0]
   8374a:	2b00      	cmp	r3, #0
   8374c:	d0fb      	beq.n	83746 <_write_r+0x1a>
   8374e:	603b      	str	r3, [r7, #0]
   83750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83752:	bf00      	nop
   83754:	2007c408 	.word	0x2007c408

00083758 <__register_exitproc>:
   83758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8375c:	4d2c      	ldr	r5, [pc, #176]	; (83810 <__register_exitproc+0xb8>)
   8375e:	4606      	mov	r6, r0
   83760:	6828      	ldr	r0, [r5, #0]
   83762:	4698      	mov	r8, r3
   83764:	460f      	mov	r7, r1
   83766:	4691      	mov	r9, r2
   83768:	f7ff fca2 	bl	830b0 <__retarget_lock_acquire_recursive>
   8376c:	4b29      	ldr	r3, [pc, #164]	; (83814 <__register_exitproc+0xbc>)
   8376e:	681c      	ldr	r4, [r3, #0]
   83770:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83774:	2b00      	cmp	r3, #0
   83776:	d03e      	beq.n	837f6 <__register_exitproc+0x9e>
   83778:	685a      	ldr	r2, [r3, #4]
   8377a:	2a1f      	cmp	r2, #31
   8377c:	dc1c      	bgt.n	837b8 <__register_exitproc+0x60>
   8377e:	f102 0e01 	add.w	lr, r2, #1
   83782:	b176      	cbz	r6, 837a2 <__register_exitproc+0x4a>
   83784:	2101      	movs	r1, #1
   83786:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8378a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8378e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83792:	4091      	lsls	r1, r2
   83794:	4308      	orrs	r0, r1
   83796:	2e02      	cmp	r6, #2
   83798:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8379c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   837a0:	d023      	beq.n	837ea <__register_exitproc+0x92>
   837a2:	3202      	adds	r2, #2
   837a4:	f8c3 e004 	str.w	lr, [r3, #4]
   837a8:	6828      	ldr	r0, [r5, #0]
   837aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   837ae:	f7ff fc81 	bl	830b4 <__retarget_lock_release_recursive>
   837b2:	2000      	movs	r0, #0
   837b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   837b8:	4b17      	ldr	r3, [pc, #92]	; (83818 <__register_exitproc+0xc0>)
   837ba:	b30b      	cbz	r3, 83800 <__register_exitproc+0xa8>
   837bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   837c0:	f7ff fca8 	bl	83114 <malloc>
   837c4:	4603      	mov	r3, r0
   837c6:	b1d8      	cbz	r0, 83800 <__register_exitproc+0xa8>
   837c8:	2000      	movs	r0, #0
   837ca:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   837ce:	f04f 0e01 	mov.w	lr, #1
   837d2:	6058      	str	r0, [r3, #4]
   837d4:	6019      	str	r1, [r3, #0]
   837d6:	4602      	mov	r2, r0
   837d8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   837dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   837e0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   837e4:	2e00      	cmp	r6, #0
   837e6:	d0dc      	beq.n	837a2 <__register_exitproc+0x4a>
   837e8:	e7cc      	b.n	83784 <__register_exitproc+0x2c>
   837ea:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   837ee:	4301      	orrs	r1, r0
   837f0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   837f4:	e7d5      	b.n	837a2 <__register_exitproc+0x4a>
   837f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   837fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   837fe:	e7bb      	b.n	83778 <__register_exitproc+0x20>
   83800:	6828      	ldr	r0, [r5, #0]
   83802:	f7ff fc57 	bl	830b4 <__retarget_lock_release_recursive>
   83806:	f04f 30ff 	mov.w	r0, #4294967295
   8380a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8380e:	bf00      	nop
   83810:	20070560 	.word	0x20070560
   83814:	000839a8 	.word	0x000839a8
   83818:	00083115 	.word	0x00083115

0008381c <_close_r>:
   8381c:	b538      	push	{r3, r4, r5, lr}
   8381e:	2300      	movs	r3, #0
   83820:	4c06      	ldr	r4, [pc, #24]	; (8383c <_close_r+0x20>)
   83822:	4605      	mov	r5, r0
   83824:	4608      	mov	r0, r1
   83826:	6023      	str	r3, [r4, #0]
   83828:	f7fe ffa4 	bl	82774 <_close>
   8382c:	1c43      	adds	r3, r0, #1
   8382e:	d000      	beq.n	83832 <_close_r+0x16>
   83830:	bd38      	pop	{r3, r4, r5, pc}
   83832:	6823      	ldr	r3, [r4, #0]
   83834:	2b00      	cmp	r3, #0
   83836:	d0fb      	beq.n	83830 <_close_r+0x14>
   83838:	602b      	str	r3, [r5, #0]
   8383a:	bd38      	pop	{r3, r4, r5, pc}
   8383c:	2007c408 	.word	0x2007c408

00083840 <_fclose_r>:
   83840:	b570      	push	{r4, r5, r6, lr}
   83842:	b159      	cbz	r1, 8385c <_fclose_r+0x1c>
   83844:	4605      	mov	r5, r0
   83846:	460c      	mov	r4, r1
   83848:	b110      	cbz	r0, 83850 <_fclose_r+0x10>
   8384a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8384c:	2b00      	cmp	r3, #0
   8384e:	d03c      	beq.n	838ca <_fclose_r+0x8a>
   83850:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83852:	07d8      	lsls	r0, r3, #31
   83854:	d505      	bpl.n	83862 <_fclose_r+0x22>
   83856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8385a:	b92b      	cbnz	r3, 83868 <_fclose_r+0x28>
   8385c:	2600      	movs	r6, #0
   8385e:	4630      	mov	r0, r6
   83860:	bd70      	pop	{r4, r5, r6, pc}
   83862:	89a3      	ldrh	r3, [r4, #12]
   83864:	0599      	lsls	r1, r3, #22
   83866:	d53c      	bpl.n	838e2 <_fclose_r+0xa2>
   83868:	4621      	mov	r1, r4
   8386a:	4628      	mov	r0, r5
   8386c:	f7ff f974 	bl	82b58 <__sflush_r>
   83870:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83872:	4606      	mov	r6, r0
   83874:	b133      	cbz	r3, 83884 <_fclose_r+0x44>
   83876:	69e1      	ldr	r1, [r4, #28]
   83878:	4628      	mov	r0, r5
   8387a:	4798      	blx	r3
   8387c:	2800      	cmp	r0, #0
   8387e:	bfb8      	it	lt
   83880:	f04f 36ff 	movlt.w	r6, #4294967295
   83884:	89a3      	ldrh	r3, [r4, #12]
   83886:	061a      	lsls	r2, r3, #24
   83888:	d422      	bmi.n	838d0 <_fclose_r+0x90>
   8388a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8388c:	b141      	cbz	r1, 838a0 <_fclose_r+0x60>
   8388e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83892:	4299      	cmp	r1, r3
   83894:	d002      	beq.n	8389c <_fclose_r+0x5c>
   83896:	4628      	mov	r0, r5
   83898:	f7ff faf8 	bl	82e8c <_free_r>
   8389c:	2300      	movs	r3, #0
   8389e:	6323      	str	r3, [r4, #48]	; 0x30
   838a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   838a2:	b121      	cbz	r1, 838ae <_fclose_r+0x6e>
   838a4:	4628      	mov	r0, r5
   838a6:	f7ff faf1 	bl	82e8c <_free_r>
   838aa:	2300      	movs	r3, #0
   838ac:	6463      	str	r3, [r4, #68]	; 0x44
   838ae:	f7ff fa77 	bl	82da0 <__sfp_lock_acquire>
   838b2:	2200      	movs	r2, #0
   838b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   838b6:	81a2      	strh	r2, [r4, #12]
   838b8:	07db      	lsls	r3, r3, #31
   838ba:	d50e      	bpl.n	838da <_fclose_r+0x9a>
   838bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   838be:	f7ff fbf5 	bl	830ac <__retarget_lock_close_recursive>
   838c2:	f7ff fa73 	bl	82dac <__sfp_lock_release>
   838c6:	4630      	mov	r0, r6
   838c8:	bd70      	pop	{r4, r5, r6, pc}
   838ca:	f7ff fa39 	bl	82d40 <__sinit>
   838ce:	e7bf      	b.n	83850 <_fclose_r+0x10>
   838d0:	6921      	ldr	r1, [r4, #16]
   838d2:	4628      	mov	r0, r5
   838d4:	f7ff fada 	bl	82e8c <_free_r>
   838d8:	e7d7      	b.n	8388a <_fclose_r+0x4a>
   838da:	6da0      	ldr	r0, [r4, #88]	; 0x58
   838dc:	f7ff fbea 	bl	830b4 <__retarget_lock_release_recursive>
   838e0:	e7ec      	b.n	838bc <_fclose_r+0x7c>
   838e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   838e4:	f7ff fbe4 	bl	830b0 <__retarget_lock_acquire_recursive>
   838e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   838ec:	2b00      	cmp	r3, #0
   838ee:	d1bb      	bne.n	83868 <_fclose_r+0x28>
   838f0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   838f2:	f016 0601 	ands.w	r6, r6, #1
   838f6:	d1b1      	bne.n	8385c <_fclose_r+0x1c>
   838f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   838fa:	f7ff fbdb 	bl	830b4 <__retarget_lock_release_recursive>
   838fe:	4630      	mov	r0, r6
   83900:	bd70      	pop	{r4, r5, r6, pc}
   83902:	bf00      	nop

00083904 <_fstat_r>:
   83904:	b570      	push	{r4, r5, r6, lr}
   83906:	460d      	mov	r5, r1
   83908:	2300      	movs	r3, #0
   8390a:	4c07      	ldr	r4, [pc, #28]	; (83928 <_fstat_r+0x24>)
   8390c:	4606      	mov	r6, r0
   8390e:	4611      	mov	r1, r2
   83910:	4628      	mov	r0, r5
   83912:	6023      	str	r3, [r4, #0]
   83914:	f7fe ff31 	bl	8277a <_fstat>
   83918:	1c43      	adds	r3, r0, #1
   8391a:	d000      	beq.n	8391e <_fstat_r+0x1a>
   8391c:	bd70      	pop	{r4, r5, r6, pc}
   8391e:	6823      	ldr	r3, [r4, #0]
   83920:	2b00      	cmp	r3, #0
   83922:	d0fb      	beq.n	8391c <_fstat_r+0x18>
   83924:	6033      	str	r3, [r6, #0]
   83926:	bd70      	pop	{r4, r5, r6, pc}
   83928:	2007c408 	.word	0x2007c408

0008392c <_lseek_r>:
   8392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8392e:	460e      	mov	r6, r1
   83930:	2500      	movs	r5, #0
   83932:	4c08      	ldr	r4, [pc, #32]	; (83954 <_lseek_r+0x28>)
   83934:	4611      	mov	r1, r2
   83936:	4607      	mov	r7, r0
   83938:	461a      	mov	r2, r3
   8393a:	4630      	mov	r0, r6
   8393c:	6025      	str	r5, [r4, #0]
   8393e:	f7fe ff21 	bl	82784 <_lseek>
   83942:	1c43      	adds	r3, r0, #1
   83944:	d000      	beq.n	83948 <_lseek_r+0x1c>
   83946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83948:	6823      	ldr	r3, [r4, #0]
   8394a:	2b00      	cmp	r3, #0
   8394c:	d0fb      	beq.n	83946 <_lseek_r+0x1a>
   8394e:	603b      	str	r3, [r7, #0]
   83950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83952:	bf00      	nop
   83954:	2007c408 	.word	0x2007c408

00083958 <_read_r>:
   83958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8395a:	460e      	mov	r6, r1
   8395c:	2500      	movs	r5, #0
   8395e:	4c08      	ldr	r4, [pc, #32]	; (83980 <_read_r+0x28>)
   83960:	4611      	mov	r1, r2
   83962:	4607      	mov	r7, r0
   83964:	461a      	mov	r2, r3
   83966:	4630      	mov	r0, r6
   83968:	6025      	str	r5, [r4, #0]
   8396a:	f7fc fd21 	bl	803b0 <_read>
   8396e:	1c43      	adds	r3, r0, #1
   83970:	d000      	beq.n	83974 <_read_r+0x1c>
   83972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83974:	6823      	ldr	r3, [r4, #0]
   83976:	2b00      	cmp	r3, #0
   83978:	d0fb      	beq.n	83972 <_read_r+0x1a>
   8397a:	603b      	str	r3, [r7, #0]
   8397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8397e:	bf00      	nop
   83980:	2007c408 	.word	0x2007c408
   83984:	6e696c42 	.word	0x6e696c42
   83988:	6154206b 	.word	0x6154206b
   8398c:	00006b73 	.word	0x00006b73
   83990:	454c4449 	.word	0x454c4449
   83994:	00000000 	.word	0x00000000
   83998:	51726d54 	.word	0x51726d54
   8399c:	00000000 	.word	0x00000000
   839a0:	20726d54 	.word	0x20726d54
   839a4:	00637653 	.word	0x00637653

000839a8 <_global_impure_ptr>:
   839a8:	20070138                                8.. 

000839ac <_init>:
   839ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   839ae:	bf00      	nop
   839b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   839b2:	bc08      	pop	{r3}
   839b4:	469e      	mov	lr, r3
   839b6:	4770      	bx	lr

000839b8 <__init_array_start>:
   839b8:	00082b39 	.word	0x00082b39

000839bc <__frame_dummy_init_array_entry>:
   839bc:	00080119                                ....

000839c0 <_fini>:
   839c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   839c2:	bf00      	nop
   839c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   839c6:	bc08      	pop	{r3}
   839c8:	469e      	mov	lr, r3
   839ca:	4770      	bx	lr

000839cc <__fini_array_start>:
   839cc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	2007c3e4                                ... 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_sbrk_base>:
2007096c:	ffffffff                                ....

20070970 <__malloc_trim_threshold>:
20070970:	00020000                                ....
